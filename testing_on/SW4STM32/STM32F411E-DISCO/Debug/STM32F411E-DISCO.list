
STM32F411E-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007964  08007964  00017964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000508  20000000  08007968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004460  20000508  08007e70  00020508  2**2
                  ALLOC
  8 ._user_heap_stack 00001200  20004968  08007e70  00024968  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY
 10 .debug_line   0001681f  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000256d9  00000000  00000000  00036d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005341  00000000  00000000  0005c430  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013a8  00000000  00000000  00061778  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099e6a  00000000  00000000  00062b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b80  00000000  00000000  000fc990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000f67f  00000000  00000000  000fe510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001af7a  00000000  00000000  0010db8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fa  00000000  00000000  00128b09  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003cf4  00000000  00000000  00128c04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000508 	.word	0x20000508
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007854 	.word	0x08007854

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000050c 	.word	0x2000050c
 80001d4:	08007854 	.word	0x08007854

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008f6:	e003      	b.n	8000900 <LoopCopyDataInit>

080008f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008fe:	3104      	adds	r1, #4

08000900 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000904:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000906:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000908:	d3f6      	bcc.n	80008f8 <CopyDataInit>
  ldr  r2, =_sbss
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800090c:	e002      	b.n	8000914 <LoopFillZerobss>

0800090e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800090e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000910:	f842 3b04 	str.w	r3, [r2], #4

08000914 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000916:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000918:	d3f9      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800091a:	f001 fb13 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f006 fa3b 	bl	8006d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f000 f86b 	bl	80009fc <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800092c:	08007968 	.word	0x08007968
  ldr  r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000934:	20000508 	.word	0x20000508
  ldr  r2, =_sbss
 8000938:	20000508 	.word	0x20000508
  ldr  r3, = _ebss
 800093c:	20004968 	.word	0x20004968

08000940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <MY_FLASH_Sectro>:
	HAL_FLASH_Lock();
}

uint32_t MY_FLASH_Sectro(void){
	return MY_SectorAddrs;
}
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <MY_FLASH_Sectro+0x8>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000524 	.word	0x20000524

08000950 <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
	MY_SectorNum = sector;
 8000950:	4b01      	ldr	r3, [pc, #4]	; (8000958 <MY_FLASH_SetSectorAddrs+0x8>)
 8000952:	7118      	strb	r0, [r3, #4]
	MY_SectorAddrs = addrs;
 8000954:	6019      	str	r1, [r3, #0]
}
 8000956:	4770      	bx	lr
 8000958:	20000524 	.word	0x20000524

0800095c <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800095c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8000960:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80009ec <MY_FLASH_WriteN+0x90>
 8000964:	f8d8 5000 	ldr.w	r5, [r8]
{
 8000968:	461f      	mov	r7, r3
 800096a:	4616      	mov	r6, r2
 800096c:	460c      	mov	r4, r1
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800096e:	4405      	add	r5, r0
	HAL_FLASH_Unlock();
 8000970:	f001 fe56 	bl	8002620 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8000974:	2102      	movs	r1, #2
 8000976:	f898 0004 	ldrb.w	r0, [r8, #4]
 800097a:	f001 fedd 	bl	8002738 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 800097e:	f001 fe61 	bl	8002644 <HAL_FLASH_Lock>
	
	//Erase sector before write
	MY_FLASH_EraseSector();
	
	//Unlock Flash
	HAL_FLASH_Unlock();
 8000982:	f001 fe4d 	bl	8002620 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8000986:	2f01      	cmp	r7, #1
 8000988:	d010      	beq.n	80009ac <MY_FLASH_WriteN+0x50>
 800098a:	d31d      	bcc.n	80009c8 <MY_FLASH_WriteN+0x6c>
 800098c:	2f02      	cmp	r7, #2
 800098e:	d121      	bne.n	80009d4 <MY_FLASH_WriteN+0x78>
 8000990:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000994:	1b2d      	subs	r5, r5, r4
					flashAddress+=2;
				}
			break;
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8000996:	42b4      	cmp	r4, r6
 8000998:	eb05 0104 	add.w	r1, r5, r4
 800099c:	d01a      	beq.n	80009d4 <MY_FLASH_WriteN+0x78>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 800099e:	f854 2b04 	ldr.w	r2, [r4], #4
 80009a2:	2300      	movs	r3, #0
 80009a4:	2002      	movs	r0, #2
 80009a6:	f001 fe81 	bl	80026ac <HAL_FLASH_Program>
 80009aa:	e7f4      	b.n	8000996 <MY_FLASH_WriteN+0x3a>
 80009ac:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 80009b0:	1b2d      	subs	r5, r5, r4
				for(uint32_t i=0; i<Nsize; i++)
 80009b2:	42b4      	cmp	r4, r6
 80009b4:	eb05 0104 	add.w	r1, r5, r4
 80009b8:	d00c      	beq.n	80009d4 <MY_FLASH_WriteN+0x78>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 80009ba:	f834 2b02 	ldrh.w	r2, [r4], #2
 80009be:	2300      	movs	r3, #0
 80009c0:	2001      	movs	r0, #1
 80009c2:	f001 fe73 	bl	80026ac <HAL_FLASH_Program>
 80009c6:	e7f4      	b.n	80009b2 <MY_FLASH_WriteN+0x56>
 80009c8:	4426      	add	r6, r4
 80009ca:	1b2d      	subs	r5, r5, r4
				for(uint32_t i=0; i<Nsize; i++)
 80009cc:	42b4      	cmp	r4, r6
 80009ce:	eb05 0104 	add.w	r1, r5, r4
 80009d2:	d103      	bne.n	80009dc <MY_FLASH_WriteN+0x80>
				}
			break;
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
}
 80009d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_FLASH_Lock();
 80009d8:	f001 be34 	b.w	8002644 <HAL_FLASH_Lock>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 80009dc:	f814 2b01 	ldrb.w	r2, [r4], #1
 80009e0:	2300      	movs	r3, #0
 80009e2:	2000      	movs	r0, #0
 80009e4:	f001 fe62 	bl	80026ac <HAL_FLASH_Program>
 80009e8:	e7f0      	b.n	80009cc <MY_FLASH_WriteN+0x70>
 80009ea:	bf00      	nop
 80009ec:	20000524 	.word	0x20000524

080009f0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b508      	push	{r3, lr}
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fe96 	bl	8001724 <BSP_LED_On>
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <main>:
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8000a00:	f001 faea 	bl	8001fd8 <HAL_Init>
  BSP_LED_Init(LED3);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f000 fe35 	bl	8001674 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 fe32 	bl	8001674 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000a10:	2002      	movs	r0, #2
 8000a12:	f000 fe2f 	bl	8001674 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000a16:	2003      	movs	r0, #3
 8000a18:	f000 fe2c 	bl	8001674 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	4c57      	ldr	r4, [pc, #348]	; (8000b7c <main+0x180>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6423      	str	r3, [r4, #64]	; 0x40
 8000a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a34:	9201      	str	r2, [sp, #4]
 8000a36:	4a52      	ldr	r2, [pc, #328]	; (8000b80 <main+0x184>)
 8000a38:	6813      	ldr	r3, [r2, #0]
 8000a3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	6813      	ldr	r3, [r2, #0]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4e:	2601      	movs	r6, #1
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	e9cd 6308 	strd	r6, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a58:	f04f 0802 	mov.w	r8, #2
 8000a5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a60:	e9cd 830e 	strd	r8, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a64:	2108      	movs	r1, #8
 8000a66:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a6a:	2704      	movs	r7, #4
 8000a6c:	2507      	movs	r5, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a70:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a74:	e9cd 7512 	strd	r7, r5, [sp, #72]	; 0x48
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f003 fb98 	bl	80041ac <HAL_RCC_OscConfig>
 8000a7c:	b108      	cbz	r0, 8000a82 <main+0x86>
    Error_Handler();
 8000a7e:	f7ff ffb7 	bl	80009f0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000a82:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	e9cd 3803 	strd	r3, r8, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8000a8e:	e9cd 3006 	strd	r3, r0, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a92:	4641      	mov	r1, r8
 8000a94:	a803      	add	r0, sp, #12
 8000a96:	f003 fd5d 	bl	8004554 <HAL_RCC_ClockConfig>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d1ef      	bne.n	8000a7e <main+0x82>
  MY_FLASH_SetSectorAddrs(7,  0x08060000);
 8000a9e:	4939      	ldr	r1, [pc, #228]	; (8000b84 <main+0x188>)
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	f7ff ff55 	bl	8000950 <MY_FLASH_SetSectorAddrs>
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 8000aa6:	f000 ff2b 	bl	8001900 <BSP_ACCELERO_Init>
 8000aaa:	4680      	mov	r8, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d1e6      	bne.n	8000a7e <main+0x82>
  BSP_ACCELERO_Click_ITConfig();
 8000ab0:	f000 ff3e 	bl	8001930 <BSP_ACCELERO_Click_ITConfig>
  BSP_LED_On(LED4);
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	f000 fe35 	bl	8001724 <BSP_LED_On>
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000aba:	f8cd 8008 	str.w	r8, [sp, #8]
 8000abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6423      	str	r3, [r4, #64]	; 0x40
 8000ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  hTimLed.Instance = TIM4;
 8000ac8:	4c2f      	ldr	r4, [pc, #188]	; (8000b88 <main+0x18c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000aca:	f003 0304 	and.w	r3, r3, #4
  HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);  
 8000ace:	4642      	mov	r2, r8
 8000ad0:	4629      	mov	r1, r5
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ad2:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);  
 8000ad4:	201e      	movs	r0, #30
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ad6:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);  
 8000ad8:	f001 fad0 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000adc:	201e      	movs	r0, #30
 8000ade:	f001 fb01 	bl	80020e4 <HAL_NVIC_EnableIRQ>
  tmpvalue = HAL_RCC_GetPCLK1Freq();
 8000ae2:	f003 fdd1 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
  hTimLed.Instance = TIM4;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <main+0x190>)
 8000ae8:	6023      	str	r3, [r4, #0]
  hTimLed.Init.Period = 65535;
 8000aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aee:	60e3      	str	r3, [r4, #12]
  prescalervalue = (uint16_t) ((tmpvalue * 2) / 550000) - 1;
 8000af0:	0040      	lsls	r0, r0, #1
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <main+0x194>)
 8000af4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af8:	3801      	subs	r0, #1
  hTimLed.Init.Prescaler = prescalervalue;
 8000afa:	b280      	uxth	r0, r0
 8000afc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_OC_Init(&hTimLed) != HAL_OK)
 8000afe:	4620      	mov	r0, r4
  hTimLed.Init.ClockDivision = 0;
 8000b00:	f8c4 8010 	str.w	r8, [r4, #16]
  hTimLed.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	f8c4 8008 	str.w	r8, [r4, #8]
  if(HAL_TIM_OC_Init(&hTimLed) != HAL_OK)
 8000b08:	f004 f842 	bl	8004b90 <HAL_TIM_OC_Init>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d1b5      	bne.n	8000a7e <main+0x82>
  sConfigLed.OCMode = TIM_OCMODE_TIMING;
 8000b12:	4920      	ldr	r1, [pc, #128]	; (8000b94 <main+0x198>)
  sConfigLed.Pulse = CCR1Val;
 8000b14:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8000ba0 <main+0x1a4>
  sConfigLed.OCMode = TIM_OCMODE_TIMING;
 8000b18:	6008      	str	r0, [r1, #0]
  sConfigLed.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1e:	614b      	str	r3, [r1, #20]
  sConfigLed.Pulse = CCR1Val;
 8000b20:	f8b8 3000 	ldrh.w	r3, [r8]
  sConfigLed.OCFastMode = TIM_OCFAST_ENABLE;
 8000b24:	e9c1 0703 	strd	r0, r7, [r1, #12]
  sConfigLed.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	e9c1 3001 	strd	r3, r0, [r1, #4]
  sConfigLed.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
  if(HAL_TIM_OC_ConfigChannel(&hTimLed, &sConfigLed, TIM_CHANNEL_1) != HAL_OK)
 8000b30:	4620      	mov	r0, r4
  sConfigLed.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000b32:	618b      	str	r3, [r1, #24]
  if(HAL_TIM_OC_ConfigChannel(&hTimLed, &sConfigLed, TIM_CHANNEL_1) != HAL_OK)
 8000b34:	f004 f872 	bl	8004c1c <HAL_TIM_OC_ConfigChannel>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d19f      	bne.n	8000a7e <main+0x82>
  if(HAL_TIM_OC_Start_IT(&hTimLed, TIM_CHANNEL_1) != HAL_OK)
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f004 f8a8 	bl	8004c94 <HAL_TIM_OC_Start_IT>
 8000b44:	4607      	mov	r7, r0
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d199      	bne.n	8000a7e <main+0x82>
  RepeatState = REPEAT_ON;
 8000b4a:	4c13      	ldr	r4, [pc, #76]	; (8000b98 <main+0x19c>)
  LEDsState = LEDS_OFF;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <main+0x1a0>)
  RepeatState = REPEAT_ON;
 8000b4e:	6020      	str	r0, [r4, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b50:	4631      	mov	r1, r6
  LEDsState = LEDS_OFF;
 8000b52:	601d      	str	r5, [r3, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b54:	f000 fe10 	bl	8001778 <BSP_PB_Init>
  switch(CmdIndex)
 8000b58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000b5c:	b12b      	cbz	r3, 8000b6a <main+0x16e>
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d1fa      	bne.n	8000b58 <main+0x15c>
    RepeatState = REPEAT_ON;
 8000b62:	6027      	str	r7, [r4, #0]
    WaveRecorderProcess();
 8000b64:	f000 f950 	bl	8000e08 <WaveRecorderProcess>
 8000b68:	e7f6      	b.n	8000b58 <main+0x15c>
    if(RepeatState == REPEAT_ON)
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f3      	bne.n	8000b58 <main+0x15c>
      WavePlayBack(I2S_AUDIOFREQ_48K);
 8000b70:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000b74:	f000 f8f0 	bl	8000d58 <WavePlayBack>
 8000b78:	e7ee      	b.n	8000b58 <main+0x15c>
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000
 8000b84:	08060000 	.word	0x08060000
 8000b88:	20000838 	.word	0x20000838
 8000b8c:	40000800 	.word	0x40000800
 8000b90:	00086470 	.word	0x00086470
 8000b94:	20000818 	.word	0x20000818
 8000b98:	2000052c 	.word	0x2000052c
 8000b9c:	20002344 	.word	0x20002344
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim: TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b538      	push	{r3, r4, r5, lr}
  uint32_t capture = 0; 
  
  if(LEDsState == LED3_TOGGLE)
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8000ba8:	681d      	ldr	r5, [r3, #0]
 8000baa:	2d03      	cmp	r5, #3
{
 8000bac:	4604      	mov	r4, r0
  if(LEDsState == LED3_TOGGLE)
 8000bae:	d109      	bne.n	8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x20>
  {
    /* Toggling LED3 */
    BSP_LED_Toggle(LED3);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fdd3 	bl	800175c <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f000 fdc2 	bl	8001740 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8000bbc:	2000      	movs	r0, #0
  {
    /* Turn OFF all LEDs */
    BSP_LED_Off(LED3);
    BSP_LED_Off(LED4);
    BSP_LED_Off(LED5);
    BSP_LED_Off(LED6);
 8000bbe:	f000 fdbf 	bl	8001740 <BSP_LED_Off>
 8000bc2:	e016      	b.n	8000bf2 <HAL_TIM_OC_DelayElapsedCallback+0x4e>
  else if(LEDsState == LED4_TOGGLE)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	2a04      	cmp	r2, #4
 8000bc8:	d107      	bne.n	8000bda <HAL_TIM_OC_DelayElapsedCallback+0x36>
    BSP_LED_Toggle(LED4);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 fdc6 	bl	800175c <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 fdb5 	bl	8001740 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	e7f1      	b.n	8000bbe <HAL_TIM_OC_DelayElapsedCallback+0x1a>
  else if(LEDsState == LED6_TOGGLE)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2a06      	cmp	r2, #6
 8000bde:	d112      	bne.n	8000c06 <HAL_TIM_OC_DelayElapsedCallback+0x62>
    BSP_LED_Off(LED3);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 fdad 	bl	8001740 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 fdaa 	bl	8001740 <BSP_LED_Off>
    BSP_LED_Toggle(LED6);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 fdb5 	bl	800175c <BSP_LED_Toggle>
  }
  /* Get the TIM4 Input Capture 1 value */
  capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f003 febe 	bl	8004976 <HAL_TIM_ReadCapturedValue>
  
  /* Set the TIM4 Capture Compare1 Register value */
  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (CCR1Val + capture));
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8000bfc:	6822      	ldr	r2, [r4, #0]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	4418      	add	r0, r3
 8000c02:	6350      	str	r0, [r2, #52]	; 0x34
}
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
  else if(LEDsState == STOP_TOGGLE)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	b91a      	cbnz	r2, 8000c12 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
    BSP_LED_On(LED6);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 fd8a 	bl	8001724 <BSP_LED_On>
 8000c10:	e7ef      	b.n	8000bf2 <HAL_TIM_OC_DelayElapsedCallback+0x4e>
  else if(LEDsState == LEDS_OFF)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d1ec      	bne.n	8000bf2 <HAL_TIM_OC_DelayElapsedCallback+0x4e>
    BSP_LED_Off(LED3);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fd91 	bl	8001740 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fd8e 	bl	8001740 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f000 fd8b 	bl	8001740 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	e7c7      	b.n	8000bbe <HAL_TIM_OC_DelayElapsedCallback+0x1a>
 8000c2e:	bf00      	nop
 8000c30:	20002344 	.word	0x20002344
 8000c34:	20000000 	.word	0x20000000

08000c38 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == GPIO_PIN_0) 
 8000c38:	2801      	cmp	r0, #1
{
 8000c3a:	b570      	push	{r4, r5, r6, lr}
 8000c3c:	4605      	mov	r5, r0
  if(GPIO_Pin == GPIO_PIN_0) 
 8000c3e:	d117      	bne.n	8000c70 <HAL_GPIO_EXTI_Callback+0x38>
  {
    if(PbPressCheck == 0)
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c42:	685c      	ldr	r4, [r3, #4]
 8000c44:	461e      	mov	r6, r3
 8000c46:	b984      	cbnz	r4, 8000c6a <HAL_GPIO_EXTI_Callback+0x32>
    {
      HAL_Delay(10);
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f001 f9f1 	bl	8002030 <HAL_Delay>
      /* Test on the command: Recording */
      if(CmdIndex == CMD_RECORD)
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x54>)
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	2a01      	cmp	r2, #1
 8000c54:	d102      	bne.n	8000c5c <HAL_GPIO_EXTI_Callback+0x24>
        /* Switch to Record command */
        CmdIndex = CMD_RECORD;
      }
      else
      {
        RepeatState = REPEAT_ON;
 8000c56:	6034      	str	r4, [r6, #0]
        /* Default Command Index: Play command */
        CmdIndex = CMD_PLAY; 
 8000c58:	605c      	str	r4, [r3, #4]
 8000c5a:	e003      	b.n	8000c64 <HAL_GPIO_EXTI_Callback+0x2c>
      else if(CmdIndex == CMD_PLAY)
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d1f9      	bne.n	8000c56 <HAL_GPIO_EXTI_Callback+0x1e>
        CmdIndex = CMD_RECORD;
 8000c62:	605d      	str	r5, [r3, #4]
      }
      PbPressCheck = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	6073      	str	r3, [r6, #4]
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
    }
  }
} 
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
      PbPressCheck = 0;
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	e7fb      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x30>
  if(GPIO_Pin == ACCELERO_INT1_PIN) 
 8000c70:	2810      	cmp	r0, #16
 8000c72:	d1f9      	bne.n	8000c68 <HAL_GPIO_EXTI_Callback+0x30>
    if(PressCount == 1)
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x54>)
 8000c76:	6899      	ldr	r1, [r3, #8]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2901      	cmp	r1, #1
      PauseResumeStatus = PAUSE_STATUS;
 8000c7c:	bf1a      	itte	ne
 8000c7e:	60da      	strne	r2, [r3, #12]
      PressCount = 1;
 8000c80:	2201      	movne	r2, #1
      PauseResumeStatus = RESUME_STATUS;
 8000c82:	60d9      	streq	r1, [r3, #12]
      PressCount = 1;
 8000c84:	609a      	str	r2, [r3, #8]
} 
 8000c86:	e7ef      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x30>
 8000c88:	2000052c 	.word	0x2000052c
 8000c8c:	20000000 	.word	0x20000000

08000c90 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000c90:	4770      	bx	lr

08000c92 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler>

08000c94 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler>

08000c96 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler>

08000c98 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler>

08000c9a <SVC_Handler>:
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ca0:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000ca2:	f001 f9b3 	bl	800200c <HAL_IncTick>
  
  /* Test on the command: Recording */
  if (CmdIndex == CMD_RECORD)
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Handler+0x18>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
  {
    /* Increment the time recording base variable */
    TimeRecBase ++; 
 8000cac:	bf01      	itttt	eq
 8000cae:	4a03      	ldreq	r2, [pc, #12]	; (8000cbc <SysTick_Handler+0x1c>)
 8000cb0:	6813      	ldreq	r3, [r2, #0]
 8000cb2:	3301      	addeq	r3, #1
 8000cb4:	6013      	streq	r3, [r2, #0]
  }
}
 8000cb6:	bd08      	pop	{r3, pc}
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	20000538 	.word	0x20000538

08000cc0 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f001 be39 	b.w	8002938 <HAL_GPIO_EXTI_IRQHandler>

08000cc6 <EXTI4_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 8000cc6:	2010      	movs	r0, #16
 8000cc8:	f001 be36 	b.w	8002938 <HAL_GPIO_EXTI_IRQHandler>

08000ccc <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <DMA1_Stream7_IRQHandler+0x8>)
 8000cce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000cd0:	f001 bb68 	b.w	80023a4 <HAL_DMA_IRQHandler>
 8000cd4:	200048b4 	.word	0x200048b4

08000cd8 <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8000cd8:	4b01      	ldr	r3, [pc, #4]	; (8000ce0 <DMA1_Stream3_IRQHandler+0x8>)
 8000cda:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000cdc:	f001 bb62 	b.w	80023a4 <HAL_DMA_IRQHandler>
 8000ce0:	200048fc 	.word	0x200048fc

08000ce4 <TIM4_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hTimLed);
 8000ce4:	4801      	ldr	r0, [pc, #4]	; (8000cec <TIM4_IRQHandler+0x8>)
 8000ce6:	f003 be63 	b.w	80049b0 <HAL_TIM_IRQHandler>
 8000cea:	bf00      	nop
 8000cec:	20000838 	.word	0x20000838

08000cf0 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
   HAL_HCD_IRQHandler(&hhcd);
 8000cf0:	4801      	ldr	r0, [pc, #4]	; (8000cf8 <OTG_FS_IRQHandler+0x8>)
 8000cf2:	f001 be2d 	b.w	8002950 <HAL_HCD_IRQHandler>
 8000cf6:	bf00      	nop
 8000cf8:	20001050 	.word	0x20001050

08000cfc <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 8000cfc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000d00:	f004 b8e1 	b.w	8004ec6 <USBH_LL_IncTimer>

08000d04 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8000d04:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000d08:	f004 b8f3 	b.w	8004ef2 <USBH_LL_Connect>

08000d0c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8000d0c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000d10:	f004 b8f9 	b.w	8004f06 <USBH_LL_Disconnect>

08000d14 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8000d14:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000d18:	f004 b8e3 	b.w	8004ee2 <USBH_LL_PortEnabled>

08000d1c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8000d1c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000d20:	f004 b8e3 	b.w	8004eea <USBH_LL_PortDisabled>

08000d24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
 8000d24:	4770      	bx	lr

08000d26 <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 8000d26:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 8000d28:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000d2c:	f002 f916 	bl	8002f5c <HAL_HCD_Stop>
  return USBH_OK; 
}
 8000d30:	2000      	movs	r0, #0
 8000d32:	bd08      	pop	{r3, pc}

08000d34 <WavePlayerPauseResume>:
  * @param  state: Player state: Pause, Resume or Idle
  * @retval None
  */
void WavePlayerPauseResume(uint32_t wState)
{ 
  if(wState == PAUSE_STATUS)
 8000d34:	b908      	cbnz	r0, 8000d3a <WavePlayerPauseResume+0x6>
  {
    BSP_AUDIO_OUT_Pause();   
 8000d36:	f000 be47 	b.w	80019c8 <BSP_AUDIO_OUT_Pause>
  }
  else
  {
    BSP_AUDIO_OUT_Resume();   
 8000d3a:	f000 be59 	b.w	80019f0 <BSP_AUDIO_OUT_Resume>

08000d3e <WavePlayerStop>:
  * @param  None
  * @retval None
  */
void WavePlayerStop(void)
{ 
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f000 be6a 	b.w	8001a18 <BSP_AUDIO_OUT_Stop>

08000d44 <WavePlayerInit>:
  * @brief  Initializes the Wave player.
  * @param  AudioFreq: Audio sampling frequency
  * @retval None
  */
int WavePlayerInit(uint32_t AudioFreq)
{ 
 8000d44:	b510      	push	{r4, lr}
 8000d46:	4604      	mov	r4, r0
  /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
  BSP_ACCELERO_Click_ITConfig();
 8000d48:	f000 fdf2 	bl	8001930 <BSP_ACCELERO_Click_ITConfig>

  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  return(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq));  
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	2146      	movs	r1, #70	; 0x46
 8000d50:	2004      	movs	r0, #4
 8000d52:	f000 ff3b 	bl	8001bcc <BSP_AUDIO_OUT_Init>
}
 8000d56:	bd10      	pop	{r4, pc}

08000d58 <WavePlayBack>:
{ 
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  AudioPlayStart = 1;
 8000d5a:	4f18      	ldr	r7, [pc, #96]	; (8000dbc <WavePlayBack+0x64>)
  RepeatState = REPEAT_ON;
 8000d5c:	4e18      	ldr	r6, [pc, #96]	; (8000dc0 <WavePlayBack+0x68>)
  AudioPlayStart = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	603b      	str	r3, [r7, #0]
  RepeatState = REPEAT_ON;
 8000d62:	2300      	movs	r3, #0
 8000d64:	6033      	str	r3, [r6, #0]
  if(WavePlayerInit(AudioFreq) != 0)
 8000d66:	f7ff ffed 	bl	8000d44 <WavePlayerInit>
 8000d6a:	b108      	cbz	r0, 8000d70 <WavePlayBack+0x18>
    Error_Handler();
 8000d6c:	f7ff fe40 	bl	80009f0 <Error_Handler>
  AudioFlashPlay((uint16_t*)(MY_FLASH_Sectro() + AUIDO_START_ADDRESS),AUDIO_FILE_SZE,AUIDO_START_ADDRESS);
 8000d70:	f7ff fde8 	bl	8000944 <MY_FLASH_Sectro>

uint32_t AudioFlashPlay(uint16_t* pBuffer, uint32_t FullSize, uint32_t StartAdd)
{
  BSP_AUDIO_OUT_Play((uint16_t*)pBuffer, (FullSize - StartAdd));
 8000d74:	4913      	ldr	r1, [pc, #76]	; (8000dc4 <WavePlayBack+0x6c>)
  PauseResumeStatus = RESUME_STATUS;
 8000d76:	4c14      	ldr	r4, [pc, #80]	; (8000dc8 <WavePlayBack+0x70>)
  BSP_AUDIO_OUT_Play((uint16_t*)pBuffer, (FullSize - StartAdd));
 8000d78:	303a      	adds	r0, #58	; 0x3a
 8000d7a:	f000 fdff 	bl	800197c <BSP_AUDIO_OUT_Play>
  LEDsState = LED6_TOGGLE;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <WavePlayBack+0x74>)
  PauseResumeStatus = RESUME_STATUS;
 8000d80:	2101      	movs	r1, #1
  LEDsState = LED6_TOGGLE;
 8000d82:	2206      	movs	r2, #6
 8000d84:	601a      	str	r2, [r3, #0]
  PauseResumeStatus = RESUME_STATUS;
 8000d86:	6021      	str	r1, [r4, #0]
  PressCount = 0;
 8000d88:	4911      	ldr	r1, [pc, #68]	; (8000dd0 <WavePlayBack+0x78>)
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	600d      	str	r5, [r1, #0]
    if(CmdIndex == CMD_PLAY)
 8000d8e:	4911      	ldr	r1, [pc, #68]	; (8000dd4 <WavePlayBack+0x7c>)
 8000d90:	6809      	ldr	r1, [r1, #0]
 8000d92:	b969      	cbnz	r1, 8000db0 <WavePlayBack+0x58>
      if(PauseResumeStatus == PAUSE_STATUS)
 8000d94:	6821      	ldr	r1, [r4, #0]
 8000d96:	b931      	cbnz	r1, 8000da6 <WavePlayBack+0x4e>
        LEDsState = STOP_TOGGLE;
 8000d98:	6019      	str	r1, [r3, #0]
        WavePlayerPauseResume(PauseResumeStatus);
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	f7ff ffca 	bl	8000d34 <WavePlayerPauseResume>
        PauseResumeStatus = IDLE_STATUS;
 8000da0:	2302      	movs	r3, #2
 8000da2:	6023      	str	r3, [r4, #0]
}
 8000da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(PauseResumeStatus == RESUME_STATUS)
 8000da6:	6821      	ldr	r1, [r4, #0]
 8000da8:	2901      	cmp	r1, #1
 8000daa:	d1fb      	bne.n	8000da4 <WavePlayBack+0x4c>
        LEDsState = LED6_TOGGLE;
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e7f4      	b.n	8000d9a <WavePlayBack+0x42>
      WavePlayerStop();
 8000db0:	f7ff ffc5 	bl	8000d3e <WavePlayerStop>
      AudioRemSize = 0;
 8000db4:	607d      	str	r5, [r7, #4]
      RepeatState = REPEAT_ON;
 8000db6:	6035      	str	r5, [r6, #0]
}
 8000db8:	e7f4      	b.n	8000da4 <WavePlayBack+0x4c>
 8000dba:	bf00      	nop
 8000dbc:	2000053c 	.word	0x2000053c
 8000dc0:	2000052c 	.word	0x2000052c
 8000dc4:	0001f3c6 	.word	0x0001f3c6
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20002344 	.word	0x20002344
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
  BufferOffset = BUFFER_OFFSET_HALF;
 8000dd8:	4b01      	ldr	r3, [pc, #4]	; (8000de0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	721a      	strb	r2, [r3, #8]
}
 8000dde:	4770      	bx	lr
 8000de0:	2000053c 	.word	0x2000053c

08000de4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  BufferOffset = BUFFER_OFFSET_FULL;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE /2);
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
  BufferOffset = BUFFER_OFFSET_FULL;
 8000de8:	2202      	movs	r2, #2
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE /2);
 8000dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
  BufferOffset = BUFFER_OFFSET_FULL;
 8000dee:	721a      	strb	r2, [r3, #8]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE /2);
 8000df0:	f000 bde2 	b.w	80019b8 <BSP_AUDIO_OUT_ChangeBuffer>
 8000df4:	2000053c 	.word	0x2000053c
 8000df8:	20001314 	.word	0x20001314

08000dfc <BSP_AUDIO_OUT_Error_CallBack>:
* @brief  Manages the DMA FIFO error interrupt.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8000dfc:	e7fe      	b.n	8000dfc <BSP_AUDIO_OUT_Error_CallBack>

08000dfe <WaveRecorderStop>:
  * @brief  Stop Audio recording.
  * @param  None
  * @retval None
  */
uint32_t WaveRecorderStop(void)
{
 8000dfe:	b508      	push	{r3, lr}
  return BSP_AUDIO_IN_Stop();
 8000e00:	f000 ff3a 	bl	8001c78 <BSP_AUDIO_IN_Stop>
}
 8000e04:	bd08      	pop	{r3, pc}
	...

08000e08 <WaveRecorderProcess>:
  * @brief  Update the recorded data. 
  * @param  None
  * @retval None
  */
void WaveRecorderProcess(void)
{
 8000e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int ptr = 0;
  /* Current size of the recorded buffer */
  uint32_t byteswritten = 0; 
  audio_ctr = 0;

  WaveCounter = 0;
 8000e0c:	4d65      	ldr	r5, [pc, #404]	; (8000fa4 <WaveRecorderProcess+0x19c>)
  LEDsState = LEDS_OFF;
 8000e0e:	4e66      	ldr	r6, [pc, #408]	; (8000fa8 <WaveRecorderProcess+0x1a0>)
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8000e10:	4966      	ldr	r1, [pc, #408]	; (8000fac <WaveRecorderProcess+0x1a4>)
  audio_ctr = 0;
 8000e12:	4f67      	ldr	r7, [pc, #412]	; (8000fb0 <WaveRecorderProcess+0x1a8>)
 8000e14:	2400      	movs	r4, #0
  LEDsState = LEDS_OFF;
 8000e16:	2307      	movs	r3, #7
  WaveCounter = 0;
 8000e18:	602c      	str	r4, [r5, #0]
  LEDsState = LEDS_OFF;
 8000e1a:	6033      	str	r3, [r6, #0]
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8000e1c:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <WaveRecorderProcess+0x1ac>)
  pHeader[3] = 'F';
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the 
  recording opearation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8000e1e:	710c      	strb	r4, [r1, #4]
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8000e20:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
  pHeader[5] = 0x4C;
  pHeader[6] = 0x1D;
  pHeader[7] = 0x00;
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8000e24:	2057      	movs	r0, #87	; 0x57
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8000e26:	619a      	str	r2, [r3, #24]
  pHeader[8]  = 'W';
 8000e28:	7208      	strb	r0, [r1, #8]
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8000e2a:	4a63      	ldr	r2, [pc, #396]	; (8000fb8 <WaveRecorderProcess+0x1b0>)
 8000e2c:	605a      	str	r2, [r3, #4]
  pHeader[9]  = 'A';
 8000e2e:	2041      	movs	r0, #65	; 0x41
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8000e30:	f04f 0810 	mov.w	r8, #16
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8000e34:	f04f 0e02 	mov.w	lr, #2
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8000e38:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8000e3c:	f04f 0c04 	mov.w	ip, #4
  pHeader[9]  = 'A';
 8000e40:	7248      	strb	r0, [r1, #9]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8000e42:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
  pHeader[10] = 'V';
 8000e46:	2056      	movs	r0, #86	; 0x56
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8000e48:	f8a3 e016 	strh.w	lr, [r3, #22]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8000e4c:	61da      	str	r2, [r3, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8000e4e:	f8a3 c020 	strh.w	ip, [r3, #32]
  pHeader[10] = 'V';
 8000e52:	7288      	strb	r0, [r1, #10]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8000e54:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8000e58:	f8c3 a010 	str.w	sl, [r3, #16]
  pHeader[11] = 'E';
 8000e5c:	2045      	movs	r0, #69	; 0x45
  pHeader[0] = 'R';
 8000e5e:	2352      	movs	r3, #82	; 0x52
 8000e60:	700b      	strb	r3, [r1, #0]
  pHeader[11] = 'E';
 8000e62:	72c8      	strb	r0, [r1, #11]
  pHeader[1] = 'I';
 8000e64:	2349      	movs	r3, #73	; 0x49
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8000e66:	2066      	movs	r0, #102	; 0x66
  pHeader[1] = 'I';
 8000e68:	704b      	strb	r3, [r1, #1]
  pHeader[12]  = 'f';
 8000e6a:	7308      	strb	r0, [r1, #12]
  pHeader[2] = 'F';
 8000e6c:	2346      	movs	r3, #70	; 0x46
  pHeader[13]  = 'm';
 8000e6e:	206d      	movs	r0, #109	; 0x6d
   WaveRecStatus = 1;
 8000e70:	f04f 0901 	mov.w	r9, #1
  pHeader[2] = 'F';
 8000e74:	708b      	strb	r3, [r1, #2]
  pHeader[3] = 'F';
 8000e76:	70cb      	strb	r3, [r1, #3]
  pHeader[5] = 0x4C;
 8000e78:	224c      	movs	r2, #76	; 0x4c
  pHeader[6] = 0x1D;
 8000e7a:	231d      	movs	r3, #29
  pHeader[13]  = 'm';
 8000e7c:	7348      	strb	r0, [r1, #13]
  pHeader[14]  = 't';
  pHeader[15]  = ' ';
 8000e7e:	f04f 0b20 	mov.w	fp, #32
  pHeader[14]  = 't';
 8000e82:	2074      	movs	r0, #116	; 0x74
  pHeader[5] = 0x4C;
 8000e84:	714a      	strb	r2, [r1, #5]
  pHeader[6] = 0x1D;
 8000e86:	718b      	strb	r3, [r1, #6]
  pHeader[14]  = 't';
 8000e88:	7388      	strb	r0, [r1, #14]
  pHeader[15]  = ' ';
 8000e8a:	f881 b00f 	strb.w	fp, [r1, #15]
  pHeader[7] = 0x00;
 8000e8e:	71cc      	strb	r4, [r1, #7]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8000e90:	f881 8010 	strb.w	r8, [r1, #16]
  pHeader[17]  = 0x00;
 8000e94:	744c      	strb	r4, [r1, #17]
  pHeader[18]  = 0x00;
 8000e96:	748c      	strb	r4, [r1, #18]
  pHeader[19]  = 0x00;
 8000e98:	74cc      	strb	r4, [r1, #19]
  audio_ctr = 0;
 8000e9a:	603c      	str	r4, [r7, #0]
   WaveRecStatus = 1;
 8000e9c:	f8c5 9004 	str.w	r9, [r5, #4]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8000ea0:	f881 9014 	strb.w	r9, [r1, #20]
  pHeader[21]  = 0x00;
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8000ea4:	f881 e016 	strb.w	lr, [r1, #22]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8000ea8:	f881 c020 	strb.w	ip, [r1, #32]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8000eac:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
  pHeader[35]  = 0x00;
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8000eb0:	f04f 0c64 	mov.w	ip, #100	; 0x64
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8000eb4:	f04f 0b80 	mov.w	fp, #128	; 0x80
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8000eb8:	f881 e019 	strb.w	lr, [r1, #25]
  pHeader[36]  = 'd';
 8000ebc:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8000ec0:	f04f 0efa 	mov.w	lr, #250	; 0xfa
  pHeader[37]  = 'a';
 8000ec4:	f04f 0c61 	mov.w	ip, #97	; 0x61
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8000ec8:	f881 e01d 	strb.w	lr, [r1, #29]
  pHeader[37]  = 'a';
 8000ecc:	f881 c025 	strb.w	ip, [r1, #37]	; 0x25
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
 8000ed0:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
  pHeader[38]  = 't';
 8000ed4:	f881 0026 	strb.w	r0, [r1, #38]	; 0x26
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
  pHeader[41]  = 0x4C;
 8000ed8:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pHeader[42]  = 0x1D;
 8000edc:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  MY_FLASH_WriteN(0, pHeaderBuff, 44, DATA_TYPE_16);
 8000ee0:	4652      	mov	r2, sl
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	4620      	mov	r0, r4
  pHeader[21]  = 0x00;
 8000ee6:	754c      	strb	r4, [r1, #21]
  pHeader[23]  = 0x00;
 8000ee8:	75cc      	strb	r4, [r1, #23]
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8000eea:	f881 b018 	strb.w	fp, [r1, #24]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8000eee:	768c      	strb	r4, [r1, #26]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8000ef0:	76cc      	strb	r4, [r1, #27]
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8000ef2:	770c      	strb	r4, [r1, #28]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8000ef4:	778c      	strb	r4, [r1, #30]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8000ef6:	77cc      	strb	r4, [r1, #31]
  pHeader[33]  = 0x00;
 8000ef8:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8000efc:	f881 8022 	strb.w	r8, [r1, #34]	; 0x22
  pHeader[35]  = 0x00;
 8000f00:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pHeader[40]  = 0x00;
 8000f04:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pHeader[43]  = 0x00;
 8000f08:	f881 402b 	strb.w	r4, [r1, #43]	; 0x2b
  MY_FLASH_WriteN(0, pHeaderBuff, 44, DATA_TYPE_16);
 8000f0c:	f7ff fd26 	bl	800095c <MY_FLASH_WriteN>
  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8000f10:	464a      	mov	r2, r9
 8000f12:	4641      	mov	r1, r8
 8000f14:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
  audio_ctr = 44;
 8000f18:	f8c7 a000 	str.w	sl, [r7]
  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8000f1c:	f000 ff76 	bl	8001e0c <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE);
 8000f20:	4659      	mov	r1, fp
 8000f22:	f105 0008 	add.w	r0, r5, #8
 8000f26:	f000 fe9d 	bl	8001c64 <BSP_AUDIO_IN_Record>
  TimeRecBase = 0;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <WaveRecorderProcess+0x1b4>)
    if(audio_ctr < AUDIO_SIZE)
 8000f2c:	6838      	ldr	r0, [r7, #0]
  TimeRecBase = 0;
 8000f2e:	601c      	str	r4, [r3, #0]
    if(audio_ctr < AUDIO_SIZE)
 8000f30:	f5b0 4f7a 	cmp.w	r0, #64000	; 0xfa00
  LEDsState = LED3_TOGGLE;
 8000f34:	f04f 0303 	mov.w	r3, #3
  ITCounter = 0;
 8000f38:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
  LEDsState = LED3_TOGGLE;
 8000f3c:	6033      	str	r3, [r6, #0]
    if(audio_ctr < AUDIO_SIZE)
 8000f3e:	da12      	bge.n	8000f66 <WaveRecorderProcess+0x15e>
      if(AUDIODataReady == 1)
 8000f40:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8000f44:	454b      	cmp	r3, r9
 8000f46:	d10b      	bne.n	8000f60 <WaveRecorderProcess+0x158>
        if((audio_ctr + WR_BUFFER_SIZE) < AUDIO_SIZE){
 8000f48:	f5b0 4f6a 	cmp.w	r0, #59904	; 0xea00
 8000f4c:	da19      	bge.n	8000f82 <WaveRecorderProcess+0x17a>
    	MY_FLASH_WriteN(audio_ctr, WrBuffer, WR_BUFFER_SIZE,DATA_TYPE_16 );
 8000f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f52:	491b      	ldr	r1, [pc, #108]	; (8000fc0 <WaveRecorderProcess+0x1b8>)
 8000f54:	f7ff fd02 	bl	800095c <MY_FLASH_WriteN>
    	audio_ctr = audio_ctr + WR_BUFFER_SIZE;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f5e:	603b      	str	r3, [r7, #0]
        AUDIODataReady = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
      if(CmdIndex != CMD_RECORD)
 8000f66:	4c17      	ldr	r4, [pc, #92]	; (8000fc4 <WaveRecorderProcess+0x1bc>)
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d00f      	beq.n	8000f8e <WaveRecorderProcess+0x186>
        WaveRecorderStop();
 8000f6e:	f7ff ff46 	bl	8000dfe <WaveRecorderStop>
        CmdIndex = CMD_PLAY;
 8000f72:	2300      	movs	r3, #0
 8000f74:	6023      	str	r3, [r4, #0]
        LEDsState = LED6_TOGGLE;
 8000f76:	2306      	movs	r3, #6
 8000f78:	6033      	str	r3, [r6, #0]
  CmdIndex = CMD_PLAY;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6023      	str	r3, [r4, #0]
}
 8000f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	MY_FLASH_WriteN(audio_ctr, WrBuffer,ptr ,DATA_TYPE_16 );
 8000f82:	f5c0 427a 	rsb	r2, r0, #64000	; 0xfa00
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <WaveRecorderProcess+0x1b8>)
 8000f88:	f7ff fce8 	bl	800095c <MY_FLASH_WriteN>
 8000f8c:	e7e8      	b.n	8000f60 <WaveRecorderProcess+0x158>
      WaveRecorderStop();
 8000f8e:	f7ff ff36 	bl	8000dfe <WaveRecorderStop>
      CmdIndex = CMD_STOP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	6023      	str	r3, [r4, #0]
      LEDsState = LED4_TOGGLE;
 8000f96:	2304      	movs	r3, #4
 8000f98:	6033      	str	r3, [r6, #0]
      AUDIODataReady = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
      break;
 8000fa0:	e7eb      	b.n	8000f7a <WaveRecorderProcess+0x172>
 8000fa2:	bf00      	nop
 8000fa4:	20000548 	.word	0x20000548
 8000fa8:	20002344 	.word	0x20002344
 8000fac:	200025a4 	.word	0x200025a4
 8000fb0:	2000480c 	.word	0x2000480c
 8000fb4:	20002578 	.word	0x20002578
 8000fb8:	001d4c00 	.word	0x001d4c00
 8000fbc:	20000538 	.word	0x20000538
 8000fc0:	200025d8 	.word	0x200025d8
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <BSP_AUDIO_IN_TransferComplete_CallBack>:
{
 8000fc8:	b510      	push	{r4, lr}
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8000fca:	4c1c      	ldr	r4, [pc, #112]	; (800103c <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
 8000fcc:	f504 7188 	add.w	r1, r4, #272	; 0x110
 8000fd0:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8000fd4:	f000 fe58 	bl	8001c88 <BSP_AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8000fd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000fdc:	4a18      	ldr	r2, [pc, #96]	; (8001040 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8000fde:	f504 7188 	add.w	r1, r4, #272	; 0x110
 8000fe2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8000fe6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000fea:	4623      	mov	r3, r4
 8000fec:	f851 4b04 	ldr.w	r4, [r1], #4
 8000ff0:	f842 4b04 	str.w	r4, [r2], #4
 8000ff4:	4281      	cmp	r1, r0
 8000ff6:	d1f9      	bne.n	8000fec <BSP_AUDIO_IN_TransferComplete_CallBack+0x24>
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8000ff8:	4912      	ldr	r1, [pc, #72]	; (8001044 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	600a      	str	r2, [r1, #0]
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8000ffe:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001002:	293f      	cmp	r1, #63	; 0x3f
 8001004:	d10a      	bne.n	800101c <BSP_AUDIO_IN_TransferComplete_CallBack+0x54>
    AUDIODataReady = 1;
 8001006:	2101      	movs	r1, #1
 8001008:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = 0;
 800100c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    ITCounter++;
 8001010:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001014:	440a      	add	r2, r1
    ITCounter++;
 8001016:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800101a:	bd10      	pop	{r4, pc}
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 800101c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001020:	297f      	cmp	r1, #127	; 0x7f
    AUDIODataReady = 1;
 8001022:	bf09      	itett	eq
 8001024:	2101      	moveq	r1, #1
    ITCounter++;
 8001026:	f8d3 2108 	ldrne.w	r2, [r3, #264]	; 0x108
    AUDIODataReady = 1;
 800102a:	f8c3 110c 	streq.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 800102e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
 8001032:	bf0c      	ite	eq
 8001034:	f8c3 1150 	streq.w	r1, [r3, #336]	; 0x150
    ITCounter++;
 8001038:	3201      	addne	r2, #1
 800103a:	e7ec      	b.n	8001016 <BSP_AUDIO_IN_TransferComplete_CallBack+0x4e>
 800103c:	20000548 	.word	0x20000548
 8001040:	200025d8 	.word	0x200025d8
 8001044:	200025d0 	.word	0x200025d0

08001048 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
{
 8001048:	b510      	push	{r4, lr}
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 800104a:	4c1c      	ldr	r4, [pc, #112]	; (80010bc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
 800104c:	f504 7188 	add.w	r1, r4, #272	; 0x110
 8001050:	f104 0008 	add.w	r0, r4, #8
 8001054:	f000 fe18 	bl	8001c88 <BSP_AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8001058:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 800105e:	f504 7188 	add.w	r1, r4, #272	; 0x110
 8001062:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8001066:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800106a:	4623      	mov	r3, r4
 800106c:	f851 4b04 	ldr.w	r4, [r1], #4
 8001070:	f842 4b04 	str.w	r4, [r2], #4
 8001074:	4281      	cmp	r1, r0
 8001076:	d1f9      	bne.n	800106c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x24>
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8001078:	4912      	ldr	r1, [pc, #72]	; (80010c4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 800107a:	2200      	movs	r2, #0
 800107c:	600a      	str	r2, [r1, #0]
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 800107e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001082:	293f      	cmp	r1, #63	; 0x3f
 8001084:	d10a      	bne.n	800109c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x54>
    AUDIODataReady = 1;
 8001086:	2101      	movs	r1, #1
 8001088:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = 0;
 800108c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    ITCounter++;
 8001090:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001094:	440a      	add	r2, r1
    ITCounter++;
 8001096:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800109a:	bd10      	pop	{r4, pc}
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 800109c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80010a0:	297f      	cmp	r1, #127	; 0x7f
    AUDIODataReady = 1;
 80010a2:	bf09      	itett	eq
 80010a4:	2101      	moveq	r1, #1
    ITCounter++;
 80010a6:	f8d3 2108 	ldrne.w	r2, [r3, #264]	; 0x108
    AUDIODataReady = 1;
 80010aa:	f8c3 110c 	streq.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 80010ae:	f44f 6100 	moveq.w	r1, #2048	; 0x800
 80010b2:	bf0c      	ite	eq
 80010b4:	f8c3 1150 	streq.w	r1, [r3, #336]	; 0x150
    ITCounter++;
 80010b8:	3201      	addne	r2, #1
 80010ba:	e7ec      	b.n	8001096 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x4e>
 80010bc:	20000548 	.word	0x20000548
 80010c0:	200025d8 	.word	0x200025d8
 80010c4:	200025d0 	.word	0x200025d0

080010c8 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80010c8:	2000      	movs	r0, #0
 80010ca:	4770      	bx	lr

080010cc <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 80010cc:	2000      	movs	r0, #0
 80010ce:	4770      	bx	lr

080010d0 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80010d0:	2964      	cmp	r1, #100	; 0x64
 80010d2:	bf98      	it	ls
 80010d4:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
{
 80010d8:	b538      	push	{r3, r4, r5, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80010da:	bf8f      	iteee	hi
 80010dc:	22ff      	movhi	r2, #255	; 0xff
 80010de:	2364      	movls	r3, #100	; 0x64
 80010e0:	fb91 f1f3 	sdivls	r1, r1, r3
 80010e4:	b2ca      	uxtbls	r2, r1
 80010e6:	3219      	adds	r2, #25
 80010e8:	b2c5      	uxtb	r5, r0
 80010ea:	b2d4      	uxtb	r4, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80010ec:	4622      	mov	r2, r4
 80010ee:	4628      	mov	r0, r5
 80010f0:	2120      	movs	r1, #32
 80010f2:	f000 fbb0 	bl	8001856 <AUDIO_IO_Write>
 80010f6:	4628      	mov	r0, r5
 80010f8:	4622      	mov	r2, r4
 80010fa:	2121      	movs	r1, #33	; 0x21
 80010fc:	f000 fbab 	bl	8001856 <AUDIO_IO_Write>
}
 8001100:	2000      	movs	r0, #0
 8001102:	bd38      	pop	{r3, r4, r5, pc}

08001104 <cs43l22_Init>:
{
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001108:	b2f4      	uxtb	r4, r6
{
 800110a:	460d      	mov	r5, r1
 800110c:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 800110e:	f000 fb6f 	bl	80017f0 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 8001112:	2201      	movs	r2, #1
 8001114:	2102      	movs	r1, #2
 8001116:	4620      	mov	r0, r4
 8001118:	f000 fb9d 	bl	8001856 <AUDIO_IO_Write>
  switch (OutputDevice)
 800111c:	1e6a      	subs	r2, r5, #1
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <cs43l22_Init+0xc4>)
 8001120:	2a03      	cmp	r2, #3
 8001122:	d84e      	bhi.n	80011c2 <cs43l22_Init+0xbe>
 8001124:	e8df f002 	tbb	[pc, r2]
 8001128:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 800112c:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 800112e:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001130:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8001132:	2104      	movs	r1, #4
 8001134:	4620      	mov	r0, r4
 8001136:	f000 fb8e 	bl	8001856 <AUDIO_IO_Write>
 800113a:	2281      	movs	r2, #129	; 0x81
 800113c:	2105      	movs	r1, #5
 800113e:	4620      	mov	r0, r4
 8001140:	f000 fb89 	bl	8001856 <AUDIO_IO_Write>
 8001144:	2204      	movs	r2, #4
 8001146:	2106      	movs	r1, #6
 8001148:	4620      	mov	r0, r4
 800114a:	f000 fb84 	bl	8001856 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800114e:	4630      	mov	r0, r6
 8001150:	4639      	mov	r1, r7
 8001152:	f7ff ffbd 	bl	80010d0 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001156:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001158:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800115a:	d00e      	beq.n	800117a <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 800115c:	2206      	movs	r2, #6
 800115e:	210f      	movs	r1, #15
 8001160:	4620      	mov	r0, r4
 8001162:	f000 fb78 	bl	8001856 <AUDIO_IO_Write>
 8001166:	2200      	movs	r2, #0
 8001168:	2124      	movs	r1, #36	; 0x24
 800116a:	4620      	mov	r0, r4
 800116c:	f000 fb73 	bl	8001856 <AUDIO_IO_Write>
 8001170:	2200      	movs	r2, #0
 8001172:	2125      	movs	r1, #37	; 0x25
 8001174:	4620      	mov	r0, r4
 8001176:	f000 fb6e 	bl	8001856 <AUDIO_IO_Write>
 800117a:	4620      	mov	r0, r4
 800117c:	2200      	movs	r2, #0
 800117e:	210a      	movs	r1, #10
 8001180:	f000 fb69 	bl	8001856 <AUDIO_IO_Write>
 8001184:	4620      	mov	r0, r4
 8001186:	2204      	movs	r2, #4
 8001188:	210e      	movs	r1, #14
 800118a:	f000 fb64 	bl	8001856 <AUDIO_IO_Write>
 800118e:	4620      	mov	r0, r4
 8001190:	2200      	movs	r2, #0
 8001192:	2127      	movs	r1, #39	; 0x27
 8001194:	f000 fb5f 	bl	8001856 <AUDIO_IO_Write>
 8001198:	4620      	mov	r0, r4
 800119a:	220f      	movs	r2, #15
 800119c:	211f      	movs	r1, #31
 800119e:	f000 fb5a 	bl	8001856 <AUDIO_IO_Write>
 80011a2:	4620      	mov	r0, r4
 80011a4:	220a      	movs	r2, #10
 80011a6:	211a      	movs	r1, #26
 80011a8:	f000 fb55 	bl	8001856 <AUDIO_IO_Write>
 80011ac:	4620      	mov	r0, r4
 80011ae:	220a      	movs	r2, #10
 80011b0:	211b      	movs	r1, #27
 80011b2:	f000 fb50 	bl	8001856 <AUDIO_IO_Write>
}
 80011b6:	4630      	mov	r0, r6
 80011b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80011ba:	22af      	movs	r2, #175	; 0xaf
 80011bc:	e7b7      	b.n	800112e <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80011be:	22aa      	movs	r2, #170	; 0xaa
 80011c0:	e7b5      	b.n	800112e <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80011c2:	2205      	movs	r2, #5
 80011c4:	e7b3      	b.n	800112e <cs43l22_Init+0x2a>
 80011c6:	bf00      	nop
 80011c8:	2000069c 	.word	0x2000069c

080011cc <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 80011cc:	f000 bb42 	b.w	8001854 <AUDIO_IO_DeInit>

080011d0 <cs43l22_ReadID>:
{
 80011d0:	b510      	push	{r4, lr}
 80011d2:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 80011d4:	f000 fb0c 	bl	80017f0 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80011d8:	2101      	movs	r1, #1
 80011da:	b2e0      	uxtb	r0, r4
 80011dc:	f000 fb3d 	bl	800185a <AUDIO_IO_Read>
}
 80011e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80011e4:	bd10      	pop	{r4, pc}

080011e6 <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 80011e6:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80011e8:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80011ea:	4620      	mov	r0, r4
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	2104      	movs	r1, #4
 80011f0:	f000 fb31 	bl	8001856 <AUDIO_IO_Write>
 80011f4:	4620      	mov	r0, r4
 80011f6:	2201      	movs	r2, #1
 80011f8:	2122      	movs	r1, #34	; 0x22
 80011fa:	f000 fb2c 	bl	8001856 <AUDIO_IO_Write>
 80011fe:	4620      	mov	r0, r4
 8001200:	2201      	movs	r2, #1
 8001202:	2123      	movs	r1, #35	; 0x23
}
 8001204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 8001208:	f000 bb25 	b.w	8001856 <AUDIO_IO_Write>

0800120c <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 800120c:	2901      	cmp	r1, #1
{
 800120e:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8001210:	d103      	bne.n	800121a <cs43l22_SetMute+0xe>
 8001212:	f7ff ffe8 	bl	80011e6 <cs43l22_SetMute.part.0>
}
 8001216:	2000      	movs	r0, #0
 8001218:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800121a:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 800121c:	4620      	mov	r0, r4
 800121e:	2200      	movs	r2, #0
 8001220:	2122      	movs	r1, #34	; 0x22
 8001222:	f000 fb18 	bl	8001856 <AUDIO_IO_Write>
 8001226:	4620      	mov	r0, r4
 8001228:	2200      	movs	r2, #0
 800122a:	2123      	movs	r1, #35	; 0x23
 800122c:	f000 fb13 	bl	8001856 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8001232:	2104      	movs	r1, #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001234:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8001236:	4620      	mov	r0, r4
 8001238:	f000 fb0d 	bl	8001856 <AUDIO_IO_Write>
 800123c:	e7eb      	b.n	8001216 <cs43l22_SetMute+0xa>
 800123e:	bf00      	nop
 8001240:	2000069c 	.word	0x2000069c

08001244 <cs43l22_Resume>:
{
 8001244:	b573      	push	{r0, r1, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 8001246:	2500      	movs	r5, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001248:	4629      	mov	r1, r5
{
 800124a:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 800124c:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800124e:	f7ff ffdd 	bl	800120c <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8001252:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001254:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 8001256:	9b01      	ldr	r3, [sp, #4]
 8001258:	2bfe      	cmp	r3, #254	; 0xfe
 800125a:	d90e      	bls.n	800127a <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <cs43l22_Resume+0x40>)
 800125e:	b2e4      	uxtb	r4, r4
 8001260:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8001262:	4620      	mov	r0, r4
 8001264:	2104      	movs	r1, #4
 8001266:	f000 faf6 	bl	8001856 <AUDIO_IO_Write>
 800126a:	4620      	mov	r0, r4
 800126c:	229e      	movs	r2, #158	; 0x9e
 800126e:	2102      	movs	r1, #2
 8001270:	f000 faf1 	bl	8001856 <AUDIO_IO_Write>
}
 8001274:	4630      	mov	r0, r6
 8001276:	b002      	add	sp, #8
 8001278:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 800127a:	9b01      	ldr	r3, [sp, #4]
 800127c:	3301      	adds	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	e7e9      	b.n	8001256 <cs43l22_Resume+0x12>
 8001282:	bf00      	nop
 8001284:	2000069c 	.word	0x2000069c

08001288 <cs43l22_Pause>:
{  
 8001288:	b510      	push	{r4, lr}
 800128a:	4604      	mov	r4, r0
 800128c:	f7ff ffab 	bl	80011e6 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8001290:	b2e0      	uxtb	r0, r4
 8001292:	2201      	movs	r2, #1
 8001294:	2102      	movs	r1, #2
 8001296:	f000 fade 	bl	8001856 <AUDIO_IO_Write>
}
 800129a:	2000      	movs	r0, #0
 800129c:	bd10      	pop	{r4, pc}
	...

080012a0 <cs43l22_Stop>:
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80012a4:	b2e4      	uxtb	r4, r4
 80012a6:	f7ff ff9e 	bl	80011e6 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80012aa:	4620      	mov	r0, r4
 80012ac:	2204      	movs	r2, #4
 80012ae:	210e      	movs	r1, #14
 80012b0:	f000 fad1 	bl	8001856 <AUDIO_IO_Write>
 80012b4:	4620      	mov	r0, r4
 80012b6:	229f      	movs	r2, #159	; 0x9f
 80012b8:	2102      	movs	r1, #2
 80012ba:	f000 facc 	bl	8001856 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 80012be:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <cs43l22_Stop+0x28>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
}
 80012c4:	2000      	movs	r0, #0
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	20000010 	.word	0x20000010

080012cc <cs43l22_Play>:
{
 80012cc:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 80012ce:	4d0d      	ldr	r5, [pc, #52]	; (8001304 <cs43l22_Play+0x38>)
 80012d0:	782b      	ldrb	r3, [r5, #0]
 80012d2:	2b01      	cmp	r3, #1
{
 80012d4:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 80012d6:	d113      	bne.n	8001300 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80012d8:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80012da:	2206      	movs	r2, #6
 80012dc:	210e      	movs	r1, #14
 80012de:	4630      	mov	r0, r6
 80012e0:	f000 fab9 	bl	8001856 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80012e4:	2100      	movs	r1, #0
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff ff90 	bl	800120c <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 80012ec:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80012ee:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80012f0:	2102      	movs	r1, #2
 80012f2:	4630      	mov	r0, r6
 80012f4:	f000 faaf 	bl	8001856 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	702b      	strb	r3, [r5, #0]
}
 80012fc:	4620      	mov	r0, r4
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8001300:	2400      	movs	r4, #0
  return counter;  
 8001302:	e7fb      	b.n	80012fc <cs43l22_Play+0x30>
 8001304:	20000010 	.word	0x20000010

08001308 <cs43l22_SetOutputMode>:
  switch (Output) 
 8001308:	3901      	subs	r1, #1
{
 800130a:	b510      	push	{r4, lr}
 800130c:	b2c0      	uxtb	r0, r0
 800130e:	4c10      	ldr	r4, [pc, #64]	; (8001350 <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 8001310:	2903      	cmp	r1, #3
 8001312:	d817      	bhi.n	8001344 <cs43l22_SetOutputMode+0x3c>
 8001314:	e8df f001 	tbb	[pc, r1]
 8001318:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 800131c:	22fa      	movs	r2, #250	; 0xfa
 800131e:	2104      	movs	r1, #4
 8001320:	f000 fa99 	bl	8001856 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8001324:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 8001326:	7023      	strb	r3, [r4, #0]
}
 8001328:	2000      	movs	r0, #0
 800132a:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 800132c:	22af      	movs	r2, #175	; 0xaf
 800132e:	2104      	movs	r1, #4
 8001330:	f000 fa91 	bl	8001856 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8001334:	23af      	movs	r3, #175	; 0xaf
 8001336:	e7f6      	b.n	8001326 <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8001338:	22aa      	movs	r2, #170	; 0xaa
 800133a:	2104      	movs	r1, #4
 800133c:	f000 fa8b 	bl	8001856 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8001340:	23aa      	movs	r3, #170	; 0xaa
 8001342:	e7f0      	b.n	8001326 <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8001344:	2205      	movs	r2, #5
 8001346:	2104      	movs	r1, #4
 8001348:	f000 fa85 	bl	8001856 <AUDIO_IO_Write>
      OutputDev = 0x05;
 800134c:	2305      	movs	r3, #5
 800134e:	e7ea      	b.n	8001326 <cs43l22_SetOutputMode+0x1e>
 8001350:	2000069c 	.word	0x2000069c

08001354 <LSM303DLHC_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
}
 8001354:	4770      	bx	lr

08001356 <LSM303DLHC_AccInit>:
{  
 8001356:	b510      	push	{r4, lr}
 8001358:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800135a:	f000 fa81 	bl	8001860 <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800135e:	b2e2      	uxtb	r2, r4
 8001360:	2120      	movs	r1, #32
 8001362:	2032      	movs	r0, #50	; 0x32
 8001364:	f000 fac8 	bl	80018f8 <COMPASSACCELERO_IO_Write>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001368:	2200      	movs	r2, #0
 800136a:	2123      	movs	r1, #35	; 0x23
 800136c:	2032      	movs	r0, #50	; 0x32
}
 800136e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001372:	f000 bac1 	b.w	80018f8 <COMPASSACCELERO_IO_Write>

08001376 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001376:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001378:	f000 fa72 	bl	8001860 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800137c:	210f      	movs	r1, #15
 800137e:	2032      	movs	r0, #50	; 0x32
  
  return ctrl;
}
 8001380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001384:	f000 baba 	b.w	80018fc <COMPASSACCELERO_IO_Read>

08001388 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001388:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800138a:	2124      	movs	r1, #36	; 0x24
 800138c:	2032      	movs	r0, #50	; 0x32
 800138e:	f000 fab5 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001392:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	2124      	movs	r1, #36	; 0x24
 800139a:	2032      	movs	r0, #50	; 0x32
}
 800139c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80013a0:	f000 baaa 	b.w	80018f8 <COMPASSACCELERO_IO_Write>

080013a4 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80013a4:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80013a6:	2121      	movs	r1, #33	; 0x21
{
 80013a8:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80013aa:	2032      	movs	r0, #50	; 0x32
 80013ac:	f000 faa6 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 80013b0:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80013b4:	4322      	orrs	r2, r4
 80013b6:	2121      	movs	r1, #33	; 0x21
 80013b8:	2032      	movs	r0, #50	; 0x32
}
 80013ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80013be:	f000 ba9b 	b.w	80018f8 <COMPASSACCELERO_IO_Write>

080013c2 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80013c2:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80013c4:	2121      	movs	r1, #33	; 0x21
{
 80013c6:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80013c8:	2032      	movs	r0, #50	; 0x32
 80013ca:	f000 fa97 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 80013ce:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80013d2:	4322      	orrs	r2, r4
 80013d4:	2121      	movs	r1, #33	; 0x21
 80013d6:	2032      	movs	r0, #50	; 0x32
}
 80013d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80013dc:	f000 ba8c 	b.w	80018f8 <COMPASSACCELERO_IO_Write>

080013e0 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80013e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80013e4:	2123      	movs	r1, #35	; 0x23
{
 80013e6:	4606      	mov	r6, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f000 fa87 	bl	80018fc <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80013ee:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80013f0:	4607      	mov	r7, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80013f2:	2032      	movs	r0, #50	; 0x32
 80013f4:	f000 fa82 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80013f8:	2128      	movs	r1, #40	; 0x28
 80013fa:	2032      	movs	r0, #50	; 0x32
 80013fc:	f000 fa7e 	bl	80018fc <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001400:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001402:	fa4f f880 	sxtb.w	r8, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001406:	2032      	movs	r0, #50	; 0x32
 8001408:	f000 fa78 	bl	80018fc <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800140c:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800140e:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001412:	2032      	movs	r0, #50	; 0x32
 8001414:	f000 fa72 	bl	80018fc <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001418:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800141a:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800141c:	2032      	movs	r0, #50	; 0x32
 800141e:	f000 fa6d 	bl	80018fc <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001422:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001424:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001428:	2032      	movs	r0, #50	; 0x32
 800142a:	f000 fa67 	bl	80018fc <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800142e:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001430:	b245      	sxtb	r5, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001432:	2032      	movs	r0, #50	; 0x32
 8001434:	f000 fa62 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001438:	067b      	lsls	r3, r7, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800143a:	b240      	sxtb	r0, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800143c:	d51e      	bpl.n	800147c <LSM303DLHC_AccReadXYZ+0x9c>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800143e:	eb09 2308 	add.w	r3, r9, r8, lsl #8
 8001442:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 8001446:	b21b      	sxth	r3, r3
 8001448:	b224      	sxth	r4, r4
 800144a:	eb00 2505 	add.w	r5, r0, r5, lsl #8
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800144e:	f007 0030 	and.w	r0, r7, #48	; 0x30
 8001452:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001454:	b22d      	sxth	r5, r5
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001456:	d01a      	beq.n	800148e <LSM303DLHC_AccReadXYZ+0xae>
 8001458:	2830      	cmp	r0, #48	; 0x30
 800145a:	d01a      	beq.n	8001492 <LSM303DLHC_AccReadXYZ+0xb2>
 800145c:	2810      	cmp	r0, #16
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800145e:	bf0c      	ite	eq
 8001460:	2002      	moveq	r0, #2
 8001462:	2001      	movne	r0, #1
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001464:	b280      	uxth	r0, r0
 8001466:	fb13 f300 	smulbb	r3, r3, r0
 800146a:	fb14 f400 	smulbb	r4, r4, r0
 800146e:	fb15 f500 	smulbb	r5, r5, r0
 8001472:	8033      	strh	r3, [r6, #0]
 8001474:	8074      	strh	r4, [r6, #2]
 8001476:	80b5      	strh	r5, [r6, #4]
  }
}
 8001478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800147c:	eb08 2309 	add.w	r3, r8, r9, lsl #8
 8001480:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8001484:	b21b      	sxth	r3, r3
 8001486:	b224      	sxth	r4, r4
 8001488:	eb05 2500 	add.w	r5, r5, r0, lsl #8
 800148c:	e7df      	b.n	800144e <LSM303DLHC_AccReadXYZ+0x6e>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800148e:	2004      	movs	r0, #4
    break;
 8001490:	e7e8      	b.n	8001464 <LSM303DLHC_AccReadXYZ+0x84>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001492:	200c      	movs	r0, #12
    break;
 8001494:	e7e6      	b.n	8001464 <LSM303DLHC_AccReadXYZ+0x84>

08001496 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001496:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001498:	2121      	movs	r1, #33	; 0x21
{
 800149a:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800149c:	2032      	movs	r0, #50	; 0x32
 800149e:	f000 fa2d 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 80014a2:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80014a6:	4322      	orrs	r2, r4
 80014a8:	2121      	movs	r1, #33	; 0x21
 80014aa:	2032      	movs	r0, #50	; 0x32
}
 80014ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80014b0:	f000 ba22 	b.w	80018f8 <COMPASSACCELERO_IO_Write>

080014b4 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 80014b4:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80014b6:	2122      	movs	r1, #34	; 0x22
{
 80014b8:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80014ba:	2032      	movs	r0, #50	; 0x32
 80014bc:	f000 fa1e 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 80014c0:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	2122      	movs	r1, #34	; 0x22
 80014c8:	2032      	movs	r0, #50	; 0x32
}
 80014ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80014ce:	f000 ba13 	b.w	80018f8 <COMPASSACCELERO_IO_Write>

080014d2 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80014d2:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80014d4:	2138      	movs	r1, #56	; 0x38
{  
 80014d6:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80014d8:	2032      	movs	r0, #50	; 0x32
 80014da:	f000 fa0f 	bl	80018fc <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80014de:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	2138      	movs	r1, #56	; 0x38
 80014e6:	2032      	movs	r0, #50	; 0x32
 80014e8:	f000 fa06 	bl	80018f8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80014ec:	220a      	movs	r2, #10
 80014ee:	213a      	movs	r1, #58	; 0x3a
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f000 fa01 	bl	80018f8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80014f6:	2205      	movs	r2, #5
 80014f8:	213b      	movs	r1, #59	; 0x3b
 80014fa:	2032      	movs	r0, #50	; 0x32
 80014fc:	f000 f9fc 	bl	80018f8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001500:	2205      	movs	r2, #5
 8001502:	213c      	movs	r1, #60	; 0x3c
 8001504:	2032      	movs	r0, #50	; 0x32
 8001506:	f000 f9f7 	bl	80018f8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800150a:	2232      	movs	r2, #50	; 0x32
 800150c:	213d      	movs	r1, #61	; 0x3d
 800150e:	4610      	mov	r0, r2
}
 8001510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001514:	f000 b9f0 	b.w	80018f8 <COMPASSACCELERO_IO_Write>

08001518 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001518:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800151a:	f000 f9c3 	bl	80018a4 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800151e:	2080      	movs	r0, #128	; 0x80
 8001520:	f7ff ffc8 	bl	80014b4 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001524:	2004      	movs	r0, #4
 8001526:	f7ff ffb6 	bl	8001496 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800152a:	2010      	movs	r0, #16
}
 800152c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001530:	f7ff bfcf 	b.w	80014d2 <LSM303DLHC_AccClickITEnable>

08001534 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001534:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001536:	4c2c      	ldr	r4, [pc, #176]	; (80015e8 <I2Cx_Init+0xb4>)
{
 8001538:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800153a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800153e:	f002 f957 	bl	80037f0 <HAL_I2C_GetState>
 8001542:	4605      	mov	r5, r0
 8001544:	2800      	cmp	r0, #0
 8001546:	d14d      	bne.n	80015e4 <I2Cx_Init+0xb0>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <I2Cx_Init+0xb8>)
 800154a:	65a3      	str	r3, [r4, #88]	; 0x58
    I2cHandle.Init.OwnAddress1 =  0x43;
 800154c:	2343      	movs	r3, #67	; 0x43
 800154e:	6663      	str	r3, [r4, #100]	; 0x64
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <I2Cx_Init+0xbc>)
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001552:	4e28      	ldr	r6, [pc, #160]	; (80015f4 <I2Cx_Init+0xc0>)
 8001554:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001556:	e9c4 3017 	strd	r3, r0, [r4, #92]	; 0x5c
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800155e:	e9c4 301a 	strd	r3, r0, [r4, #104]	; 0x68
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001562:	e9c4 001c 	strd	r0, r0, [r4, #112]	; 0x70
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8001566:	67a0      	str	r0, [r4, #120]	; 0x78
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001568:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800156a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156e:	6433      	str	r3, [r6, #64]	; 0x40
 8001570:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	9b01      	ldr	r3, [sp, #4]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800157a:	9002      	str	r0, [sp, #8]
 800157c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6333      	str	r3, [r6, #48]	; 0x30
 8001584:	6b33      	ldr	r3, [r6, #48]	; 0x30

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001586:	9505      	str	r5, [sp, #20]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001590:	f44f 7010 	mov.w	r0, #576	; 0x240
 8001594:	2312      	movs	r3, #18
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001596:	f04f 0c02 	mov.w	ip, #2
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800159a:	e9cd 0303 	strd	r0, r3, [sp, #12]
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800159e:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80015a0:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80015a2:	4815      	ldr	r0, [pc, #84]	; (80015f8 <I2Cx_Init+0xc4>)
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80015a4:	e9cd c306 	strd	ip, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80015a8:	f001 f8ec 	bl	8002784 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80015ac:	6a33      	ldr	r3, [r6, #32]
 80015ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b2:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80015b4:	6a33      	ldr	r3, [r6, #32]
 80015b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ba:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80015bc:	462a      	mov	r2, r5
 80015be:	210f      	movs	r1, #15
 80015c0:	201f      	movs	r0, #31
 80015c2:	f000 fd5b 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80015c6:	201f      	movs	r0, #31
 80015c8:	f000 fd8c 	bl	80020e4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80015cc:	462a      	mov	r2, r5
 80015ce:	210f      	movs	r1, #15
 80015d0:	2020      	movs	r0, #32
 80015d2:	f000 fd53 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80015d6:	2020      	movs	r0, #32
 80015d8:	f000 fd84 	bl	80020e4 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80015dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015e0:	f001 fea4 	bl	800332c <HAL_I2C_Init>
}
 80015e4:	b008      	add	sp, #32
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
 80015e8:	200006a0 	.word	0x200006a0
 80015ec:	40005400 	.word	0x40005400
 80015f0:	000186a0 	.word	0x000186a0
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400

080015fc <I2Cx_ReadData>:
{
 80015fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 80015fe:	aa06      	add	r2, sp, #24
 8001600:	2300      	movs	r3, #0
 8001602:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <I2Cx_ReadData+0x38>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2301      	movs	r3, #1
 800160e:	e9cd 2300 	strd	r2, r3, [sp]
 8001612:	460a      	mov	r2, r1
 8001614:	4601      	mov	r1, r0
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <I2Cx_ReadData+0x3c>)
 8001618:	f001 ffde 	bl	80035d8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800161c:	b120      	cbz	r0, 8001628 <I2Cx_ReadData+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <I2Cx_ReadData+0x3c>)
 8001620:	f001 ff31 	bl	8003486 <HAL_I2C_DeInit>
  I2Cx_Init();
 8001624:	f7ff ff86 	bl	8001534 <I2Cx_Init>
}
 8001628:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800162c:	b007      	add	sp, #28
 800162e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001632:	bf00      	nop
 8001634:	20000078 	.word	0x20000078
 8001638:	200006f8 	.word	0x200006f8

0800163c <I2Cx_WriteData>:
{
 800163c:	b510      	push	{r4, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <I2Cx_WriteData+0x30>)
{
 8001644:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2301      	movs	r3, #1
 800164e:	460a      	mov	r2, r1
 8001650:	e9cd 4300 	strd	r4, r3, [sp]
 8001654:	4601      	mov	r1, r0
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <I2Cx_WriteData+0x34>)
 8001658:	f001 ff2e 	bl	80034b8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800165c:	b120      	cbz	r0, 8001668 <I2Cx_WriteData+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <I2Cx_WriteData+0x34>)
 8001660:	f001 ff11 	bl	8003486 <HAL_I2C_DeInit>
  I2Cx_Init();
 8001664:	f7ff ff66 	bl	8001534 <I2Cx_Init>
}
 8001668:	b006      	add	sp, #24
 800166a:	bd10      	pop	{r4, pc}
 800166c:	20000078 	.word	0x20000078
 8001670:	200006f8 	.word	0x200006f8

08001674 <BSP_LED_Init>:
{
 8001674:	b530      	push	{r4, r5, lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c
  LEDx_GPIO_CLK_ENABLE(Led);
 8001678:	bb08      	cbnz	r0, 80016be <BSP_LED_Init+0x4a>
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <BSP_LED_Init+0xa4>)
 800167c:	9001      	str	r0, [sp, #4]
 800167e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001680:	f042 0208 	orr.w	r2, r2, #8
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001690:	4c22      	ldr	r4, [pc, #136]	; (800171c <BSP_LED_Init+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001694:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001698:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800169c:	68a0      	ldr	r0, [r4, #8]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800169e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80016a6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80016a8:	2302      	movs	r3, #2
 80016aa:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80016ac:	f001 f86a 	bl	8002784 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80016b0:	2200      	movs	r2, #0
 80016b2:	4629      	mov	r1, r5
 80016b4:	68a0      	ldr	r0, [r4, #8]
 80016b6:	f001 f933 	bl	8002920 <HAL_GPIO_WritePin>
}
 80016ba:	b00b      	add	sp, #44	; 0x2c
 80016bc:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80016be:	2801      	cmp	r0, #1
 80016c0:	d10c      	bne.n	80016dc <BSP_LED_Init+0x68>
 80016c2:	2300      	movs	r3, #0
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <BSP_LED_Init+0xa4>)
 80016c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ca:	f042 0208 	orr.w	r2, r2, #8
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	9b02      	ldr	r3, [sp, #8]
 80016da:	e7d9      	b.n	8001690 <BSP_LED_Init+0x1c>
 80016dc:	2802      	cmp	r0, #2
 80016de:	d10c      	bne.n	80016fa <BSP_LED_Init+0x86>
 80016e0:	2300      	movs	r3, #0
 80016e2:	9303      	str	r3, [sp, #12]
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <BSP_LED_Init+0xa4>)
 80016e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e8:	f042 0208 	orr.w	r2, r2, #8
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	9303      	str	r3, [sp, #12]
 80016f6:	9b03      	ldr	r3, [sp, #12]
 80016f8:	e7ca      	b.n	8001690 <BSP_LED_Init+0x1c>
 80016fa:	2803      	cmp	r0, #3
 80016fc:	d1c8      	bne.n	8001690 <BSP_LED_Init+0x1c>
 80016fe:	2300      	movs	r3, #0
 8001700:	9304      	str	r3, [sp, #16]
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <BSP_LED_Init+0xa4>)
 8001704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001706:	f042 0208 	orr.w	r2, r2, #8
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	9304      	str	r3, [sp, #16]
 8001714:	9b04      	ldr	r3, [sp, #16]
 8001716:	e7bb      	b.n	8001690 <BSP_LED_Init+0x1c>
 8001718:	40023800 	.word	0x40023800
 800171c:	20000078 	.word	0x20000078
 8001720:	0800786c 	.word	0x0800786c

08001724 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <BSP_LED_On+0x14>)
 8001726:	4905      	ldr	r1, [pc, #20]	; (800173c <BSP_LED_On+0x18>)
 8001728:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800172c:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8001730:	6898      	ldr	r0, [r3, #8]
 8001732:	2201      	movs	r2, #1
 8001734:	f001 b8f4 	b.w	8002920 <HAL_GPIO_WritePin>
 8001738:	20000078 	.word	0x20000078
 800173c:	0800786c 	.word	0x0800786c

08001740 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <BSP_LED_Off+0x14>)
 8001742:	4905      	ldr	r1, [pc, #20]	; (8001758 <BSP_LED_Off+0x18>)
 8001744:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001748:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 800174c:	6898      	ldr	r0, [r3, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	f001 b8e6 	b.w	8002920 <HAL_GPIO_WritePin>
 8001754:	20000078 	.word	0x20000078
 8001758:	0800786c 	.word	0x0800786c

0800175c <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <BSP_LED_Toggle+0x14>)
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <BSP_LED_Toggle+0x18>)
 8001760:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001764:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8001768:	6898      	ldr	r0, [r3, #8]
 800176a:	f001 b8de 	b.w	800292a <HAL_GPIO_TogglePin>
 800176e:	bf00      	nop
 8001770:	20000078 	.word	0x20000078
 8001774:	0800786c 	.word	0x0800786c

08001778 <BSP_PB_Init>:
{
 8001778:	b510      	push	{r4, lr}
 800177a:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800177c:	b950      	cbnz	r0, 8001794 <BSP_PB_Init+0x1c>
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <BSP_PB_Init+0x6c>)
 8001780:	9000      	str	r0, [sp, #0]
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001794:	b971      	cbnz	r1, 80017b4 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001796:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800179c:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800179e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <BSP_PB_Init+0x70>)
 80017a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80017a8:	a901      	add	r1, sp, #4
 80017aa:	6980      	ldr	r0, [r0, #24]
 80017ac:	f000 ffea 	bl	8002784 <HAL_GPIO_Init>
}
 80017b0:	b006      	add	sp, #24
 80017b2:	bd10      	pop	{r4, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 80017b4:	2901      	cmp	r1, #1
 80017b6:	d1fb      	bne.n	80017b0 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80017ba:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80017bc:	2400      	movs	r4, #0
 80017be:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <BSP_PB_Init+0x70>)
 80017c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80017c8:	a901      	add	r1, sp, #4
 80017ca:	6980      	ldr	r0, [r0, #24]
 80017cc:	f000 ffda 	bl	8002784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80017d0:	4622      	mov	r2, r4
 80017d2:	210f      	movs	r1, #15
 80017d4:	2006      	movs	r0, #6
 80017d6:	f000 fc51 	bl	800207c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80017da:	2006      	movs	r0, #6
 80017dc:	f000 fc82 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 80017e0:	e7e6      	b.n	80017b0 <BSP_PB_Init+0x38>
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	20000078 	.word	0x20000078
 80017ec:	10110000 	.word	0x10110000

080017f0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80017f4:	2600      	movs	r6, #0
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <AUDIO_IO_Init+0x5c>)
 80017f8:	9600      	str	r6, [sp, #0]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 80017fc:	4c14      	ldr	r4, [pc, #80]	; (8001850 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80017fe:	f042 0208 	orr.w	r2, r2, #8
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 800180e:	a901      	add	r1, sp, #4
 8001810:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001812:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001816:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001818:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001820:	f000 ffb0 	bl	8002784 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001824:	f7ff fe86 	bl	8001534 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001828:	4632      	mov	r2, r6
 800182a:	4629      	mov	r1, r5
 800182c:	4620      	mov	r0, r4
 800182e:	f001 f877 	bl	8002920 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001832:	2005      	movs	r0, #5
 8001834:	f000 fbfc 	bl	8002030 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001838:	463a      	mov	r2, r7
 800183a:	4629      	mov	r1, r5
 800183c:	4620      	mov	r0, r4
 800183e:	f001 f86f 	bl	8002920 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001842:	2005      	movs	r0, #5
 8001844:	f000 fbf4 	bl	8002030 <HAL_Delay>
}
 8001848:	b007      	add	sp, #28
 800184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40020c00 	.word	0x40020c00

08001854 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
  
}
 8001854:	4770      	bx	lr

08001856 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_WriteData(Addr, Reg, Value);
 8001856:	f7ff bef1 	b.w	800163c <I2Cx_WriteData>

0800185a <AUDIO_IO_Read>:
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
  return I2Cx_ReadData(Addr, Reg);
 800185a:	f7ff becf 	b.w	80015fc <I2Cx_ReadData>
	...

08001860 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8001860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <COMPASSACCELERO_IO_Init+0x3c>)
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	6b11      	ldr	r1, [r2, #48]	; 0x30
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <COMPASSACCELERO_IO_Init+0x40>)
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800186c:	f041 0110 	orr.w	r1, r1, #16
 8001870:	6311      	str	r1, [r2, #48]	; 0x30
 8001872:	6b12      	ldr	r2, [r2, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001874:	9303      	str	r3, [sp, #12]
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001876:	f002 0210 	and.w	r2, r2, #16
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800187e:	2204      	movs	r2, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001880:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001884:	eb0d 0102 	add.w	r1, sp, r2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001888:	2302      	movs	r3, #2
 800188a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800188c:	f000 ff7a 	bl	8002784 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001890:	f7ff fe50 	bl	8001534 <I2Cx_Init>
}
 8001894:	b007      	add	sp, #28
 8001896:	f85d fb04 	ldr.w	pc, [sp], #4
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40021000 	.word	0x40021000

080018a4 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80018a4:	b510      	push	{r4, lr}
 80018a6:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80018a8:	2400      	movs	r4, #0
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <COMPASSACCELERO_IO_ITConfig+0x48>)
 80018ac:	9400      	str	r4, [sp, #0]
 80018ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80018b0:	480f      	ldr	r0, [pc, #60]	; (80018f0 <COMPASSACCELERO_IO_ITConfig+0x4c>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80018b2:	f042 0210 	orr.w	r2, r2, #16
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <COMPASSACCELERO_IO_ITConfig+0x50>)
 80018c4:	2230      	movs	r2, #48	; 0x30
 80018c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80018ca:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80018cc:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80018ce:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80018d2:	f000 ff57 	bl	8002784 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80018d6:	4622      	mov	r2, r4
 80018d8:	210f      	movs	r1, #15
 80018da:	200a      	movs	r0, #10
 80018dc:	f000 fbce 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80018e0:	200a      	movs	r0, #10
 80018e2:	f000 fbff 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 80018e6:	b006      	add	sp, #24
 80018e8:	bd10      	pop	{r4, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	10110000 	.word	0x10110000

080018f8 <COMPASSACCELERO_IO_Write>:
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80018f8:	f7ff bea0 	b.w	800163c <I2Cx_WriteData>

080018fc <COMPASSACCELERO_IO_Read>:
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80018fc:	f7ff be7e 	b.w	80015fc <I2Cx_ReadData>

08001900 <BSP_ACCELERO_Init>:
/**
  * @brief  Set Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8001900:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure = {0,0,0,0};
  
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8001902:	4c09      	ldr	r4, [pc, #36]	; (8001928 <BSP_ACCELERO_Init+0x28>)
 8001904:	68a3      	ldr	r3, [r4, #8]
 8001906:	4798      	blx	r3
 8001908:	2833      	cmp	r0, #51	; 0x33
 800190a:	d10b      	bne.n	8001924 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the Accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800190c:	4d07      	ldr	r5, [pc, #28]	; (800192c <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
    /* Configure the Accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800190e:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303dlhcDrv;
 8001910:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 8001912:	f640 0047 	movw	r0, #2119	; 0x847
 8001916:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

    /* Configure the Accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	2090      	movs	r0, #144	; 0x90
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001920:	2000      	movs	r0, #0
  {
    ret = ACCELERO_ERROR;
  }

  return ret;
}
 8001922:	bd38      	pop	{r3, r4, r5, pc}
    ret = ACCELERO_ERROR;
 8001924:	2001      	movs	r0, #1
 8001926:	e7fc      	b.n	8001922 <BSP_ACCELERO_Init+0x22>
 8001928:	20000044 	.word	0x20000044
 800192c:	2000074c 	.word	0x2000074c

08001930 <BSP_ACCELERO_Click_ITConfig>:
/**
  * @brief  Configure Accelerometer click IT. 
  */
void BSP_ACCELERO_Click_ITConfig(void)
{
  if(AccelerometerDrv->ConfigIT!= NULL)
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <BSP_ACCELERO_Click_ITConfig+0xc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	b103      	cbz	r3, 800193a <BSP_ACCELERO_Click_ITConfig+0xa>
  {
    AccelerometerDrv->ConfigIT();
 8001938:	4718      	bx	r3
  }
}
 800193a:	4770      	bx	lr
 800193c:	2000074c 	.word	0x2000074c

08001940 <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <I2S3_Init+0x34>)
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8001942:	69d1      	ldr	r1, [r2, #28]
{
 8001944:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8001948:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 800194c:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800194e:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8001950:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001952:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8001956:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8001958:	4618      	mov	r0, r3
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800195a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 800195e:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001960:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8001962:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8001966:	f001 ff6d 	bl	8003844 <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 800196a:	3000      	adds	r0, #0
 800196c:	bf18      	it	ne
 800196e:	2001      	movne	r0, #1
 8001970:	bd08      	pop	{r3, pc}
 8001972:	bf00      	nop
 8001974:	40003c00 	.word	0x40003c00
 8001978:	200048b4 	.word	0x200048b4

0800197c <BSP_AUDIO_OUT_Play>:
{
 800197c:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <BSP_AUDIO_OUT_Play+0x34>)
 8001980:	681b      	ldr	r3, [r3, #0]
{
 8001982:	4605      	mov	r5, r0
 8001984:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001986:	b28a      	uxth	r2, r1
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	4601      	mov	r1, r0
 800198c:	2094      	movs	r0, #148	; 0x94
 800198e:	4798      	blx	r3
 8001990:	b960      	cbnz	r0, 80019ac <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8001992:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8001996:	bf34      	ite	cc
 8001998:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 800199c:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 80019a0:	4629      	mov	r1, r5
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <BSP_AUDIO_OUT_Play+0x38>)
 80019a4:	f001 ffe6 	bl	8003974 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 80019a8:	2000      	movs	r0, #0
}
 80019aa:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80019ac:	2001      	movs	r0, #1
 80019ae:	e7fc      	b.n	80019aa <BSP_AUDIO_OUT_Play+0x2e>
 80019b0:	20000750 	.word	0x20000750
 80019b4:	200048b4 	.word	0x200048b4

080019b8 <BSP_AUDIO_OUT_ChangeBuffer>:
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 80019b8:	460a      	mov	r2, r1
 80019ba:	4601      	mov	r1, r0
 80019bc:	4801      	ldr	r0, [pc, #4]	; (80019c4 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 80019be:	f001 bfd9 	b.w	8003974 <HAL_I2S_Transmit_DMA>
 80019c2:	bf00      	nop
 80019c4:	200048b4 	.word	0x200048b4

080019c8 <BSP_AUDIO_OUT_Pause>:
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <BSP_AUDIO_OUT_Pause+0x20>)
 80019ca:	681b      	ldr	r3, [r3, #0]
{    
 80019cc:	b510      	push	{r4, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2094      	movs	r0, #148	; 0x94
 80019d2:	4798      	blx	r3
 80019d4:	4604      	mov	r4, r0
 80019d6:	b920      	cbnz	r0, 80019e2 <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <BSP_AUDIO_OUT_Pause+0x24>)
 80019da:	f002 f88f 	bl	8003afc <HAL_I2S_DMAPause>
    return AUDIO_OK;
 80019de:	4620      	mov	r0, r4
}
 80019e0:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 80019e2:	2001      	movs	r0, #1
 80019e4:	e7fc      	b.n	80019e0 <BSP_AUDIO_OUT_Pause+0x18>
 80019e6:	bf00      	nop
 80019e8:	20000750 	.word	0x20000750
 80019ec:	200048b4 	.word	0x200048b4

080019f0 <BSP_AUDIO_OUT_Resume>:
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <BSP_AUDIO_OUT_Resume+0x20>)
 80019f2:	681b      	ldr	r3, [r3, #0]
{    
 80019f4:	b510      	push	{r4, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	2094      	movs	r0, #148	; 0x94
 80019fa:	4798      	blx	r3
 80019fc:	4604      	mov	r4, r0
 80019fe:	b920      	cbnz	r0, 8001a0a <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <BSP_AUDIO_OUT_Resume+0x24>)
 8001a02:	f002 f8b3 	bl	8003b6c <HAL_I2S_DMAResume>
    return AUDIO_OK;
 8001a06:	4620      	mov	r0, r4
}
 8001a08:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	e7fc      	b.n	8001a08 <BSP_AUDIO_OUT_Resume+0x18>
 8001a0e:	bf00      	nop
 8001a10:	20000750 	.word	0x20000750
 8001a14:	200048b4 	.word	0x200048b4

08001a18 <BSP_AUDIO_OUT_Stop>:
{
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <BSP_AUDIO_OUT_Stop+0x38>)
 8001a1e:	f002 f8e9 	bl	8003bf4 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <BSP_AUDIO_OUT_Stop+0x3c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4629      	mov	r1, r5
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2094      	movs	r0, #148	; 0x94
 8001a2c:	4798      	blx	r3
 8001a2e:	4604      	mov	r4, r0
 8001a30:	b958      	cbnz	r0, 8001a4a <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 8001a32:	2d01      	cmp	r5, #1
 8001a34:	d107      	bne.n	8001a46 <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 8001a36:	4628      	mov	r0, r5
 8001a38:	f000 fafa 	bl	8002030 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	2110      	movs	r1, #16
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <BSP_AUDIO_OUT_Stop+0x40>)
 8001a42:	f000 ff6d 	bl	8002920 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 8001a46:	4620      	mov	r0, r4
 8001a48:	e000      	b.n	8001a4c <BSP_AUDIO_OUT_Stop+0x34>
    return AUDIO_ERROR;
 8001a4a:	2001      	movs	r0, #1
}
 8001a4c:	bd38      	pop	{r3, r4, r5, pc}
 8001a4e:	bf00      	nop
 8001a50:	200048b4 	.word	0x200048b4
 8001a54:	20000750 	.word	0x20000750
 8001a58:	40020c00 	.word	0x40020c00

08001a5c <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001a5c:	b570      	push	{r4, r5, r6, lr}
    if(I2SFreq[index] == AudioFreq)
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <BSP_AUDIO_OUT_ClockConfig+0x50>)
{ 
 8001a60:	b086      	sub	sp, #24
 8001a62:	2400      	movs	r4, #0
  uint8_t index = 0, freqindex = 0xFF;
 8001a64:	26ff      	movs	r6, #255	; 0xff
 8001a66:	461d      	mov	r5, r3
    if(I2SFreq[index] == AudioFreq)
 8001a68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001a6c:	b2e2      	uxtb	r2, r4
 8001a6e:	3401      	adds	r4, #1
 8001a70:	4288      	cmp	r0, r1
 8001a72:	bf08      	it	eq
 8001a74:	4616      	moveq	r6, r2
  for(index = 0; index < 8; index++)
 8001a76:	2c08      	cmp	r4, #8
 8001a78:	d1f6      	bne.n	8001a68 <BSP_AUDIO_OUT_ClockConfig+0xc>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001a7a:	4668      	mov	r0, sp
 8001a7c:	f002 feb4 	bl	80047e8 <HAL_RCCEx_GetPeriphCLKConfig>
 8001a80:	2301      	movs	r3, #1
  if ((freqindex & 0x7) == 0)
 8001a82:	f016 0f07 	tst.w	r6, #7
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8001a86:	e9cd 3400 	strd	r3, r4, [sp]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001a8a:	bf0b      	itete	eq
 8001a8c:	eb05 0386 	addeq.w	r3, r5, r6, lsl #2
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001a90:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001a94:	6a1a      	ldreq	r2, [r3, #32]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001a96:	9302      	strne	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001a98:	bf06      	itte	eq
 8001a9a:	6c1b      	ldreq	r3, [r3, #64]	; 0x40
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001a9c:	9202      	streq	r2, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001a9e:	2303      	movne	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001aa0:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001aa2:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001aa4:	f002 fe00 	bl	80046a8 <HAL_RCCEx_PeriphCLKConfig>
}
 8001aa8:	b006      	add	sp, #24
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	08007878 	.word	0x08007878

08001ab0 <BSP_AUDIO_OUT_MspInit>:
{
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8001ab4:	4c3f      	ldr	r4, [pc, #252]	; (8001bb4 <BSP_AUDIO_OUT_MspInit+0x104>)
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	9500      	str	r5, [sp, #0]
 8001aba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac0:	6423      	str	r3, [r4, #64]	; 0x40
 8001ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8001acc:	9501      	str	r5, [sp, #4]
 8001ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6323      	str	r3, [r4, #48]	; 0x30
 8001ad6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8001ae0:	9502      	str	r5, [sp, #8]
 8001ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6323      	str	r3, [r4, #48]	; 0x30
 8001aea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001af2:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
  I2S3_WS_CLK_ENABLE();
 8001af6:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	e9cd c305 	strd	ip, r3, [sp, #20]
{
 8001afe:	4606      	mov	r6, r0
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001b00:	e9cd 5307 	strd	r5, r3, [sp, #28]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001b04:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8001b06:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001b08:	482b      	ldr	r0, [pc, #172]	; (8001bb8 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8001b0a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001b0c:	f000 fe3a 	bl	8002784 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001b10:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8001b12:	a905      	add	r1, sp, #20
 8001b14:	4829      	ldr	r0, [pc, #164]	; (8001bbc <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001b16:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8001b18:	f000 fe34 	bl	8002784 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8001b1c:	9503      	str	r5, [sp, #12]
 8001b1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001b20:	4825      	ldr	r0, [pc, #148]	; (8001bb8 <BSP_AUDIO_OUT_MspInit+0x108>)
  I2S3_MCK_CLK_ENABLE();
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6323      	str	r3, [r4, #48]	; 0x30
 8001b28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	9303      	str	r3, [sp, #12]
 8001b30:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001b32:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001b38:	f000 fe24 	bl	8002784 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8001b3c:	9504      	str	r5, [sp, #16]
 8001b3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8001b40:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 8001b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b46:	6323      	str	r3, [r4, #48]	; 0x30
 8001b48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	9304      	str	r3, [sp, #16]
 8001b50:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <BSP_AUDIO_OUT_MspInit+0x110>)
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d123      	bne.n	8001ba0 <BSP_AUDIO_OUT_MspInit+0xf0>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001b5a:	2240      	movs	r2, #64	; 0x40
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001b5c:	e9c3 2503 	strd	r2, r5, [r3, #12]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8001b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b68:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8001b6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8001b70:	e9c3 2507 	strd	r2, r5, [r3, #28]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001b74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b78:	2204      	movs	r2, #4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8001b7a:	461c      	mov	r4, r3
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001b7c:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001b80:	2203      	movs	r2, #3
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001b82:	e9c3 250b 	strd	r2, r5, [r3, #44]	; 0x2c
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <BSP_AUDIO_OUT_MspInit+0x118>)
 8001b88:	f844 2f04 	str.w	r2, [r4, #4]!
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001b8c:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 8001b8e:	4620      	mov	r0, r4
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8001b90:	609d      	str	r5, [r3, #8]
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001b92:	635d      	str	r5, [r3, #52]	; 0x34
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001b94:	63de      	str	r6, [r3, #60]	; 0x3c
    HAL_DMA_DeInit(&hdma_i2sTx);
 8001b96:	f000 fb5d 	bl	8002254 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f000 fadc 	bl	8002158 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	210e      	movs	r1, #14
 8001ba4:	202f      	movs	r0, #47	; 0x2f
 8001ba6:	f000 fa69 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8001baa:	202f      	movs	r0, #47	; 0x2f
 8001bac:	f000 fa9a 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 8001bb0:	b00a      	add	sp, #40	; 0x28
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40003c00 	.word	0x40003c00
 8001bc4:	20000750 	.word	0x20000750
 8001bc8:	400260b8 	.word	0x400260b8

08001bcc <BSP_AUDIO_OUT_Init>:
{    
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001bd0:	4c16      	ldr	r4, [pc, #88]	; (8001c2c <BSP_AUDIO_OUT_Init+0x60>)
{    
 8001bd2:	4615      	mov	r5, r2
 8001bd4:	4607      	mov	r7, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4620      	mov	r0, r4
{    
 8001bda:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7ff ff3d 	bl	8001a5c <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <BSP_AUDIO_OUT_Init+0x64>)
 8001be4:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8001be6:	4620      	mov	r0, r4
 8001be8:	f002 f9b7 	bl	8003f5a <HAL_I2S_GetState>
 8001bec:	4601      	mov	r1, r0
 8001bee:	b910      	cbnz	r0, 8001bf6 <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff ff5d 	bl	8001ab0 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f7ff fea2 	bl	8001940 <I2S3_Init>
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	b118      	cbz	r0, 8001c08 <BSP_AUDIO_OUT_Init+0x3c>
    ret = AUDIO_ERROR;
 8001c00:	2401      	movs	r4, #1
}
 8001c02:	4620      	mov	r0, r4
 8001c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8001c08:	4e0a      	ldr	r6, [pc, #40]	; (8001c34 <BSP_AUDIO_OUT_Init+0x68>)
 8001c0a:	2094      	movs	r0, #148	; 0x94
 8001c0c:	68b3      	ldr	r3, [r6, #8]
 8001c0e:	4798      	blx	r3
 8001c10:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8001c14:	28e0      	cmp	r0, #224	; 0xe0
 8001c16:	d1f3      	bne.n	8001c00 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <BSP_AUDIO_OUT_Init+0x6c>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001c1a:	4642      	mov	r2, r8
      pAudioDrv = &cs43l22_drv; 
 8001c1c:	601e      	str	r6, [r3, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001c1e:	4639      	mov	r1, r7
 8001c20:	6836      	ldr	r6, [r6, #0]
 8001c22:	462b      	mov	r3, r5
 8001c24:	2094      	movs	r0, #148	; 0x94
 8001c26:	47b0      	blx	r6
 8001c28:	e7eb      	b.n	8001c02 <BSP_AUDIO_OUT_Init+0x36>
 8001c2a:	bf00      	nop
 8001c2c:	200048b4 	.word	0x200048b4
 8001c30:	40003c00 	.word	0x40003c00
 8001c34:	20000014 	.word	0x20000014
 8001c38:	20000750 	.word	0x20000750

08001c3c <HAL_I2S_TxCpltCallback>:
{
 8001c3c:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8001c3e:	6802      	ldr	r2, [r0, #0]
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_I2S_TxCpltCallback+0x10>)
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d101      	bne.n	8001c4a <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8001c46:	f7ff f8cd 	bl	8000de4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001c4a:	bd08      	pop	{r3, pc}
 8001c4c:	40003c00 	.word	0x40003c00

08001c50 <HAL_I2S_TxHalfCpltCallback>:
{
 8001c50:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8001c52:	6802      	ldr	r2, [r0, #0]
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <HAL_I2S_TxHalfCpltCallback+0x10>)
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d101      	bne.n	8001c5e <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001c5a:	f7ff f8bd 	bl	8000dd8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001c5e:	bd08      	pop	{r3, pc}
 8001c60:	40003c00 	.word	0x40003c00

08001c64 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8001c64:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8001c66:	b28a      	uxth	r2, r1
 8001c68:	4601      	mov	r1, r0
 8001c6a:	4802      	ldr	r0, [pc, #8]	; (8001c74 <BSP_AUDIO_IN_Record+0x10>)
 8001c6c:	f001 fede 	bl	8003a2c <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001c70:	2000      	movs	r0, #0
 8001c72:	bd08      	pop	{r3, pc}
 8001c74:	200048fc 	.word	0x200048fc

08001c78 <BSP_AUDIO_IN_Stop>:

/**
  * @brief  Stops audio recording.
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 8001c78:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 8001c7a:	4802      	ldr	r0, [pc, #8]	; (8001c84 <BSP_AUDIO_IN_Stop+0xc>)
 8001c7c:	f001 ffba 	bl	8003bf4 <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001c80:	2000      	movs	r0, #0
 8001c82:	bd08      	pop	{r3, pc}
 8001c84:	200048fc 	.word	0x200048fc

08001c88 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8001c88:	b510      	push	{r4, lr}
  uint16_t AppPDM[INTERNAL_BUFF_SIZE/2];
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8001c8a:	2300      	movs	r3, #0
{
 8001c8c:	b0a0      	sub	sp, #128	; 0x80
 8001c8e:	460c      	mov	r4, r1
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 8001c90:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8001c94:	020a      	lsls	r2, r1, #8
 8001c96:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 8001c9a:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d1f5      	bne.n	8001c90 <BSP_AUDIO_IN_PDMToPCM+0x8>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
    PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <BSP_AUDIO_IN_PDMToPCM+0x3c>)
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	4668      	mov	r0, sp
 8001caa:	f005 f81b 	bl	8006ce4 <PDM_Filter>
 8001cae:	2300      	movs	r3, #0
  }
  
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8001cb0:	5ae1      	ldrh	r1, [r4, r3]
 8001cb2:	18e2      	adds	r2, r4, r3
 8001cb4:	3304      	adds	r3, #4
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8001cb8:	8051      	strh	r1, [r2, #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8001cba:	d1f9      	bne.n	8001cb0 <BSP_AUDIO_IN_PDMToPCM+0x28>
  }
	
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	b020      	add	sp, #128	; 0x80
 8001cc0:	bd10      	pop	{r4, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000481c 	.word	0x2000481c

08001cc8 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;
  
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001cce:	4668      	mov	r0, sp
 8001cd0:	f002 fd8a 	bl	80047e8 <HAL_RCCEx_GetPeriphCLKConfig>
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8001cd4:	2308      	movs	r3, #8
  if ((AudioFreq & 0x7) == 0)
 8001cd6:	f014 0f07 	tst.w	r4, #7
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8001cda:	f04f 0201 	mov.w	r2, #1
 8001cde:	e9cd 2300 	strd	r2, r3, [sp]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8001ce2:	bf0b      	itete	eq
 8001ce4:	23c0      	moveq	r3, #192	; 0xc0
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8001ce6:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8001cea:	9302      	streq	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8001cec:	9302      	strne	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 8001cee:	bf0c      	ite	eq
 8001cf0:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8001cf2:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001cf4:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8001cf6:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001cf8:	f002 fcd6 	bl	80046a8 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001cfc:	b006      	add	sp, #24
 8001cfe:	bd10      	pop	{r4, pc}

08001d00 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8001d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d04:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8001d06:	4c3b      	ldr	r4, [pc, #236]	; (8001df4 <BSP_AUDIO_IN_MspInit+0xf4>)
 8001d08:	2500      	movs	r5, #0
 8001d0a:	9501      	str	r5, [sp, #4]
 8001d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d12:	6423      	str	r3, [r4, #64]	; 0x40
 8001d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8001d1e:	9502      	str	r5, [sp, #8]
 8001d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	6323      	str	r3, [r4, #48]	; 0x30
 8001d28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8001d32:	9503      	str	r5, [sp, #12]
 8001d34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8001d3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	9303      	str	r3, [sp, #12]
{
 8001d44:	4606      	mov	r6, r0
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8001d46:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d48:	482b      	ldr	r0, [pc, #172]	; (8001df8 <BSP_AUDIO_IN_MspInit+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 8001d4c:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d50:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 8001d52:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001d5a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 8001d5c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 8001d5e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d62:	f000 fd0f 	bl	8002784 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 8001d66:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001d68:	a905      	add	r1, sp, #20
 8001d6a:	4824      	ldr	r0, [pc, #144]	; (8001dfc <BSP_AUDIO_IN_MspInit+0xfc>)
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 8001d6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
 8001d6e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001d72:	f000 fd07 	bl	8002784 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 8001d76:	9504      	str	r5, [sp, #16]
 8001d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 8001d7a:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 8001d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d80:	6323      	str	r3, [r4, #48]	; 0x30
 8001d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d88:	9304      	str	r3, [sp, #16]
 8001d8a:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <BSP_AUDIO_IN_MspInit+0x100>)
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d124      	bne.n	8001ddc <BSP_AUDIO_IN_MspInit+0xdc>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 8001d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9c:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001da0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8001da8:	461c      	mov	r4, r3
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001daa:	e9c3 0220 	strd	r0, r2, [r3, #128]	; 0x80
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001dae:	2203      	movs	r2, #3
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001db0:	e9c3 2523 	strd	r2, r5, [r3, #140]	; 0x8c
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <BSP_AUDIO_IN_MspInit+0x108>)
 8001db6:	f844 2f64 	str.w	r2, [r4, #100]!
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8001dba:	63f4      	str	r4, [r6, #60]	; 0x3c
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 8001dbc:	4620      	mov	r0, r4
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001dbe:	e9c3 551a 	strd	r5, r5, [r3, #104]	; 0x68
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8001dc2:	e9c3 571c 	strd	r5, r7, [r3, #112]	; 0x70
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001dc6:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8001dca:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8001dce:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
    HAL_DMA_DeInit(&hdma_i2sRx);
 8001dd2:	f000 fa3f 	bl	8002254 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f000 f9be 	bl	8002158 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	210f      	movs	r1, #15
 8001de0:	200e      	movs	r0, #14
 8001de2:	f000 f94b 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8001de6:	200e      	movs	r0, #14
 8001de8:	f000 f97c 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 8001dec:	b00a      	add	sp, #40	; 0x28
 8001dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40003800 	.word	0x40003800
 8001e04:	20000750 	.word	0x20000750
 8001e08:	40026058 	.word	0x40026058

08001e0c <BSP_AUDIO_IN_Init>:
{  
 8001e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8001e10:	4601      	mov	r1, r0
{  
 8001e12:	b087      	sub	sp, #28
 8001e14:	4606      	mov	r6, r0
 8001e16:	4692      	mov	sl, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8001e18:	4835      	ldr	r0, [pc, #212]	; (8001ef0 <BSP_AUDIO_IN_Init+0xe4>)
 8001e1a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001f00 <BSP_AUDIO_IN_Init+0xf4>
 8001e1e:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8001f04 <BSP_AUDIO_IN_Init+0xf8>
 8001e22:	2200      	movs	r2, #0
 8001e24:	f7ff ff50 	bl	8001cc8 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8001e28:	2400      	movs	r4, #0
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <BSP_AUDIO_IN_Init+0xe8>)
 8001e2c:	9405      	str	r4, [sp, #20]
 8001e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  for(index = 0; index < ChnlNbrIn; index++)
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001e38:	4a2f      	ldr	r2, [pc, #188]	; (8001ef8 <BSP_AUDIO_IN_Init+0xec>)
  __HAL_RCC_CRC_CLK_ENABLE();
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3e:	9305      	str	r3, [sp, #20]
 8001e40:	f04f 0906 	mov.w	r9, #6
 8001e44:	9b05      	ldr	r3, [sp, #20]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001e46:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8001e4a:	fb09 f90a 	mul.w	r9, r9, sl
 8001e4e:	fbb6 f7f7 	udiv	r7, r6, r7
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8001e52:	4623      	mov	r3, r4
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001e54:	b2bf      	uxth	r7, r7
  for(index = 0; index < ChnlNbrIn; index++)
 8001e56:	454c      	cmp	r4, r9
 8001e58:	f108 054c 	add.w	r5, r8, #76	; 0x4c
 8001e5c:	d123      	bne.n	8001ea6 <BSP_AUDIO_IN_Init+0x9a>
  hAudioInI2s.Instance = I2S2;
 8001e5e:	4c24      	ldr	r4, [pc, #144]	; (8001ef0 <BSP_AUDIO_IN_Init+0xe4>)
 8001e60:	4d26      	ldr	r5, [pc, #152]	; (8001efc <BSP_AUDIO_IN_Init+0xf0>)
 8001e62:	6025      	str	r5, [r4, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 8001e64:	4620      	mov	r0, r4
 8001e66:	f002 f878 	bl	8003f5a <HAL_I2S_GetState>
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	b910      	cbnz	r0, 8001e74 <BSP_AUDIO_IN_Init+0x68>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f7ff ff46 	bl	8001d00 <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001e74:	69eb      	ldr	r3, [r5, #28]
  hAudioInI2s.Instance          = I2S2;
 8001e76:	6025      	str	r5, [r4, #0]
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e7c:	61eb      	str	r3, [r5, #28]
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8001e7e:	2500      	movs	r5, #0
 8001e80:	2308      	movs	r3, #8
 8001e82:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001e86:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e8a:	2320      	movs	r3, #32
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8001e8c:	0076      	lsls	r6, r6, #1
  
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <BSP_AUDIO_IN_Init+0xe4>)
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8001e90:	6166      	str	r6, [r4, #20]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8001e92:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001e96:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001e9a:	f001 fcd3 	bl	8003844 <HAL_I2S_Init>
}
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	b007      	add	sp, #28
 8001ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001ea6:	2102      	movs	r1, #2
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8001ea8:	f825 3c4c 	strh.w	r3, [r5, #-76]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8001eac:	f825 3c4a 	strh.w	r3, [r5, #-74]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001eb0:	f845 2c48 	str.w	r2, [r5, #-72]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001eb4:	f825 1c42 	strh.w	r1, [r5, #-66]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001eb8:	4640      	mov	r0, r8
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001eba:	f825 ac44 	strh.w	sl, [r5, #-68]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8001ebe:	9303      	str	r3, [sp, #12]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001ec0:	9202      	str	r2, [sp, #8]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001ec2:	9101      	str	r1, [sp, #4]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001ec4:	f004 fd92 	bl	80069ec <PDM_Filter_Init>
 8001ec8:	eb04 000b 	add.w	r0, r4, fp
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001ecc:	9901      	ldr	r1, [sp, #4]
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001ece:	8047      	strh	r7, [r0, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 8001ed0:	f04f 0c18 	mov.w	ip, #24
 8001ed4:	f8a0 c004 	strh.w	ip, [r0, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001ed8:	f824 100b 	strh.w	r1, [r4, fp]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001edc:	4601      	mov	r1, r0
 8001ede:	4640      	mov	r0, r8
 8001ee0:	f004 fe0e 	bl	8006b00 <PDM_Filter_setConfig>
 8001ee4:	3406      	adds	r4, #6
 8001ee6:	46a8      	mov	r8, r5
 8001ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001eec:	e7b3      	b.n	8001e56 <BSP_AUDIO_IN_Init+0x4a>
 8001eee:	bf00      	nop
 8001ef0:	200048fc 	.word	0x200048fc
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	7e809d48 	.word	0x7e809d48
 8001efc:	40003800 	.word	0x40003800
 8001f00:	2000481c 	.word	0x2000481c
 8001f04:	20004810 	.word	0x20004810

08001f08 <HAL_I2S_RxCpltCallback>:
{
 8001f08:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001f0a:	f7ff f85d 	bl	8000fc8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001f0e:	bd08      	pop	{r3, pc}

08001f10 <HAL_I2S_RxHalfCpltCallback>:
{
 8001f10:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001f12:	f7ff f899 	bl	8001048 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001f16:	bd08      	pop	{r3, pc}

08001f18 <BSP_AUDIO_IN_Error_Callback>:
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8001f1c:	6802      	ldr	r2, [r0, #0]
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_I2S_ErrorCallback+0x20>)
 8001f20:	429a      	cmp	r2, r3
{
 8001f22:	b510      	push	{r4, lr}
 8001f24:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8001f26:	d101      	bne.n	8001f2c <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001f28:	f7fe ff68 	bl	8000dfc <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_I2S_ErrorCallback+0x24>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d101      	bne.n	8001f38 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001f34:	f7ff fff0 	bl	8001f18 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001f38:	bd10      	pop	{r4, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40003c00 	.word	0x40003c00
 8001f40:	40003800 	.word	0x40003800

08001f44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f44:	490f      	ldr	r1, [pc, #60]	; (8001f84 <SystemInit+0x40>)
 8001f46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <SystemInit+0x44>)
 8001f54:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f56:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001f5e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <SystemInit+0x48>)
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f76:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f78:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f7e:	608b      	str	r3, [r1, #8]
#endif
}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	24003010 	.word	0x24003010

08001f90 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_InitTick+0x3c>)
 8001f98:	4e0e      	ldr	r6, [pc, #56]	; (8001fd4 <HAL_InitTick+0x40>)
{
 8001f9a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa0:	7830      	ldrb	r0, [r6, #0]
 8001fa2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fa6:	6810      	ldr	r0, [r2, #0]
 8001fa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fac:	f000 f8a8 	bl	8002100 <HAL_SYSTICK_Config>
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	b950      	cbnz	r0, 8001fca <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb4:	2d0f      	cmp	r5, #15
 8001fb6:	d808      	bhi.n	8001fca <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 f85c 	bl	800207c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	6075      	str	r5, [r6, #4]
 8001fc6:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001fca:	2001      	movs	r0, #1
 8001fcc:	e7fc      	b.n	8001fc8 <HAL_InitTick+0x34>
 8001fce:	bf00      	nop
 8001fd0:	20000094 	.word	0x20000094
 8001fd4:	20000098 	.word	0x20000098

08001fd8 <HAL_Init>:
{
 8001fd8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x30>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 f82f 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f7ff ffca 	bl	8001f94 <HAL_InitTick>
  HAL_MspInit();
 8002000:	f7ff ffc6 	bl	8001f90 <HAL_MspInit>
}
 8002004:	2000      	movs	r0, #0
 8002006:	bd08      	pop	{r3, pc}
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_IncTick+0x10>)
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_IncTick+0x14>)
 8002010:	6811      	ldr	r1, [r2, #0]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	440b      	add	r3, r1
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20004944 	.word	0x20004944
 8002020:	20000098 	.word	0x20000098

08002024 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002024:	4b01      	ldr	r3, [pc, #4]	; (800202c <HAL_GetTick+0x8>)
 8002026:	6818      	ldr	r0, [r3, #0]
}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20004944 	.word	0x20004944

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff fff6 	bl	8002024 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	bf1c      	itt	ne
 800203c:	4b05      	ldrne	r3, [pc, #20]	; (8002054 <HAL_Delay+0x24>)
 800203e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002042:	bf18      	it	ne
 8002044:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002046:	f7ff ffed 	bl	8002024 <HAL_GetTick>
 800204a:	1b40      	subs	r0, r0, r5
 800204c:	42a0      	cmp	r0, r4
 800204e:	d3fa      	bcc.n	8002046 <HAL_Delay+0x16>
  {
  }
}
 8002050:	bd38      	pop	{r3, r4, r5, pc}
 8002052:	bf00      	nop
 8002054:	20000098 	.word	0x20000098

08002058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800205a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	0200      	lsls	r0, r0, #8
 800206a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002072:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002074:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b570      	push	{r4, r5, r6, lr}
 8002080:	68dc      	ldr	r4, [r3, #12]
 8002082:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002086:	f1c4 0507 	rsb	r5, r4, #7
 800208a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	bf28      	it	cs
 8002092:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002098:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	bf8c      	ite	hi
 80020a0:	3c03      	subhi	r4, #3
 80020a2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	ea21 0303 	bic.w	r3, r1, r3
 80020a8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020aa:	fa06 f404 	lsl.w	r4, r6, r4
 80020ae:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80020b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	bfa8      	it	ge
 80020ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80020be:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	bfbc      	itt	lt
 80020c4:	f000 000f 	andlt.w	r0, r0, #15
 80020c8:	4a05      	ldrlt	r2, [pc, #20]	; (80020e0 <HAL_NVIC_SetPriority+0x64>)
 80020ca:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	bfaa      	itet	ge
 80020ce:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00
 80020e0:	e000ed14 	.word	0xe000ed14

080020e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020e4:	2800      	cmp	r0, #0
 80020e6:	db08      	blt.n	80020fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e8:	0942      	lsrs	r2, r0, #5
 80020ea:	2301      	movs	r3, #1
 80020ec:	f000 001f 	and.w	r0, r0, #31
 80020f0:	fa03 f000 	lsl.w	r0, r3, r0
 80020f4:	4b01      	ldr	r3, [pc, #4]	; (80020fc <HAL_NVIC_EnableIRQ+0x18>)
 80020f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100

08002100 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	3801      	subs	r0, #1
 8002102:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002106:	d20a      	bcs.n	800211e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	21f0      	movs	r1, #240	; 0xf0
 8002110:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800211e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800212c:	6803      	ldr	r3, [r0, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002134:	f023 0303 	bic.w	r3, r3, #3
 8002138:	2118      	movs	r1, #24
 800213a:	3a10      	subs	r2, #16
 800213c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002140:	4904      	ldr	r1, [pc, #16]	; (8002154 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002142:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002144:	bf88      	it	hi
 8002146:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002148:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800214a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800214e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	080078f0 	.word	0x080078f0

08002158 <HAL_DMA_Init>:
{
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ff62 	bl	8002024 <HAL_GetTick>
 8002160:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002162:	2c00      	cmp	r4, #0
 8002164:	d071      	beq.n	800224a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8002166:	2300      	movs	r3, #0
 8002168:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800216c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	6821      	ldr	r1, [r4, #0]
 800217e:	680b      	ldr	r3, [r1, #0]
 8002180:	07d8      	lsls	r0, r3, #31
 8002182:	d43c      	bmi.n	80021fe <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8002184:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002186:	4d32      	ldr	r5, [pc, #200]	; (8002250 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002188:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800218a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002190:	4313      	orrs	r3, r2
 8002192:	68e2      	ldr	r2, [r4, #12]
 8002194:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002196:	6922      	ldr	r2, [r4, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	6962      	ldr	r2, [r4, #20]
 800219c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219e:	69e2      	ldr	r2, [r4, #28]
 80021a0:	4303      	orrs	r3, r0
 80021a2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a4:	6a22      	ldr	r2, [r4, #32]
 80021a6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021aa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ac:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021b0:	bf02      	ittt	eq
 80021b2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80021b6:	4335      	orreq	r5, r6
 80021b8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80021ba:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80021bc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021be:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021c0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80021c4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c8:	d10b      	bne.n	80021e2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80021ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80021ce:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d0:	b13d      	cbz	r5, 80021e2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d2:	b9f8      	cbnz	r0, 8002214 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80021d4:	2a01      	cmp	r2, #1
 80021d6:	d02d      	beq.n	8002234 <HAL_DMA_Init+0xdc>
 80021d8:	d301      	bcc.n	80021de <HAL_DMA_Init+0x86>
 80021da:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021dc:	d101      	bne.n	80021e2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021de:	01ea      	lsls	r2, r5, #7
 80021e0:	d42b      	bmi.n	800223a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80021e2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff ffa1 	bl	800212c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80021ec:	233f      	movs	r3, #63	; 0x3f
 80021ee:	4093      	lsls	r3, r2
 80021f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80021f4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80021f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80021fc:	e009      	b.n	8002212 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fe:	f7ff ff11 	bl	8002024 <HAL_GetTick>
 8002202:	1b40      	subs	r0, r0, r5
 8002204:	2805      	cmp	r0, #5
 8002206:	d9b9      	bls.n	800217c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002208:	2320      	movs	r3, #32
 800220a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002212:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002214:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002218:	d113      	bne.n	8002242 <HAL_DMA_Init+0xea>
    switch (tmp)
 800221a:	2a03      	cmp	r2, #3
 800221c:	d8e1      	bhi.n	80021e2 <HAL_DMA_Init+0x8a>
 800221e:	a001      	add	r0, pc, #4	; (adr r0, 8002224 <HAL_DMA_Init+0xcc>)
 8002220:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002224:	0800223b 	.word	0x0800223b
 8002228:	080021df 	.word	0x080021df
 800222c:	0800223b 	.word	0x0800223b
 8002230:	08002235 	.word	0x08002235
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002234:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002238:	d1d3      	bne.n	80021e2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223a:	2340      	movs	r3, #64	; 0x40
 800223c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800223e:	2001      	movs	r0, #1
 8002240:	e7e5      	b.n	800220e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8002242:	2a02      	cmp	r2, #2
 8002244:	d9f9      	bls.n	800223a <HAL_DMA_Init+0xe2>
 8002246:	2a03      	cmp	r2, #3
 8002248:	e7c8      	b.n	80021dc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800224a:	2001      	movs	r0, #1
 800224c:	e7e1      	b.n	8002212 <HAL_DMA_Init+0xba>
 800224e:	bf00      	nop
 8002250:	f010803f 	.word	0xf010803f

08002254 <HAL_DMA_DeInit>:
{
 8002254:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002256:	4605      	mov	r5, r0
 8002258:	b320      	cbz	r0, 80022a4 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800225a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800225e:	b2e4      	uxtb	r4, r4
 8002260:	2c02      	cmp	r4, #2
 8002262:	d01d      	beq.n	80022a0 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002264:	6803      	ldr	r3, [r0, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 800226c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800226e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8002270:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002272:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002274:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002276:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002278:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800227a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 800227c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	f7ff ff55 	bl	800212c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002282:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002284:	233f      	movs	r3, #63	; 0x3f
 8002286:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8002288:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800228c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8002290:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002294:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002296:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002298:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800229c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 80022a0:	4620      	mov	r0, r4
 80022a2:	e000      	b.n	80022a6 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 80022a4:	2001      	movs	r0, #1
}
 80022a6:	bd38      	pop	{r3, r4, r5, pc}

080022a8 <HAL_DMA_Start_IT>:
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80022aa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80022ae:	2c01      	cmp	r4, #1
 80022b0:	d032      	beq.n	8002318 <HAL_DMA_Start_IT+0x70>
 80022b2:	2401      	movs	r4, #1
 80022b4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80022b8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022bc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80022be:	2c01      	cmp	r4, #1
 80022c0:	f04f 0500 	mov.w	r5, #0
 80022c4:	f04f 0402 	mov.w	r4, #2
 80022c8:	d124      	bne.n	8002314 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ca:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ce:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022d2:	6825      	ldr	r5, [r4, #0]
 80022d4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80022d8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80022da:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022dc:	6883      	ldr	r3, [r0, #8]
 80022de:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80022e0:	bf0e      	itee	eq
 80022e2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80022e4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80022e6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80022ea:	bf08      	it	eq
 80022ec:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ee:	233f      	movs	r3, #63	; 0x3f
 80022f0:	4093      	lsls	r3, r2
 80022f2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	f043 0316 	orr.w	r3, r3, #22
 80022fa:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80022fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022fe:	b11b      	cbz	r3, 8002308 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2000      	movs	r0, #0
}
 8002312:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002314:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002318:	2002      	movs	r0, #2
 800231a:	e7fa      	b.n	8002312 <HAL_DMA_Start_IT+0x6a>

0800231c <HAL_DMA_Abort>:
{
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002320:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002322:	f7ff fe7f 	bl	8002024 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002326:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800232a:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 800232c:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	d006      	beq.n	800233e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002334:	2300      	movs	r3, #0
 8002336:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
}
 800233c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f022 0216 	bic.w	r2, r2, #22
 8002346:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800234e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002350:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002352:	b90a      	cbnz	r2, 8002358 <HAL_DMA_Abort+0x3c>
 8002354:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002356:	b11a      	cbz	r2, 8002360 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f022 0208 	bic.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f010 0001 	ands.w	r0, r0, #1
 8002370:	d109      	bne.n	8002386 <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002372:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002374:	233f      	movs	r3, #63	; 0x3f
 8002376:	4093      	lsls	r3, r2
 8002378:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800237c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002380:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002384:	e7da      	b.n	800233c <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002386:	f7ff fe4d 	bl	8002024 <HAL_GetTick>
 800238a:	1b80      	subs	r0, r0, r6
 800238c:	2805      	cmp	r0, #5
 800238e:	d9eb      	bls.n	8002368 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002390:	2320      	movs	r3, #32
 8002392:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002394:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8002396:	2300      	movs	r3, #0
 8002398:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80023a0:	e7cc      	b.n	800233c <HAL_DMA_Abort+0x20>
	...

080023a4 <HAL_DMA_IRQHandler>:
{
 80023a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023aa:	4b5c      	ldr	r3, [pc, #368]	; (800251c <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ac:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80023ae:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80023b2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b4:	2208      	movs	r2, #8
 80023b6:	409a      	lsls	r2, r3
 80023b8:	4232      	tst	r2, r6
{
 80023ba:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	d00c      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023be:	6801      	ldr	r1, [r0, #0]
 80023c0:	6808      	ldr	r0, [r1, #0]
 80023c2:	0740      	lsls	r0, r0, #29
 80023c4:	d508      	bpl.n	80023d8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023c6:	6808      	ldr	r0, [r1, #0]
 80023c8:	f020 0004 	bic.w	r0, r0, #4
 80023cc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023ce:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	2201      	movs	r2, #1
 80023da:	409a      	lsls	r2, r3
 80023dc:	4232      	tst	r2, r6
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023e0:	6821      	ldr	r1, [r4, #0]
 80023e2:	6949      	ldr	r1, [r1, #20]
 80023e4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023e6:	bf41      	itttt	mi
 80023e8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ea:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80023ec:	f042 0202 	orrmi.w	r2, r2, #2
 80023f0:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	4232      	tst	r2, r6
 80023f8:	d008      	beq.n	800240c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fa:	6821      	ldr	r1, [r4, #0]
 80023fc:	6809      	ldr	r1, [r1, #0]
 80023fe:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002400:	bf41      	itttt	mi
 8002402:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002404:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002406:	f042 0204 	orrmi.w	r2, r2, #4
 800240a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	2210      	movs	r2, #16
 800240e:	409a      	lsls	r2, r3
 8002410:	4232      	tst	r2, r6
 8002412:	d010      	beq.n	8002436 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	0709      	lsls	r1, r1, #28
 800241a:	d50c      	bpl.n	8002436 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800241c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	0350      	lsls	r0, r2, #13
 8002422:	d537      	bpl.n	8002494 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0319      	lsls	r1, r3, #12
 8002428:	d401      	bmi.n	800242e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800242a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800242c:	e000      	b.n	8002430 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800242e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002430:	b10b      	cbz	r3, 8002436 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002432:	4620      	mov	r0, r4
 8002434:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002436:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002438:	2220      	movs	r2, #32
 800243a:	408a      	lsls	r2, r1
 800243c:	4232      	tst	r2, r6
 800243e:	d03a      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	06c6      	lsls	r6, r0, #27
 8002446:	d536      	bpl.n	80024b6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002448:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800244a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800244e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002450:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002452:	d127      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002454:	f022 0216 	bic.w	r2, r2, #22
 8002458:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002460:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002462:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002464:	b90a      	cbnz	r2, 800246a <HAL_DMA_IRQHandler+0xc6>
 8002466:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002468:	b11a      	cbz	r2, 8002472 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f022 0208 	bic.w	r2, r2, #8
 8002470:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002472:	233f      	movs	r3, #63	; 0x3f
 8002474:	408b      	lsls	r3, r1
 8002476:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8002478:	2300      	movs	r3, #0
 800247a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800247e:	2301      	movs	r3, #1
 8002480:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002484:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002486:	2b00      	cmp	r3, #0
 8002488:	d045      	beq.n	8002516 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800248a:	4620      	mov	r0, r4
}
 800248c:	b003      	add	sp, #12
 800248e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002492:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002498:	bf5e      	ittt	pl
 800249a:	681a      	ldrpl	r2, [r3, #0]
 800249c:	f022 0208 	bicpl.w	r2, r2, #8
 80024a0:	601a      	strpl	r2, [r3, #0]
 80024a2:	e7c2      	b.n	800242a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a4:	0350      	lsls	r0, r2, #13
 80024a6:	d527      	bpl.n	80024f8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0319      	lsls	r1, r3, #12
 80024ac:	d431      	bmi.n	8002512 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80024ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80024b0:	b10b      	cbz	r3, 80024b6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80024b2:	4620      	mov	r0, r4
 80024b4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024b8:	b36b      	cbz	r3, 8002516 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024bc:	07da      	lsls	r2, r3, #31
 80024be:	d519      	bpl.n	80024f4 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80024c2:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024d0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80024d4:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80024d8:	9b01      	ldr	r3, [sp, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	42bb      	cmp	r3, r7
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	d802      	bhi.n	80024e8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	07db      	lsls	r3, r3, #31
 80024e6:	d4f7      	bmi.n	80024d8 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80024e8:	2300      	movs	r3, #0
 80024ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80024f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80024f6:	e7c6      	b.n	8002486 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80024fe:	d108      	bne.n	8002512 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	f021 0110 	bic.w	r1, r1, #16
 8002506:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002508:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800250a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800250e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002512:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002514:	e7cc      	b.n	80024b0 <HAL_DMA_IRQHandler+0x10c>
}
 8002516:	b003      	add	sp, #12
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251a:	bf00      	nop
 800251c:	20000094 	.word	0x20000094

08002520 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002520:	4909      	ldr	r1, [pc, #36]	; (8002548 <FLASH_Program_DoubleWord+0x28>)
{
 8002522:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002524:	690c      	ldr	r4, [r1, #16]
 8002526:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800252a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800252c:	690c      	ldr	r4, [r1, #16]
 800252e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8002532:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002534:	690c      	ldr	r4, [r1, #16]
 8002536:	f044 0401 	orr.w	r4, r4, #1
 800253a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800253c:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800253e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002542:	6043      	str	r3, [r0, #4]
}
 8002544:	bd10      	pop	{r4, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00

0800254c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <FLASH_Program_Word+0x20>)
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002554:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8002566:	6001      	str	r1, [r0, #0]
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00

08002570 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <FLASH_Program_HalfWord+0x20>)
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002578:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002580:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800258a:	8001      	strh	r1, [r0, #0]
}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00

08002594 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <FLASH_SetErrorCode+0x84>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	06d0      	lsls	r0, r2, #27
 800259a:	d506      	bpl.n	80025aa <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800259c:	491f      	ldr	r1, [pc, #124]	; (800261c <FLASH_SetErrorCode+0x88>)
 800259e:	69ca      	ldr	r2, [r1, #28]
 80025a0:	f042 0210 	orr.w	r2, r2, #16
 80025a4:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80025a6:	2210      	movs	r2, #16
 80025a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	0691      	lsls	r1, r2, #26
 80025ae:	d506      	bpl.n	80025be <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025b0:	491a      	ldr	r1, [pc, #104]	; (800261c <FLASH_SetErrorCode+0x88>)
 80025b2:	69ca      	ldr	r2, [r1, #28]
 80025b4:	f042 0208 	orr.w	r2, r2, #8
 80025b8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80025ba:	2220      	movs	r2, #32
 80025bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <FLASH_SetErrorCode+0x84>)
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	0652      	lsls	r2, r2, #25
 80025c4:	d506      	bpl.n	80025d4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80025c6:	4915      	ldr	r1, [pc, #84]	; (800261c <FLASH_SetErrorCode+0x88>)
 80025c8:	69ca      	ldr	r2, [r1, #28]
 80025ca:	f042 0204 	orr.w	r2, r2, #4
 80025ce:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	0610      	lsls	r0, r2, #24
 80025d8:	d506      	bpl.n	80025e8 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80025da:	4910      	ldr	r1, [pc, #64]	; (800261c <FLASH_SetErrorCode+0x88>)
 80025dc:	69ca      	ldr	r2, [r1, #28]
 80025de:	f042 0202 	orr.w	r2, r2, #2
 80025e2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <FLASH_SetErrorCode+0x84>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	05d1      	lsls	r1, r2, #23
 80025ee:	d507      	bpl.n	8002600 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80025f0:	490a      	ldr	r1, [pc, #40]	; (800261c <FLASH_SetErrorCode+0x88>)
 80025f2:	69ca      	ldr	r2, [r1, #28]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80025fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025fe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	0792      	lsls	r2, r2, #30
 8002604:	d506      	bpl.n	8002614 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002606:	4905      	ldr	r1, [pc, #20]	; (800261c <FLASH_SetErrorCode+0x88>)
 8002608:	69ca      	ldr	r2, [r1, #28]
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002610:	2202      	movs	r2, #2
 8002612:	60da      	str	r2, [r3, #12]
  }
}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00
 800261c:	20004948 	.word	0x20004948

08002620 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_FLASH_Unlock+0x1c>)
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002626:	bfbf      	itttt	lt
 8002628:	4a05      	ldrlt	r2, [pc, #20]	; (8002640 <HAL_FLASH_Unlock+0x20>)
 800262a:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800262c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8002630:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002632:	bfba      	itte	lt
 8002634:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	0fc0      	lsrlt	r0, r0, #31
 8002638:	2000      	movge	r0, #0
}
 800263a:	4770      	bx	lr
 800263c:	40023c00 	.word	0x40023c00
 8002640:	45670123 	.word	0x45670123

08002644 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8002644:	4a03      	ldr	r2, [pc, #12]	; (8002654 <HAL_FLASH_Lock+0x10>)
 8002646:	6913      	ldr	r3, [r2, #16]
 8002648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800264c:	6113      	str	r3, [r2, #16]
}
 800264e:	2000      	movs	r0, #0
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00

08002658 <FLASH_WaitForLastOperation>:
{ 
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800265c:	4c12      	ldr	r4, [pc, #72]	; (80026a8 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800265e:	2200      	movs	r2, #0
{ 
 8002660:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002662:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8002664:	f7ff fcde 	bl	8002024 <HAL_GetTick>
 8002668:	4626      	mov	r6, r4
 800266a:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800266c:	68e3      	ldr	r3, [r4, #12]
 800266e:	03da      	lsls	r2, r3, #15
 8002670:	d40c      	bmi.n	800268c <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002672:	68e3      	ldr	r3, [r4, #12]
 8002674:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002676:	bf44      	itt	mi
 8002678:	2301      	movmi	r3, #1
 800267a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800267c:	68f0      	ldr	r0, [r6, #12]
 800267e:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8002682:	d007      	beq.n	8002694 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8002684:	f7ff ff86 	bl	8002594 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002688:	2001      	movs	r0, #1
 800268a:	e003      	b.n	8002694 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 800268c:	1c69      	adds	r1, r5, #1
 800268e:	d0ed      	beq.n	800266c <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002690:	b90d      	cbnz	r5, 8002696 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8002692:	2003      	movs	r0, #3
}  
 8002694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002696:	f7ff fcc5 	bl	8002024 <HAL_GetTick>
 800269a:	1bc0      	subs	r0, r0, r7
 800269c:	42a8      	cmp	r0, r5
 800269e:	d9e5      	bls.n	800266c <FLASH_WaitForLastOperation+0x14>
 80026a0:	e7f7      	b.n	8002692 <FLASH_WaitForLastOperation+0x3a>
 80026a2:	bf00      	nop
 80026a4:	20004948 	.word	0x20004948
 80026a8:	40023c00 	.word	0x40023c00

080026ac <HAL_FLASH_Program>:
{
 80026ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80026b0:	4d1f      	ldr	r5, [pc, #124]	; (8002730 <HAL_FLASH_Program+0x84>)
{
 80026b2:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80026b4:	7e2b      	ldrb	r3, [r5, #24]
 80026b6:	2b01      	cmp	r3, #1
{
 80026b8:	4607      	mov	r7, r0
 80026ba:	460e      	mov	r6, r1
 80026bc:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 80026be:	d035      	beq.n	800272c <HAL_FLASH_Program+0x80>
 80026c0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80026c6:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026c8:	f7ff ffc6 	bl	8002658 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80026cc:	b9b0      	cbnz	r0, 80026fc <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80026ce:	b9cf      	cbnz	r7, 8002704 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_FLASH_Program+0x88>)
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026de:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80026e0:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80026e8:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026ee:	f7ff ffb3 	bl	8002658 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <HAL_FLASH_Program+0x88>)
 80026f4:	6913      	ldr	r3, [r2, #16]
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80026fc:	2300      	movs	r3, #0
 80026fe:	762b      	strb	r3, [r5, #24]
}
 8002700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002704:	2f01      	cmp	r7, #1
 8002706:	d104      	bne.n	8002712 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002708:	b2a1      	uxth	r1, r4
 800270a:	4630      	mov	r0, r6
 800270c:	f7ff ff30 	bl	8002570 <FLASH_Program_HalfWord>
 8002710:	e7eb      	b.n	80026ea <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002712:	2f02      	cmp	r7, #2
 8002714:	d104      	bne.n	8002720 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002716:	4621      	mov	r1, r4
 8002718:	4630      	mov	r0, r6
 800271a:	f7ff ff17 	bl	800254c <FLASH_Program_Word>
 800271e:	e7e4      	b.n	80026ea <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8002720:	4622      	mov	r2, r4
 8002722:	4643      	mov	r3, r8
 8002724:	4630      	mov	r0, r6
 8002726:	f7ff fefb 	bl	8002520 <FLASH_Program_DoubleWord>
 800272a:	e7de      	b.n	80026ea <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800272c:	2002      	movs	r0, #2
 800272e:	e7e7      	b.n	8002700 <HAL_FLASH_Program+0x54>
 8002730:	20004948 	.word	0x20004948
 8002734:	40023c00 	.word	0x40023c00

08002738 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002738:	b139      	cbz	r1, 800274a <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800273a:	2901      	cmp	r1, #1
 800273c:	d01c      	beq.n	8002778 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800273e:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002740:	bf0c      	ite	eq
 8002742:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002746:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <FLASH_Erase_Sector+0x48>)
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002752:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	4311      	orrs	r1, r2
 8002758:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002760:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	f042 0202 	orr.w	r2, r2, #2
 8002768:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800276c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002774:	611a      	str	r2, [r3, #16]
}
 8002776:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277c:	e7e5      	b.n	800274a <FLASH_Erase_Sector+0x12>
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002788:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800291c <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4a60      	ldr	r2, [pc, #384]	; (8002914 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8002794:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002798:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800279c:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80027a2:	42ac      	cmp	r4, r5
 80027a4:	f040 80a6 	bne.w	80028f4 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a8:	684c      	ldr	r4, [r1, #4]
 80027aa:	f024 0c10 	bic.w	ip, r4, #16
 80027ae:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80027b2:	2603      	movs	r6, #3
 80027b4:	f10c 37ff 	add.w	r7, ip, #4294967295
 80027b8:	fa06 f60e 	lsl.w	r6, r6, lr
 80027bc:	2f01      	cmp	r7, #1
 80027be:	ea6f 0606 	mvn.w	r6, r6
 80027c2:	d811      	bhi.n	80027e8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80027c4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c6:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ca:	68cf      	ldr	r7, [r1, #12]
 80027cc:	fa07 f70e 	lsl.w	r7, r7, lr
 80027d0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80027d4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80027d6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d8:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027dc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80027e0:	409f      	lsls	r7, r3
 80027e2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80027e6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80027e8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ea:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ee:	688f      	ldr	r7, [r1, #8]
 80027f0:	fa07 f70e 	lsl.w	r7, r7, lr
 80027f4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80027fc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fe:	d116      	bne.n	800282e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8002800:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002804:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002808:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800280c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002810:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002814:	f04f 0c0f 	mov.w	ip, #15
 8002818:	fa0c fc0b 	lsl.w	ip, ip, fp
 800281c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002820:	690f      	ldr	r7, [r1, #16]
 8002822:	fa07 f70b 	lsl.w	r7, r7, fp
 8002826:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800282a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800282e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002830:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002832:	f004 0703 	and.w	r7, r4, #3
 8002836:	fa07 fe0e 	lsl.w	lr, r7, lr
 800283a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800283e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002840:	00e6      	lsls	r6, r4, #3
 8002842:	d557      	bpl.n	80028f4 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002844:	f04f 0b00 	mov.w	fp, #0
 8002848:	f8cd b00c 	str.w	fp, [sp, #12]
 800284c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002850:	4e31      	ldr	r6, [pc, #196]	; (8002918 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002856:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800285a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800285e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002862:	9703      	str	r7, [sp, #12]
 8002864:	9f03      	ldr	r7, [sp, #12]
 8002866:	f023 0703 	bic.w	r7, r3, #3
 800286a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800286e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002872:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002876:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800287e:	f04f 0c0f 	mov.w	ip, #15
 8002882:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002886:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002888:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288c:	d039      	beq.n	8002902 <HAL_GPIO_Init+0x17e>
 800288e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002892:	42b0      	cmp	r0, r6
 8002894:	d037      	beq.n	8002906 <HAL_GPIO_Init+0x182>
 8002896:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800289a:	42b0      	cmp	r0, r6
 800289c:	d035      	beq.n	800290a <HAL_GPIO_Init+0x186>
 800289e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028a2:	42b0      	cmp	r0, r6
 80028a4:	d033      	beq.n	800290e <HAL_GPIO_Init+0x18a>
 80028a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028aa:	42b0      	cmp	r0, r6
 80028ac:	bf14      	ite	ne
 80028ae:	2607      	movne	r6, #7
 80028b0:	2604      	moveq	r6, #4
 80028b2:	fa06 f60e 	lsl.w	r6, r6, lr
 80028b6:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ba:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80028bc:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80028be:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80028c4:	bf0c      	ite	eq
 80028c6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80028c8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80028ca:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80028cc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80028d2:	bf0c      	ite	eq
 80028d4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80028d6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80028d8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028dc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80028e0:	bf0c      	ite	eq
 80028e2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80028e4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80028e6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80028e8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ea:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80028ec:	bf54      	ite	pl
 80028ee:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80028f0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80028f2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f4:	3301      	adds	r3, #1
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	f47f af4f 	bne.w	800279a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80028fc:	b005      	add	sp, #20
 80028fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002902:	465e      	mov	r6, fp
 8002904:	e7d5      	b.n	80028b2 <HAL_GPIO_Init+0x12e>
 8002906:	2601      	movs	r6, #1
 8002908:	e7d3      	b.n	80028b2 <HAL_GPIO_Init+0x12e>
 800290a:	2602      	movs	r6, #2
 800290c:	e7d1      	b.n	80028b2 <HAL_GPIO_Init+0x12e>
 800290e:	2603      	movs	r6, #3
 8002910:	e7cf      	b.n	80028b2 <HAL_GPIO_Init+0x12e>
 8002912:	bf00      	nop
 8002914:	40013c00 	.word	0x40013c00
 8002918:	40020000 	.word	0x40020000
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	b10a      	cbz	r2, 8002926 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002922:	6181      	str	r1, [r0, #24]
  }
}
 8002924:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002926:	0409      	lsls	r1, r1, #16
 8002928:	e7fb      	b.n	8002922 <HAL_GPIO_WritePin+0x2>

0800292a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800292a:	6943      	ldr	r3, [r0, #20]
 800292c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002930:	bf08      	it	eq
 8002932:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002934:	6181      	str	r1, [r0, #24]
  }
}
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002938:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800293c:	6959      	ldr	r1, [r3, #20]
 800293e:	4201      	tst	r1, r0
 8002940:	d002      	beq.n	8002948 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002942:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002944:	f7fe f978 	bl	8000c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002948:	bd08      	pop	{r3, pc}
 800294a:	bf00      	nop
 800294c:	40013c00 	.word	0x40013c00

08002950 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002954:	6806      	ldr	r6, [r0, #0]
{
 8002956:	b085      	sub	sp, #20
 8002958:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800295a:	4630      	mov	r0, r6
 800295c:	f002 fa06 	bl	8004d6c <USB_GetMode>
 8002960:	2801      	cmp	r0, #1
 8002962:	f040 80e4 	bne.w	8002b2e <HAL_HCD_IRQHandler+0x1de>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002966:	6828      	ldr	r0, [r5, #0]
 8002968:	f002 f9fc 	bl	8004d64 <USB_ReadInterrupts>
 800296c:	2800      	cmp	r0, #0
 800296e:	f000 80de 	beq.w	8002b2e <HAL_HCD_IRQHandler+0x1de>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002972:	6828      	ldr	r0, [r5, #0]
 8002974:	f002 f9f6 	bl	8004d64 <USB_ReadInterrupts>
 8002978:	0284      	lsls	r4, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800297a:	bf48      	it	mi
 800297c:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800297e:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002980:	bf44      	itt	mi
 8002982:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8002986:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002988:	f002 f9ec 	bl	8004d64 <USB_ReadInterrupts>
 800298c:	02c0      	lsls	r0, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800298e:	bf48      	it	mi
 8002990:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002992:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002994:	bf44      	itt	mi
 8002996:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800299a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800299c:	f002 f9e2 	bl	8004d64 <USB_ReadInterrupts>
 80029a0:	0141      	lsls	r1, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029a2:	bf48      	it	mi
 80029a4:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029a6:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029a8:	bf44      	itt	mi
 80029aa:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80029ae:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029b0:	f002 f9d8 	bl	8004d64 <USB_ReadInterrupts>
 80029b4:	0782      	lsls	r2, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029b6:	bf48      	it	mi
 80029b8:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029ba:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029bc:	bf44      	itt	mi
 80029be:	2202      	movmi	r2, #2
 80029c0:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029c2:	f002 f9cf 	bl	8004d64 <USB_ReadInterrupts>
 80029c6:	0083      	lsls	r3, r0, #2
 80029c8:	d50e      	bpl.n	80029e8 <HAL_HCD_IRQHandler+0x98>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029ca:	682b      	ldr	r3, [r5, #0]
 80029cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029d2:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80029d6:	07df      	lsls	r7, r3, #31
 80029d8:	d406      	bmi.n	80029e8 <HAL_HCD_IRQHandler+0x98>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80029da:	4628      	mov	r0, r5
 80029dc:	f7fe f996 	bl	8000d0c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029e0:	2101      	movs	r1, #1
 80029e2:	6828      	ldr	r0, [r5, #0]
 80029e4:	f002 f9c6 	bl	8004d74 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029e8:	6828      	ldr	r0, [r5, #0]
 80029ea:	f002 f9bb 	bl	8004d64 <USB_ReadInterrupts>
 80029ee:	01c4      	lsls	r4, r0, #7
 80029f0:	d53c      	bpl.n	8002a6c <HAL_HCD_IRQHandler+0x11c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f2:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029f4:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80029f8:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80029fa:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80029fe:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a00:	9b03      	ldr	r3, [sp, #12]
 8002a02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a06:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a08:	9b02      	ldr	r3, [sp, #8]
 8002a0a:	0798      	lsls	r0, r3, #30
 8002a0c:	d509      	bpl.n	8002a22 <HAL_HCD_IRQHandler+0xd2>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a0e:	9b02      	ldr	r3, [sp, #8]
 8002a10:	07d9      	lsls	r1, r3, #31
 8002a12:	d502      	bpl.n	8002a1a <HAL_HCD_IRQHandler+0xca>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a14:	4628      	mov	r0, r5
 8002a16:	f7fe f975 	bl	8000d04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002a1a:	9b03      	ldr	r3, [sp, #12]
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a22:	9b02      	ldr	r3, [sp, #8]
 8002a24:	071a      	lsls	r2, r3, #28
 8002a26:	d517      	bpl.n	8002a58 <HAL_HCD_IRQHandler+0x108>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a28:	9b03      	ldr	r3, [sp, #12]
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a30:	9b02      	ldr	r3, [sp, #8]
 8002a32:	075b      	lsls	r3, r3, #29
 8002a34:	f140 8086 	bpl.w	8002b44 <HAL_HCD_IRQHandler+0x1f4>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a38:	69a9      	ldr	r1, [r5, #24]
 8002a3a:	2902      	cmp	r1, #2
 8002a3c:	d17a      	bne.n	8002b34 <HAL_HCD_IRQHandler+0x1e4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a3e:	9b02      	ldr	r3, [sp, #8]
 8002a40:	6828      	ldr	r0, [r5, #0]
 8002a42:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a4a:	bf18      	it	ne
 8002a4c:	2101      	movne	r1, #1
 8002a4e:	f002 f991 	bl	8004d74 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7fe f95e 	bl	8000d14 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a58:	9b02      	ldr	r3, [sp, #8]
 8002a5a:	069f      	lsls	r7, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a5c:	bf42      	ittt	mi
 8002a5e:	9b03      	ldrmi	r3, [sp, #12]
 8002a60:	f043 0320 	orrmi.w	r3, r3, #32
 8002a64:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a66:	9b03      	ldr	r3, [sp, #12]
 8002a68:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a6c:	6828      	ldr	r0, [r5, #0]
 8002a6e:	f002 f979 	bl	8004d64 <USB_ReadInterrupts>
 8002a72:	0704      	lsls	r4, r0, #28
 8002a74:	d505      	bpl.n	8002a82 <HAL_HCD_IRQHandler+0x132>
      HAL_HCD_SOF_Callback(hhcd);
 8002a76:	4628      	mov	r0, r5
 8002a78:	f7fe f940 	bl	8000cfc <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a82:	6828      	ldr	r0, [r5, #0]
 8002a84:	f002 f96e 	bl	8004d64 <USB_ReadInterrupts>
 8002a88:	0180      	lsls	r0, r0, #6
 8002a8a:	d512      	bpl.n	8002ab2 <HAL_HCD_IRQHandler+0x162>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a8c:	6828      	ldr	r0, [r5, #0]
 8002a8e:	f002 f98d 	bl	8004dac <USB_HC_ReadInterrupt>
 8002a92:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8002a96:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a98:	f04f 0900 	mov.w	r9, #0
 8002a9c:	9301      	str	r3, [sp, #4]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a9e:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002aa0:	f04f 0802 	mov.w	r8, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002aa4:	68ab      	ldr	r3, [r5, #8]
 8002aa6:	6828      	ldr	r0, [r5, #0]
 8002aa8:	454b      	cmp	r3, r9
 8002aaa:	d84f      	bhi.n	8002b4c <HAL_HCD_IRQHandler+0x1fc>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab0:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ab2:	6828      	ldr	r0, [r5, #0]
 8002ab4:	f002 f956 	bl	8004d64 <USB_ReadInterrupts>
 8002ab8:	06c3      	lsls	r3, r0, #27
 8002aba:	d538      	bpl.n	8002b2e <HAL_HCD_IRQHandler+0x1de>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002abc:	682c      	ldr	r4, [r5, #0]
 8002abe:	69a3      	ldr	r3, [r4, #24]
 8002ac0:	f023 0310 	bic.w	r3, r3, #16
 8002ac4:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 8002ac6:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ac8:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8002acc:	2a02      	cmp	r2, #2
 8002ace:	d129      	bne.n	8002b24 <HAL_HCD_IRQHandler+0x1d4>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ad0:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ad4:	f1b8 0f00 	cmp.w	r8, #0
 8002ad8:	d024      	beq.n	8002b24 <HAL_HCD_IRQHandler+0x1d4>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ada:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ade:	2728      	movs	r7, #40	; 0x28
 8002ae0:	fb07 5706 	mla	r7, r7, r6, r5
 8002ae4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ae6:	b1e9      	cbz	r1, 8002b24 <HAL_HCD_IRQHandler+0x1d4>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ae8:	4642      	mov	r2, r8
 8002aea:	4620      	mov	r0, r4
 8002aec:	f002 f92c 	bl	8004d48 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af2:	4443      	add	r3, r8
 8002af4:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af8:	4443      	add	r3, r8
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002afc:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 8002b00:	0173      	lsls	r3, r6, #5
 8002b02:	18e2      	adds	r2, r4, r3
 8002b04:	6911      	ldr	r1, [r2, #16]
 8002b06:	4ab1      	ldr	r2, [pc, #708]	; (8002dcc <HAL_HCD_IRQHandler+0x47c>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	b15a      	cbz	r2, 8002b24 <HAL_HCD_IRQHandler+0x1d4>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b0c:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b0e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b16:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b18:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b24:	682a      	ldr	r2, [r5, #0]
 8002b26:	6993      	ldr	r3, [r2, #24]
 8002b28:	f043 0310 	orr.w	r3, r3, #16
 8002b2c:	6193      	str	r3, [r2, #24]
}
 8002b2e:	b005      	add	sp, #20
 8002b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b34:	68eb      	ldr	r3, [r5, #12]
 8002b36:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8002b38:	bf04      	itt	eq
 8002b3a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8002b3e:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 8002b42:	e786      	b.n	8002a52 <HAL_HCD_IRQHandler+0x102>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b44:	4628      	mov	r0, r5
 8002b46:	f7fe f8e9 	bl	8000d1c <HAL_HCD_PortDisabled_Callback>
 8002b4a:	e785      	b.n	8002a58 <HAL_HCD_IRQHandler+0x108>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b4c:	9a00      	ldr	r2, [sp, #0]
 8002b4e:	f009 030f 	and.w	r3, r9, #15
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	07d9      	lsls	r1, r3, #31
 8002b58:	f140 8095 	bpl.w	8002c86 <HAL_HCD_IRQHandler+0x336>
 8002b5c:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b60:	9a01      	ldr	r2, [sp, #4]
 8002b62:	fa5f f689 	uxtb.w	r6, r9
 8002b66:	58d1      	ldr	r1, [r2, r3]
 8002b68:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8002b6c:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 8002b70:	eb0b 040a 	add.w	r4, fp, sl
 8002b74:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b78:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b7a:	f000 811d 	beq.w	8002db8 <HAL_HCD_IRQHandler+0x468>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b7e:	074a      	lsls	r2, r1, #29
 8002b80:	d513      	bpl.n	8002baa <HAL_HCD_IRQHandler+0x25a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b82:	2104      	movs	r1, #4
 8002b84:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b86:	68e1      	ldr	r1, [r4, #12]
 8002b88:	f041 0102 	orr.w	r1, r1, #2
 8002b8c:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b8e:	68a1      	ldr	r1, [r4, #8]
 8002b90:	0588      	lsls	r0, r1, #22
 8002b92:	d54a      	bpl.n	8002c2a <HAL_HCD_IRQHandler+0x2da>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b94:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b96:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9e:	4631      	mov	r1, r6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba0:	f002 f909 	bl	8004db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba8:	e0e6      	b.n	8002d78 <HAL_HCD_IRQHandler+0x428>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002baa:	68a1      	ldr	r1, [r4, #8]
 8002bac:	05cb      	lsls	r3, r1, #23
 8002bae:	d510      	bpl.n	8002bd2 <HAL_HCD_IRQHandler+0x282>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb4:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002bb6:	fb07 5106 	mla	r1, r7, r6, r5
 8002bba:	f04f 0c07 	mov.w	ip, #7
 8002bbe:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bc2:	68e1      	ldr	r1, [r4, #12]
 8002bc4:	f041 0102 	orr.w	r1, r1, #2
 8002bc8:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bca:	4631      	mov	r1, r6
 8002bcc:	f002 f8f3 	bl	8004db6 <USB_HC_Halt>
 8002bd0:	e7dd      	b.n	8002b8e <HAL_HCD_IRQHandler+0x23e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bd2:	68a1      	ldr	r1, [r4, #8]
 8002bd4:	0689      	lsls	r1, r1, #26
 8002bd6:	d502      	bpl.n	8002bde <HAL_HCD_IRQHandler+0x28e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bd8:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bda:	60a1      	str	r1, [r4, #8]
 8002bdc:	e7d7      	b.n	8002b8e <HAL_HCD_IRQHandler+0x23e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bde:	68a1      	ldr	r1, [r4, #8]
 8002be0:	070a      	lsls	r2, r1, #28
 8002be2:	d50e      	bpl.n	8002c02 <HAL_HCD_IRQHandler+0x2b2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be4:	68e1      	ldr	r1, [r4, #12]
 8002be6:	f041 0102 	orr.w	r1, r1, #2
 8002bea:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bec:	fb07 5106 	mla	r1, r7, r6, r5
 8002bf0:	f04f 0c05 	mov.w	ip, #5
 8002bf4:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bf8:	2110      	movs	r1, #16
 8002bfa:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bfc:	2108      	movs	r1, #8
 8002bfe:	60a1      	str	r1, [r4, #8]
 8002c00:	e7e3      	b.n	8002bca <HAL_HCD_IRQHandler+0x27a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c02:	68a1      	ldr	r1, [r4, #8]
 8002c04:	054b      	lsls	r3, r1, #21
 8002c06:	d5c2      	bpl.n	8002b8e <HAL_HCD_IRQHandler+0x23e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c08:	68e1      	ldr	r1, [r4, #12]
 8002c0a:	f041 0102 	orr.w	r1, r1, #2
 8002c0e:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c10:	4631      	mov	r1, r6
 8002c12:	f002 f8d0 	bl	8004db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c16:	2110      	movs	r1, #16
 8002c18:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c1a:	fb07 5106 	mla	r1, r7, r6, r5
 8002c1e:	2008      	movs	r0, #8
 8002c20:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c28:	e7d7      	b.n	8002bda <HAL_HCD_IRQHandler+0x28a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c2a:	68a1      	ldr	r1, [r4, #8]
 8002c2c:	07c9      	lsls	r1, r1, #31
 8002c2e:	d548      	bpl.n	8002cc2 <HAL_HCD_IRQHandler+0x372>
    if (hhcd->Init.dma_enable != 0U)
 8002c30:	6929      	ldr	r1, [r5, #16]
 8002c32:	b149      	cbz	r1, 8002c48 <HAL_HCD_IRQHandler+0x2f8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c34:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c38:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c3a:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c3e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c42:	1a09      	subs	r1, r1, r0
 8002c44:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c48:	fb07 5106 	mla	r1, r7, r6, r5
 8002c4c:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c4e:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c50:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c54:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c56:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c58:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8002c5c:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8002c60:	d114      	bne.n	8002c8c <HAL_HCD_IRQHandler+0x33c>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c62:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c64:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c66:	f043 0302 	orr.w	r3, r3, #2
 8002c6a:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6c:	4631      	mov	r1, r6
 8002c6e:	f002 f8a2 	bl	8004db6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c72:	2310      	movs	r3, #16
 8002c74:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c76:	fb07 5606 	mla	r6, r7, r6, r5
 8002c7a:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c86:	f109 0901 	add.w	r9, r9, #1
 8002c8a:	e70b      	b.n	8002aa4 <HAL_HCD_IRQHandler+0x154>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c8c:	2a03      	cmp	r2, #3
 8002c8e:	d10d      	bne.n	8002cac <HAL_HCD_IRQHandler+0x35c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c90:	f85b 000a 	ldr.w	r0, [fp, sl]
 8002c94:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8002c98:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c9c:	461a      	mov	r2, r3
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c9e:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	f7fe f83d 	bl	8000d24 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002caa:	e7e4      	b.n	8002c76 <HAL_HCD_IRQHandler+0x326>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002cac:	2a01      	cmp	r2, #1
 8002cae:	d1e2      	bne.n	8002c76 <HAL_HCD_IRQHandler+0x326>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cb0:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cb4:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 8002cc0:	e7ef      	b.n	8002ca2 <HAL_HCD_IRQHandler+0x352>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cc2:	68a1      	ldr	r1, [r4, #8]
 8002cc4:	078a      	lsls	r2, r1, #30
 8002cc6:	d542      	bpl.n	8002d4e <HAL_HCD_IRQHandler+0x3fe>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cc8:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cca:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cce:	f021 0102 	bic.w	r1, r1, #2
 8002cd2:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cd4:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8002cd8:	2901      	cmp	r1, #1
 8002cda:	d102      	bne.n	8002ce2 <HAL_HCD_IRQHandler+0x392>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cdc:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 8002ce0:	e02a      	b.n	8002d38 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ce2:	2905      	cmp	r1, #5
 8002ce4:	d0fa      	beq.n	8002cdc <HAL_HCD_IRQHandler+0x38c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ce6:	2906      	cmp	r1, #6
 8002ce8:	d001      	beq.n	8002cee <HAL_HCD_IRQHandler+0x39e>
 8002cea:	2908      	cmp	r1, #8
 8002cec:	d10f      	bne.n	8002d0e <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt++;
 8002cee:	fb07 5106 	mla	r1, r7, r6, r5
 8002cf2:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8002cf4:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cf6:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8002cf8:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfa:	bf81      	itttt	hi
 8002cfc:	2000      	movhi	r0, #0
 8002cfe:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d00:	2004      	movhi	r0, #4
 8002d02:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d06:	bf98      	it	ls
 8002d08:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
 8002d0c:	e003      	b.n	8002d16 <HAL_HCD_IRQHandler+0x3c6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d0e:	2903      	cmp	r1, #3
 8002d10:	d10a      	bne.n	8002d28 <HAL_HCD_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d12:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d16:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d1a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d1e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d22:	f84b 100a 	str.w	r1, [fp, sl]
 8002d26:	e007      	b.n	8002d38 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d28:	2907      	cmp	r1, #7
 8002d2a:	d105      	bne.n	8002d38 <HAL_HCD_IRQHandler+0x3e8>
      hhcd->hc[ch_num].ErrCnt++;
 8002d2c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d2e:	3301      	adds	r3, #1
 8002d30:	6583      	str	r3, [r0, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d32:	2304      	movs	r3, #4
 8002d34:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d38:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d3c:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d40:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8002d44:	4631      	mov	r1, r6
 8002d46:	4628      	mov	r0, r5
 8002d48:	f7fd ffec 	bl	8000d24 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d4c:	e79b      	b.n	8002c86 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d4e:	68a1      	ldr	r1, [r4, #8]
 8002d50:	6828      	ldr	r0, [r5, #0]
 8002d52:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8002d56:	d011      	beq.n	8002d7c <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d58:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002d5a:	fb07 5206 	mla	r2, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002d64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d66:	3301      	adds	r3, #1
 8002d68:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d70:	4631      	mov	r1, r6
 8002d72:	f002 f820 	bl	8004db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	60a3      	str	r3, [r4, #8]
 8002d7a:	e784      	b.n	8002c86 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d7c:	68a3      	ldr	r3, [r4, #8]
 8002d7e:	06db      	lsls	r3, r3, #27
 8002d80:	d581      	bpl.n	8002c86 <HAL_HCD_IRQHandler+0x336>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d82:	fb07 5206 	mla	r2, r7, r6, r5
 8002d86:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d109      	bne.n	8002da2 <HAL_HCD_IRQHandler+0x452>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8e:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d90:	68e3      	ldr	r3, [r4, #12]
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d98:	4631      	mov	r1, r6
 8002d9a:	f002 f80c 	bl	8004db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d9e:	2310      	movs	r3, #16
 8002da0:	e7ea      	b.n	8002d78 <HAL_HCD_IRQHandler+0x428>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002da2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8002da6:	d1fa      	bne.n	8002d9e <HAL_HCD_IRQHandler+0x44e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002da8:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8002daa:	692b      	ldr	r3, [r5, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f6      	bne.n	8002d9e <HAL_HCD_IRQHandler+0x44e>
        hhcd->hc[ch_num].state = HC_NAK;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8002db6:	e7eb      	b.n	8002d90 <HAL_HCD_IRQHandler+0x440>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002db8:	f011 0c04 	ands.w	ip, r1, #4
 8002dbc:	d008      	beq.n	8002dd0 <HAL_HCD_IRQHandler+0x480>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc2:	68e3      	ldr	r3, [r4, #12]
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	60e3      	str	r3, [r4, #12]
 8002dca:	e75c      	b.n	8002c86 <HAL_HCD_IRQHandler+0x336>
 8002dcc:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dd0:	68a1      	ldr	r1, [r4, #8]
 8002dd2:	f011 0120 	ands.w	r1, r1, #32
 8002dd6:	d014      	beq.n	8002e02 <HAL_HCD_IRQHandler+0x4b2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dd8:	2320      	movs	r3, #32
 8002dda:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ddc:	fb07 5306 	mla	r3, r7, r6, r5
 8002de0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002de4:	2a01      	cmp	r2, #1
 8002de6:	f47f af4e 	bne.w	8002c86 <HAL_HCD_IRQHandler+0x336>
      hhcd->hc[ch_num].do_ping = 0U;
 8002dea:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dee:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df2:	68e3      	ldr	r3, [r4, #12]
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfa:	4631      	mov	r1, r6
 8002dfc:	f001 ffdb 	bl	8004db6 <USB_HC_Halt>
 8002e00:	e741      	b.n	8002c86 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e02:	68a3      	ldr	r3, [r4, #8]
 8002e04:	065a      	lsls	r2, r3, #25
 8002e06:	d511      	bpl.n	8002e2c <HAL_HCD_IRQHandler+0x4dc>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e08:	fb07 5306 	mla	r3, r7, r6, r5
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e18:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e1a:	68e3      	ldr	r3, [r4, #12]
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	4631      	mov	r1, r6
 8002e24:	f001 ffc7 	bl	8004db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e28:	2340      	movs	r3, #64	; 0x40
 8002e2a:	e7a5      	b.n	8002d78 <HAL_HCD_IRQHandler+0x428>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e2c:	68a1      	ldr	r1, [r4, #8]
 8002e2e:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8002e32:	d005      	beq.n	8002e40 <HAL_HCD_IRQHandler+0x4f0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e34:	68e3      	ldr	r3, [r4, #12]
 8002e36:	f043 0302 	orr.w	r3, r3, #2
 8002e3a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	e6af      	b.n	8002ba0 <HAL_HCD_IRQHandler+0x250>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e40:	68a3      	ldr	r3, [r4, #8]
 8002e42:	07db      	lsls	r3, r3, #31
 8002e44:	d50f      	bpl.n	8002e66 <HAL_HCD_IRQHandler+0x516>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e46:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e48:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e4c:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e50:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e54:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e56:	4631      	mov	r1, r6
 8002e58:	f001 ffad 	bl	8004db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e60:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8002e64:	e70f      	b.n	8002c86 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e66:	68a1      	ldr	r1, [r4, #8]
 8002e68:	0709      	lsls	r1, r1, #28
 8002e6a:	d50e      	bpl.n	8002e8a <HAL_HCD_IRQHandler+0x53a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e70:	68e3      	ldr	r3, [r4, #12]
 8002e72:	f043 0302 	orr.w	r3, r3, #2
 8002e76:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e78:	4631      	mov	r1, r6
 8002e7a:	f001 ff9c 	bl	8004db6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002e7e:	fb07 5606 	mla	r6, r7, r6, r5
 8002e82:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e84:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002e88:	e6fd      	b.n	8002c86 <HAL_HCD_IRQHandler+0x336>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e8a:	68a1      	ldr	r1, [r4, #8]
 8002e8c:	06ca      	lsls	r2, r1, #27
 8002e8e:	d514      	bpl.n	8002eba <HAL_HCD_IRQHandler+0x56a>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e90:	fb07 5306 	mla	r3, r7, r6, r5
 8002e94:	2200      	movs	r2, #0
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e9e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002ea2:	2a00      	cmp	r2, #0
 8002ea4:	f47f af74 	bne.w	8002d90 <HAL_HCD_IRQHandler+0x440>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002ea8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002eac:	2a00      	cmp	r2, #0
 8002eae:	f47f af6f 	bne.w	8002d90 <HAL_HCD_IRQHandler+0x440>
        hhcd->hc[ch_num].do_ping = 1U;
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eb8:	e76a      	b.n	8002d90 <HAL_HCD_IRQHandler+0x440>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002eba:	68a1      	ldr	r1, [r4, #8]
 8002ebc:	060b      	lsls	r3, r1, #24
 8002ebe:	d50c      	bpl.n	8002eda <HAL_HCD_IRQHandler+0x58a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec0:	68e3      	ldr	r3, [r4, #12]
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec8:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002eca:	fb07 5606 	mla	r6, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ece:	f001 ff72 	bl	8004db6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002ed8:	e74d      	b.n	8002d76 <HAL_HCD_IRQHandler+0x426>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002eda:	68a1      	ldr	r1, [r4, #8]
 8002edc:	0549      	lsls	r1, r1, #21
 8002ede:	d50f      	bpl.n	8002f00 <HAL_HCD_IRQHandler+0x5b0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee0:	68e3      	ldr	r3, [r4, #12]
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee8:	4631      	mov	r1, r6
 8002eea:	f001 ff64 	bl	8004db6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eee:	2310      	movs	r3, #16
 8002ef0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ef8:	fb07 5606 	mla	r6, r7, r6, r5
 8002efc:	2308      	movs	r3, #8
 8002efe:	e7c1      	b.n	8002e84 <HAL_HCD_IRQHandler+0x534>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f00:	68a1      	ldr	r1, [r4, #8]
 8002f02:	078a      	lsls	r2, r1, #30
 8002f04:	f57f aebf 	bpl.w	8002c86 <HAL_HCD_IRQHandler+0x336>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f08:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f0a:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f0e:	f021 0102 	bic.w	r1, r1, #2
 8002f12:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f14:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8002f18:	2901      	cmp	r1, #1
 8002f1a:	d10e      	bne.n	8002f3a <HAL_HCD_IRQHandler+0x5ea>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f1c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f20:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f24:	3b02      	subs	r3, #2
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	f63f af06 	bhi.w	8002d38 <HAL_HCD_IRQHandler+0x3e8>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f2c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002f30:	f083 0301 	eor.w	r3, r3, #1
 8002f34:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8002f38:	e6fe      	b.n	8002d38 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f3a:	2903      	cmp	r1, #3
 8002f3c:	d102      	bne.n	8002f44 <HAL_HCD_IRQHandler+0x5f4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f3e:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 8002f42:	e6f9      	b.n	8002d38 <HAL_HCD_IRQHandler+0x3e8>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f44:	2904      	cmp	r1, #4
 8002f46:	d0fa      	beq.n	8002f3e <HAL_HCD_IRQHandler+0x5ee>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f48:	2905      	cmp	r1, #5
 8002f4a:	f43f aec7 	beq.w	8002cdc <HAL_HCD_IRQHandler+0x38c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f4e:	2906      	cmp	r1, #6
 8002f50:	f43f aecd 	beq.w	8002cee <HAL_HCD_IRQHandler+0x39e>
 8002f54:	2908      	cmp	r1, #8
 8002f56:	f47f aeef 	bne.w	8002d38 <HAL_HCD_IRQHandler+0x3e8>
 8002f5a:	e6c8      	b.n	8002cee <HAL_HCD_IRQHandler+0x39e>

08002f5c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002f5c:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002f60:	2b01      	cmp	r3, #1
{
 8002f62:	b510      	push	{r4, lr}
 8002f64:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002f66:	d009      	beq.n	8002f7c <HAL_HCD_Stop+0x20>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002f6e:	6800      	ldr	r0, [r0, #0]
 8002f70:	f001 ff73 	bl	8004e5a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002f7a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	e7fc      	b.n	8002f7a <HAL_HCD_Stop+0x1e>

08002f80 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f80:	6801      	ldr	r1, [r0, #0]
 8002f82:	694b      	ldr	r3, [r1, #20]
 8002f84:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	d010      	beq.n	8002fb0 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f8e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002f92:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002fac:	2001      	movs	r0, #1
 8002fae:	4770      	bx	lr
  }
  return HAL_OK;
 8002fb0:	4618      	mov	r0, r3
}
 8002fb2:	4770      	bx	lr

08002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb8:	4604      	mov	r4, r0
 8002fba:	4616      	mov	r6, r2
 8002fbc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbe:	b28f      	uxth	r7, r1
 8002fc0:	6825      	ldr	r5, [r4, #0]
 8002fc2:	6968      	ldr	r0, [r5, #20]
 8002fc4:	ea37 0000 	bics.w	r0, r7, r0
 8002fc8:	d017      	beq.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fca:	696b      	ldr	r3, [r5, #20]
 8002fcc:	055a      	lsls	r2, r3, #21
 8002fce:	d516      	bpl.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002fdc:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fde:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fee:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ff4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002ff8:	2001      	movs	r0, #1
}
 8002ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	1c73      	adds	r3, r6, #1
 8003000:	d0df      	beq.n	8002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7ff f80f 	bl	8002024 <HAL_GetTick>
 8003006:	eba0 0008 	sub.w	r0, r0, r8
 800300a:	42b0      	cmp	r0, r6
 800300c:	d801      	bhi.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800300e:	2e00      	cmp	r6, #0
 8003010:	d1d6      	bne.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003016:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	e7e4      	b.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08003028 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	4604      	mov	r4, r0
 800302c:	460d      	mov	r5, r1
 800302e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	075b      	lsls	r3, r3, #29
 8003036:	d501      	bpl.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003038:	2000      	movs	r0, #0
}
 800303a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff ff9f 	bl	8002f80 <I2C_IsAcknowledgeFailed>
 8003042:	b9a8      	cbnz	r0, 8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003044:	1c6a      	adds	r2, r5, #1
 8003046:	d0f3      	beq.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7fe ffec 	bl	8002024 <HAL_GetTick>
 800304c:	1b80      	subs	r0, r0, r6
 800304e:	42a8      	cmp	r0, r5
 8003050:	d801      	bhi.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003052:	2d00      	cmp	r5, #0
 8003054:	d1ec      	bne.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003056:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003058:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800305a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800305c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003060:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003066:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003070:	2001      	movs	r0, #1
 8003072:	e7e2      	b.n	800303a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003074 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4604      	mov	r4, r0
 8003078:	460d      	mov	r5, r1
 800307a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	6943      	ldr	r3, [r0, #20]
 8003080:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003084:	d001      	beq.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003086:	2000      	movs	r0, #0
 8003088:	e010      	b.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800308a:	6942      	ldr	r2, [r0, #20]
 800308c:	06d2      	lsls	r2, r2, #27
 800308e:	d50e      	bpl.n	80030ae <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003098:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800309a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80030aa:	2001      	movs	r0, #1
}
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7fe ffb9 	bl	8002024 <HAL_GetTick>
 80030b2:	1b80      	subs	r0, r0, r6
 80030b4:	42a8      	cmp	r0, r5
 80030b6:	d801      	bhi.n	80030bc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	d1df      	bne.n	800307c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030bc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80030be:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030c0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030cc:	f042 0220 	orr.w	r2, r2, #32
 80030d0:	e7e8      	b.n	80030a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080030d2 <I2C_WaitOnFlagUntilTimeout>:
{
 80030d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030d6:	9e08      	ldr	r6, [sp, #32]
 80030d8:	4604      	mov	r4, r0
 80030da:	4690      	mov	r8, r2
 80030dc:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030de:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80030e2:	b28d      	uxth	r5, r1
 80030e4:	6821      	ldr	r1, [r4, #0]
 80030e6:	f1b9 0f01 	cmp.w	r9, #1
 80030ea:	bf0c      	ite	eq
 80030ec:	694b      	ldreq	r3, [r1, #20]
 80030ee:	698b      	ldrne	r3, [r1, #24]
 80030f0:	ea35 0303 	bics.w	r3, r5, r3
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	4598      	cmp	r8, r3
 80030fc:	d001      	beq.n	8003102 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80030fe:	2000      	movs	r0, #0
 8003100:	e016      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003102:	1c7b      	adds	r3, r7, #1
 8003104:	d0ef      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fe ff8d 	bl	8002024 <HAL_GetTick>
 800310a:	1b80      	subs	r0, r0, r6
 800310c:	42b8      	cmp	r0, r7
 800310e:	d801      	bhi.n	8003114 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003110:	2f00      	cmp	r7, #0
 8003112:	d1e7      	bne.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003114:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003116:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003118:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800311a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800311e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003124:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800312e:	2001      	movs	r0, #1
}
 8003130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003134 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	4604      	mov	r4, r0
 8003138:	460d      	mov	r5, r1
 800313a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	d501      	bpl.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003144:	2000      	movs	r0, #0
}
 8003146:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003148:	4620      	mov	r0, r4
 800314a:	f7ff ff19 	bl	8002f80 <I2C_IsAcknowledgeFailed>
 800314e:	b9a8      	cbnz	r0, 800317c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003150:	1c6a      	adds	r2, r5, #1
 8003152:	d0f3      	beq.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003154:	f7fe ff66 	bl	8002024 <HAL_GetTick>
 8003158:	1b80      	subs	r0, r0, r6
 800315a:	42a8      	cmp	r0, r5
 800315c:	d801      	bhi.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800315e:	2d00      	cmp	r5, #0
 8003160:	d1ec      	bne.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003162:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003164:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003166:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003168:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800316c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003172:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003176:	f042 0220 	orr.w	r2, r2, #32
 800317a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
 800317e:	e7e2      	b.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08003180 <I2C_RequestMemoryWrite>:
{
 8003180:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003184:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003186:	6802      	ldr	r2, [r0, #0]
{
 8003188:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800318a:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800318c:	6813      	ldr	r3, [r2, #0]
 800318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003192:	6013      	str	r3, [r2, #0]
{
 8003194:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003198:	9600      	str	r6, [sp, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80031a0:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a2:	f7ff ff96 	bl	80030d2 <I2C_WaitOnFlagUntilTimeout>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	b138      	cbz	r0, 80031ba <I2C_RequestMemoryWrite+0x3a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	05db      	lsls	r3, r3, #23
 80031ae:	d502      	bpl.n	80031b6 <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80031b6:	2003      	movs	r0, #3
 80031b8:	e00a      	b.n	80031d0 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ba:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80031be:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031c2:	4919      	ldr	r1, [pc, #100]	; (8003228 <I2C_RequestMemoryWrite+0xa8>)
 80031c4:	4633      	mov	r3, r6
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7ff fef4 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031cc:	b118      	cbz	r0, 80031d6 <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 80031ce:	2001      	movs	r0, #1
}
 80031d0:	b004      	add	sp, #16
 80031d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	9003      	str	r0, [sp, #12]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	9203      	str	r2, [sp, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e2:	4632      	mov	r2, r6
 80031e4:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff ffa3 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ee:	b140      	cbz	r0, 8003202 <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f2:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	bf01      	itttt	eq
 80031f6:	6822      	ldreq	r2, [r4, #0]
 80031f8:	6813      	ldreq	r3, [r2, #0]
 80031fa:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80031fe:	6013      	streq	r3, [r2, #0]
 8003200:	e7e5      	b.n	80031ce <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003202:	f1b8 0f01 	cmp.w	r8, #1
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	d102      	bne.n	8003210 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800320a:	b2ed      	uxtb	r5, r5
 800320c:	611d      	str	r5, [r3, #16]
 800320e:	e7df      	b.n	80031d0 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003210:	0a2a      	lsrs	r2, r5, #8
 8003212:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003214:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003216:	4632      	mov	r2, r6
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff ff8b 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 800321e:	2800      	cmp	r0, #0
 8003220:	d1e6      	bne.n	80031f0 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	e7f1      	b.n	800320a <I2C_RequestMemoryWrite+0x8a>
 8003226:	bf00      	nop
 8003228:	00010002 	.word	0x00010002

0800322c <I2C_RequestMemoryRead>:
{
 800322c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003230:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003232:	6803      	ldr	r3, [r0, #0]
{
 8003234:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003236:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800323e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003246:	601a      	str	r2, [r3, #0]
{
 8003248:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800324a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800324c:	9500      	str	r5, [sp, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8003254:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003256:	f7ff ff3c 	bl	80030d2 <I2C_WaitOnFlagUntilTimeout>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	b148      	cbz	r0, 8003272 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	05db      	lsls	r3, r3, #23
 8003262:	d502      	bpl.n	800326a <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003268:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800326a:	2003      	movs	r0, #3
}
 800326c:	b004      	add	sp, #16
 800326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003272:	b2ff      	uxtb	r7, r7
 8003274:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8003278:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800327a:	492a      	ldr	r1, [pc, #168]	; (8003324 <I2C_RequestMemoryRead+0xf8>)
 800327c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800327e:	462b      	mov	r3, r5
 8003280:	4620      	mov	r0, r4
 8003282:	f7ff fe97 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003286:	b108      	cbz	r0, 800328c <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8003288:	2001      	movs	r0, #1
 800328a:	e7ef      	b.n	800326c <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	9003      	str	r0, [sp, #12]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	9203      	str	r2, [sp, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003298:	462a      	mov	r2, r5
 800329a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329e:	4620      	mov	r0, r4
 80032a0:	f7ff ff48 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a4:	b140      	cbz	r0, 80032b8 <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032a8:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	bf01      	itttt	eq
 80032ac:	6822      	ldreq	r2, [r4, #0]
 80032ae:	6813      	ldreq	r3, [r2, #0]
 80032b0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80032b4:	6013      	streq	r3, [r2, #0]
 80032b6:	e7e7      	b.n	8003288 <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032b8:	f1b8 0f01 	cmp.w	r8, #1
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	d125      	bne.n	800330c <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c0:	b2f6      	uxtb	r6, r6
 80032c2:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c4:	462a      	mov	r2, r5
 80032c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7ff ff33 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ce:	4602      	mov	r2, r0
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d1e8      	bne.n	80032a6 <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d4:	6821      	ldr	r1, [r4, #0]
 80032d6:	680b      	ldr	r3, [r1, #0]
 80032d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032dc:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032de:	4620      	mov	r0, r4
 80032e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032e2:	9500      	str	r5, [sp, #0]
 80032e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e8:	f7ff fef3 	bl	80030d2 <I2C_WaitOnFlagUntilTimeout>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d1b5      	bne.n	800325e <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032f2:	f047 0701 	orr.w	r7, r7, #1
 80032f6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032fa:	490a      	ldr	r1, [pc, #40]	; (8003324 <I2C_RequestMemoryRead+0xf8>)
 80032fc:	462b      	mov	r3, r5
 80032fe:	4620      	mov	r0, r4
 8003300:	f7ff fe58 	bl	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003304:	3000      	adds	r0, #0
 8003306:	bf18      	it	ne
 8003308:	2001      	movne	r0, #1
 800330a:	e7af      	b.n	800326c <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800330c:	0a32      	lsrs	r2, r6, #8
 800330e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003310:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003312:	462a      	mov	r2, r5
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff ff0d 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 800331a:	2800      	cmp	r0, #0
 800331c:	d1c3      	bne.n	80032a6 <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	e7ce      	b.n	80032c0 <I2C_RequestMemoryRead+0x94>
 8003322:	bf00      	nop
 8003324:	00010002 	.word	0x00010002

08003328 <HAL_I2C_MspInit>:
}
 8003328:	4770      	bx	lr
	...

0800332c <HAL_I2C_Init>:
{
 800332c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800332e:	4604      	mov	r4, r0
 8003330:	b908      	cbnz	r0, 8003336 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003332:	2001      	movs	r0, #1
}
 8003334:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003336:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800333a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800333e:	b91b      	cbnz	r3, 8003348 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003340:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003344:	f7ff fff0 	bl	8003328 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	2324      	movs	r3, #36	; 0x24
 800334a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003366:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003368:	f001 f98e 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800336c:	6863      	ldr	r3, [r4, #4]
 800336e:	4a41      	ldr	r2, [pc, #260]	; (8003474 <HAL_I2C_Init+0x148>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d84d      	bhi.n	8003410 <HAL_I2C_Init+0xe4>
 8003374:	4a40      	ldr	r2, [pc, #256]	; (8003478 <HAL_I2C_Init+0x14c>)
 8003376:	4290      	cmp	r0, r2
 8003378:	d9db      	bls.n	8003332 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800337a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800337c:	493f      	ldr	r1, [pc, #252]	; (800347c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800337e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003380:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003384:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003388:	430d      	orrs	r5, r1
 800338a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800338c:	6a15      	ldr	r5, [r2, #32]
 800338e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003392:	3101      	adds	r1, #1
 8003394:	4329      	orrs	r1, r5
 8003396:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003398:	69d1      	ldr	r1, [r2, #28]
 800339a:	4d36      	ldr	r5, [pc, #216]	; (8003474 <HAL_I2C_Init+0x148>)
 800339c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033a6:	f100 30ff 	add.w	r0, r0, #4294967295
 80033aa:	d848      	bhi.n	800343e <HAL_I2C_Init+0x112>
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80033b2:	1c43      	adds	r3, r0, #1
 80033b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	bf38      	it	cc
 80033bc:	2304      	movcc	r3, #4
 80033be:	430b      	orrs	r3, r1
 80033c0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033c2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80033c6:	6811      	ldr	r1, [r2, #0]
 80033c8:	4303      	orrs	r3, r0
 80033ca:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80033ce:	430b      	orrs	r3, r1
 80033d0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d2:	6891      	ldr	r1, [r2, #8]
 80033d4:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80033d8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80033dc:	4303      	orrs	r3, r0
 80033de:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e6:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80033ea:	68d1      	ldr	r1, [r2, #12]
 80033ec:	4303      	orrs	r3, r0
 80033ee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033f2:	430b      	orrs	r3, r1
 80033f4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80033f6:	6813      	ldr	r3, [r2, #0]
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fe:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003400:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003402:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003404:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003408:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800340a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800340e:	e791      	b.n	8003334 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_I2C_Init+0x154>)
 8003412:	4290      	cmp	r0, r2
 8003414:	d98d      	bls.n	8003332 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003416:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003418:	4e18      	ldr	r6, [pc, #96]	; (800347c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800341c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003420:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003424:	4335      	orrs	r5, r6
 8003426:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003428:	6a15      	ldr	r5, [r2, #32]
 800342a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800342e:	4371      	muls	r1, r6
 8003430:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003434:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003438:	fbb1 f1f6 	udiv	r1, r1, r6
 800343c:	e7a9      	b.n	8003392 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343e:	68a5      	ldr	r5, [r4, #8]
 8003440:	b955      	cbnz	r5, 8003458 <HAL_I2C_Init+0x12c>
 8003442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003446:	fbb0 f0f3 	udiv	r0, r0, r3
 800344a:	1c43      	adds	r3, r0, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	b16b      	cbz	r3, 800346e <HAL_I2C_Init+0x142>
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e7b2      	b.n	80033be <HAL_I2C_Init+0x92>
 8003458:	2519      	movs	r5, #25
 800345a:	436b      	muls	r3, r5
 800345c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	b113      	cbz	r3, 800346e <HAL_I2C_Init+0x142>
 8003468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800346c:	e7a7      	b.n	80033be <HAL_I2C_Init+0x92>
 800346e:	2301      	movs	r3, #1
 8003470:	e7a5      	b.n	80033be <HAL_I2C_Init+0x92>
 8003472:	bf00      	nop
 8003474:	000186a0 	.word	0x000186a0
 8003478:	001e847f 	.word	0x001e847f
 800347c:	000f4240 	.word	0x000f4240
 8003480:	003d08ff 	.word	0x003d08ff

08003484 <HAL_I2C_MspDeInit>:
 8003484:	4770      	bx	lr

08003486 <HAL_I2C_DeInit>:
{
 8003486:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003488:	4604      	mov	r4, r0
 800348a:	b198      	cbz	r0, 80034b4 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800348c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800348e:	2324      	movs	r3, #36	; 0x24
 8003490:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003494:	6813      	ldr	r3, [r2, #0]
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800349c:	f7ff fff2 	bl	8003484 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034a0:	2000      	movs	r0, #0
 80034a2:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80034a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80034a8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ac:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ae:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80034b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
 80034b6:	e7fc      	b.n	80034b2 <HAL_I2C_DeInit+0x2c>

080034b8 <HAL_I2C_Mem_Write>:
{
 80034b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80034bc:	4604      	mov	r4, r0
 80034be:	4699      	mov	r9, r3
 80034c0:	460f      	mov	r7, r1
 80034c2:	4690      	mov	r8, r2
 80034c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80034c6:	f7fe fdad 	bl	8002024 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80034ce:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80034d0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	d003      	beq.n	80034dc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80034d4:	2002      	movs	r0, #2
}
 80034d6:	b003      	add	sp, #12
 80034d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034dc:	9000      	str	r0, [sp, #0]
 80034de:	2319      	movs	r3, #25
 80034e0:	2201      	movs	r2, #1
 80034e2:	493b      	ldr	r1, [pc, #236]	; (80035d0 <HAL_I2C_Mem_Write+0x118>)
 80034e4:	4620      	mov	r0, r4
 80034e6:	f7ff fdf4 	bl	80030d2 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d1f2      	bne.n	80034d4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80034ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d0ee      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x1c>
 80034f6:	2301      	movs	r3, #1
 80034f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003502:	bf5e      	ittt	pl
 8003504:	681a      	ldrpl	r2, [r3, #0]
 8003506:	f042 0201 	orrpl.w	r2, r2, #1
 800350a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003512:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003514:	2321      	movs	r3, #33	; 0x21
 8003516:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351a:	2340      	movs	r3, #64	; 0x40
 800351c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003526:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003528:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800352c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800352e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003530:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003532:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_I2C_Mem_Write+0x11c>)
 8003534:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003536:	e9cd 6500 	strd	r6, r5, [sp]
 800353a:	464b      	mov	r3, r9
 800353c:	4642      	mov	r2, r8
 800353e:	4639      	mov	r1, r7
 8003540:	4620      	mov	r0, r4
 8003542:	f7ff fe1d 	bl	8003180 <I2C_RequestMemoryWrite>
 8003546:	2800      	cmp	r0, #0
 8003548:	d02a      	beq.n	80035a0 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800354a:	2001      	movs	r0, #1
 800354c:	e7c3      	b.n	80034d6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354e:	f7ff fdf1 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 8003552:	b140      	cbz	r0, 8003566 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003556:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	bf01      	itttt	eq
 800355a:	6822      	ldreq	r2, [r4, #0]
 800355c:	6813      	ldreq	r3, [r2, #0]
 800355e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003562:	6013      	streq	r3, [r2, #0]
 8003564:	e7f1      	b.n	800354a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003568:	6827      	ldr	r7, [r4, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003570:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003572:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003574:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003576:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003578:	3a01      	subs	r2, #1
 800357a:	b292      	uxth	r2, r2
 800357c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800357e:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003580:	1e48      	subs	r0, r1, #1
 8003582:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003584:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003586:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003588:	d50a      	bpl.n	80035a0 <HAL_I2C_Mem_Write+0xe8>
 800358a:	b148      	cbz	r0, 80035a0 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358c:	785a      	ldrb	r2, [r3, #1]
 800358e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003590:	3302      	adds	r3, #2
 8003592:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003594:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003596:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8003598:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800359a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800359c:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800359e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a2:	462a      	mov	r2, r5
 80035a4:	4631      	mov	r1, r6
 80035a6:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1d0      	bne.n	800354e <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ac:	f7ff fd3c 	bl	8003028 <I2C_WaitOnBTFFlagUntilTimeout>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d1cf      	bne.n	8003554 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035bc:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80035be:	2320      	movs	r3, #32
 80035c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80035c4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80035cc:	e783      	b.n	80034d6 <HAL_I2C_Mem_Write+0x1e>
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000

080035d8 <HAL_I2C_Mem_Read>:
{
 80035d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035dc:	4604      	mov	r4, r0
 80035de:	b087      	sub	sp, #28
 80035e0:	4699      	mov	r9, r3
 80035e2:	460d      	mov	r5, r1
 80035e4:	4690      	mov	r8, r2
 80035e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80035e8:	f7fe fd1c 	bl	8002024 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035f0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80035f2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f4:	d004      	beq.n	8003600 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80035f6:	2502      	movs	r5, #2
}
 80035f8:	4628      	mov	r0, r5
 80035fa:	b007      	add	sp, #28
 80035fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003600:	9000      	str	r0, [sp, #0]
 8003602:	2319      	movs	r3, #25
 8003604:	2201      	movs	r2, #1
 8003606:	4977      	ldr	r1, [pc, #476]	; (80037e4 <HAL_I2C_Mem_Read+0x20c>)
 8003608:	4620      	mov	r0, r4
 800360a:	f7ff fd62 	bl	80030d2 <I2C_WaitOnFlagUntilTimeout>
 800360e:	2800      	cmp	r0, #0
 8003610:	d1f1      	bne.n	80035f6 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8003612:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d0ed      	beq.n	80035f6 <HAL_I2C_Mem_Read+0x1e>
 800361a:	2301      	movs	r3, #1
 800361c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003626:	bf5e      	ittt	pl
 8003628:	681a      	ldrpl	r2, [r3, #0]
 800362a:	f042 0201 	orrpl.w	r2, r2, #1
 800362e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003638:	2322      	movs	r3, #34	; 0x22
 800363a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800363e:	2340      	movs	r3, #64	; 0x40
 8003640:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	2300      	movs	r3, #0
 8003646:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800364c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003650:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003652:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003654:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003656:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <HAL_I2C_Mem_Read+0x210>)
 8003658:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365a:	4629      	mov	r1, r5
 800365c:	e9cd 7600 	strd	r7, r6, [sp]
 8003660:	464b      	mov	r3, r9
 8003662:	4642      	mov	r2, r8
 8003664:	4620      	mov	r0, r4
 8003666:	f7ff fde1 	bl	800322c <I2C_RequestMemoryRead>
 800366a:	4605      	mov	r5, r0
 800366c:	b108      	cbz	r0, 8003672 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800366e:	2501      	movs	r5, #1
 8003670:	e7c2      	b.n	80035f8 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8003672:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	b992      	cbnz	r2, 800369e <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003678:	9002      	str	r0, [sp, #8]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	9202      	str	r2, [sp, #8]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	9202      	str	r2, [sp, #8]
 8003682:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	2320      	movs	r3, #32
 800368e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	2300      	movs	r3, #0
 8003694:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003698:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800369c:	e7ac      	b.n	80035f8 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800369e:	2a01      	cmp	r2, #1
 80036a0:	d12c      	bne.n	80036fc <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	9003      	str	r0, [sp, #12]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	9203      	str	r2, [sp, #12]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	9203      	str	r2, [sp, #12]
 80036b4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036be:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80037ec <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 80036c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0e1      	beq.n	800368c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d86e      	bhi.n	80037aa <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d12d      	bne.n	800372c <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d0:	4632      	mov	r2, r6
 80036d2:	4639      	mov	r1, r7
 80036d4:	4620      	mov	r0, r4
 80036d6:	f7ff fccd 	bl	8003074 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d1c7      	bne.n	800366e <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80036e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e8:	3301      	adds	r3, #1
 80036ea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80036ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80036fa:	e7e2      	b.n	80036c2 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 80036fc:	2a02      	cmp	r2, #2
 80036fe:	d10e      	bne.n	800371e <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003710:	9004      	str	r0, [sp, #16]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	9204      	str	r2, [sp, #16]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	9304      	str	r3, [sp, #16]
 800371a:	9b04      	ldr	r3, [sp, #16]
 800371c:	e7cf      	b.n	80036be <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371e:	9005      	str	r0, [sp, #20]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	9205      	str	r2, [sp, #20]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	9305      	str	r3, [sp, #20]
 8003728:	9b05      	ldr	r3, [sp, #20]
 800372a:	e7c8      	b.n	80036be <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 800372c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800372e:	9600      	str	r6, [sp, #0]
 8003730:	463b      	mov	r3, r7
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	4641      	mov	r1, r8
 8003738:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800373a:	d119      	bne.n	8003770 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800373c:	f7ff fcc9 	bl	80030d2 <I2C_WaitOnFlagUntilTimeout>
 8003740:	2800      	cmp	r0, #0
 8003742:	d194      	bne.n	800366e <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003752:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003756:	1c53      	adds	r3, r2, #1
 8003758:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800375a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003760:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003762:	3b01      	subs	r3, #1
 8003764:	b29b      	uxth	r3, r3
 8003766:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003768:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	7053      	strb	r3, [r2, #1]
 800376e:	e7ba      	b.n	80036e6 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003770:	f7ff fcaf 	bl	80030d2 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4602      	mov	r2, r0
 8003776:	2800      	cmp	r0, #0
 8003778:	f47f af79 	bne.w	800366e <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003784:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	6919      	ldr	r1, [r3, #16]
 8003788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800378a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800378c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8003790:	3301      	adds	r3, #1
 8003792:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003794:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800379a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800379c:	3b01      	subs	r3, #1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a2:	4641      	mov	r1, r8
 80037a4:	463b      	mov	r3, r7
 80037a6:	4620      	mov	r0, r4
 80037a8:	e7c8      	b.n	800373c <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	4632      	mov	r2, r6
 80037ac:	4639      	mov	r1, r7
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7ff fc60 	bl	8003074 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	f47f af5a 	bne.w	800366e <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037c4:	1c53      	adds	r3, r2, #1
 80037c6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80037c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80037ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	6959      	ldr	r1, [r3, #20]
 80037da:	0749      	lsls	r1, r1, #29
 80037dc:	f57f af71 	bpl.w	80036c2 <HAL_I2C_Mem_Read+0xea>
 80037e0:	e7c3      	b.n	800376a <HAL_I2C_Mem_Read+0x192>
 80037e2:	bf00      	nop
 80037e4:	00100002 	.word	0x00100002
 80037e8:	ffff0000 	.word	0xffff0000
 80037ec:	00010004 	.word	0x00010004

080037f0 <HAL_I2C_GetState>:
  return hi2c->State;
 80037f0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80037f4:	4770      	bx	lr

080037f6 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80037f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	460f      	mov	r7, r1
 80037fe:	4616      	mov	r6, r2
 8003800:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003802:	f7fe fc0f 	bl	8002024 <HAL_GetTick>
 8003806:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	6893      	ldr	r3, [r2, #8]
 800380c:	ea37 0303 	bics.w	r3, r7, r3
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	42b3      	cmp	r3, r6
 8003818:	d101      	bne.n	800381e <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800381a:	2000      	movs	r0, #0
 800381c:	e00e      	b.n	800383c <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 800381e:	1c6b      	adds	r3, r5, #1
 8003820:	d0f3      	beq.n	800380a <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003822:	f7fe fbff 	bl	8002024 <HAL_GetTick>
 8003826:	eba0 0008 	sub.w	r0, r0, r8
 800382a:	42a8      	cmp	r0, r5
 800382c:	d3ec      	bcc.n	8003808 <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 800382e:	2301      	movs	r3, #1
 8003830:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 8003834:	2300      	movs	r3, #0
 8003836:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800383a:	2003      	movs	r0, #3
}
 800383c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003840 <HAL_I2S_MspInit>:
}
 8003840:	4770      	bx	lr
	...

08003844 <HAL_I2S_Init>:
{
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s == NULL)
 8003846:	4604      	mov	r4, r0
 8003848:	2800      	cmp	r0, #0
 800384a:	d041      	beq.n	80038d0 <HAL_I2S_Init+0x8c>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 800384c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003850:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003854:	b92b      	cbnz	r3, 8003862 <HAL_I2S_Init+0x1e>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003856:	4b42      	ldr	r3, [pc, #264]	; (8003960 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8003858:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800385c:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 800385e:	f7ff ffef 	bl	8003840 <HAL_I2S_MspInit>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8003862:	2102      	movs	r1, #2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003864:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8003866:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800386a:	69d3      	ldr	r3, [r2, #28]
 800386c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003870:	f023 030f 	bic.w	r3, r3, #15
 8003874:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003876:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8003878:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800387a:	428b      	cmp	r3, r1
 800387c:	d031      	beq.n	80038e2 <HAL_I2S_Init+0x9e>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800387e:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8003880:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003882:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8003884:	bf14      	ite	ne
 8003886:	2520      	movne	r5, #32
 8003888:	2510      	moveq	r5, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800388a:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800388c:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 800388e:	bf98      	it	ls
 8003890:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003892:	f000 ffcd 	bl	8004830 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	6961      	ldr	r1, [r4, #20]
 800389a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389e:	d11b      	bne.n	80038d8 <HAL_I2S_Init+0x94>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038a0:	68e3      	ldr	r3, [r4, #12]
 80038a2:	220a      	movs	r2, #10
 80038a4:	b1b3      	cbz	r3, 80038d4 <HAL_I2S_Init+0x90>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038a6:	00ab      	lsls	r3, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ac:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 80038ae:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b4:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80038b6:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038ba:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038be:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038c0:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038c2:	1e99      	subs	r1, r3, #2
 80038c4:	29fd      	cmp	r1, #253	; 0xfd
 80038c6:	d90e      	bls.n	80038e6 <HAL_I2S_Init+0xa2>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038ca:	f043 0310 	orr.w	r3, r3, #16
 80038ce:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
 80038d2:	e044      	b.n	800395e <HAL_I2S_Init+0x11a>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038d4:	00eb      	lsls	r3, r5, #3
 80038d6:	e7e7      	b.n	80038a8 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038d8:	230a      	movs	r3, #10
 80038da:	fbb0 f0f5 	udiv	r0, r0, r5
 80038de:	4343      	muls	r3, r0
 80038e0:	e7e5      	b.n	80038ae <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 80038e2:	2200      	movs	r2, #0
 80038e4:	e7ed      	b.n	80038c2 <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038e6:	4313      	orrs	r3, r2
 80038e8:	6922      	ldr	r2, [r4, #16]
 80038ea:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038ec:	68e5      	ldr	r5, [r4, #12]
 80038ee:	69a0      	ldr	r0, [r4, #24]
 80038f0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8003970 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038f4:	4313      	orrs	r3, r2
 80038f6:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038f8:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 80038fc:	ea46 0203 	orr.w	r2, r6, r3
 8003900:	69cf      	ldr	r7, [r1, #28]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003906:	432a      	orrs	r2, r5
 8003908:	4302      	orrs	r2, r0
 800390a:	ea07 070c 	and.w	r7, r7, ip
 800390e:	433a      	orrs	r2, r7
 8003910:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003912:	6a22      	ldr	r2, [r4, #32]
 8003914:	2a01      	cmp	r2, #1
 8003916:	d11d      	bne.n	8003954 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003918:	4a12      	ldr	r2, [pc, #72]	; (8003964 <HAL_I2S_Init+0x120>)
 800391a:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800391c:	4f12      	ldr	r7, [pc, #72]	; (8003968 <HAL_I2S_Init+0x124>)
 800391e:	4a13      	ldr	r2, [pc, #76]	; (800396c <HAL_I2S_Init+0x128>)
 8003920:	42b9      	cmp	r1, r7
 8003922:	bf18      	it	ne
 8003924:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003928:	432b      	orrs	r3, r5
 800392a:	69d1      	ldr	r1, [r2, #28]
 800392c:	ea01 010c 	and.w	r1, r1, ip
 8003930:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003932:	2102      	movs	r1, #2
 8003934:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003936:	69d7      	ldr	r7, [r2, #28]
 8003938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800393c:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_RX;
 800393e:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8003942:	ea43 0307 	orr.w	r3, r3, r7
 8003946:	bf14      	ite	ne
 8003948:	2100      	movne	r1, #0
 800394a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800394e:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003950:	430b      	orrs	r3, r1
 8003952:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003954:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8003956:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003958:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800395a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800395e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003960:	08003e39 	.word	0x08003e39
 8003964:	08003f65 	.word	0x08003f65
 8003968:	40003800 	.word	0x40003800
 800396c:	40003400 	.word	0x40003400
 8003970:	fffff040 	.word	0xfffff040

08003974 <HAL_I2S_Transmit_DMA>:
{
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003978:	2900      	cmp	r1, #0
 800397a:	d04e      	beq.n	8003a1a <HAL_I2S_Transmit_DMA+0xa6>
 800397c:	2a00      	cmp	r2, #0
 800397e:	d04c      	beq.n	8003a1a <HAL_I2S_Transmit_DMA+0xa6>
  __HAL_LOCK(hi2s);
 8003980:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003984:	2b01      	cmp	r3, #1
 8003986:	d00a      	beq.n	800399e <HAL_I2S_Transmit_DMA+0x2a>
 8003988:	2301      	movs	r3, #1
 800398a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 800398e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003992:	2b01      	cmp	r3, #1
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_I2S_Transmit_DMA+0x2e>
    __HAL_UNLOCK(hi2s);
 800399a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 800399e:	2002      	movs	r0, #2
 80039a0:	e027      	b.n	80039f2 <HAL_I2S_Transmit_DMA+0x7e>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80039a2:	2003      	movs	r0, #3
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80039a4:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80039a6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039aa:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80039ac:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 80039ae:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80039b0:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80039b4:	4283      	cmp	r3, r0
 80039b6:	d001      	beq.n	80039bc <HAL_I2S_Transmit_DMA+0x48>
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d11b      	bne.n	80039f4 <HAL_I2S_Transmit_DMA+0x80>
    hi2s->TxXferSize = (Size << 1U);
 80039bc:	0053      	lsls	r3, r2, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80039c2:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80039c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_I2S_Transmit_DMA+0xac>)
 80039c8:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80039ca:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_I2S_Transmit_DMA+0xb0>)
 80039cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <HAL_I2S_Transmit_DMA+0xb4>)
 80039d0:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039d2:	f105 020c 	add.w	r2, r5, #12
                                 hi2s->TxXferSize))
 80039d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039d8:	f7fe fc66 	bl	80022a8 <HAL_DMA_Start_IT>
 80039dc:	b168      	cbz	r0, 80039fa <HAL_I2S_Transmit_DMA+0x86>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039de:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80039e0:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039e2:	f043 0308 	orr.w	r3, r3, #8
 80039e6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80039e8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 80039ec:	2300      	movs	r3, #0
 80039ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->TxXferSize = Size;
 80039f4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80039f6:	8562      	strh	r2, [r4, #42]	; 0x2a
 80039f8:	e7e4      	b.n	80039c4 <HAL_I2S_Transmit_DMA+0x50>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8003a00:	bf5e      	ittt	pl
 8003a02:	69da      	ldrpl	r2, [r3, #28]
 8003a04:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8003a08:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a0e:	bf5e      	ittt	pl
 8003a10:	685a      	ldrpl	r2, [r3, #4]
 8003a12:	f042 0202 	orrpl.w	r2, r2, #2
 8003a16:	605a      	strpl	r2, [r3, #4]
 8003a18:	e7e8      	b.n	80039ec <HAL_I2S_Transmit_DMA+0x78>
    return  HAL_ERROR;
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	e7e9      	b.n	80039f2 <HAL_I2S_Transmit_DMA+0x7e>
 8003a1e:	bf00      	nop
 8003a20:	08003de1 	.word	0x08003de1
 8003a24:	08003deb 	.word	0x08003deb
 8003a28:	08003f33 	.word	0x08003f33

08003a2c <HAL_I2S_Receive_DMA>:
{
 8003a2c:	b513      	push	{r0, r1, r4, lr}
 8003a2e:	4613      	mov	r3, r2
 8003a30:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003a32:	460a      	mov	r2, r1
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d058      	beq.n	8003aea <HAL_I2S_Receive_DMA+0xbe>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d056      	beq.n	8003aea <HAL_I2S_Receive_DMA+0xbe>
  __HAL_LOCK(hi2s);
 8003a3c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
 8003a40:	2901      	cmp	r1, #1
 8003a42:	d00a      	beq.n	8003a5a <HAL_I2S_Receive_DMA+0x2e>
 8003a44:	2101      	movs	r1, #1
 8003a46:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8003a4a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003a4e:	2901      	cmp	r1, #1
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 8003a56:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	e033      	b.n	8003ac6 <HAL_I2S_Receive_DMA+0x9a>
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003a5e:	2004      	movs	r0, #4
 8003a60:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a64:	6461      	str	r1, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003a66:	6821      	ldr	r1, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8003a68:	62e2      	str	r2, [r4, #44]	; 0x2c
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003a6a:	69c8      	ldr	r0, [r1, #28]
 8003a6c:	f000 0007 	and.w	r0, r0, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003a70:	2803      	cmp	r0, #3
 8003a72:	d001      	beq.n	8003a78 <HAL_I2S_Receive_DMA+0x4c>
 8003a74:	2805      	cmp	r0, #5
 8003a76:	d101      	bne.n	8003a7c <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003a7c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 8003a7e:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003a80:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003a82:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_I2S_Receive_DMA+0xc4>)
 8003a84:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_I2S_Receive_DMA+0xc8>)
 8003a88:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_I2S_Receive_DMA+0xcc>)
 8003a8c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003a8e:	69cb      	ldr	r3, [r1, #28]
 8003a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a98:	d106      	bne.n	8003aa8 <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	68cb      	ldr	r3, [r1, #12]
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	688b      	ldr	r3, [r1, #8]
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8003aa8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003aaa:	310c      	adds	r1, #12
 8003aac:	f7fe fbfc 	bl	80022a8 <HAL_DMA_Start_IT>
 8003ab0:	b158      	cbz	r0, 8003aca <HAL_I2S_Receive_DMA+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003ab4:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003abc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8003ad0:	bf5e      	ittt	pl
 8003ad2:	69da      	ldrpl	r2, [r3, #28]
 8003ad4:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8003ad8:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ade:	bf5e      	ittt	pl
 8003ae0:	685a      	ldrpl	r2, [r3, #4]
 8003ae2:	f042 0201 	orrpl.w	r2, r2, #1
 8003ae6:	605a      	strpl	r2, [r3, #4]
 8003ae8:	e7ea      	b.n	8003ac0 <HAL_I2S_Receive_DMA+0x94>
    return  HAL_ERROR;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7eb      	b.n	8003ac6 <HAL_I2S_Receive_DMA+0x9a>
 8003aee:	bf00      	nop
 8003af0:	08003e0d 	.word	0x08003e0d
 8003af4:	08003e17 	.word	0x08003e17
 8003af8:	08003f33 	.word	0x08003f33

08003afc <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8003afc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d02d      	beq.n	8003b60 <HAL_I2S_DMAPause+0x64>
 8003b04:	2301      	movs	r3, #1
 8003b06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d109      	bne.n	8003b26 <HAL_I2S_DMAPause+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b12:	6802      	ldr	r2, [r0, #0]
 8003b14:	6853      	ldr	r3, [r2, #4]
 8003b16:	f023 0302 	bic.w	r3, r3, #2
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b1a:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8003b22:	4618      	mov	r0, r3
 8003b24:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d104      	bne.n	8003b38 <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b2e:	6802      	ldr	r2, [r0, #0]
 8003b30:	6853      	ldr	r3, [r2, #4]
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	e7f0      	b.n	8003b1a <HAL_I2S_DMAPause+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003b38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d1ed      	bne.n	8003b1c <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b40:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b42:	4908      	ldr	r1, [pc, #32]	; (8003b64 <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b44:	6853      	ldr	r3, [r2, #4]
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_I2S_DMAPause+0x6c>)
 8003b4e:	428a      	cmp	r2, r1
 8003b50:	bf18      	it	ne
 8003b52:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	f022 0203 	bic.w	r2, r2, #3
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	e7dd      	b.n	8003b1c <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 8003b60:	2002      	movs	r0, #2
}
 8003b62:	4770      	bx	lr
 8003b64:	40003800 	.word	0x40003800
 8003b68:	40003400 	.word	0x40003400

08003b6c <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 8003b6c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d039      	beq.n	8003be8 <HAL_I2S_DMAResume+0x7c>
 8003b74:	2301      	movs	r3, #1
 8003b76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b7a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003b7e:	6803      	ldr	r3, [r0, #0]
 8003b80:	2a03      	cmp	r2, #3
 8003b82:	d10f      	bne.n	8003ba4 <HAL_I2S_DMAResume+0x38>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	f042 0202 	orr.w	r2, r2, #2
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b8a:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	0552      	lsls	r2, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8003b90:	bf5e      	ittt	pl
 8003b92:	69da      	ldrpl	r2, [r3, #28]
 8003b94:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8003b98:	61da      	strpl	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ba4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003ba8:	2a04      	cmp	r2, #4
 8003baa:	d103      	bne.n	8003bb4 <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	e7ea      	b.n	8003b8a <HAL_I2S_DMAResume+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003bb4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003bb8:	2a05      	cmp	r2, #5
 8003bba:	d1e7      	bne.n	8003b8c <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bbc:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bbe:	490b      	ldr	r1, [pc, #44]	; (8003bec <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bc0:	f042 0203 	orr.w	r2, r2, #3
 8003bc4:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_I2S_DMAResume+0x84>)
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	bf18      	it	ne
 8003bcc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003bd0:	6851      	ldr	r1, [r2, #4]
 8003bd2:	f041 0103 	orr.w	r1, r1, #3
 8003bd6:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8003bd8:	69d1      	ldr	r1, [r2, #28]
 8003bda:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 8003bdc:	bf5e      	ittt	pl
 8003bde:	69d1      	ldrpl	r1, [r2, #28]
 8003be0:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 8003be4:	61d1      	strpl	r1, [r2, #28]
 8003be6:	e7d1      	b.n	8003b8c <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 8003be8:	2002      	movs	r0, #2
}
 8003bea:	4770      	bx	lr
 8003bec:	40003800 	.word	0x40003800
 8003bf0:	40003400 	.word	0x40003400

08003bf4 <HAL_I2S_DMAStop>:
{
 8003bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bf8:	6843      	ldr	r3, [r0, #4]
 8003bfa:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 8003bfe:	b085      	sub	sp, #20
 8003c00:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c02:	d16c      	bne.n	8003cde <HAL_I2S_DMAStop+0xea>
    if (hi2s->hdmatx != NULL)
 8003c04:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d15f      	bne.n	8003cca <HAL_I2S_DMAStop+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c0a:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003c0c:	2364      	movs	r3, #100	; 0x64
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2102      	movs	r1, #2
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff fdef 	bl	80037f6 <I2S_WaitFlagStateUntilTimeout>
 8003c18:	b130      	cbz	r0, 8003c28 <HAL_I2S_DMAStop+0x34>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003c1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003c1c:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003c24:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003c28:	2364      	movs	r3, #100	; 0x64
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff fde1 	bl	80037f6 <I2S_WaitFlagStateUntilTimeout>
 8003c34:	b130      	cbz	r0, 8003c44 <HAL_I2S_DMAStop+0x50>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003c36:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003c38:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003c40:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4c:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	9200      	str	r2, [sp, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	9200      	str	r2, [sp, #0]
 8003c56:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	f022 0202 	bic.w	r2, r2, #2
 8003c5e:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003c60:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d129      	bne.n	8003cbc <HAL_I2S_DMAStop+0xc8>
      if (hi2s->hdmarx != NULL)
 8003c68:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c6a:	b138      	cbz	r0, 8003c7c <HAL_I2S_DMAStop+0x88>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003c6c:	f7fe fb56 	bl	800231c <HAL_DMA_Abort>
 8003c70:	b120      	cbz	r0, 8003c7c <HAL_I2S_DMAStop+0x88>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c74:	f043 0308 	orr.w	r3, r3, #8
 8003c78:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003c7a:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 8003c7c:	6821      	ldr	r1, [r4, #0]
 8003c7e:	4a56      	ldr	r2, [pc, #344]	; (8003dd8 <HAL_I2S_DMAStop+0x1e4>)
 8003c80:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <HAL_I2S_DMAStop+0x1e8>)
 8003c82:	4291      	cmp	r1, r2
 8003c84:	bf18      	it	ne
 8003c86:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c90:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003c92:	2200      	movs	r2, #0
 8003c94:	9201      	str	r2, [sp, #4]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	9201      	str	r2, [sp, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	9201      	str	r2, [sp, #4]
 8003c9e:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003ca8:	6862      	ldr	r2, [r4, #4]
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d16c      	bne.n	8003d88 <HAL_I2S_DMAStop+0x194>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb0:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->State = HAL_I2S_STATE_READY;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8003cc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003cc4:	b005      	add	sp, #20
 8003cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003cca:	f7fe fb27 	bl	800231c <HAL_DMA_Abort>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d09b      	beq.n	8003c0a <HAL_I2S_DMAStop+0x16>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003cd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003cda:	2501      	movs	r5, #1
 8003cdc:	e796      	b.n	8003c0c <HAL_I2S_DMAStop+0x18>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce2:	d177      	bne.n	8003dd4 <HAL_I2S_DMAStop+0x1e0>
    if (hi2s->hdmarx != NULL)
 8003ce4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d150      	bne.n	8003d8c <HAL_I2S_DMAStop+0x198>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cea:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003cec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d135      	bne.n	8003d60 <HAL_I2S_DMAStop+0x16c>
      if (hi2s->hdmatx != NULL)
 8003cf4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cf6:	b138      	cbz	r0, 8003d08 <HAL_I2S_DMAStop+0x114>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003cf8:	f7fe fb10 	bl	800231c <HAL_DMA_Abort>
 8003cfc:	b120      	cbz	r0, 8003d08 <HAL_I2S_DMAStop+0x114>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003cfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003d06:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8003d08:	f7fe f98c 	bl	8002024 <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003d0c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003dd8 <HAL_I2S_DMAStop+0x1e4>
 8003d10:	4f32      	ldr	r7, [pc, #200]	; (8003ddc <HAL_I2S_DMAStop+0x1e8>)
      tickstart = HAL_GetTick();
 8003d12:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8003d14:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	4543      	cmp	r3, r8
 8003d1c:	bf0c      	ite	eq
 8003d1e:	463b      	moveq	r3, r7
 8003d20:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	079b      	lsls	r3, r3, #30
 8003d28:	d53a      	bpl.n	8003da0 <HAL_I2S_DMAStop+0x1ac>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003d2a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003dd8 <HAL_I2S_DMAStop+0x1e4>
 8003d2e:	4f2b      	ldr	r7, [pc, #172]	; (8003ddc <HAL_I2S_DMAStop+0x1e8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8003d30:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	4543      	cmp	r3, r8
 8003d38:	bf0c      	ite	eq
 8003d3a:	463b      	moveq	r3, r7
 8003d3c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8003d46:	d138      	bne.n	8003dba <HAL_I2S_DMAStop+0x1c6>
      __HAL_I2SEXT_DISABLE(hi2s);
 8003d48:	69d9      	ldr	r1, [r3, #28]
 8003d4a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003d4e:	61d9      	str	r1, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8003d50:	9202      	str	r2, [sp, #8]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	9202      	str	r2, [sp, #8]
 8003d56:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	f022 0202 	bic.w	r2, r2, #2
 8003d5e:	605a      	str	r2, [r3, #4]
    __HAL_I2S_DISABLE(hi2s);
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	9203      	str	r2, [sp, #12]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	9203      	str	r2, [sp, #12]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	9203      	str	r2, [sp, #12]
 8003d76:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003d80:	6862      	ldr	r2, [r4, #4]
 8003d82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d86:	d092      	beq.n	8003cae <HAL_I2S_DMAStop+0xba>
      READ_REG((hi2s->Instance)->DR);
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	e797      	b.n	8003cbc <HAL_I2S_DMAStop+0xc8>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003d8c:	f7fe fac6 	bl	800231c <HAL_DMA_Abort>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d0aa      	beq.n	8003cea <HAL_I2S_DMAStop+0xf6>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d96:	f043 0308 	orr.w	r3, r3, #8
 8003d9a:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003d9c:	2501      	movs	r5, #1
 8003d9e:	e7a5      	b.n	8003cec <HAL_I2S_DMAStop+0xf8>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003da0:	f7fe f940 	bl	8002024 <HAL_GetTick>
 8003da4:	1b80      	subs	r0, r0, r6
 8003da6:	2864      	cmp	r0, #100	; 0x64
 8003da8:	d9b6      	bls.n	8003d18 <HAL_I2S_DMAStop+0x124>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8003db2:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8003db4:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 8003db8:	e7ae      	b.n	8003d18 <HAL_I2S_DMAStop+0x124>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003dba:	f7fe f933 	bl	8002024 <HAL_GetTick>
 8003dbe:	1b80      	subs	r0, r0, r6
 8003dc0:	2864      	cmp	r0, #100	; 0x64
 8003dc2:	d9b7      	bls.n	8003d34 <HAL_I2S_DMAStop+0x140>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8003dcc:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8003dce:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 8003dd2:	e7af      	b.n	8003d34 <HAL_I2S_DMAStop+0x140>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	e771      	b.n	8003cbc <HAL_I2S_DMAStop+0xc8>
 8003dd8:	40003800 	.word	0x40003800
 8003ddc:	40003400 	.word	0x40003400

08003de0 <I2S_DMATxHalfCplt>:
{
 8003de0:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003de2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003de4:	f7fd ff34 	bl	8001c50 <HAL_I2S_TxHalfCpltCallback>
}
 8003de8:	bd08      	pop	{r3, pc}

08003dea <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8003dea:	69c1      	ldr	r1, [r0, #28]
{
 8003dec:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003df0:	b941      	cbnz	r1, 8003e04 <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	6842      	ldr	r2, [r0, #4]
 8003df6:	f022 0202 	bic.w	r2, r2, #2
 8003dfa:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003dfc:	2201      	movs	r2, #1
    hi2s->TxXferCount = 0U;
 8003dfe:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd ff19 	bl	8001c3c <HAL_I2S_TxCpltCallback>
}
 8003e0a:	bd08      	pop	{r3, pc}

08003e0c <I2S_DMARxHalfCplt>:
{
 8003e0c:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003e0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003e10:	f7fe f87e 	bl	8001f10 <HAL_I2S_RxHalfCpltCallback>
}
 8003e14:	bd08      	pop	{r3, pc}

08003e16 <I2S_DMARxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8003e16:	69c1      	ldr	r1, [r0, #28]
{
 8003e18:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003e1c:	b941      	cbnz	r1, 8003e30 <I2S_DMARxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	6842      	ldr	r2, [r0, #4]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	6042      	str	r2, [r0, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003e28:	2201      	movs	r2, #1
    hi2s->RxXferCount = 0U;
 8003e2a:	8659      	strh	r1, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe f869 	bl	8001f08 <HAL_I2S_RxCpltCallback>
}
 8003e36:	bd08      	pop	{r3, pc}

08003e38 <I2S_IRQHandler>:
{
 8003e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e3a:	6803      	ldr	r3, [r0, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e40:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003e44:	2a04      	cmp	r2, #4
{
 8003e46:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e48:	d136      	bne.n	8003eb8 <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e4a:	9a01      	ldr	r2, [sp, #4]
 8003e4c:	07d1      	lsls	r1, r2, #31
 8003e4e:	d517      	bpl.n	8003e80 <I2S_IRQHandler+0x48>
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	0652      	lsls	r2, r2, #25
 8003e54:	d514      	bpl.n	8003e80 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e56:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003e58:	68d9      	ldr	r1, [r3, #12]
 8003e5a:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8003e5e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003e60:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8003e62:	3a01      	subs	r2, #1
 8003e64:	b292      	uxth	r2, r2
 8003e66:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003e68:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8003e6a:	b292      	uxth	r2, r2
 8003e6c:	b942      	cbnz	r2, 8003e80 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e74:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8003e7c:	f7fe f844 	bl	8001f08 <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	0659      	lsls	r1, r3, #25
 8003e84:	d518      	bpl.n	8003eb8 <I2S_IRQHandler+0x80>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	0692      	lsls	r2, r2, #26
 8003e8c:	d514      	bpl.n	8003eb8 <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e94:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e96:	2200      	movs	r2, #0
 8003e98:	9202      	str	r2, [sp, #8]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	9202      	str	r2, [sp, #8]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	9302      	str	r3, [sp, #8]
 8003ea2:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7fe f832 	bl	8001f1c <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003eb8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d136      	bne.n	8003f2e <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ec0:	9b01      	ldr	r3, [sp, #4]
 8003ec2:	079b      	lsls	r3, r3, #30
 8003ec4:	d519      	bpl.n	8003efa <I2S_IRQHandler+0xc2>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	6853      	ldr	r3, [r2, #4]
 8003eca:	0618      	lsls	r0, r3, #24
 8003ecc:	d515      	bpl.n	8003efa <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ed0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003ed4:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8003ed6:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ed8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8003ee0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	b94b      	cbnz	r3, 8003efa <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee6:	6853      	ldr	r3, [r2, #4]
 8003ee8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eec:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7fd fea1 	bl	8001c3c <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003efa:	9b01      	ldr	r3, [sp, #4]
 8003efc:	0719      	lsls	r1, r3, #28
 8003efe:	d516      	bpl.n	8003f2e <I2S_IRQHandler+0xf6>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	0692      	lsls	r2, r2, #26
 8003f06:	d512      	bpl.n	8003f2e <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f0e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f10:	2200      	movs	r2, #0
 8003f12:	9203      	str	r2, [sp, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	9303      	str	r3, [sp, #12]
 8003f18:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7fd fff7 	bl	8001f1c <HAL_I2S_ErrorCallback>
}
 8003f2e:	b004      	add	sp, #16
 8003f30:	bd10      	pop	{r4, pc}

08003f32 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f32:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003f34:	6802      	ldr	r2, [r0, #0]
{
 8003f36:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003f38:	6853      	ldr	r3, [r2, #4]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003f44:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f4e:	f043 0308 	orr.w	r3, r3, #8
 8003f52:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8003f54:	f7fd ffe2 	bl	8001f1c <HAL_I2S_ErrorCallback>
}
 8003f58:	bd08      	pop	{r3, pc}

08003f5a <HAL_I2S_GetState>:
  return hi2s->State;
 8003f5a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2SEx_TxRxCpltCallback>:
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f64:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f66:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f68:	498e      	ldr	r1, [pc, #568]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f6a:	6893      	ldr	r3, [r2, #8]
{
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f70:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f72:	4b8d      	ldr	r3, [pc, #564]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003f74:	428a      	cmp	r2, r1
 8003f76:	bf18      	it	ne
 8003f78:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003f7c:	6899      	ldr	r1, [r3, #8]
 8003f7e:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f80:	6851      	ldr	r1, [r2, #4]
 8003f82:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f88:	6841      	ldr	r1, [r0, #4]
 8003f8a:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8003f8e:	f040 8093 	bne.w	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f92:	9b00      	ldr	r3, [sp, #0]
 8003f94:	0799      	lsls	r1, r3, #30
 8003f96:	d51a      	bpl.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8003f98:	9b02      	ldr	r3, [sp, #8]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	d517      	bpl.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fa0:	1c99      	adds	r1, r3, #2
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	6241      	str	r1, [r0, #36]	; 0x24
 8003fa6:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003fa8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fb0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	b95b      	cbnz	r3, 8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fb6:	6853      	ldr	r3, [r2, #4]
 8003fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fbc:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8003fbe:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	b923      	cbnz	r3, 8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fca:	f7ff ffc9 	bl	8003f60 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fce:	9b01      	ldr	r3, [sp, #4]
 8003fd0:	07d8      	lsls	r0, r3, #31
 8003fd2:	d522      	bpl.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	0659      	lsls	r1, r3, #25
 8003fd8:	d51f      	bpl.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fda:	6821      	ldr	r1, [r4, #0]
 8003fdc:	4a71      	ldr	r2, [pc, #452]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8003fde:	4b72      	ldr	r3, [pc, #456]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003fe0:	4291      	cmp	r1, r2
 8003fe2:	bf18      	it	ne
 8003fe4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003fe8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fea:	68d9      	ldr	r1, [r3, #12]
 8003fec:	1c90      	adds	r0, r2, #2
 8003fee:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003ff0:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8003ff2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	b292      	uxth	r2, r2
 8003ff8:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ffa:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	b962      	cbnz	r2, 800401a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004006:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004008:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	b92b      	cbnz	r3, 800401a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800400e:	2301      	movs	r3, #1
 8004010:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004014:	4620      	mov	r0, r4
 8004016:	f7ff ffa3 	bl	8003f60 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	065a      	lsls	r2, r3, #25
 800401e:	d522      	bpl.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	069b      	lsls	r3, r3, #26
 8004024:	d51f      	bpl.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	495e      	ldr	r1, [pc, #376]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800402a:	4a5f      	ldr	r2, [pc, #380]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800402c:	428b      	cmp	r3, r1
 800402e:	bf18      	it	ne
 8004030:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8004034:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004036:	6851      	ldr	r1, [r2, #4]
 8004038:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800403c:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004044:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004046:	2200      	movs	r2, #0
 8004048:	9204      	str	r2, [sp, #16]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	9204      	str	r2, [sp, #16]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8004054:	2301      	movs	r3, #1
 8004056:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800405a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004062:	f7fd ff5b 	bl	8001f1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004066:	9b00      	ldr	r3, [sp, #0]
 8004068:	0718      	lsls	r0, r3, #28
 800406a:	f140 8098 	bpl.w	800419e <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 800406e:	9b02      	ldr	r3, [sp, #8]
 8004070:	0699      	lsls	r1, r3, #26
 8004072:	f140 8094 	bpl.w	800419e <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004076:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004078:	494a      	ldr	r1, [pc, #296]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004080:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004082:	4a49      	ldr	r2, [pc, #292]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004084:	428b      	cmp	r3, r1
 8004086:	bf18      	it	ne
 8004088:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800408c:	6851      	ldr	r1, [r2, #4]
 800408e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8004092:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004094:	2200      	movs	r2, #0
 8004096:	9205      	str	r2, [sp, #20]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	9305      	str	r3, [sp, #20]
 800409c:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 800409e:	2301      	movs	r3, #1
 80040a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80040a6:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6463      	str	r3, [r4, #68]	; 0x44
}
 80040ae:	b006      	add	sp, #24
 80040b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 80040b4:	f7fd bf32 	b.w	8001f1c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040b8:	9a01      	ldr	r2, [sp, #4]
 80040ba:	0792      	lsls	r2, r2, #30
 80040bc:	d51a      	bpl.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 80040be:	9a03      	ldr	r2, [sp, #12]
 80040c0:	0611      	lsls	r1, r2, #24
 80040c2:	d517      	bpl.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040c4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80040c6:	1c91      	adds	r1, r2, #2
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	6241      	str	r1, [r0, #36]	; 0x24
 80040cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ce:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80040d0:	3a01      	subs	r2, #1
 80040d2:	b292      	uxth	r2, r2
 80040d4:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80040d6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80040d8:	b292      	uxth	r2, r2
 80040da:	b95a      	cbnz	r2, 80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040e2:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 80040e4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b923      	cbnz	r3, 80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040f0:	f7ff ff36 	bl	8003f60 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040f4:	9b00      	ldr	r3, [sp, #0]
 80040f6:	07da      	lsls	r2, r3, #31
 80040f8:	d51c      	bpl.n	8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 80040fa:	9b02      	ldr	r3, [sp, #8]
 80040fc:	065b      	lsls	r3, r3, #25
 80040fe:	d519      	bpl.n	8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	1c98      	adds	r0, r3, #2
 8004106:	68d1      	ldr	r1, [r2, #12]
 8004108:	62e0      	str	r0, [r4, #44]	; 0x2c
 800410a:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 800410c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800410e:	3b01      	subs	r3, #1
 8004110:	b29b      	uxth	r3, r3
 8004112:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8004114:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8004116:	b29b      	uxth	r3, r3
 8004118:	b963      	cbnz	r3, 8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800411a:	6853      	ldr	r3, [r2, #4]
 800411c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004120:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8004122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	b92b      	cbnz	r3, 8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8004128:	2301      	movs	r3, #1
 800412a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800412e:	4620      	mov	r0, r4
 8004130:	f7ff ff16 	bl	8003f60 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004134:	9b00      	ldr	r3, [sp, #0]
 8004136:	0658      	lsls	r0, r3, #25
 8004138:	d51b      	bpl.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 800413a:	9b02      	ldr	r3, [sp, #8]
 800413c:	0699      	lsls	r1, r3, #26
 800413e:	d518      	bpl.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004140:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004142:	4918      	ldr	r1, [pc, #96]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004144:	6853      	ldr	r3, [r2, #4]
 8004146:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800414a:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800414e:	428a      	cmp	r2, r1
 8004150:	bf18      	it	ne
 8004152:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8004156:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800415e:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8004160:	2301      	movs	r3, #1
 8004162:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004166:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800416e:	f7fd fed5 	bl	8001f1c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004172:	9b01      	ldr	r3, [sp, #4]
 8004174:	071a      	lsls	r2, r3, #28
 8004176:	d512      	bpl.n	800419e <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	069b      	lsls	r3, r3, #26
 800417c:	d50f      	bpl.n	800419e <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	4908      	ldr	r1, [pc, #32]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004184:	428a      	cmp	r2, r1
 8004186:	bf18      	it	ne
 8004188:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8004192:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004194:	6853      	ldr	r3, [r2, #4]
 8004196:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800419a:	6053      	str	r3, [r2, #4]
 800419c:	e77f      	b.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 800419e:	b006      	add	sp, #24
 80041a0:	bd10      	pop	{r4, pc}
 80041a2:	bf00      	nop
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40003400 	.word	0x40003400

080041ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b0:	4604      	mov	r4, r0
 80041b2:	b908      	cbnz	r0, 80041b8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80041b4:	2001      	movs	r0, #1
 80041b6:	e03f      	b.n	8004238 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b8:	6803      	ldr	r3, [r0, #0]
 80041ba:	07dd      	lsls	r5, r3, #31
 80041bc:	d410      	bmi.n	80041e0 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	0798      	lsls	r0, r3, #30
 80041c2:	d45a      	bmi.n	800427a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	071a      	lsls	r2, r3, #28
 80041c8:	f100 809c 	bmi.w	8004304 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	075b      	lsls	r3, r3, #29
 80041d0:	f100 80ba 	bmi.w	8004348 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d4:	69a0      	ldr	r0, [r4, #24]
 80041d6:	2800      	cmp	r0, #0
 80041d8:	f040 811b 	bne.w	8004412 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80041dc:	2000      	movs	r0, #0
 80041de:	e02b      	b.n	8004238 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e0:	4ba7      	ldr	r3, [pc, #668]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	f002 020c 	and.w	r2, r2, #12
 80041e8:	2a04      	cmp	r2, #4
 80041ea:	d007      	beq.n	80041fc <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f2:	2a08      	cmp	r2, #8
 80041f4:	d10a      	bne.n	800420c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0259      	lsls	r1, r3, #9
 80041fa:	d507      	bpl.n	800420c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	4ba0      	ldr	r3, [pc, #640]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	039a      	lsls	r2, r3, #14
 8004202:	d5dc      	bpl.n	80041be <HAL_RCC_OscConfig+0x12>
 8004204:	6863      	ldr	r3, [r4, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1d9      	bne.n	80041be <HAL_RCC_OscConfig+0x12>
 800420a:	e7d3      	b.n	80041b4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	4d9c      	ldr	r5, [pc, #624]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d113      	bne.n	800423e <HAL_RCC_OscConfig+0x92>
 8004216:	682b      	ldr	r3, [r5, #0]
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800421e:	f7fd ff01 	bl	8002024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	4d97      	ldr	r5, [pc, #604]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8004224:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	682b      	ldr	r3, [r5, #0]
 8004228:	039b      	lsls	r3, r3, #14
 800422a:	d4c8      	bmi.n	80041be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7fd fefa 	bl	8002024 <HAL_GetTick>
 8004230:	1b80      	subs	r0, r0, r6
 8004232:	2864      	cmp	r0, #100	; 0x64
 8004234:	d9f7      	bls.n	8004226 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8004236:	2003      	movs	r0, #3
}
 8004238:	b002      	add	sp, #8
 800423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004242:	d104      	bne.n	800424e <HAL_RCC_OscConfig+0xa2>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	e7e3      	b.n	8004216 <HAL_RCC_OscConfig+0x6a>
 800424e:	682a      	ldr	r2, [r5, #0]
 8004250:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004254:	602a      	str	r2, [r5, #0]
 8004256:	682a      	ldr	r2, [r5, #0]
 8004258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800425c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1dd      	bne.n	800421e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8004262:	f7fd fedf 	bl	8002024 <HAL_GetTick>
 8004266:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	039f      	lsls	r7, r3, #14
 800426c:	d5a7      	bpl.n	80041be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426e:	f7fd fed9 	bl	8002024 <HAL_GetTick>
 8004272:	1b80      	subs	r0, r0, r6
 8004274:	2864      	cmp	r0, #100	; 0x64
 8004276:	d9f7      	bls.n	8004268 <HAL_RCC_OscConfig+0xbc>
 8004278:	e7dd      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800427a:	4b81      	ldr	r3, [pc, #516]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	f012 0f0c 	tst.w	r2, #12
 8004282:	d007      	beq.n	8004294 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800428a:	2a08      	cmp	r2, #8
 800428c:	d111      	bne.n	80042b2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	025e      	lsls	r6, r3, #9
 8004292:	d40e      	bmi.n	80042b2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004294:	4b7a      	ldr	r3, [pc, #488]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	0795      	lsls	r5, r2, #30
 800429a:	d502      	bpl.n	80042a2 <HAL_RCC_OscConfig+0xf6>
 800429c:	68e2      	ldr	r2, [r4, #12]
 800429e:	2a01      	cmp	r2, #1
 80042a0:	d188      	bne.n	80041b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	6921      	ldr	r1, [r4, #16]
 80042a6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80042aa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80042ae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b0:	e788      	b.n	80041c4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042b2:	68e2      	ldr	r2, [r4, #12]
 80042b4:	4b73      	ldr	r3, [pc, #460]	; (8004484 <HAL_RCC_OscConfig+0x2d8>)
 80042b6:	b1b2      	cbz	r2, 80042e6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042bc:	f7fd feb2 	bl	8002024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c0:	4d6f      	ldr	r5, [pc, #444]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80042c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	0798      	lsls	r0, r3, #30
 80042c8:	d507      	bpl.n	80042da <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	6922      	ldr	r2, [r4, #16]
 80042ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80042d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	e774      	b.n	80041c4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7fd fea3 	bl	8002024 <HAL_GetTick>
 80042de:	1b80      	subs	r0, r0, r6
 80042e0:	2802      	cmp	r0, #2
 80042e2:	d9ef      	bls.n	80042c4 <HAL_RCC_OscConfig+0x118>
 80042e4:	e7a7      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80042e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042e8:	f7fd fe9c 	bl	8002024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ec:	4d64      	ldr	r5, [pc, #400]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80042ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	0799      	lsls	r1, r3, #30
 80042f4:	f57f af66 	bpl.w	80041c4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f8:	f7fd fe94 	bl	8002024 <HAL_GetTick>
 80042fc:	1b80      	subs	r0, r0, r6
 80042fe:	2802      	cmp	r0, #2
 8004300:	d9f6      	bls.n	80042f0 <HAL_RCC_OscConfig+0x144>
 8004302:	e798      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004304:	6962      	ldr	r2, [r4, #20]
 8004306:	4b60      	ldr	r3, [pc, #384]	; (8004488 <HAL_RCC_OscConfig+0x2dc>)
 8004308:	b17a      	cbz	r2, 800432a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800430e:	f7fd fe89 	bl	8002024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	4d5b      	ldr	r5, [pc, #364]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8004314:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004318:	079f      	lsls	r7, r3, #30
 800431a:	f53f af57 	bmi.w	80041cc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431e:	f7fd fe81 	bl	8002024 <HAL_GetTick>
 8004322:	1b80      	subs	r0, r0, r6
 8004324:	2802      	cmp	r0, #2
 8004326:	d9f6      	bls.n	8004316 <HAL_RCC_OscConfig+0x16a>
 8004328:	e785      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800432a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800432c:	f7fd fe7a 	bl	8002024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004330:	4d53      	ldr	r5, [pc, #332]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8004332:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004336:	0798      	lsls	r0, r3, #30
 8004338:	f57f af48 	bpl.w	80041cc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433c:	f7fd fe72 	bl	8002024 <HAL_GetTick>
 8004340:	1b80      	subs	r0, r0, r6
 8004342:	2802      	cmp	r0, #2
 8004344:	d9f6      	bls.n	8004334 <HAL_RCC_OscConfig+0x188>
 8004346:	e776      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004348:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 800434a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8004350:	d128      	bne.n	80043a4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004352:	9201      	str	r2, [sp, #4]
 8004354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004356:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004366:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	4d48      	ldr	r5, [pc, #288]	; (800448c <HAL_RCC_OscConfig+0x2e0>)
 800436a:	682b      	ldr	r3, [r5, #0]
 800436c:	05d9      	lsls	r1, r3, #23
 800436e:	d51b      	bpl.n	80043a8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004370:	68a3      	ldr	r3, [r4, #8]
 8004372:	4d43      	ldr	r5, [pc, #268]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 8004374:	2b01      	cmp	r3, #1
 8004376:	d127      	bne.n	80043c8 <HAL_RCC_OscConfig+0x21c>
 8004378:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004380:	f7fd fe50 	bl	8002024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	4d3e      	ldr	r5, [pc, #248]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8004386:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800438e:	079b      	lsls	r3, r3, #30
 8004390:	d539      	bpl.n	8004406 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8004392:	2e00      	cmp	r6, #0
 8004394:	f43f af1e 	beq.w	80041d4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004398:	4a39      	ldr	r2, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 800439a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6413      	str	r3, [r2, #64]	; 0x40
 80043a2:	e717      	b.n	80041d4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80043a4:	2600      	movs	r6, #0
 80043a6:	e7df      	b.n	8004368 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80043b0:	f7fd fe38 	bl	8002024 <HAL_GetTick>
 80043b4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	05da      	lsls	r2, r3, #23
 80043ba:	d4d9      	bmi.n	8004370 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043bc:	f7fd fe32 	bl	8002024 <HAL_GetTick>
 80043c0:	1bc0      	subs	r0, r0, r7
 80043c2:	2802      	cmp	r0, #2
 80043c4:	d9f7      	bls.n	80043b6 <HAL_RCC_OscConfig+0x20a>
 80043c6:	e736      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d104      	bne.n	80043d6 <HAL_RCC_OscConfig+0x22a>
 80043cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	672b      	str	r3, [r5, #112]	; 0x70
 80043d4:	e7d0      	b.n	8004378 <HAL_RCC_OscConfig+0x1cc>
 80043d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	672a      	str	r2, [r5, #112]	; 0x70
 80043de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80043e0:	f022 0204 	bic.w	r2, r2, #4
 80043e4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ca      	bne.n	8004380 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80043ea:	f7fd fe1b 	bl	8002024 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80043f2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80043f6:	0798      	lsls	r0, r3, #30
 80043f8:	d5cb      	bpl.n	8004392 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fd fe13 	bl	8002024 <HAL_GetTick>
 80043fe:	1bc0      	subs	r0, r0, r7
 8004400:	4540      	cmp	r0, r8
 8004402:	d9f7      	bls.n	80043f4 <HAL_RCC_OscConfig+0x248>
 8004404:	e717      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd fe0d 	bl	8002024 <HAL_GetTick>
 800440a:	1bc0      	subs	r0, r0, r7
 800440c:	4540      	cmp	r0, r8
 800440e:	d9bd      	bls.n	800438c <HAL_RCC_OscConfig+0x1e0>
 8004410:	e711      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004412:	4d1b      	ldr	r5, [pc, #108]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
 8004414:	68ab      	ldr	r3, [r5, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b08      	cmp	r3, #8
 800441c:	d047      	beq.n	80044ae <HAL_RCC_OscConfig+0x302>
 800441e:	4e1c      	ldr	r6, [pc, #112]	; (8004490 <HAL_RCC_OscConfig+0x2e4>)
 8004420:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004422:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004424:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004426:	d135      	bne.n	8004494 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8004428:	f7fd fdfc 	bl	8002024 <HAL_GetTick>
 800442c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	0199      	lsls	r1, r3, #6
 8004432:	d41e      	bmi.n	8004472 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004434:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004438:	4313      	orrs	r3, r2
 800443a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800443c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004446:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004448:	4c0d      	ldr	r4, [pc, #52]	; (8004480 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444a:	0852      	lsrs	r2, r2, #1
 800444c:	3a01      	subs	r2, #1
 800444e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004452:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004454:	2301      	movs	r3, #1
 8004456:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004458:	f7fd fde4 	bl	8002024 <HAL_GetTick>
 800445c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	019a      	lsls	r2, r3, #6
 8004462:	f53f aebb 	bmi.w	80041dc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004466:	f7fd fddd 	bl	8002024 <HAL_GetTick>
 800446a:	1b40      	subs	r0, r0, r5
 800446c:	2802      	cmp	r0, #2
 800446e:	d9f6      	bls.n	800445e <HAL_RCC_OscConfig+0x2b2>
 8004470:	e6e1      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fd fdd7 	bl	8002024 <HAL_GetTick>
 8004476:	1bc0      	subs	r0, r0, r7
 8004478:	2802      	cmp	r0, #2
 800447a:	d9d8      	bls.n	800442e <HAL_RCC_OscConfig+0x282>
 800447c:	e6db      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800
 8004484:	42470000 	.word	0x42470000
 8004488:	42470e80 	.word	0x42470e80
 800448c:	40007000 	.word	0x40007000
 8004490:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8004494:	f7fd fdc6 	bl	8002024 <HAL_GetTick>
 8004498:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	682b      	ldr	r3, [r5, #0]
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	f57f ae9d 	bpl.w	80041dc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fd fdbf 	bl	8002024 <HAL_GetTick>
 80044a6:	1b00      	subs	r0, r0, r4
 80044a8:	2802      	cmp	r0, #2
 80044aa:	d9f6      	bls.n	800449a <HAL_RCC_OscConfig+0x2ee>
 80044ac:	e6c3      	b.n	8004236 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ae:	2801      	cmp	r0, #1
 80044b0:	f43f aec2 	beq.w	8004238 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80044b4:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	69e3      	ldr	r3, [r4, #28]
 80044b8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80044bc:	429a      	cmp	r2, r3
 80044be:	f47f ae79 	bne.w	80041b4 <HAL_RCC_OscConfig+0x8>
 80044c2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	4293      	cmp	r3, r2
 80044ca:	f47f ae73 	bne.w	80041b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d4:	4003      	ands	r3, r0
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f47f ae6c 	bne.w	80041b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044de:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044e2:	4293      	cmp	r3, r2
 80044e4:	f47f ae66 	bne.w	80041b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044ea:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80044ee:	1ac0      	subs	r0, r0, r3
 80044f0:	bf18      	it	ne
 80044f2:	2001      	movne	r0, #1
 80044f4:	e6a0      	b.n	8004238 <HAL_RCC_OscConfig+0x8c>
 80044f6:	bf00      	nop

080044f8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f8:	4913      	ldr	r1, [pc, #76]	; (8004548 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80044fa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fc:	688b      	ldr	r3, [r1, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b04      	cmp	r3, #4
 8004504:	d003      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0x16>
 8004506:	2b08      	cmp	r3, #8
 8004508:	d003      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800450a:	4810      	ldr	r0, [pc, #64]	; (800454c <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800450c:	e000      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800450e:	4810      	ldr	r0, [pc, #64]	; (8004550 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8004510:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004512:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004514:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004516:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004518:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451c:	bf14      	ite	ne
 800451e:	480c      	ldrne	r0, [pc, #48]	; (8004550 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004520:	480a      	ldreq	r0, [pc, #40]	; (800454c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004522:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004526:	bf18      	it	ne
 8004528:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800452a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	fba1 0100 	umull	r0, r1, r1, r0
 8004532:	f7fc f85d 	bl	80005f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <HAL_RCC_GetSysClockFreq+0x50>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800453e:	3301      	adds	r3, #1
 8004540:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004542:	fbb0 f0f3 	udiv	r0, r0, r3
 8004546:	e7e3      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x18>
 8004548:	40023800 	.word	0x40023800
 800454c:	00f42400 	.word	0x00f42400
 8004550:	007a1200 	.word	0x007a1200

08004554 <HAL_RCC_ClockConfig>:
{
 8004554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800455a:	4604      	mov	r4, r0
 800455c:	b910      	cbnz	r0, 8004564 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800455e:	2001      	movs	r0, #1
}
 8004560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b43      	ldr	r3, [pc, #268]	; (8004674 <HAL_RCC_ClockConfig+0x120>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	f002 020f 	and.w	r2, r2, #15
 800456c:	428a      	cmp	r2, r1
 800456e:	d328      	bcc.n	80045c2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	6821      	ldr	r1, [r4, #0]
 8004572:	078f      	lsls	r7, r1, #30
 8004574:	d42d      	bmi.n	80045d2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	07c8      	lsls	r0, r1, #31
 8004578:	d440      	bmi.n	80045fc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457a:	4b3e      	ldr	r3, [pc, #248]	; (8004674 <HAL_RCC_ClockConfig+0x120>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f002 020f 	and.w	r2, r2, #15
 8004582:	42aa      	cmp	r2, r5
 8004584:	d865      	bhi.n	8004652 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	0751      	lsls	r1, r2, #29
 800458a:	d46b      	bmi.n	8004664 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	0713      	lsls	r3, r2, #28
 800458e:	d507      	bpl.n	80045a0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004590:	4a39      	ldr	r2, [pc, #228]	; (8004678 <HAL_RCC_ClockConfig+0x124>)
 8004592:	6921      	ldr	r1, [r4, #16]
 8004594:	6893      	ldr	r3, [r2, #8]
 8004596:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800459a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800459e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a0:	f7ff ffaa 	bl	80044f8 <HAL_RCC_GetSysClockFreq>
 80045a4:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_RCC_ClockConfig+0x124>)
 80045a6:	4a35      	ldr	r2, [pc, #212]	; (800467c <HAL_RCC_ClockConfig+0x128>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	40d8      	lsrs	r0, r3
 80045b2:	4b33      	ldr	r3, [pc, #204]	; (8004680 <HAL_RCC_ClockConfig+0x12c>)
 80045b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80045b6:	4b33      	ldr	r3, [pc, #204]	; (8004684 <HAL_RCC_ClockConfig+0x130>)
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	f7fd fceb 	bl	8001f94 <HAL_InitTick>
  return HAL_OK;
 80045be:	2000      	movs	r0, #0
 80045c0:	e7ce      	b.n	8004560 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	b2ca      	uxtb	r2, r1
 80045c4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	428b      	cmp	r3, r1
 80045ce:	d1c6      	bne.n	800455e <HAL_RCC_ClockConfig+0xa>
 80045d0:	e7ce      	b.n	8004570 <HAL_RCC_ClockConfig+0x1c>
 80045d2:	4b29      	ldr	r3, [pc, #164]	; (8004678 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d8:	bf1e      	ittt	ne
 80045da:	689a      	ldrne	r2, [r3, #8]
 80045dc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80045e0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e4:	bf42      	ittt	mi
 80045e6:	689a      	ldrmi	r2, [r3, #8]
 80045e8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80045ec:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68a0      	ldr	r0, [r4, #8]
 80045f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80045f6:	4302      	orrs	r2, r0
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	e7bc      	b.n	8004576 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fc:	6862      	ldr	r2, [r4, #4]
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_RCC_ClockConfig+0x124>)
 8004600:	2a01      	cmp	r2, #1
 8004602:	d11c      	bne.n	800463e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	d0a8      	beq.n	800455e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460c:	4e1a      	ldr	r6, [pc, #104]	; (8004678 <HAL_RCC_ClockConfig+0x124>)
 800460e:	68b3      	ldr	r3, [r6, #8]
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	4313      	orrs	r3, r2
 8004616:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004618:	f7fd fd04 	bl	8002024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004620:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	68b3      	ldr	r3, [r6, #8]
 8004624:	6862      	ldr	r2, [r4, #4]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800462e:	d0a4      	beq.n	800457a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fd fcf8 	bl	8002024 <HAL_GetTick>
 8004634:	1bc0      	subs	r0, r0, r7
 8004636:	4540      	cmp	r0, r8
 8004638:	d9f3      	bls.n	8004622 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800463a:	2003      	movs	r0, #3
 800463c:	e790      	b.n	8004560 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	1e91      	subs	r1, r2, #2
 8004640:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004644:	d802      	bhi.n	800464c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800464a:	e7de      	b.n	800460a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464c:	f013 0f02 	tst.w	r3, #2
 8004650:	e7db      	b.n	800460a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	b2ea      	uxtb	r2, r5
 8004654:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	42ab      	cmp	r3, r5
 800465e:	f47f af7e 	bne.w	800455e <HAL_RCC_ClockConfig+0xa>
 8004662:	e790      	b.n	8004586 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCC_ClockConfig+0x124>)
 8004666:	68e0      	ldr	r0, [r4, #12]
 8004668:	688b      	ldr	r3, [r1, #8]
 800466a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800466e:	4303      	orrs	r3, r0
 8004670:	608b      	str	r3, [r1, #8]
 8004672:	e78b      	b.n	800458c <HAL_RCC_ClockConfig+0x38>
 8004674:	40023c00 	.word	0x40023c00
 8004678:	40023800 	.word	0x40023800
 800467c:	080078d8 	.word	0x080078d8
 8004680:	20000094 	.word	0x20000094
 8004684:	2000009c 	.word	0x2000009c

08004688 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <HAL_RCC_GetPCLK1Freq+0x14>)
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004692:	5cd3      	ldrb	r3, [r2, r3]
 8004694:	4a03      	ldr	r2, [pc, #12]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004696:	6810      	ldr	r0, [r2, #0]
}
 8004698:	40d8      	lsrs	r0, r3
 800469a:	4770      	bx	lr
 800469c:	40023800 	.word	0x40023800
 80046a0:	080078e8 	.word	0x080078e8
 80046a4:	20000094 	.word	0x20000094

080046a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046a8:	6803      	ldr	r3, [r0, #0]
 80046aa:	f013 0f05 	tst.w	r3, #5
{
 80046ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046b0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046b2:	d13c      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	079a      	lsls	r2, r3, #30
 80046b8:	d530      	bpl.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046c0:	4d45      	ldr	r5, [pc, #276]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046da:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046dc:	f7fd fca2 	bl	8002024 <HAL_GetTick>
 80046e0:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046e2:	682b      	ldr	r3, [r5, #0]
 80046e4:	05d9      	lsls	r1, r3, #23
 80046e6:	d54c      	bpl.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xda>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046e8:	4d3a      	ldr	r5, [pc, #232]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80046ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80046f0:	d14d      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80046f8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80046fc:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80046fe:	d165      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004700:	6891      	ldr	r1, [r2, #8]
 8004702:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004706:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800470a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800470e:	4301      	orrs	r1, r0
 8004710:	6091      	str	r1, [r2, #8]
 8004712:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	430b      	orrs	r3, r1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004722:	bf1f      	itttt	ne
 8004724:	4b2d      	ldrne	r3, [pc, #180]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004726:	7d22      	ldrbne	r2, [r4, #20]
 8004728:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800472a:	2000      	movne	r0, #0
 800472c:	e027      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_PLLI2S_DISABLE();
 800472e:	4e2c      	ldr	r6, [pc, #176]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004730:	4d28      	ldr	r5, [pc, #160]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004736:	f7fd fc75 	bl	8002024 <HAL_GetTick>
 800473a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	d417      	bmi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004742:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004746:	071b      	lsls	r3, r3, #28
 8004748:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800474c:	6862      	ldr	r2, [r4, #4]
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004754:	2301      	movs	r3, #1
 8004756:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004758:	f7fd fc64 	bl	8002024 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475c:	4d1d      	ldr	r5, [pc, #116]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    tickstart = HAL_GetTick();
 800475e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	0118      	lsls	r0, r3, #4
 8004764:	d4a6      	bmi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004766:	f7fd fc5d 	bl	8002024 <HAL_GetTick>
 800476a:	1b80      	subs	r0, r0, r6
 800476c:	2802      	cmp	r0, #2
 800476e:	d9f7      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004770:	e004      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004772:	f7fd fc57 	bl	8002024 <HAL_GetTick>
 8004776:	1bc0      	subs	r0, r0, r7
 8004778:	2802      	cmp	r0, #2
 800477a:	d9df      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 800477c:	2003      	movs	r0, #3
}
 800477e:	b003      	add	sp, #12
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fd fc4f 	bl	8002024 <HAL_GetTick>
 8004786:	1b80      	subs	r0, r0, r6
 8004788:	2802      	cmp	r0, #2
 800478a:	d9aa      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800478c:	e7f6      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800478e:	6922      	ldr	r2, [r4, #16]
 8004790:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004794:	4293      	cmp	r3, r2
 8004796:	d0ac      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004798:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800479a:	4a12      	ldr	r2, [pc, #72]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800479c:	2101      	movs	r1, #1
 800479e:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a4:	2100      	movs	r1, #0
 80047a6:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80047a8:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80047ac:	07da      	lsls	r2, r3, #31
 80047ae:	d5a0      	bpl.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80047b0:	f7fd fc38 	bl	8002024 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80047b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80047bc:	079b      	lsls	r3, r3, #30
 80047be:	d498      	bmi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fd fc30 	bl	8002024 <HAL_GetTick>
 80047c4:	1b80      	subs	r0, r0, r6
 80047c6:	42b8      	cmp	r0, r7
 80047c8:	d9f7      	bls.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x112>
 80047ca:	e7d7      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047cc:	6891      	ldr	r1, [r2, #8]
 80047ce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80047d2:	e79d      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000
 80047dc:	424711e0 	.word	0x424711e0
 80047e0:	42470068 	.word	0x42470068
 80047e4:	42470e40 	.word	0x42470e40

080047e8 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80047e8:	2303      	movs	r3, #3
 80047ea:	6003      	str	r3, [r0, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <HAL_RCCEx_GetPeriphCLKConfig+0x44>)
 80047ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80047f2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80047f6:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047f8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80047fc:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8004800:	60c2      	str	r2, [r0, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8004802:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004806:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800480a:	6042      	str	r2, [r0, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800480c:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800480e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004810:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004814:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004818:	430a      	orrs	r2, r1
 800481a:	6102      	str	r2, [r0, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800481c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004820:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004824:	bf18      	it	ne
 8004826:	2301      	movne	r3, #1
 8004828:	7503      	strb	r3, [r0, #20]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800482a:	4770      	bx	lr
 800482c:	40023800 	.word	0x40023800

08004830 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8004830:	2801      	cmp	r0, #1
 8004832:	d121      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8004836:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8004838:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 800483c:	d004      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800483e:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004840:	480f      	ldr	r0, [pc, #60]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8004842:	bf18      	it	ne
 8004844:	2000      	movne	r0, #0
 8004846:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004848:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800484a:	490c      	ldr	r1, [pc, #48]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800484c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004850:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004852:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004856:	bf4c      	ite	mi
 8004858:	4b0a      	ldrmi	r3, [pc, #40]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800485a:	4b0b      	ldrpl	r3, [pc, #44]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800485c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004860:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004864:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004868:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800486c:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800486e:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8004872:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8004876:	4770      	bx	lr
          frequency = 0U;
 8004878:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800487a:	4770      	bx	lr
 800487c:	40023800 	.word	0x40023800
 8004880:	00bb8000 	.word	0x00bb8000
 8004884:	007a1200 	.word	0x007a1200
 8004888:	00f42400 	.word	0x00f42400

0800488c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488c:	6a03      	ldr	r3, [r0, #32]
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004894:	6a03      	ldr	r3, [r0, #32]
{
 8004896:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800489c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800489e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80048a2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048a4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80048a6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80048aa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048ac:	4d0a      	ldr	r5, [pc, #40]	; (80048d8 <TIM_OC1_SetConfig+0x4c>)
 80048ae:	42a8      	cmp	r0, r5
 80048b0:	d10b      	bne.n	80048ca <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80048b8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ba:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048be:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80048c2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80048c4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80048c8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048cc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ce:	684a      	ldr	r2, [r1, #4]
 80048d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	6203      	str	r3, [r0, #32]
}
 80048d4:	bd70      	pop	{r4, r5, r6, pc}
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000

080048dc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048dc:	6a03      	ldr	r3, [r0, #32]
 80048de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e4:	6a03      	ldr	r3, [r0, #32]
{
 80048e6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80048f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048f4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80048f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048fe:	4d0b      	ldr	r5, [pc, #44]	; (800492c <TIM_OC3_SetConfig+0x50>)
 8004900:	42a8      	cmp	r0, r5
 8004902:	d10d      	bne.n	8004920 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004904:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800490a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004912:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004916:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800491c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004922:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004924:	684a      	ldr	r2, [r1, #4]
 8004926:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	6203      	str	r3, [r0, #32]
}
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	40010000 	.word	0x40010000

08004930 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004930:	6a03      	ldr	r3, [r0, #32]
 8004932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004936:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004938:	6a03      	ldr	r3, [r0, #32]
{
 800493a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004940:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004942:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004946:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800494a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800494c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004950:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	4d06      	ldr	r5, [pc, #24]	; (8004970 <TIM_OC4_SetConfig+0x40>)
 8004956:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004958:	bf02      	ittt	eq
 800495a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800495c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004960:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004964:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004966:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004968:	684a      	ldr	r2, [r1, #4]
 800496a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496c:	6203      	str	r3, [r0, #32]
}
 800496e:	bd30      	pop	{r4, r5, pc}
 8004970:	40010000 	.word	0x40010000

08004974 <HAL_TIM_OC_MspInit>:
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8004976:	290c      	cmp	r1, #12
 8004978:	d814      	bhi.n	80049a4 <HAL_TIM_ReadCapturedValue+0x2e>
 800497a:	e8df f001 	tbb	[pc, r1]
 800497e:	1307      	.short	0x1307
 8004980:	130a1313 	.word	0x130a1313
 8004984:	130d1313 	.word	0x130d1313
 8004988:	1313      	.short	0x1313
 800498a:	10          	.byte	0x10
 800498b:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800498c:	6803      	ldr	r3, [r0, #0]
 800498e:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8004990:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8004992:	6803      	ldr	r3, [r0, #0]
 8004994:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8004996:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8004998:	6803      	ldr	r3, [r0, #0]
 800499a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800499c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 80049a2:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 80049a4:	2000      	movs	r0, #0
}
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIM_PeriodElapsedCallback>:
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_IC_CaptureCallback>:
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_PWM_PulseFinishedCallback>:
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_TriggerCallback>:
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	6803      	ldr	r3, [r0, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	0791      	lsls	r1, r2, #30
{
 80049b6:	b510      	push	{r4, lr}
 80049b8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ba:	d50e      	bpl.n	80049da <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	0792      	lsls	r2, r2, #30
 80049c0:	d50b      	bpl.n	80049da <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049c2:	f06f 0202 	mvn.w	r2, #2
 80049c6:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049c8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ca:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049cc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049d0:	d077      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	f7ff ffea 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	2300      	movs	r3, #0
 80049d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	0750      	lsls	r0, r2, #29
 80049e0:	d510      	bpl.n	8004a04 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	0751      	lsls	r1, r2, #29
 80049e6:	d50d      	bpl.n	8004a04 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e8:	f06f 0204 	mvn.w	r2, #4
 80049ec:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049fa:	d068      	beq.n	8004ace <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80049fc:	f7ff ffd5 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a00:	2300      	movs	r3, #0
 8004a02:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	0712      	lsls	r2, r2, #28
 8004a0a:	d50f      	bpl.n	8004a2c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	0710      	lsls	r0, r2, #28
 8004a10:	d50c      	bpl.n	8004a2c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a12:	f06f 0208 	mvn.w	r2, #8
 8004a16:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004a20:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a22:	d05a      	beq.n	8004ada <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a24:	f7ff ffc1 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	06d2      	lsls	r2, r2, #27
 8004a32:	d510      	bpl.n	8004a56 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	06d0      	lsls	r0, r2, #27
 8004a38:	d50d      	bpl.n	8004a56 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a3a:	f06f 0210 	mvn.w	r2, #16
 8004a3e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a40:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a44:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a48:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4c:	d04b      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	f7ff ffac 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	2300      	movs	r3, #0
 8004a54:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	07d1      	lsls	r1, r2, #31
 8004a5c:	d508      	bpl.n	8004a70 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	07d2      	lsls	r2, r2, #31
 8004a62:	d505      	bpl.n	8004a70 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a64:	f06f 0201 	mvn.w	r2, #1
 8004a68:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7ff ff9c 	bl	80049a8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	0610      	lsls	r0, r2, #24
 8004a76:	d508      	bpl.n	8004a8a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	0611      	lsls	r1, r2, #24
 8004a7c:	d505      	bpl.n	8004a8a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 f93c 	bl	8004d02 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	0652      	lsls	r2, r2, #25
 8004a90:	d508      	bpl.n	8004aa4 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	0650      	lsls	r0, r2, #25
 8004a96:	d505      	bpl.n	8004aa4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff ff85 	bl	80049ae <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	0691      	lsls	r1, r2, #26
 8004aaa:	d522      	bpl.n	8004af2 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	0692      	lsls	r2, r2, #26
 8004ab0:	d51f      	bpl.n	8004af2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004ab6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab8:	611a      	str	r2, [r3, #16]
}
 8004aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004abe:	f000 b91f 	b.w	8004d00 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	f7fc f86f 	bl	8000ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7ff ff70 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
 8004acc:	e783      	b.n	80049d6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	f7fc f869 	bl	8000ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7ff ff6a 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
 8004ad8:	e792      	b.n	8004a00 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	f7fc f863 	bl	8000ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f7ff ff64 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
 8004ae4:	e7a0      	b.n	8004a28 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	f7fc f85d 	bl	8000ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff ff5e 	bl	80049ac <HAL_TIM_PWM_PulseFinishedCallback>
 8004af0:	e7af      	b.n	8004a52 <HAL_TIM_IRQHandler+0xa2>
}
 8004af2:	bd10      	pop	{r4, pc}

08004af4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af4:	4a24      	ldr	r2, [pc, #144]	; (8004b88 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8004af6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	4290      	cmp	r0, r2
 8004afa:	d00e      	beq.n	8004b1a <TIM_Base_SetConfig+0x26>
 8004afc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b00:	d00b      	beq.n	8004b1a <TIM_Base_SetConfig+0x26>
 8004b02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004b06:	4290      	cmp	r0, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_Base_SetConfig+0x26>
 8004b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b0e:	4290      	cmp	r0, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_Base_SetConfig+0x26>
 8004b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b16:	4290      	cmp	r0, r2
 8004b18:	d115      	bne.n	8004b46 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8004b1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b22:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <TIM_Base_SetConfig+0x94>)
 8004b24:	4290      	cmp	r0, r2
 8004b26:	d019      	beq.n	8004b5c <TIM_Base_SetConfig+0x68>
 8004b28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b2c:	d016      	beq.n	8004b5c <TIM_Base_SetConfig+0x68>
 8004b2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004b32:	4290      	cmp	r0, r2
 8004b34:	d012      	beq.n	8004b5c <TIM_Base_SetConfig+0x68>
 8004b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b3a:	4290      	cmp	r0, r2
 8004b3c:	d00e      	beq.n	8004b5c <TIM_Base_SetConfig+0x68>
 8004b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b42:	4290      	cmp	r0, r2
 8004b44:	d00a      	beq.n	8004b5c <TIM_Base_SetConfig+0x68>
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <TIM_Base_SetConfig+0x98>)
 8004b48:	4290      	cmp	r0, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_Base_SetConfig+0x68>
 8004b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b50:	4290      	cmp	r0, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_Base_SetConfig+0x68>
 8004b54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b58:	4290      	cmp	r0, r2
 8004b5a:	d103      	bne.n	8004b64 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b62:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b64:	694a      	ldr	r2, [r1, #20]
 8004b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b6a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004b6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6e:	688b      	ldr	r3, [r1, #8]
 8004b70:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b72:	680b      	ldr	r3, [r1, #0]
 8004b74:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <TIM_Base_SetConfig+0x94>)
 8004b78:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7a:	bf04      	itt	eq
 8004b7c:	690b      	ldreq	r3, [r1, #16]
 8004b7e:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004b80:	2301      	movs	r3, #1
 8004b82:	6143      	str	r3, [r0, #20]
}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40014000 	.word	0x40014000

08004b90 <HAL_TIM_OC_Init>:
{
 8004b90:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004b92:	4604      	mov	r4, r0
 8004b94:	b1a0      	cbz	r0, 8004bc0 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b9e:	b91b      	cbnz	r3, 8004ba8 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004ba0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004ba4:	f7ff fee6 	bl	8004974 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004bae:	6820      	ldr	r0, [r4, #0]
 8004bb0:	1d21      	adds	r1, r4, #4
 8004bb2:	f7ff ff9f 	bl	8004af4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004bbc:	2000      	movs	r0, #0
}
 8004bbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	e7fc      	b.n	8004bbe <HAL_TIM_OC_Init+0x2e>

08004bc4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc4:	6a03      	ldr	r3, [r0, #32]
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004bcc:	6a03      	ldr	r3, [r0, #32]
{
 8004bce:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8004bd0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bda:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bde:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004be0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004be8:	4d0b      	ldr	r5, [pc, #44]	; (8004c18 <TIM_OC2_SetConfig+0x54>)
 8004bea:	42a8      	cmp	r0, r5
 8004bec:	d10d      	bne.n	8004c0a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bf4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bf8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bfc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c00:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c06:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004c0a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004c0c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004c0e:	684a      	ldr	r2, [r1, #4]
 8004c10:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004c12:	6203      	str	r3, [r0, #32]
}
 8004c14:	bd70      	pop	{r4, r5, r6, pc}
 8004c16:	bf00      	nop
 8004c18:	40010000 	.word	0x40010000

08004c1c <HAL_TIM_OC_ConfigChannel>:
{
 8004c1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004c1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c22:	2b01      	cmp	r3, #1
{
 8004c24:	4604      	mov	r4, r0
 8004c26:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004c2a:	d018      	beq.n	8004c5e <HAL_TIM_OC_ConfigChannel+0x42>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004c32:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8004c36:	461d      	mov	r5, r3
  switch (Channel)
 8004c38:	2a0c      	cmp	r2, #12
 8004c3a:	d80b      	bhi.n	8004c54 <HAL_TIM_OC_ConfigChannel+0x38>
 8004c3c:	e8df f002 	tbb	[pc, r2]
 8004c40:	0a0a0a07 	.word	0x0a0a0a07
 8004c44:	0a0a0a10 	.word	0x0a0a0a10
 8004c48:	0a0a0a14 	.word	0x0a0a0a14
 8004c4c:	18          	.byte	0x18
 8004c4d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	f7ff fe1c 	bl	800488c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8004c54:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c56:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c5a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c60:	6820      	ldr	r0, [r4, #0]
 8004c62:	f7ff ffaf 	bl	8004bc4 <TIM_OC2_SetConfig>
      break;
 8004c66:	e7f5      	b.n	8004c54 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c68:	6820      	ldr	r0, [r4, #0]
 8004c6a:	f7ff fe37 	bl	80048dc <TIM_OC3_SetConfig>
      break;
 8004c6e:	e7f1      	b.n	8004c54 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	f7ff fe5d 	bl	8004930 <TIM_OC4_SetConfig>
      break;
 8004c76:	e7ed      	b.n	8004c54 <HAL_TIM_OC_ConfigChannel+0x38>

08004c78 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c78:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c7a:	f001 011f 	and.w	r1, r1, #31
{
 8004c7e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c80:	2401      	movs	r4, #1
 8004c82:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004c84:	ea23 0304 	bic.w	r3, r3, r4
 8004c88:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c8a:	6a03      	ldr	r3, [r0, #32]
 8004c8c:	408a      	lsls	r2, r1
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	6202      	str	r2, [r0, #32]
}
 8004c92:	bd10      	pop	{r4, pc}

08004c94 <HAL_TIM_OC_Start_IT>:
{
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4604      	mov	r4, r0
 8004c98:	6800      	ldr	r0, [r0, #0]
  switch (Channel)
 8004c9a:	290c      	cmp	r1, #12
 8004c9c:	d80c      	bhi.n	8004cb8 <HAL_TIM_OC_Start_IT+0x24>
 8004c9e:	e8df f001 	tbb	[pc, r1]
 8004ca2:	0b07      	.short	0x0b07
 8004ca4:	0b210b0b 	.word	0x0b210b0b
 8004ca8:	0b250b0b 	.word	0x0b250b0b
 8004cac:	0b0b      	.short	0x0b0b
 8004cae:	29          	.byte	0x29
 8004caf:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004cb0:	68c3      	ldr	r3, [r0, #12]
 8004cb2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cb6:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f7ff ffdd 	bl	8004c78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_TIM_OC_Start_IT+0x68>)
 8004cc2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8004cc4:	bf02      	ittt	eq
 8004cc6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004cc8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8004ccc:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8004cd6:	bf1e      	ittt	ne
 8004cd8:	681a      	ldrne	r2, [r3, #0]
 8004cda:	f042 0201 	orrne.w	r2, r2, #1
 8004cde:	601a      	strne	r2, [r3, #0]
}
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ce4:	68c3      	ldr	r3, [r0, #12]
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	e7e4      	b.n	8004cb6 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004cec:	68c3      	ldr	r3, [r0, #12]
 8004cee:	f043 0308 	orr.w	r3, r3, #8
 8004cf2:	e7e0      	b.n	8004cb6 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cf4:	68c3      	ldr	r3, [r0, #12]
 8004cf6:	f043 0310 	orr.w	r3, r3, #16
 8004cfa:	e7dc      	b.n	8004cb6 <HAL_TIM_OC_Start_IT+0x22>
 8004cfc:	40010000 	.word	0x40010000

08004d00 <HAL_TIMEx_CommutCallback>:
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIMEx_BreakCallback>:
 8004d02:	4770      	bx	lr

08004d04 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d04:	0189      	lsls	r1, r1, #6
 8004d06:	f041 0120 	orr.w	r1, r1, #32
 8004d0a:	4a06      	ldr	r2, [pc, #24]	; (8004d24 <USB_FlushTxFifo+0x20>)
 8004d0c:	6101      	str	r1, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	d005      	beq.n	8004d1e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d12:	6903      	ldr	r3, [r0, #16]
 8004d14:	f013 0320 	ands.w	r3, r3, #32
 8004d18:	d1f9      	bne.n	8004d0e <USB_FlushTxFifo+0xa>

  return HAL_OK;
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004d1e:	2003      	movs	r0, #3
}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	00030d41 	.word	0x00030d41

08004d28 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d28:	2310      	movs	r3, #16
 8004d2a:	4a06      	ldr	r2, [pc, #24]	; (8004d44 <USB_FlushRxFifo+0x1c>)
 8004d2c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004d2e:	3a01      	subs	r2, #1
 8004d30:	d005      	beq.n	8004d3e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d32:	6903      	ldr	r3, [r0, #16]
 8004d34:	f013 0310 	ands.w	r3, r3, #16
 8004d38:	d1f9      	bne.n	8004d2e <USB_FlushRxFifo+0x6>

  return HAL_OK;
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004d3e:	2003      	movs	r0, #3
}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	00030d41 	.word	0x00030d41

08004d48 <USB_ReadPacket>:
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d48:	3203      	adds	r2, #3
 8004d4a:	0892      	lsrs	r2, r2, #2
 8004d4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  for (i = 0U; i < count32b; i++)
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d50:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8004d54:	4291      	cmp	r1, r2
 8004d56:	d101      	bne.n	8004d5c <USB_ReadPacket+0x14>
    pDest++;
  }

  return ((void *)pDest);
}
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d5c:	6803      	ldr	r3, [r0, #0]
 8004d5e:	f841 3b04 	str.w	r3, [r1], #4
 8004d62:	e7f7      	b.n	8004d54 <USB_ReadPacket+0xc>

08004d64 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d64:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004d66:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8004d68:	4010      	ands	r0, r2
 8004d6a:	4770      	bx	lr

08004d6c <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8004d6c:	6940      	ldr	r0, [r0, #20]
}
 8004d6e:	f000 0001 	and.w	r0, r0, #1
 8004d72:	4770      	bx	lr

08004d74 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d74:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004d78:	f023 0303 	bic.w	r3, r3, #3
{
 8004d7c:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d7e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d82:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8004d86:	f001 0303 	and.w	r3, r1, #3
 8004d8a:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8004d8c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d8e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d92:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8004d96:	d104      	bne.n	8004da2 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8004d98:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8004d9c:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8004d9e:	2000      	movs	r0, #0
 8004da0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8004da2:	2902      	cmp	r1, #2
 8004da4:	d1fb      	bne.n	8004d9e <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8004da6:	f241 7370 	movw	r3, #6000	; 0x1770
 8004daa:	e7f7      	b.n	8004d9c <USB_InitFSLSPClkSel+0x28>

08004dac <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004dac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004db0:	6940      	ldr	r0, [r0, #20]
}
 8004db2:	b280      	uxth	r0, r0
 8004db4:	4770      	bx	lr

08004db6 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004db6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004dba:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8004dbe:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004dc2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004dc6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004dd2:	d11e      	bne.n	8004e12 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004dd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004dd6:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004dda:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004dde:	d137      	bne.n	8004e50 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004de4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004de8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004df4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004df8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dfc:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004e00:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8004e04:	3b01      	subs	r3, #1
 8004e06:	d002      	beq.n	8004e0e <USB_HC_Halt+0x58>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e08:	6811      	ldr	r1, [r2, #0]
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	dbfa      	blt.n	8004e04 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8004e0e:	2000      	movs	r0, #0
 8004e10:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e12:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8004e16:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e1a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e1e:	d117      	bne.n	8004e50 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e24:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e28:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e34:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004e38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e3c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004e40:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8004e44:	3b01      	subs	r3, #1
 8004e46:	d0e2      	beq.n	8004e0e <USB_HC_Halt+0x58>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e48:	6811      	ldr	r1, [r2, #0]
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	dbfa      	blt.n	8004e44 <USB_HC_Halt+0x8e>
 8004e4e:	e7de      	b.n	8004e0e <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e54:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004e58:	e7d9      	b.n	8004e0e <USB_HC_Halt+0x58>

08004e5a <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e5a:	6883      	ldr	r3, [r0, #8]
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b510      	push	{r4, lr}
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e62:	2110      	movs	r1, #16
{
 8004e64:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e66:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e68:	f7ff ff4c 	bl	8004d04 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f7ff ff5b 	bl	8004d28 <USB_FlushRxFifo>
 8004e72:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8004e76:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8004e7a:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004e7c:	6811      	ldr	r1, [r2, #0]
 8004e7e:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e82:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8004e86:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8004e8a:	4282      	cmp	r2, r0
 8004e8c:	d1f6      	bne.n	8004e7c <USB_StopHost+0x22>
  uint32_t count = 0U;
 8004e8e:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e96:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8004e9a:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004ea2:	d802      	bhi.n	8004eaa <USB_StopHost+0x50>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	2900      	cmp	r1, #0
 8004ea8:	dbf8      	blt.n	8004e9c <USB_StopHost+0x42>
 8004eaa:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1ef      	bne.n	8004e90 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004eb8:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	bd10      	pop	{r4, pc}

08004ec6 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8004ec6:	f8d0 2594 	ldr.w	r2, [r0, #1428]	; 0x594
 8004eca:	3201      	adds	r2, #1
 8004ecc:	f8c0 2594 	str.w	r2, [r0, #1428]	; 0x594
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004ed0:	7802      	ldrb	r2, [r0, #0]
 8004ed2:	2a0b      	cmp	r2, #11
 8004ed4:	d104      	bne.n	8004ee0 <USBH_LL_IncTimer+0x1a>
 8004ed6:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 8004eda:	b10b      	cbz	r3, 8004ee0 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	4718      	bx	r3
}
 8004ee0:	4770      	bx	lr

08004ee2 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8004ee8:	4770      	bx	lr

08004eea <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 8004ef0:	4770      	bx	lr

08004ef2 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 8004efe:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	4770      	bx	lr

08004f06 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004f06:	b538      	push	{r3, r4, r5, lr}
 8004f08:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004f0a:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 8004f0c:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 8004f0e:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 8004f12:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 8004f16:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
 8004f1a:	f7fb ff04 	bl	8000d26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8004f1e:	7921      	ldrb	r1, [r4, #4]
 8004f20:	4620      	mov	r0, r4
 8004f22:	f000 f806 	bl	8004f32 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8004f26:	7961      	ldrb	r1, [r4, #5]
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f000 f802 	bl	8004f32 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004f2e:	4628      	mov	r0, r5
 8004f30:	bd38      	pop	{r3, r4, r5, pc}

08004f32 <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
  if (idx < 11U)
 8004f32:	290a      	cmp	r1, #10
 8004f34:	bf9f      	itttt	ls
 8004f36:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004f3a:	f8d0 3554 	ldrls.w	r3, [r0, #1364]	; 0x554
 8004f3e:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004f42:	f8c0 3554 	strls.w	r3, [r0, #1364]	; 0x554
  }

  return USBH_OK;
}
 8004f46:	2000      	movs	r0, #0
 8004f48:	4770      	bx	lr
	...

08004f4c <D16_GENERIC>:
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	b089      	sub	sp, #36	; 0x24
 8004f52:	68d4      	ldr	r4, [r2, #12]
 8004f54:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004f56:	6993      	ldr	r3, [r2, #24]
 8004f58:	9407      	str	r4, [sp, #28]
 8004f5a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004f5c:	9306      	str	r3, [sp, #24]
 8004f5e:	9402      	str	r4, [sp, #8]
 8004f60:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004f64:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8004f68:	69d3      	ldr	r3, [r2, #28]
 8004f6a:	6896      	ldr	r6, [r2, #8]
 8004f6c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004f6e:	9103      	str	r1, [sp, #12]
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	d066      	beq.n	8005042 <D16_GENERIC+0xf6>
 8004f74:	f004 0510 	and.w	r5, r4, #16
 8004f78:	f004 0420 	and.w	r4, r4, #32
 8004f7c:	9504      	str	r5, [sp, #16]
 8004f7e:	4938      	ldr	r1, [pc, #224]	; (8005060 <D16_GENERIC+0x114>)
 8004f80:	9405      	str	r4, [sp, #20]
 8004f82:	f04f 0e00 	mov.w	lr, #0
 8004f86:	4635      	mov	r5, r6
 8004f88:	e04f      	b.n	800502a <D16_GENERIC+0xde>
 8004f8a:	5d87      	ldrb	r7, [r0, r6]
 8004f8c:	7804      	ldrb	r4, [r0, #0]
 8004f8e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004f92:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004f96:	b2e6      	uxtb	r6, r4
 8004f98:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004f9c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004fa0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004fa4:	4433      	add	r3, r6
 8004fa6:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004faa:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8004fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004fb6:	0aa3      	lsrs	r3, r4, #10
 8004fb8:	4c2a      	ldr	r4, [pc, #168]	; (8005064 <D16_GENERIC+0x118>)
 8004fba:	fb26 5404 	smlad	r4, r6, r4, r5
 8004fbe:	4d2a      	ldr	r5, [pc, #168]	; (8005068 <D16_GENERIC+0x11c>)
 8004fc0:	fb26 f505 	smuad	r5, r6, r5
 8004fc4:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8004fc8:	eb04 080a 	add.w	r8, r4, sl
 8004fcc:	eba8 080b 	sub.w	r8, r8, fp
 8004fd0:	4646      	mov	r6, r8
 8004fd2:	17f7      	asrs	r7, r6, #31
 8004fd4:	e9cd 6700 	strd	r6, r7, [sp]
 8004fd8:	9e04      	ldr	r6, [sp, #16]
 8004fda:	f10e 0c01 	add.w	ip, lr, #1
 8004fde:	b16e      	cbz	r6, 8004ffc <D16_GENERIC+0xb0>
 8004fe0:	6a16      	ldr	r6, [r2, #32]
 8004fe2:	9f01      	ldr	r7, [sp, #4]
 8004fe4:	fba8 8906 	umull	r8, r9, r8, r6
 8004fe8:	fb06 9907 	mla	r9, r6, r7, r9
 8004fec:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004ff0:	f149 0900 	adc.w	r9, r9, #0
 8004ff4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004ff8:	46a3      	mov	fp, r4
 8004ffa:	4654      	mov	r4, sl
 8004ffc:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004ffe:	9f02      	ldr	r7, [sp, #8]
 8005000:	0424      	lsls	r4, r4, #16
 8005002:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005006:	f04f 0900 	mov.w	r9, #0
 800500a:	fb0e fe06 	mul.w	lr, lr, r6
 800500e:	fbc7 8904 	smlal	r8, r9, r7, r4
 8005012:	9e03      	ldr	r6, [sp, #12]
 8005014:	464f      	mov	r7, r9
 8005016:	10bc      	asrs	r4, r7, #2
 8005018:	f304 040f 	ssat	r4, #16, r4
 800501c:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8005020:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005022:	fa1f fe8c 	uxth.w	lr, ip
 8005026:	4574      	cmp	r4, lr
 8005028:	d90a      	bls.n	8005040 <D16_GENERIC+0xf4>
 800502a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800502c:	2c01      	cmp	r4, #1
 800502e:	b2e6      	uxtb	r6, r4
 8005030:	d1ab      	bne.n	8004f8a <D16_GENERIC+0x3e>
 8005032:	9e05      	ldr	r6, [sp, #20]
 8005034:	f850 4b02 	ldr.w	r4, [r0], #2
 8005038:	2e00      	cmp	r6, #0
 800503a:	d0ac      	beq.n	8004f96 <D16_GENERIC+0x4a>
 800503c:	ba64      	rev16	r4, r4
 800503e:	e7aa      	b.n	8004f96 <D16_GENERIC+0x4a>
 8005040:	462e      	mov	r6, r5
 8005042:	9907      	ldr	r1, [sp, #28]
 8005044:	61d3      	str	r3, [r2, #28]
 8005046:	9b06      	ldr	r3, [sp, #24]
 8005048:	6096      	str	r6, [r2, #8]
 800504a:	2000      	movs	r0, #0
 800504c:	60d1      	str	r1, [r2, #12]
 800504e:	f8c2 a010 	str.w	sl, [r2, #16]
 8005052:	f8c2 b014 	str.w	fp, [r2, #20]
 8005056:	6193      	str	r3, [r2, #24]
 8005058:	b009      	add	sp, #36	; 0x24
 800505a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505e:	bf00      	nop
 8005060:	200000a0 	.word	0x200000a0
 8005064:	00030001 	.word	0x00030001
 8005068:	00010003 	.word	0x00010003

0800506c <D24_GENERIC>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8005072:	6993      	ldr	r3, [r2, #24]
 8005074:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8005076:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800507a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800507e:	6894      	ldr	r4, [r2, #8]
 8005080:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005084:	b089      	sub	sp, #36	; 0x24
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	9503      	str	r5, [sp, #12]
 800508a:	69d3      	ldr	r3, [r2, #28]
 800508c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800508e:	9104      	str	r1, [sp, #16]
 8005090:	2e00      	cmp	r6, #0
 8005092:	f000 8096 	beq.w	80051c2 <D24_GENERIC+0x156>
 8005096:	f005 0610 	and.w	r6, r5, #16
 800509a:	f005 0520 	and.w	r5, r5, #32
 800509e:	4954      	ldr	r1, [pc, #336]	; (80051f0 <D24_GENERIC+0x184>)
 80050a0:	9605      	str	r6, [sp, #20]
 80050a2:	9506      	str	r5, [sp, #24]
 80050a4:	f04f 0e00 	mov.w	lr, #0
 80050a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80050ac:	e06a      	b.n	8005184 <D24_GENERIC+0x118>
 80050ae:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80050b2:	f810 8007 	ldrb.w	r8, [r0, r7]
 80050b6:	f890 c000 	ldrb.w	ip, [r0]
 80050ba:	042d      	lsls	r5, r5, #16
 80050bc:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80050c0:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80050c4:	44ac      	add	ip, r5
 80050c6:	4438      	add	r0, r7
 80050c8:	fa5f f68c 	uxtb.w	r6, ip
 80050cc:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80050d0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80050d4:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80050d8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80050dc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80050e0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80050e4:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80050e8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80050ec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80050f0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80050f4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80050f8:	4d3e      	ldr	r5, [pc, #248]	; (80051f4 <D24_GENERIC+0x188>)
 80050fa:	fb26 b705 	smlad	r7, r6, r5, fp
 80050fe:	4d3e      	ldr	r5, [pc, #248]	; (80051f8 <D24_GENERIC+0x18c>)
 8005100:	fb26 4b05 	smlad	fp, r6, r5, r4
 8005104:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8005108:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800510c:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8005110:	2401      	movs	r4, #1
 8005112:	fb26 f604 	smuad	r6, r6, r4
 8005116:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800511a:	9f02      	ldr	r7, [sp, #8]
 800511c:	eb0e 0c04 	add.w	ip, lr, r4
 8005120:	eb08 0406 	add.w	r4, r8, r6
 8005124:	eb05 060a 	add.w	r6, r5, sl
 8005128:	1bf6      	subs	r6, r6, r7
 800512a:	4637      	mov	r7, r6
 800512c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8005130:	e9cd 7800 	strd	r7, r8, [sp]
 8005134:	9f05      	ldr	r7, [sp, #20]
 8005136:	b177      	cbz	r7, 8005156 <D24_GENERIC+0xea>
 8005138:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800513c:	9502      	str	r5, [sp, #8]
 800513e:	fba6 9a08 	umull	r9, sl, r6, r8
 8005142:	9e01      	ldr	r6, [sp, #4]
 8005144:	fb08 aa06 	mla	sl, r8, r6, sl
 8005148:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800514c:	f14a 0700 	adc.w	r7, sl, #0
 8005150:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8005154:	4655      	mov	r5, sl
 8005156:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8005158:	9f03      	ldr	r7, [sp, #12]
 800515a:	03ad      	lsls	r5, r5, #14
 800515c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005160:	f04f 0900 	mov.w	r9, #0
 8005164:	fb0e fe06 	mul.w	lr, lr, r6
 8005168:	fbc7 8905 	smlal	r8, r9, r7, r5
 800516c:	9e04      	ldr	r6, [sp, #16]
 800516e:	464f      	mov	r7, r9
 8005170:	10bd      	asrs	r5, r7, #2
 8005172:	f305 050f 	ssat	r5, #16, r5
 8005176:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800517a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800517c:	fa1f fe8c 	uxth.w	lr, ip
 8005180:	4575      	cmp	r5, lr
 8005182:	d91c      	bls.n	80051be <D24_GENERIC+0x152>
 8005184:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8005186:	b2ef      	uxtb	r7, r5
 8005188:	2d01      	cmp	r5, #1
 800518a:	b23e      	sxth	r6, r7
 800518c:	d18f      	bne.n	80050ae <D24_GENERIC+0x42>
 800518e:	9d06      	ldr	r5, [sp, #24]
 8005190:	b15d      	cbz	r5, 80051aa <D24_GENERIC+0x13e>
 8005192:	f01e 0f01 	tst.w	lr, #1
 8005196:	d122      	bne.n	80051de <D24_GENERIC+0x172>
 8005198:	7805      	ldrb	r5, [r0, #0]
 800519a:	78c7      	ldrb	r7, [r0, #3]
 800519c:	7846      	ldrb	r6, [r0, #1]
 800519e:	022d      	lsls	r5, r5, #8
 80051a0:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80051a4:	44b4      	add	ip, r6
 80051a6:	3002      	adds	r0, #2
 80051a8:	e78e      	b.n	80050c8 <D24_GENERIC+0x5c>
 80051aa:	7846      	ldrb	r6, [r0, #1]
 80051ac:	f890 c002 	ldrb.w	ip, [r0, #2]
 80051b0:	f810 5b03 	ldrb.w	r5, [r0], #3
 80051b4:	0236      	lsls	r6, r6, #8
 80051b6:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80051ba:	44ac      	add	ip, r5
 80051bc:	e784      	b.n	80050c8 <D24_GENERIC+0x5c>
 80051be:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80051c2:	61d3      	str	r3, [r2, #28]
 80051c4:	9b07      	ldr	r3, [sp, #28]
 80051c6:	6094      	str	r4, [r2, #8]
 80051c8:	2000      	movs	r0, #0
 80051ca:	f8c2 b00c 	str.w	fp, [r2, #12]
 80051ce:	f8c2 a010 	str.w	sl, [r2, #16]
 80051d2:	f8c2 9014 	str.w	r9, [r2, #20]
 80051d6:	6193      	str	r3, [r2, #24]
 80051d8:	b009      	add	sp, #36	; 0x24
 80051da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051de:	78c5      	ldrb	r5, [r0, #3]
 80051e0:	7887      	ldrb	r7, [r0, #2]
 80051e2:	f810 6b04 	ldrb.w	r6, [r0], #4
 80051e6:	022d      	lsls	r5, r5, #8
 80051e8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80051ec:	44b4      	add	ip, r6
 80051ee:	e76b      	b.n	80050c8 <D24_GENERIC+0x5c>
 80051f0:	200000a0 	.word	0x200000a0
 80051f4:	00030001 	.word	0x00030001
 80051f8:	00060007 	.word	0x00060007

080051fc <D32_GENERIC>:
 80051fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005202:	6993      	ldr	r3, [r2, #24]
 8005204:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005206:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800520a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800520e:	69d6      	ldr	r6, [r2, #28]
 8005210:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005214:	b089      	sub	sp, #36	; 0x24
 8005216:	9307      	str	r3, [sp, #28]
 8005218:	9403      	str	r4, [sp, #12]
 800521a:	6893      	ldr	r3, [r2, #8]
 800521c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800521e:	9104      	str	r1, [sp, #16]
 8005220:	2d00      	cmp	r5, #0
 8005222:	f000 809f 	beq.w	8005364 <D32_GENERIC+0x168>
 8005226:	f004 0510 	and.w	r5, r4, #16
 800522a:	f004 0420 	and.w	r4, r4, #32
 800522e:	9505      	str	r5, [sp, #20]
 8005230:	4953      	ldr	r1, [pc, #332]	; (8005380 <D32_GENERIC+0x184>)
 8005232:	9406      	str	r4, [sp, #24]
 8005234:	f04f 0c00 	mov.w	ip, #0
 8005238:	f8cd 9008 	str.w	r9, [sp, #8]
 800523c:	461d      	mov	r5, r3
 800523e:	4617      	mov	r7, r2
 8005240:	e077      	b.n	8005332 <D32_GENERIC+0x136>
 8005242:	f818 3003 	ldrb.w	r3, [r8, r3]
 8005246:	f810 800e 	ldrb.w	r8, [r0, lr]
 800524a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800524e:	7800      	ldrb	r0, [r0, #0]
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005256:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800525a:	4403      	add	r3, r0
 800525c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8005260:	b2dc      	uxtb	r4, r3
 8005262:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005266:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800526a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800526e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005272:	0e1b      	lsrs	r3, r3, #24
 8005274:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8005278:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800527c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005280:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005284:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8005288:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800528c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8005290:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005294:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005298:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800529c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80052a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80052a4:	4b37      	ldr	r3, [pc, #220]	; (8005384 <D32_GENERIC+0x188>)
 80052a6:	fb22 b403 	smlad	r4, r2, r3, fp
 80052aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052ae:	fb2e 4803 	smlad	r8, lr, r3, r4
 80052b2:	4b35      	ldr	r3, [pc, #212]	; (8005388 <D32_GENERIC+0x18c>)
 80052b4:	fb22 5503 	smlad	r5, r2, r3, r5
 80052b8:	4b34      	ldr	r3, [pc, #208]	; (800538c <D32_GENERIC+0x190>)
 80052ba:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80052be:	2301      	movs	r3, #1
 80052c0:	fb22 f203 	smuad	r2, r2, r3
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <D32_GENERIC+0x194>)
 80052c6:	fb2e 2503 	smlad	r5, lr, r3, r2
 80052ca:	9b02      	ldr	r3, [sp, #8]
 80052cc:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80052d0:	eb04 080a 	add.w	r8, r4, sl
 80052d4:	eba8 0803 	sub.w	r8, r8, r3
 80052d8:	4642      	mov	r2, r8
 80052da:	17d3      	asrs	r3, r2, #31
 80052dc:	e9cd 2300 	strd	r2, r3, [sp]
 80052e0:	9b05      	ldr	r3, [sp, #20]
 80052e2:	f10c 0e01 	add.w	lr, ip, #1
 80052e6:	b16b      	cbz	r3, 8005304 <D32_GENERIC+0x108>
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	9b01      	ldr	r3, [sp, #4]
 80052ec:	9402      	str	r4, [sp, #8]
 80052ee:	fba8 8902 	umull	r8, r9, r8, r2
 80052f2:	fb02 9903 	mla	r9, r2, r3, r9
 80052f6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80052fa:	f149 0900 	adc.w	r9, r9, #0
 80052fe:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005302:	4654      	mov	r4, sl
 8005304:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005306:	9a04      	ldr	r2, [sp, #16]
 8005308:	fb0c fc03 	mul.w	ip, ip, r3
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	0364      	lsls	r4, r4, #13
 8005310:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005314:	f04f 0900 	mov.w	r9, #0
 8005318:	fbc3 8904 	smlal	r8, r9, r3, r4
 800531c:	464b      	mov	r3, r9
 800531e:	109b      	asrs	r3, r3, #2
 8005320:	f303 030f 	ssat	r3, #16, r3
 8005324:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8005328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800532a:	fa1f fc8e 	uxth.w	ip, lr
 800532e:	4563      	cmp	r3, ip
 8005330:	d914      	bls.n	800535c <D32_GENERIC+0x160>
 8005332:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005334:	b2e2      	uxtb	r2, r4
 8005336:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800533a:	eb00 080e 	add.w	r8, r0, lr
 800533e:	4253      	negs	r3, r2
 8005340:	2c01      	cmp	r4, #1
 8005342:	eb08 0403 	add.w	r4, r8, r3
 8005346:	f47f af7c 	bne.w	8005242 <D32_GENERIC+0x46>
 800534a:	1d02      	adds	r2, r0, #4
 800534c:	6803      	ldr	r3, [r0, #0]
 800534e:	9806      	ldr	r0, [sp, #24]
 8005350:	b110      	cbz	r0, 8005358 <D32_GENERIC+0x15c>
 8005352:	ba5b      	rev16	r3, r3
 8005354:	4610      	mov	r0, r2
 8005356:	e783      	b.n	8005260 <D32_GENERIC+0x64>
 8005358:	4610      	mov	r0, r2
 800535a:	e781      	b.n	8005260 <D32_GENERIC+0x64>
 800535c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005360:	462b      	mov	r3, r5
 8005362:	463a      	mov	r2, r7
 8005364:	6093      	str	r3, [r2, #8]
 8005366:	9b07      	ldr	r3, [sp, #28]
 8005368:	f8c2 b00c 	str.w	fp, [r2, #12]
 800536c:	2000      	movs	r0, #0
 800536e:	61d6      	str	r6, [r2, #28]
 8005370:	f8c2 a010 	str.w	sl, [r2, #16]
 8005374:	f8c2 9014 	str.w	r9, [r2, #20]
 8005378:	6193      	str	r3, [r2, #24]
 800537a:	b009      	add	sp, #36	; 0x24
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	200000a0 	.word	0x200000a0
 8005384:	00060003 	.word	0x00060003
 8005388:	000a000c 	.word	0x000a000c
 800538c:	000c000a 	.word	0x000c000a
 8005390:	00030006 	.word	0x00030006

08005394 <D48_GENERIC>:
 8005394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005398:	b089      	sub	sp, #36	; 0x24
 800539a:	6953      	ldr	r3, [r2, #20]
 800539c:	68d4      	ldr	r4, [r2, #12]
 800539e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80053a0:	9302      	str	r3, [sp, #8]
 80053a2:	9400      	str	r4, [sp, #0]
 80053a4:	6993      	ldr	r3, [r2, #24]
 80053a6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80053a8:	9307      	str	r3, [sp, #28]
 80053aa:	9403      	str	r4, [sp, #12]
 80053ac:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80053b0:	69d6      	ldr	r6, [r2, #28]
 80053b2:	6893      	ldr	r3, [r2, #8]
 80053b4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80053b6:	9104      	str	r1, [sp, #16]
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	f000 80c5 	beq.w	8005548 <D48_GENERIC+0x1b4>
 80053be:	f004 0510 	and.w	r5, r4, #16
 80053c2:	f004 0420 	and.w	r4, r4, #32
 80053c6:	4967      	ldr	r1, [pc, #412]	; (8005564 <D48_GENERIC+0x1d0>)
 80053c8:	9505      	str	r5, [sp, #20]
 80053ca:	9406      	str	r4, [sp, #24]
 80053cc:	f04f 0c00 	mov.w	ip, #0
 80053d0:	4657      	mov	r7, sl
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	e09c      	b.n	8005510 <D48_GENERIC+0x17c>
 80053d6:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80053da:	f810 b009 	ldrb.w	fp, [r0, r9]
 80053de:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80053e2:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80053e6:	7800      	ldrb	r0, [r0, #0]
 80053e8:	0424      	lsls	r4, r4, #16
 80053ea:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80053ee:	f818 4005 	ldrb.w	r4, [r8, r5]
 80053f2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80053f6:	44a8      	add	r8, r5
 80053f8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80053fc:	eb0b 0500 	add.w	r5, fp, r0
 8005400:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8005404:	fa5f f885 	uxtb.w	r8, r5
 8005408:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800540c:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8005410:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8005414:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8005418:	0e2d      	lsrs	r5, r5, #24
 800541a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800541e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8005422:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8005426:	b2e6      	uxtb	r6, r4
 8005428:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800542c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005430:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8005434:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005438:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800543c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8005440:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005444:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8005448:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800544c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005450:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8005454:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005458:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800545c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005460:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8005464:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8005468:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800546c:	4c3e      	ldr	r4, [pc, #248]	; (8005568 <D48_GENERIC+0x1d4>)
 800546e:	9d00      	ldr	r5, [sp, #0]
 8005470:	fb2a 5404 	smlad	r4, sl, r4, r5
 8005474:	4d3d      	ldr	r5, [pc, #244]	; (800556c <D48_GENERIC+0x1d8>)
 8005476:	fb28 4405 	smlad	r4, r8, r5, r4
 800547a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800547e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8005482:	4c3b      	ldr	r4, [pc, #236]	; (8005570 <D48_GENERIC+0x1dc>)
 8005484:	9b01      	ldr	r3, [sp, #4]
 8005486:	fb2a 3304 	smlad	r3, sl, r4, r3
 800548a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800548e:	fb28 3304 	smlad	r3, r8, r4, r3
 8005492:	4c38      	ldr	r4, [pc, #224]	; (8005574 <D48_GENERIC+0x1e0>)
 8005494:	fb2e 3304 	smlad	r3, lr, r4, r3
 8005498:	2501      	movs	r5, #1
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	fb2a fa05 	smuad	sl, sl, r5
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <D48_GENERIC+0x1e4>)
 80054a2:	fb28 a803 	smlad	r8, r8, r3, sl
 80054a6:	4b35      	ldr	r3, [pc, #212]	; (800557c <D48_GENERIC+0x1e8>)
 80054a8:	fb2e 8303 	smlad	r3, lr, r3, r8
 80054ac:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	9b02      	ldr	r3, [sp, #8]
 80054b4:	eb04 0807 	add.w	r8, r4, r7
 80054b8:	eba8 0803 	sub.w	r8, r8, r3
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	4465      	add	r5, ip
 80054c0:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80054c4:	b163      	cbz	r3, 80054e0 <D48_GENERIC+0x14c>
 80054c6:	6a17      	ldr	r7, [r2, #32]
 80054c8:	9402      	str	r4, [sp, #8]
 80054ca:	fba8 8907 	umull	r8, r9, r8, r7
 80054ce:	fb07 990b 	mla	r9, r7, fp, r9
 80054d2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80054d6:	f149 0900 	adc.w	r9, r9, #0
 80054da:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80054de:	463c      	mov	r4, r7
 80054e0:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	02e4      	lsls	r4, r4, #11
 80054e8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80054ec:	f04f 0900 	mov.w	r9, #0
 80054f0:	fb0c fc0e 	mul.w	ip, ip, lr
 80054f4:	fbc3 8904 	smlal	r8, r9, r3, r4
 80054f8:	9b04      	ldr	r3, [sp, #16]
 80054fa:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80054fe:	f304 040f 	ssat	r4, #16, r4
 8005502:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8005506:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005508:	fa1f fc85 	uxth.w	ip, r5
 800550c:	4564      	cmp	r4, ip
 800550e:	d919      	bls.n	8005544 <D48_GENERIC+0x1b0>
 8005510:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8005512:	fa5f fe84 	uxtb.w	lr, r4
 8005516:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800551a:	f1ce 0500 	rsb	r5, lr, #0
 800551e:	eb00 0b09 	add.w	fp, r0, r9
 8005522:	eb0b 0a05 	add.w	sl, fp, r5
 8005526:	2c01      	cmp	r4, #1
 8005528:	eb0a 0809 	add.w	r8, sl, r9
 800552c:	f47f af53 	bne.w	80053d6 <D48_GENERIC+0x42>
 8005530:	9b06      	ldr	r3, [sp, #24]
 8005532:	6805      	ldr	r5, [r0, #0]
 8005534:	6844      	ldr	r4, [r0, #4]
 8005536:	3006      	adds	r0, #6
 8005538:	2b00      	cmp	r3, #0
 800553a:	f43f af63 	beq.w	8005404 <D48_GENERIC+0x70>
 800553e:	ba6d      	rev16	r5, r5
 8005540:	ba64      	rev16	r4, r4
 8005542:	e75f      	b.n	8005404 <D48_GENERIC+0x70>
 8005544:	9b01      	ldr	r3, [sp, #4]
 8005546:	46ba      	mov	sl, r7
 8005548:	6093      	str	r3, [r2, #8]
 800554a:	9b00      	ldr	r3, [sp, #0]
 800554c:	60d3      	str	r3, [r2, #12]
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	6153      	str	r3, [r2, #20]
 8005552:	9b07      	ldr	r3, [sp, #28]
 8005554:	61d6      	str	r6, [r2, #28]
 8005556:	2000      	movs	r0, #0
 8005558:	f8c2 a010 	str.w	sl, [r2, #16]
 800555c:	6193      	str	r3, [r2, #24]
 800555e:	b009      	add	sp, #36	; 0x24
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005564:	200000a0 	.word	0x200000a0
 8005568:	000f000a 	.word	0x000f000a
 800556c:	00060003 	.word	0x00060003
 8005570:	00150019 	.word	0x00150019
 8005574:	00190015 	.word	0x00190015
 8005578:	00030006 	.word	0x00030006
 800557c:	000a000f 	.word	0x000a000f

08005580 <D64_GENERIC>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	b089      	sub	sp, #36	; 0x24
 8005586:	6913      	ldr	r3, [r2, #16]
 8005588:	6895      	ldr	r5, [r2, #8]
 800558a:	9303      	str	r3, [sp, #12]
 800558c:	9501      	str	r5, [sp, #4]
 800558e:	6953      	ldr	r3, [r2, #20]
 8005590:	68d5      	ldr	r5, [r2, #12]
 8005592:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005594:	9304      	str	r3, [sp, #16]
 8005596:	9500      	str	r5, [sp, #0]
 8005598:	6993      	ldr	r3, [r2, #24]
 800559a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800559c:	9307      	str	r3, [sp, #28]
 800559e:	9505      	str	r5, [sp, #20]
 80055a0:	69d3      	ldr	r3, [r2, #28]
 80055a2:	9106      	str	r1, [sp, #24]
 80055a4:	2c00      	cmp	r4, #0
 80055a6:	f000 80d9 	beq.w	800575c <D64_GENERIC+0x1dc>
 80055aa:	6a11      	ldr	r1, [r2, #32]
 80055ac:	9102      	str	r1, [sp, #8]
 80055ae:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800579c <D64_GENERIC+0x21c>
 80055b2:	f04f 0c00 	mov.w	ip, #0
 80055b6:	4681      	mov	r9, r0
 80055b8:	e0c1      	b.n	800573e <D64_GENERIC+0x1be>
 80055ba:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80055be:	4274      	negs	r4, r6
 80055c0:	eb09 0708 	add.w	r7, r9, r8
 80055c4:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80055c8:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80055cc:	5d38      	ldrb	r0, [r7, r4]
 80055ce:	5d29      	ldrb	r1, [r5, r4]
 80055d0:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80055d4:	f819 a008 	ldrb.w	sl, [r9, r8]
 80055d8:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80055dc:	f899 7000 	ldrb.w	r7, [r9]
 80055e0:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80055e4:	4425      	add	r5, r4
 80055e6:	0409      	lsls	r1, r1, #16
 80055e8:	0400      	lsls	r0, r0, #16
 80055ea:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80055ee:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80055f2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80055f6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80055fa:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80055fe:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005602:	4459      	add	r1, fp
 8005604:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8005608:	4438      	add	r0, r7
 800560a:	b2c5      	uxtb	r5, r0
 800560c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005610:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8005614:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8005618:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800561c:	0e00      	lsrs	r0, r0, #24
 800561e:	eb03 0806 	add.w	r8, r3, r6
 8005622:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8005626:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800562a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800562e:	b2c8      	uxtb	r0, r1
 8005630:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005634:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005638:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800563c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8005640:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005644:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005648:	0e09      	lsrs	r1, r1, #24
 800564a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800564e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8005652:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8005656:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800565a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800565e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8005662:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8005666:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800566a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800566e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005672:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8005676:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800567a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800567e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005682:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005686:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800568a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800568e:	0a8b      	lsrs	r3, r1, #10
 8005690:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005694:	4939      	ldr	r1, [pc, #228]	; (800577c <D64_GENERIC+0x1fc>)
 8005696:	9c00      	ldr	r4, [sp, #0]
 8005698:	fb28 4101 	smlad	r1, r8, r1, r4
 800569c:	4c38      	ldr	r4, [pc, #224]	; (8005780 <D64_GENERIC+0x200>)
 800569e:	fb27 1104 	smlad	r1, r7, r4, r1
 80056a2:	4c38      	ldr	r4, [pc, #224]	; (8005784 <D64_GENERIC+0x204>)
 80056a4:	fb20 1104 	smlad	r1, r0, r4, r1
 80056a8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80056ac:	fb2a 1106 	smlad	r1, sl, r6, r1
 80056b0:	4c35      	ldr	r4, [pc, #212]	; (8005788 <D64_GENERIC+0x208>)
 80056b2:	9d01      	ldr	r5, [sp, #4]
 80056b4:	fb28 5404 	smlad	r4, r8, r4, r5
 80056b8:	4d33      	ldr	r5, [pc, #204]	; (8005788 <D64_GENERIC+0x208>)
 80056ba:	fb2a 4415 	smladx	r4, sl, r5, r4
 80056be:	4d33      	ldr	r5, [pc, #204]	; (800578c <D64_GENERIC+0x20c>)
 80056c0:	fb27 4405 	smlad	r4, r7, r5, r4
 80056c4:	fb20 4415 	smladx	r4, r0, r5, r4
 80056c8:	2501      	movs	r5, #1
 80056ca:	9400      	str	r4, [sp, #0]
 80056cc:	fb28 f805 	smuad	r8, r8, r5
 80056d0:	4c2f      	ldr	r4, [pc, #188]	; (8005790 <D64_GENERIC+0x210>)
 80056d2:	fb27 8704 	smlad	r7, r7, r4, r8
 80056d6:	4c2f      	ldr	r4, [pc, #188]	; (8005794 <D64_GENERIC+0x214>)
 80056d8:	fb20 7004 	smlad	r0, r0, r4, r7
 80056dc:	4c2e      	ldr	r4, [pc, #184]	; (8005798 <D64_GENERIC+0x218>)
 80056de:	fb2a 0004 	smlad	r0, sl, r4, r0
 80056e2:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80056e6:	9902      	ldr	r1, [sp, #8]
 80056e8:	9001      	str	r0, [sp, #4]
 80056ea:	b189      	cbz	r1, 8005710 <D64_GENERIC+0x190>
 80056ec:	9803      	ldr	r0, [sp, #12]
 80056ee:	9c04      	ldr	r4, [sp, #16]
 80056f0:	9604      	str	r6, [sp, #16]
 80056f2:	4430      	add	r0, r6
 80056f4:	1b00      	subs	r0, r0, r4
 80056f6:	17c5      	asrs	r5, r0, #31
 80056f8:	460f      	mov	r7, r1
 80056fa:	fba0 0101 	umull	r0, r1, r0, r1
 80056fe:	fb07 1105 	mla	r1, r7, r5, r1
 8005702:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005706:	f141 0100 	adc.w	r1, r1, #0
 800570a:	0049      	lsls	r1, r1, #1
 800570c:	9103      	str	r1, [sp, #12]
 800570e:	460e      	mov	r6, r1
 8005710:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8005712:	9905      	ldr	r1, [sp, #20]
 8005714:	9806      	ldr	r0, [sp, #24]
 8005716:	02b6      	lsls	r6, r6, #10
 8005718:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800571c:	f04f 0800 	mov.w	r8, #0
 8005720:	fb0c f404 	mul.w	r4, ip, r4
 8005724:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005728:	4641      	mov	r1, r8
 800572a:	1089      	asrs	r1, r1, #2
 800572c:	f301 010f 	ssat	r1, #16, r1
 8005730:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005734:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8005736:	f10c 0c01 	add.w	ip, ip, #1
 800573a:	4561      	cmp	r1, ip
 800573c:	dd0e      	ble.n	800575c <D64_GENERIC+0x1dc>
 800573e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8005740:	2e01      	cmp	r6, #1
 8005742:	f47f af3a 	bne.w	80055ba <D64_GENERIC+0x3a>
 8005746:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005748:	06b4      	lsls	r4, r6, #26
 800574a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800574e:	f109 0908 	add.w	r9, r9, #8
 8005752:	f57f af5a 	bpl.w	800560a <D64_GENERIC+0x8a>
 8005756:	ba40      	rev16	r0, r0
 8005758:	ba49      	rev16	r1, r1
 800575a:	e756      	b.n	800560a <D64_GENERIC+0x8a>
 800575c:	61d3      	str	r3, [r2, #28]
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	9901      	ldr	r1, [sp, #4]
 8005762:	6113      	str	r3, [r2, #16]
 8005764:	9b04      	ldr	r3, [sp, #16]
 8005766:	6091      	str	r1, [r2, #8]
 8005768:	6153      	str	r3, [r2, #20]
 800576a:	9900      	ldr	r1, [sp, #0]
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	60d1      	str	r1, [r2, #12]
 8005770:	2000      	movs	r0, #0
 8005772:	6193      	str	r3, [r2, #24]
 8005774:	b009      	add	sp, #36	; 0x24
 8005776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577a:	bf00      	nop
 800577c:	001c0015 	.word	0x001c0015
 8005780:	000f000a 	.word	0x000f000a
 8005784:	00060003 	.word	0x00060003
 8005788:	0024002a 	.word	0x0024002a
 800578c:	002e0030 	.word	0x002e0030
 8005790:	00030006 	.word	0x00030006
 8005794:	000a000f 	.word	0x000a000f
 8005798:	0015001c 	.word	0x0015001c
 800579c:	200000a0 	.word	0x200000a0

080057a0 <D80_GENERIC>:
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	b08b      	sub	sp, #44	; 0x2c
 80057a6:	6914      	ldr	r4, [r2, #16]
 80057a8:	9404      	str	r4, [sp, #16]
 80057aa:	6954      	ldr	r4, [r2, #20]
 80057ac:	9405      	str	r4, [sp, #20]
 80057ae:	6994      	ldr	r4, [r2, #24]
 80057b0:	9409      	str	r4, [sp, #36]	; 0x24
 80057b2:	6894      	ldr	r4, [r2, #8]
 80057b4:	9402      	str	r4, [sp, #8]
 80057b6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80057b8:	68d4      	ldr	r4, [r2, #12]
 80057ba:	9401      	str	r4, [sp, #4]
 80057bc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80057be:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80057c2:	9406      	str	r4, [sp, #24]
 80057c4:	9107      	str	r1, [sp, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 810f 	beq.w	80059ea <D80_GENERIC+0x24a>
 80057cc:	6a13      	ldr	r3, [r2, #32]
 80057ce:	9308      	str	r3, [sp, #32]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9200      	str	r2, [sp, #0]
 80057d4:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8005a3c <D80_GENERIC+0x29c>
 80057d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80057dc:	461a      	mov	r2, r3
 80057de:	e0ed      	b.n	80059bc <D80_GENERIC+0x21c>
 80057e0:	fa5f fc8c 	uxtb.w	ip, ip
 80057e4:	fa0f f48c 	sxth.w	r4, ip
 80057e8:	0066      	lsls	r6, r4, #1
 80057ea:	eb06 0804 	add.w	r8, r6, r4
 80057ee:	f1cc 0500 	rsb	r5, ip, #0
 80057f2:	eb00 0108 	add.w	r1, r0, r8
 80057f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80057fa:	194b      	adds	r3, r1, r5
 80057fc:	5d49      	ldrb	r1, [r1, r5]
 80057fe:	f810 a008 	ldrb.w	sl, [r0, r8]
 8005802:	f813 b004 	ldrb.w	fp, [r3, r4]
 8005806:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800580a:	f890 8000 	ldrb.w	r8, [r0]
 800580e:	eb03 0e04 	add.w	lr, r3, r4
 8005812:	eb0e 0705 	add.w	r7, lr, r5
 8005816:	0409      	lsls	r1, r1, #16
 8005818:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800581c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8005820:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8005824:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8005828:	eb0a 0004 	add.w	r0, sl, r4
 800582c:	041b      	lsls	r3, r3, #16
 800582e:	f81a a004 	ldrb.w	sl, [sl, r4]
 8005832:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8005836:	5d44      	ldrb	r4, [r0, r5]
 8005838:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800583c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005840:	4428      	add	r0, r5
 8005842:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8005846:	4441      	add	r1, r8
 8005848:	4430      	add	r0, r6
 800584a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800584e:	441f      	add	r7, r3
 8005850:	b2cd      	uxtb	r5, r1
 8005852:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005856:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800585a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8005864:	0e09      	lsrs	r1, r1, #24
 8005866:	4433      	add	r3, r6
 8005868:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800586c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8005870:	b2fd      	uxtb	r5, r7
 8005872:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8005876:	469b      	mov	fp, r3
 8005878:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800587c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8005880:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8005884:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8005888:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800588c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8005890:	0e3b      	lsrs	r3, r7, #24
 8005892:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8005896:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800589a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800589e:	fa5f fe84 	uxtb.w	lr, r4
 80058a2:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80058a6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80058aa:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80058ae:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80058b2:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80058b6:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80058ba:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80058be:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80058c2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80058c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ca:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80058ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80058d2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80058d6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80058da:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80058de:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80058e2:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80058e6:	0aa3      	lsrs	r3, r4, #10
 80058e8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80058ec:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80058f0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80058f4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80058f8:	9303      	str	r3, [sp, #12]
 80058fa:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80058fe:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8005902:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <D80_GENERIC+0x26c>)
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	fb2b 1303 	smlad	r3, fp, r3, r1
 800590a:	4941      	ldr	r1, [pc, #260]	; (8005a10 <D80_GENERIC+0x270>)
 800590c:	fb28 3301 	smlad	r3, r8, r1, r3
 8005910:	4940      	ldr	r1, [pc, #256]	; (8005a14 <D80_GENERIC+0x274>)
 8005912:	fb2c 3301 	smlad	r3, ip, r1, r3
 8005916:	4940      	ldr	r1, [pc, #256]	; (8005a18 <D80_GENERIC+0x278>)
 8005918:	fb27 3301 	smlad	r3, r7, r1, r3
 800591c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005920:	fb2e 3301 	smlad	r3, lr, r1, r3
 8005924:	493d      	ldr	r1, [pc, #244]	; (8005a1c <D80_GENERIC+0x27c>)
 8005926:	9c02      	ldr	r4, [sp, #8]
 8005928:	fb2b 4401 	smlad	r4, fp, r1, r4
 800592c:	493c      	ldr	r1, [pc, #240]	; (8005a20 <D80_GENERIC+0x280>)
 800592e:	fb28 4401 	smlad	r4, r8, r1, r4
 8005932:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8005936:	fb2c 4101 	smlad	r1, ip, r1, r4
 800593a:	4c3a      	ldr	r4, [pc, #232]	; (8005a24 <D80_GENERIC+0x284>)
 800593c:	fb27 1104 	smlad	r1, r7, r4, r1
 8005940:	4c39      	ldr	r4, [pc, #228]	; (8005a28 <D80_GENERIC+0x288>)
 8005942:	fb2e 1104 	smlad	r1, lr, r4, r1
 8005946:	9101      	str	r1, [sp, #4]
 8005948:	2101      	movs	r1, #1
 800594a:	fb2b fb01 	smuad	fp, fp, r1
 800594e:	4937      	ldr	r1, [pc, #220]	; (8005a2c <D80_GENERIC+0x28c>)
 8005950:	fb28 b801 	smlad	r8, r8, r1, fp
 8005954:	4d36      	ldr	r5, [pc, #216]	; (8005a30 <D80_GENERIC+0x290>)
 8005956:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800595a:	4d36      	ldr	r5, [pc, #216]	; (8005a34 <D80_GENERIC+0x294>)
 800595c:	fb27 c705 	smlad	r7, r7, r5, ip
 8005960:	4d35      	ldr	r5, [pc, #212]	; (8005a38 <D80_GENERIC+0x298>)
 8005962:	fb2e 7105 	smlad	r1, lr, r5, r7
 8005966:	9102      	str	r1, [sp, #8]
 8005968:	9908      	ldr	r1, [sp, #32]
 800596a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800596e:	b181      	cbz	r1, 8005992 <D80_GENERIC+0x1f2>
 8005970:	9c04      	ldr	r4, [sp, #16]
 8005972:	9d05      	ldr	r5, [sp, #20]
 8005974:	9305      	str	r3, [sp, #20]
 8005976:	441c      	add	r4, r3
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	17e7      	asrs	r7, r4, #31
 800597c:	fba4 4501 	umull	r4, r5, r4, r1
 8005980:	fb01 5507 	mla	r5, r1, r7, r5
 8005984:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8005988:	f145 0500 	adc.w	r5, r5, #0
 800598c:	0069      	lsls	r1, r5, #1
 800598e:	9104      	str	r1, [sp, #16]
 8005990:	460b      	mov	r3, r1
 8005992:	9e00      	ldr	r6, [sp, #0]
 8005994:	9f06      	ldr	r7, [sp, #24]
 8005996:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8005998:	025b      	lsls	r3, r3, #9
 800599a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800599e:	2500      	movs	r5, #0
 80059a0:	fb02 f101 	mul.w	r1, r2, r1
 80059a4:	fbc7 4503 	smlal	r4, r5, r7, r3
 80059a8:	9c07      	ldr	r4, [sp, #28]
 80059aa:	10ab      	asrs	r3, r5, #2
 80059ac:	f303 030f 	ssat	r3, #16, r3
 80059b0:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80059b4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80059b6:	3201      	adds	r2, #1
 80059b8:	4293      	cmp	r3, r2
 80059ba:	dd13      	ble.n	80059e4 <D80_GENERIC+0x244>
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80059c2:	f1bc 0f01 	cmp.w	ip, #1
 80059c6:	f47f af0b 	bne.w	80057e0 <D80_GENERIC+0x40>
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	6884      	ldr	r4, [r0, #8]
 80059ce:	069b      	lsls	r3, r3, #26
 80059d0:	e890 0082 	ldmia.w	r0, {r1, r7}
 80059d4:	f100 000a 	add.w	r0, r0, #10
 80059d8:	f57f af3a 	bpl.w	8005850 <D80_GENERIC+0xb0>
 80059dc:	ba49      	rev16	r1, r1
 80059de:	ba7f      	rev16	r7, r7
 80059e0:	ba64      	rev16	r4, r4
 80059e2:	e735      	b.n	8005850 <D80_GENERIC+0xb0>
 80059e4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80059e8:	4632      	mov	r2, r6
 80059ea:	9b02      	ldr	r3, [sp, #8]
 80059ec:	6093      	str	r3, [r2, #8]
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	60d3      	str	r3, [r2, #12]
 80059f2:	9b04      	ldr	r3, [sp, #16]
 80059f4:	6113      	str	r3, [r2, #16]
 80059f6:	9b05      	ldr	r3, [sp, #20]
 80059f8:	6153      	str	r3, [r2, #20]
 80059fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fc:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005a00:	2000      	movs	r0, #0
 8005a02:	6193      	str	r3, [r2, #24]
 8005a04:	b00b      	add	sp, #44	; 0x2c
 8005a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0a:	bf00      	nop
 8005a0c:	002d0024 	.word	0x002d0024
 8005a10:	001c0015 	.word	0x001c0015
 8005a14:	000f000a 	.word	0x000f000a
 8005a18:	00060003 	.word	0x00060003
 8005a1c:	0037003f 	.word	0x0037003f
 8005a20:	00450049 	.word	0x00450049
 8005a24:	00490045 	.word	0x00490045
 8005a28:	003f0037 	.word	0x003f0037
 8005a2c:	00030006 	.word	0x00030006
 8005a30:	000a000f 	.word	0x000a000f
 8005a34:	0015001c 	.word	0x0015001c
 8005a38:	0024002d 	.word	0x0024002d
 8005a3c:	200000a0 	.word	0x200000a0

08005a40 <D128_GENERIC>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	b093      	sub	sp, #76	; 0x4c
 8005a46:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005a48:	9005      	str	r0, [sp, #20]
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	9201      	str	r2, [sp, #4]
 8005a4e:	6912      	ldr	r2, [r2, #16]
 8005a50:	920c      	str	r2, [sp, #48]	; 0x30
 8005a52:	4602      	mov	r2, r0
 8005a54:	6940      	ldr	r0, [r0, #20]
 8005a56:	900d      	str	r0, [sp, #52]	; 0x34
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4614      	mov	r4, r2
 8005a5c:	6992      	ldr	r2, [r2, #24]
 8005a5e:	9211      	str	r2, [sp, #68]	; 0x44
 8005a60:	69c2      	ldr	r2, [r0, #28]
 8005a62:	9202      	str	r2, [sp, #8]
 8005a64:	68e2      	ldr	r2, [r4, #12]
 8005a66:	6880      	ldr	r0, [r0, #8]
 8005a68:	9203      	str	r2, [sp, #12]
 8005a6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a6c:	9004      	str	r0, [sp, #16]
 8005a6e:	920e      	str	r2, [sp, #56]	; 0x38
 8005a70:	910f      	str	r1, [sp, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 819b 	beq.w	8005dae <D128_GENERIC+0x36e>
 8005a78:	6a23      	ldr	r3, [r4, #32]
 8005a7a:	9310      	str	r3, [sp, #64]	; 0x40
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005e28 <D128_GENERIC+0x3e8>
 8005a82:	9306      	str	r3, [sp, #24]
 8005a84:	e17a      	b.n	8005d7c <D128_GENERIC+0x33c>
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	9d05      	ldr	r5, [sp, #20]
 8005a8a:	b214      	sxth	r4, r2
 8005a8c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8005a90:	4250      	negs	r0, r2
 8005a92:	eb05 010a 	add.w	r1, r5, sl
 8005a96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a9a:	eb01 0800 	add.w	r8, r1, r0
 8005a9e:	eb0b 0c04 	add.w	ip, fp, r4
 8005aa2:	eb08 070c 	add.w	r7, r8, ip
 8005aa6:	183b      	adds	r3, r7, r0
 8005aa8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8005aac:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8005ab0:	eb0e 0604 	add.w	r6, lr, r4
 8005ab4:	9307      	str	r3, [sp, #28]
 8005ab6:	1833      	adds	r3, r6, r0
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	462b      	mov	r3, r5
 8005abc:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8005ac0:	f8cd a020 	str.w	sl, [sp, #32]
 8005ac4:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8005ac8:	f813 c002 	ldrb.w	ip, [r3, r2]
 8005acc:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8005ad0:	5c3a      	ldrb	r2, [r7, r0]
 8005ad2:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8005ad6:	781f      	ldrb	r7, [r3, #0]
 8005ad8:	9b07      	ldr	r3, [sp, #28]
 8005ada:	9d05      	ldr	r5, [sp, #20]
 8005adc:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8005ae0:	5c09      	ldrb	r1, [r1, r0]
 8005ae2:	9709      	str	r7, [sp, #36]	; 0x24
 8005ae4:	9307      	str	r3, [sp, #28]
 8005ae6:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8005aea:	5c33      	ldrb	r3, [r6, r0]
 8005aec:	0412      	lsls	r2, r2, #16
 8005aee:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005af2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005af6:	9d08      	ldr	r5, [sp, #32]
 8005af8:	eb06 0a04 	add.w	sl, r6, r4
 8005afc:	0409      	lsls	r1, r1, #16
 8005afe:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8005b02:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8005b06:	5d36      	ldrb	r6, [r6, r4]
 8005b08:	9c05      	ldr	r4, [sp, #20]
 8005b0a:	042d      	lsls	r5, r5, #16
 8005b0c:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8005b10:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005b14:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8005b18:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8005b1c:	eb0a 0c00 	add.w	ip, sl, r0
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005b26:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8005b2a:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8005b2e:	9d07      	ldr	r5, [sp, #28]
 8005b30:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005b34:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8005b38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b3a:	4458      	add	r0, fp
 8005b3c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8005b40:	9005      	str	r0, [sp, #20]
 8005b42:	4439      	add	r1, r7
 8005b44:	442a      	add	r2, r5
 8005b46:	44b2      	add	sl, r6
 8005b48:	1918      	adds	r0, r3, r4
 8005b4a:	b2cb      	uxtb	r3, r1
 8005b4c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8005b50:	9e02      	ldr	r6, [sp, #8]
 8005b52:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005b56:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8005b5a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8005b5e:	441e      	add	r6, r3
 8005b60:	0e09      	lsrs	r1, r1, #24
 8005b62:	4633      	mov	r3, r6
 8005b64:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005b68:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8005b6c:	b2d4      	uxtb	r4, r2
 8005b6e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005b72:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005b76:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8005b7a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005b7e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005b82:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005b86:	0e12      	lsrs	r2, r2, #24
 8005b88:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8005b8c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8005b90:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005b94:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8005b98:	9702      	str	r7, [sp, #8]
 8005b9a:	b2c2      	uxtb	r2, r0
 8005b9c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8005ba0:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8005ba4:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8005ba8:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005bac:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005bb0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005bb4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8005bb8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8005bbc:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005bc0:	0e00      	lsrs	r0, r0, #24
 8005bc2:	fa5f f68a 	uxtb.w	r6, sl
 8005bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bca:	9309      	str	r3, [sp, #36]	; 0x24
 8005bcc:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005bd0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005bd4:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005bd8:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005bdc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005be0:	950a      	str	r5, [sp, #40]	; 0x28
 8005be2:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005be6:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005bea:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005bee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005bf2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005bf6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005bfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bfc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c02:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005c06:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005c0a:	9307      	str	r3, [sp, #28]
 8005c0c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005c10:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	f8cd c008 	str.w	ip, [sp, #8]
 8005c1a:	4694      	mov	ip, r2
 8005c1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c1e:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005c22:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8005c26:	9a02      	ldr	r2, [sp, #8]
 8005c28:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005c2c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005c30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005c34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c36:	f8cd a020 	str.w	sl, [sp, #32]
 8005c3a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005c3e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005c42:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005c46:	9b07      	ldr	r3, [sp, #28]
 8005c48:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005c4c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8005c50:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8005c54:	9a08      	ldr	r2, [sp, #32]
 8005c56:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005c62:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005c66:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8005c6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005c6e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005c72:	0a96      	lsrs	r6, r2, #10
 8005c74:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005c78:	9602      	str	r6, [sp, #8]
 8005c7a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005c7e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005c82:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8005c86:	4e53      	ldr	r6, [pc, #332]	; (8005dd4 <D128_GENERIC+0x394>)
 8005c88:	9f03      	ldr	r7, [sp, #12]
 8005c8a:	fb2c 7606 	smlad	r6, ip, r6, r7
 8005c8e:	4f52      	ldr	r7, [pc, #328]	; (8005dd8 <D128_GENERIC+0x398>)
 8005c90:	fb2a 6607 	smlad	r6, sl, r7, r6
 8005c94:	4f51      	ldr	r7, [pc, #324]	; (8005ddc <D128_GENERIC+0x39c>)
 8005c96:	fb21 6607 	smlad	r6, r1, r7, r6
 8005c9a:	4f51      	ldr	r7, [pc, #324]	; (8005de0 <D128_GENERIC+0x3a0>)
 8005c9c:	fb24 6607 	smlad	r6, r4, r7, r6
 8005ca0:	4f50      	ldr	r7, [pc, #320]	; (8005de4 <D128_GENERIC+0x3a4>)
 8005ca2:	fb28 6607 	smlad	r6, r8, r7, r6
 8005ca6:	4f50      	ldr	r7, [pc, #320]	; (8005de8 <D128_GENERIC+0x3a8>)
 8005ca8:	fb20 6607 	smlad	r6, r0, r7, r6
 8005cac:	4f4f      	ldr	r7, [pc, #316]	; (8005dec <D128_GENERIC+0x3ac>)
 8005cae:	fb23 6607 	smlad	r6, r3, r7, r6
 8005cb2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8005cb6:	fb25 6607 	smlad	r6, r5, r7, r6
 8005cba:	4f4d      	ldr	r7, [pc, #308]	; (8005df0 <D128_GENERIC+0x3b0>)
 8005cbc:	9a04      	ldr	r2, [sp, #16]
 8005cbe:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8005cc2:	4a4c      	ldr	r2, [pc, #304]	; (8005df4 <D128_GENERIC+0x3b4>)
 8005cc4:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005cc8:	4f4b      	ldr	r7, [pc, #300]	; (8005df8 <D128_GENERIC+0x3b8>)
 8005cca:	fb21 ee07 	smlad	lr, r1, r7, lr
 8005cce:	4f4b      	ldr	r7, [pc, #300]	; (8005dfc <D128_GENERIC+0x3bc>)
 8005cd0:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005cd4:	4f4a      	ldr	r7, [pc, #296]	; (8005e00 <D128_GENERIC+0x3c0>)
 8005cd6:	fb28 ee07 	smlad	lr, r8, r7, lr
 8005cda:	4f4a      	ldr	r7, [pc, #296]	; (8005e04 <D128_GENERIC+0x3c4>)
 8005cdc:	fb20 ee07 	smlad	lr, r0, r7, lr
 8005ce0:	4f49      	ldr	r7, [pc, #292]	; (8005e08 <D128_GENERIC+0x3c8>)
 8005ce2:	fb23 e707 	smlad	r7, r3, r7, lr
 8005ce6:	f8df e144 	ldr.w	lr, [pc, #324]	; 8005e2c <D128_GENERIC+0x3ec>
 8005cea:	fb25 720e 	smlad	r2, r5, lr, r7
 8005cee:	f04f 0b01 	mov.w	fp, #1
 8005cf2:	9203      	str	r2, [sp, #12]
 8005cf4:	fb2c fb0b 	smuad	fp, ip, fp
 8005cf8:	4f44      	ldr	r7, [pc, #272]	; (8005e0c <D128_GENERIC+0x3cc>)
 8005cfa:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005cfe:	4f44      	ldr	r7, [pc, #272]	; (8005e10 <D128_GENERIC+0x3d0>)
 8005d00:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005d04:	4f43      	ldr	r7, [pc, #268]	; (8005e14 <D128_GENERIC+0x3d4>)
 8005d06:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005d0a:	4f43      	ldr	r7, [pc, #268]	; (8005e18 <D128_GENERIC+0x3d8>)
 8005d0c:	fb28 a707 	smlad	r7, r8, r7, sl
 8005d10:	4a42      	ldr	r2, [pc, #264]	; (8005e1c <D128_GENERIC+0x3dc>)
 8005d12:	fb20 7702 	smlad	r7, r0, r2, r7
 8005d16:	4a42      	ldr	r2, [pc, #264]	; (8005e20 <D128_GENERIC+0x3e0>)
 8005d18:	fb23 7702 	smlad	r7, r3, r2, r7
 8005d1c:	4b41      	ldr	r3, [pc, #260]	; (8005e24 <D128_GENERIC+0x3e4>)
 8005d1e:	fb25 7303 	smlad	r3, r5, r3, r7
 8005d22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005d2a:	b185      	cbz	r5, 8005d4e <D128_GENERIC+0x30e>
 8005d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d30:	960d      	str	r6, [sp, #52]	; 0x34
 8005d32:	4432      	add	r2, r6
 8005d34:	1a52      	subs	r2, r2, r1
 8005d36:	17d1      	asrs	r1, r2, #31
 8005d38:	fba2 2305 	umull	r2, r3, r2, r5
 8005d3c:	fb05 3301 	mla	r3, r5, r1, r3
 8005d40:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005d44:	f143 0300 	adc.w	r3, r3, #0
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8005d4c:	461e      	mov	r6, r3
 8005d4e:	9801      	ldr	r0, [sp, #4]
 8005d50:	9c06      	ldr	r4, [sp, #24]
 8005d52:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8005d54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005d56:	01f6      	lsls	r6, r6, #7
 8005d58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	fbc5 2306 	smlal	r2, r3, r5, r6
 8005d62:	fb04 f101 	mul.w	r1, r4, r1
 8005d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d68:	109b      	asrs	r3, r3, #2
 8005d6a:	f303 030f 	ssat	r3, #16, r3
 8005d6e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8005d72:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005d74:	1c62      	adds	r2, r4, #1
 8005d76:	4293      	cmp	r3, r2
 8005d78:	9206      	str	r2, [sp, #24]
 8005d7a:	dd18      	ble.n	8005dae <D128_GENERIC+0x36e>
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005d80:	2a01      	cmp	r2, #1
 8005d82:	f47f ae80 	bne.w	8005a86 <D128_GENERIC+0x46>
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	9d05      	ldr	r5, [sp, #20]
 8005d8a:	069b      	lsls	r3, r3, #26
 8005d8c:	6829      	ldr	r1, [r5, #0]
 8005d8e:	686a      	ldr	r2, [r5, #4]
 8005d90:	68a8      	ldr	r0, [r5, #8]
 8005d92:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8005d96:	f105 0410 	add.w	r4, r5, #16
 8005d9a:	d506      	bpl.n	8005daa <D128_GENERIC+0x36a>
 8005d9c:	ba49      	rev16	r1, r1
 8005d9e:	ba52      	rev16	r2, r2
 8005da0:	ba40      	rev16	r0, r0
 8005da2:	fa9a fa9a 	rev16.w	sl, sl
 8005da6:	9405      	str	r4, [sp, #20]
 8005da8:	e6cf      	b.n	8005b4a <D128_GENERIC+0x10a>
 8005daa:	9405      	str	r4, [sp, #20]
 8005dac:	e6cd      	b.n	8005b4a <D128_GENERIC+0x10a>
 8005dae:	9a01      	ldr	r2, [sp, #4]
 8005db0:	9904      	ldr	r1, [sp, #16]
 8005db2:	6091      	str	r1, [r2, #8]
 8005db4:	9903      	ldr	r1, [sp, #12]
 8005db6:	60d1      	str	r1, [r2, #12]
 8005db8:	9b02      	ldr	r3, [sp, #8]
 8005dba:	61d3      	str	r3, [r2, #28]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc2:	610a      	str	r2, [r1, #16]
 8005dc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005dc6:	6159      	str	r1, [r3, #20]
 8005dc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005dca:	6199      	str	r1, [r3, #24]
 8005dcc:	2000      	movs	r0, #0
 8005dce:	b013      	add	sp, #76	; 0x4c
 8005dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd4:	00780069 	.word	0x00780069
 8005dd8:	005b004e 	.word	0x005b004e
 8005ddc:	00420037 	.word	0x00420037
 8005de0:	002d0024 	.word	0x002d0024
 8005de4:	001c0015 	.word	0x001c0015
 8005de8:	000f000a 	.word	0x000f000a
 8005dec:	00060003 	.word	0x00060003
 8005df0:	00880096 	.word	0x00880096
 8005df4:	00a200ac 	.word	0x00a200ac
 8005df8:	00b400ba 	.word	0x00b400ba
 8005dfc:	00be00c0 	.word	0x00be00c0
 8005e00:	00c000be 	.word	0x00c000be
 8005e04:	00ba00b4 	.word	0x00ba00b4
 8005e08:	00ac00a2 	.word	0x00ac00a2
 8005e0c:	00030006 	.word	0x00030006
 8005e10:	000a000f 	.word	0x000a000f
 8005e14:	0015001c 	.word	0x0015001c
 8005e18:	0024002d 	.word	0x0024002d
 8005e1c:	00370042 	.word	0x00370042
 8005e20:	004e005b 	.word	0x004e005b
 8005e24:	00690078 	.word	0x00690078
 8005e28:	200000a0 	.word	0x200000a0
 8005e2c:	00960088 	.word	0x00960088

08005e30 <D16_1CH_HTONS_VOL_HP>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	4691      	mov	r9, r2
 8005e36:	b083      	sub	sp, #12
 8005e38:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005e3a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005e3e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	4680      	mov	r8, r0
 8005e46:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8005e4a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8005e4e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e52:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005e56:	9401      	str	r4, [sp, #4]
 8005e58:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005e5c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d04e      	beq.n	8005f02 <D16_1CH_HTONS_VOL_HP+0xd2>
 8005e64:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8005f10 <D16_1CH_HTONS_VOL_HP+0xe0>
 8005e68:	1e8c      	subs	r4, r1, #2
 8005e6a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8005e6e:	f858 2b02 	ldr.w	r2, [r8], #2
 8005e72:	ba52      	rev16	r2, r2
 8005e74:	b2d6      	uxtb	r6, r2
 8005e76:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005e7a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8005e7e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8005e82:	4413      	add	r3, r2
 8005e84:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8005e88:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8005e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005e94:	0a93      	lsrs	r3, r2, #10
 8005e96:	4a1c      	ldr	r2, [pc, #112]	; (8005f08 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8005e98:	fb21 5202 	smlad	r2, r1, r2, r5
 8005e9c:	4d1b      	ldr	r5, [pc, #108]	; (8005f0c <D16_1CH_HTONS_VOL_HP+0xdc>)
 8005e9e:	fb21 f505 	smuad	r5, r1, r5
 8005ea2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005ea6:	4410      	add	r0, r2
 8005ea8:	1bc0      	subs	r0, r0, r7
 8005eaa:	17c7      	asrs	r7, r0, #31
 8005eac:	fba0 010e 	umull	r0, r1, r0, lr
 8005eb0:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005eb4:	fb0e 1107 	mla	r1, lr, r7, r1
 8005eb8:	f141 0100 	adc.w	r1, r1, #0
 8005ebc:	0448      	lsls	r0, r1, #17
 8005ebe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005ec2:	2700      	movs	r7, #0
 8005ec4:	fbc0 670a 	smlal	r6, r7, r0, sl
 8005ec8:	45d8      	cmp	r8, fp
 8005eca:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005ece:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8005ed2:	4617      	mov	r7, r2
 8005ed4:	f301 010f 	ssat	r1, #16, r1
 8005ed8:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005edc:	d1c7      	bne.n	8005e6e <D16_1CH_HTONS_VOL_HP+0x3e>
 8005ede:	9901      	ldr	r1, [sp, #4]
 8005ee0:	f8c9 301c 	str.w	r3, [r9, #28]
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	f8c9 0010 	str.w	r0, [r9, #16]
 8005eea:	2000      	movs	r0, #0
 8005eec:	f8c9 5008 	str.w	r5, [r9, #8]
 8005ef0:	f8c9 100c 	str.w	r1, [r9, #12]
 8005ef4:	f8c9 2014 	str.w	r2, [r9, #20]
 8005ef8:	f8c9 3018 	str.w	r3, [r9, #24]
 8005efc:	b003      	add	sp, #12
 8005efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f02:	463a      	mov	r2, r7
 8005f04:	4621      	mov	r1, r4
 8005f06:	e7eb      	b.n	8005ee0 <D16_1CH_HTONS_VOL_HP+0xb0>
 8005f08:	00030001 	.word	0x00030001
 8005f0c:	00010003 	.word	0x00010003
 8005f10:	200000a0 	.word	0x200000a0

08005f14 <D24_1CH_HTONS_VOL_HP>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	b089      	sub	sp, #36	; 0x24
 8005f1a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005f1c:	6996      	ldr	r6, [r2, #24]
 8005f1e:	9304      	str	r3, [sp, #16]
 8005f20:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005f22:	9207      	str	r2, [sp, #28]
 8005f24:	6915      	ldr	r5, [r2, #16]
 8005f26:	6954      	ldr	r4, [r2, #20]
 8005f28:	9606      	str	r6, [sp, #24]
 8005f2a:	6893      	ldr	r3, [r2, #8]
 8005f2c:	69d6      	ldr	r6, [r2, #28]
 8005f2e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8005f32:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8005f36:	9a04      	ldr	r2, [sp, #16]
 8005f38:	9705      	str	r7, [sp, #20]
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	d07e      	beq.n	800603c <D24_1CH_HTONS_VOL_HP+0x128>
 8005f3e:	f1a1 0b02 	sub.w	fp, r1, #2
 8005f42:	2700      	movs	r7, #0
 8005f44:	46a8      	mov	r8, r5
 8005f46:	f8cd b004 	str.w	fp, [sp, #4]
 8005f4a:	4655      	mov	r5, sl
 8005f4c:	46e3      	mov	fp, ip
 8005f4e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8006048 <D24_1CH_HTONS_VOL_HP+0x134>
 8005f52:	46ba      	mov	sl, r7
 8005f54:	469c      	mov	ip, r3
 8005f56:	e055      	b.n	8006004 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005f58:	7802      	ldrb	r2, [r0, #0]
 8005f5a:	78c3      	ldrb	r3, [r0, #3]
 8005f5c:	7841      	ldrb	r1, [r0, #1]
 8005f5e:	0212      	lsls	r2, r2, #8
 8005f60:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005f64:	440b      	add	r3, r1
 8005f66:	3002      	adds	r0, #2
 8005f68:	b2d9      	uxtb	r1, r3
 8005f6a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005f6e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8005f72:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8005f76:	0c1b      	lsrs	r3, r3, #16
 8005f78:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005f7c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005f80:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8005f84:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005f88:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005f8c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005f90:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005f94:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8005f96:	fb23 b102 	smlad	r1, r3, r2, fp
 8005f9a:	4a2a      	ldr	r2, [pc, #168]	; (8006044 <D24_1CH_HTONS_VOL_HP+0x130>)
 8005f9c:	fb23 cb02 	smlad	fp, r3, r2, ip
 8005fa0:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8005fa4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005fa8:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8005fac:	2201      	movs	r2, #1
 8005fae:	fb23 f702 	smuad	r7, r3, r2
 8005fb2:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8005fb6:	eb01 0208 	add.w	r2, r1, r8
 8005fba:	1b12      	subs	r2, r2, r4
 8005fbc:	17d4      	asrs	r4, r2, #31
 8005fbe:	fba2 2305 	umull	r2, r3, r2, r5
 8005fc2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005fc6:	fb05 3304 	mla	r3, r5, r4, r3
 8005fca:	f143 0300 	adc.w	r3, r3, #0
 8005fce:	9c05      	ldr	r4, [sp, #20]
 8005fd0:	03da      	lsls	r2, r3, #15
 8005fd2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005fd6:	f04f 0900 	mov.w	r9, #0
 8005fda:	fbc4 8902 	smlal	r8, r9, r4, r2
 8005fde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005fe2:	9a01      	ldr	r2, [sp, #4]
 8005fe4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	109b      	asrs	r3, r3, #2
 8005fec:	f303 030f 	ssat	r3, #16, r3
 8005ff0:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005ff4:	9b04      	ldr	r3, [sp, #16]
 8005ff6:	9201      	str	r2, [sp, #4]
 8005ff8:	f10a 0a01 	add.w	sl, sl, #1
 8005ffc:	459a      	cmp	sl, r3
 8005ffe:	44bc      	add	ip, r7
 8006000:	460c      	mov	r4, r1
 8006002:	d00b      	beq.n	800601c <D24_1CH_HTONS_VOL_HP+0x108>
 8006004:	f01a 0f01 	tst.w	sl, #1
 8006008:	d0a6      	beq.n	8005f58 <D24_1CH_HTONS_VOL_HP+0x44>
 800600a:	78c2      	ldrb	r2, [r0, #3]
 800600c:	7883      	ldrb	r3, [r0, #2]
 800600e:	f810 1b04 	ldrb.w	r1, [r0], #4
 8006012:	0212      	lsls	r2, r2, #8
 8006014:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8006018:	440b      	add	r3, r1
 800601a:	e7a5      	b.n	8005f68 <D24_1CH_HTONS_VOL_HP+0x54>
 800601c:	4663      	mov	r3, ip
 800601e:	4645      	mov	r5, r8
 8006020:	46dc      	mov	ip, fp
 8006022:	9807      	ldr	r0, [sp, #28]
 8006024:	6141      	str	r1, [r0, #20]
 8006026:	9906      	ldr	r1, [sp, #24]
 8006028:	6083      	str	r3, [r0, #8]
 800602a:	f8c0 c00c 	str.w	ip, [r0, #12]
 800602e:	61c6      	str	r6, [r0, #28]
 8006030:	6105      	str	r5, [r0, #16]
 8006032:	6181      	str	r1, [r0, #24]
 8006034:	2000      	movs	r0, #0
 8006036:	b009      	add	sp, #36	; 0x24
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603c:	4621      	mov	r1, r4
 800603e:	e7f0      	b.n	8006022 <D24_1CH_HTONS_VOL_HP+0x10e>
 8006040:	00030001 	.word	0x00030001
 8006044:	00060007 	.word	0x00060007
 8006048:	200000a0 	.word	0x200000a0

0800604c <D32_1CH_HTONS_VOL_HP>:
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	4692      	mov	sl, r2
 8006052:	b087      	sub	sp, #28
 8006054:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006056:	f8da 3018 	ldr.w	r3, [sl, #24]
 800605a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	f8da 4010 	ldr.w	r4, [sl, #16]
 8006064:	f8da 8014 	ldr.w	r8, [sl, #20]
 8006068:	f8da 601c 	ldr.w	r6, [sl, #28]
 800606c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006070:	f8da e00c 	ldr.w	lr, [sl, #12]
 8006074:	9501      	str	r5, [sp, #4]
 8006076:	f8da c020 	ldr.w	ip, [sl, #32]
 800607a:	2a00      	cmp	r2, #0
 800607c:	d07b      	beq.n	8006176 <D32_1CH_HTONS_VOL_HP+0x12a>
 800607e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006082:	4f3e      	ldr	r7, [pc, #248]	; (800617c <D32_1CH_HTONS_VOL_HP+0x130>)
 8006084:	f8cd c00c 	str.w	ip, [sp, #12]
 8006088:	9202      	str	r2, [sp, #8]
 800608a:	460d      	mov	r5, r1
 800608c:	46a1      	mov	r9, r4
 800608e:	4684      	mov	ip, r0
 8006090:	f8cd a014 	str.w	sl, [sp, #20]
 8006094:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006098:	ba49      	rev16	r1, r1
 800609a:	b2c8      	uxtb	r0, r1
 800609c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80060a0:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80060a4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80060a8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80060ac:	0e09      	lsrs	r1, r1, #24
 80060ae:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80060b2:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 80060b6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80060ba:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80060be:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80060c2:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 80060c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80060ca:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80060ce:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80060d2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80060d6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80060da:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80060de:	4a28      	ldr	r2, [pc, #160]	; (8006180 <D32_1CH_HTONS_VOL_HP+0x134>)
 80060e0:	fb20 e202 	smlad	r2, r0, r2, lr
 80060e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80060e8:	fb2a 2101 	smlad	r1, sl, r1, r2
 80060ec:	4a25      	ldr	r2, [pc, #148]	; (8006184 <D32_1CH_HTONS_VOL_HP+0x138>)
 80060ee:	fb20 3302 	smlad	r3, r0, r2, r3
 80060f2:	4a25      	ldr	r2, [pc, #148]	; (8006188 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80060f4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80060f8:	2301      	movs	r3, #1
 80060fa:	fb20 f003 	smuad	r0, r0, r3
 80060fe:	4b23      	ldr	r3, [pc, #140]	; (800618c <D32_1CH_HTONS_VOL_HP+0x140>)
 8006100:	fb2a 0303 	smlad	r3, sl, r3, r0
 8006104:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8006108:	9c03      	ldr	r4, [sp, #12]
 800610a:	eb02 0009 	add.w	r0, r2, r9
 800610e:	eba0 0008 	sub.w	r0, r0, r8
 8006112:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8006116:	fba0 0104 	umull	r0, r1, r0, r4
 800611a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800611e:	fb04 110b 	mla	r1, r4, fp, r1
 8006122:	f141 0100 	adc.w	r1, r1, #0
 8006126:	9c01      	ldr	r4, [sp, #4]
 8006128:	0388      	lsls	r0, r1, #14
 800612a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800612e:	f04f 0900 	mov.w	r9, #0
 8006132:	fbc0 8904 	smlal	r8, r9, r0, r4
 8006136:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800613a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800613e:	f300 000f 	ssat	r0, #16, r0
 8006142:	9902      	ldr	r1, [sp, #8]
 8006144:	f825 0b02 	strh.w	r0, [r5], #2
 8006148:	428d      	cmp	r5, r1
 800614a:	4690      	mov	r8, r2
 800614c:	d1a2      	bne.n	8006094 <D32_1CH_HTONS_VOL_HP+0x48>
 800614e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006152:	464c      	mov	r4, r9
 8006154:	f8ca 3008 	str.w	r3, [sl, #8]
 8006158:	9b04      	ldr	r3, [sp, #16]
 800615a:	f8ca e00c 	str.w	lr, [sl, #12]
 800615e:	2000      	movs	r0, #0
 8006160:	f8ca 601c 	str.w	r6, [sl, #28]
 8006164:	f8ca 4010 	str.w	r4, [sl, #16]
 8006168:	f8ca 2014 	str.w	r2, [sl, #20]
 800616c:	f8ca 3018 	str.w	r3, [sl, #24]
 8006170:	b007      	add	sp, #28
 8006172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006176:	4642      	mov	r2, r8
 8006178:	e7ec      	b.n	8006154 <D32_1CH_HTONS_VOL_HP+0x108>
 800617a:	bf00      	nop
 800617c:	200000a0 	.word	0x200000a0
 8006180:	00060003 	.word	0x00060003
 8006184:	000a000c 	.word	0x000a000c
 8006188:	000c000a 	.word	0x000c000a
 800618c:	00030006 	.word	0x00030006

08006190 <D48_1CH_HTONS_VOL_HP>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	4613      	mov	r3, r2
 8006196:	461c      	mov	r4, r3
 8006198:	b087      	sub	sp, #28
 800619a:	4625      	mov	r5, r4
 800619c:	4626      	mov	r6, r4
 800619e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80061a0:	9205      	str	r2, [sp, #20]
 80061a2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80061a4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80061a8:	9501      	str	r5, [sp, #4]
 80061aa:	4680      	mov	r8, r0
 80061ac:	6a35      	ldr	r5, [r6, #32]
 80061ae:	6918      	ldr	r0, [r3, #16]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80061b8:	68a3      	ldr	r3, [r4, #8]
 80061ba:	9502      	str	r5, [sp, #8]
 80061bc:	68e4      	ldr	r4, [r4, #12]
 80061be:	2a00      	cmp	r2, #0
 80061c0:	f000 808c 	beq.w	80062dc <D48_1CH_HTONS_VOL_HP+0x14c>
 80061c4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80061c8:	4d45      	ldr	r5, [pc, #276]	; (80062e0 <D48_1CH_HTONS_VOL_HP+0x150>)
 80061ca:	9203      	str	r2, [sp, #12]
 80061cc:	468c      	mov	ip, r1
 80061ce:	e898 0044 	ldmia.w	r8, {r2, r6}
 80061d2:	f108 0806 	add.w	r8, r8, #6
 80061d6:	ba52      	rev16	r2, r2
 80061d8:	ba76      	rev16	r6, r6
 80061da:	b2d7      	uxtb	r7, r2
 80061dc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80061e0:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80061e4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80061e8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80061ec:	0e12      	lsrs	r2, r2, #24
 80061ee:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80061f2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80061f6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80061fa:	fa5f fb86 	uxtb.w	fp, r6
 80061fe:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8006202:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8006206:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800620a:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800620e:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8006212:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006216:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800621a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800621e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006222:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006226:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800622a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800622e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006232:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006236:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800623a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800623e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8006242:	4a28      	ldr	r2, [pc, #160]	; (80062e4 <D48_1CH_HTONS_VOL_HP+0x154>)
 8006244:	fb2a 4202 	smlad	r2, sl, r2, r4
 8006248:	4927      	ldr	r1, [pc, #156]	; (80062e8 <D48_1CH_HTONS_VOL_HP+0x158>)
 800624a:	fb27 2201 	smlad	r2, r7, r1, r2
 800624e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006252:	fb26 2201 	smlad	r2, r6, r1, r2
 8006256:	4925      	ldr	r1, [pc, #148]	; (80062ec <D48_1CH_HTONS_VOL_HP+0x15c>)
 8006258:	fb2a 3401 	smlad	r4, sl, r1, r3
 800625c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8006260:	fb27 4403 	smlad	r4, r7, r3, r4
 8006264:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8006266:	fb26 4403 	smlad	r4, r6, r3, r4
 800626a:	2101      	movs	r1, #1
 800626c:	fb2a fa01 	smuad	sl, sl, r1
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <D48_1CH_HTONS_VOL_HP+0x164>)
 8006272:	fb27 a703 	smlad	r7, r7, r3, sl
 8006276:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8006278:	fb26 7303 	smlad	r3, r6, r3, r7
 800627c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8006280:	9e02      	ldr	r6, [sp, #8]
 8006282:	9f01      	ldr	r7, [sp, #4]
 8006284:	4410      	add	r0, r2
 8006286:	eba0 0009 	sub.w	r0, r0, r9
 800628a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800628e:	fba0 0106 	umull	r0, r1, r0, r6
 8006292:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006296:	fb06 110a 	mla	r1, r6, sl, r1
 800629a:	f141 0100 	adc.w	r1, r1, #0
 800629e:	0308      	lsls	r0, r1, #12
 80062a0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80062a4:	f04f 0a00 	mov.w	sl, #0
 80062a8:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80062ac:	4657      	mov	r7, sl
 80062ae:	10b8      	asrs	r0, r7, #2
 80062b0:	f300 000f 	ssat	r0, #16, r0
 80062b4:	f82c 0b02 	strh.w	r0, [ip], #2
 80062b8:	0048      	lsls	r0, r1, #1
 80062ba:	9903      	ldr	r1, [sp, #12]
 80062bc:	458c      	cmp	ip, r1
 80062be:	4691      	mov	r9, r2
 80062c0:	d185      	bne.n	80061ce <D48_1CH_HTONS_VOL_HP+0x3e>
 80062c2:	9d05      	ldr	r5, [sp, #20]
 80062c4:	616a      	str	r2, [r5, #20]
 80062c6:	9a04      	ldr	r2, [sp, #16]
 80062c8:	6128      	str	r0, [r5, #16]
 80062ca:	2000      	movs	r0, #0
 80062cc:	60ab      	str	r3, [r5, #8]
 80062ce:	60ec      	str	r4, [r5, #12]
 80062d0:	f8c5 e01c 	str.w	lr, [r5, #28]
 80062d4:	61aa      	str	r2, [r5, #24]
 80062d6:	b007      	add	sp, #28
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	464a      	mov	r2, r9
 80062de:	e7f0      	b.n	80062c2 <D48_1CH_HTONS_VOL_HP+0x132>
 80062e0:	200000a0 	.word	0x200000a0
 80062e4:	000f000a 	.word	0x000f000a
 80062e8:	00060003 	.word	0x00060003
 80062ec:	00150019 	.word	0x00150019
 80062f0:	00190015 	.word	0x00190015
 80062f4:	00030006 	.word	0x00030006
 80062f8:	000a000f 	.word	0x000a000f

080062fc <D64_1CH_HTONS_VOL_HP>:
 80062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	b089      	sub	sp, #36	; 0x24
 8006302:	4614      	mov	r4, r2
 8006304:	9207      	str	r2, [sp, #28]
 8006306:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006308:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800630c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8006310:	6992      	ldr	r2, [r2, #24]
 8006312:	9206      	str	r2, [sp, #24]
 8006314:	68e2      	ldr	r2, [r4, #12]
 8006316:	9201      	str	r2, [sp, #4]
 8006318:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800631a:	9203      	str	r2, [sp, #12]
 800631c:	6a22      	ldr	r2, [r4, #32]
 800631e:	69e5      	ldr	r5, [r4, #28]
 8006320:	68a6      	ldr	r6, [r4, #8]
 8006322:	9204      	str	r2, [sp, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80b0 	beq.w	800648a <D64_1CH_HTONS_VOL_HP+0x18e>
 800632a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800632e:	4f58      	ldr	r7, [pc, #352]	; (8006490 <D64_1CH_HTONS_VOL_HP+0x194>)
 8006330:	9305      	str	r3, [sp, #20]
 8006332:	9102      	str	r1, [sp, #8]
 8006334:	f850 2b08 	ldr.w	r2, [r0], #8
 8006338:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800633c:	ba52      	rev16	r2, r2
 800633e:	fa93 f993 	rev16.w	r9, r3
 8006342:	b2d4      	uxtb	r4, r2
 8006344:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006348:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800634c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006350:	9901      	ldr	r1, [sp, #4]
 8006352:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006356:	0e12      	lsrs	r2, r2, #24
 8006358:	44ab      	add	fp, r5
 800635a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800635e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8006362:	fa5f f289 	uxtb.w	r2, r9
 8006366:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800636a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800636e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8006372:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006376:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800637a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800637e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8006382:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006386:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800638a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800638e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8006392:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8006396:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800639a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800639e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80063a2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80063a6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80063aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ae:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80063b2:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80063b6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80063ba:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80063be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80063c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80063c6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80063ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80063ce:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80063d2:	4b30      	ldr	r3, [pc, #192]	; (8006494 <D64_1CH_HTONS_VOL_HP+0x198>)
 80063d4:	fb2b 1303 	smlad	r3, fp, r3, r1
 80063d8:	492f      	ldr	r1, [pc, #188]	; (8006498 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80063da:	fb24 3301 	smlad	r3, r4, r1, r3
 80063de:	492f      	ldr	r1, [pc, #188]	; (800649c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80063e0:	fb22 3301 	smlad	r3, r2, r1, r3
 80063e4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80063e8:	fb2e 390a 	smlad	r9, lr, sl, r3
 80063ec:	4b2c      	ldr	r3, [pc, #176]	; (80064a0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80063ee:	fb2b 6603 	smlad	r6, fp, r3, r6
 80063f2:	fb2e 6613 	smladx	r6, lr, r3, r6
 80063f6:	4b2b      	ldr	r3, [pc, #172]	; (80064a4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80063f8:	fb24 6603 	smlad	r6, r4, r3, r6
 80063fc:	fb22 6313 	smladx	r3, r2, r3, r6
 8006400:	f04f 0a01 	mov.w	sl, #1
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	fb2b fb0a 	smuad	fp, fp, sl
 800640a:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800640c:	fb24 ba03 	smlad	sl, r4, r3, fp
 8006410:	4b26      	ldr	r3, [pc, #152]	; (80064ac <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8006412:	fb22 a203 	smlad	r2, r2, r3, sl
 8006416:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8006418:	fb2e 2603 	smlad	r6, lr, r3, r2
 800641c:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8006420:	eb0a 020c 	add.w	r2, sl, ip
 8006424:	9c04      	ldr	r4, [sp, #16]
 8006426:	9903      	ldr	r1, [sp, #12]
 8006428:	eba2 0208 	sub.w	r2, r2, r8
 800642c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8006430:	fba2 2304 	umull	r2, r3, r2, r4
 8006434:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006438:	fb04 3309 	mla	r3, r4, r9, r3
 800643c:	f143 0300 	adc.w	r3, r3, #0
 8006440:	02da      	lsls	r2, r3, #11
 8006442:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006446:	f04f 0900 	mov.w	r9, #0
 800644a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800644e:	9902      	ldr	r1, [sp, #8]
 8006450:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8006454:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006458:	f302 020f 	ssat	r2, #16, r2
 800645c:	9b05      	ldr	r3, [sp, #20]
 800645e:	f821 2b02 	strh.w	r2, [r1], #2
 8006462:	4299      	cmp	r1, r3
 8006464:	9102      	str	r1, [sp, #8]
 8006466:	46d0      	mov	r8, sl
 8006468:	f47f af64 	bne.w	8006334 <D64_1CH_HTONS_VOL_HP+0x38>
 800646c:	9a07      	ldr	r2, [sp, #28]
 800646e:	9901      	ldr	r1, [sp, #4]
 8006470:	60d1      	str	r1, [r2, #12]
 8006472:	9906      	ldr	r1, [sp, #24]
 8006474:	6096      	str	r6, [r2, #8]
 8006476:	2000      	movs	r0, #0
 8006478:	61d5      	str	r5, [r2, #28]
 800647a:	f8c2 c010 	str.w	ip, [r2, #16]
 800647e:	f8c2 a014 	str.w	sl, [r2, #20]
 8006482:	6191      	str	r1, [r2, #24]
 8006484:	b009      	add	sp, #36	; 0x24
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	46c2      	mov	sl, r8
 800648c:	4622      	mov	r2, r4
 800648e:	e7ee      	b.n	800646e <D64_1CH_HTONS_VOL_HP+0x172>
 8006490:	200000a0 	.word	0x200000a0
 8006494:	001c0015 	.word	0x001c0015
 8006498:	000f000a 	.word	0x000f000a
 800649c:	00060003 	.word	0x00060003
 80064a0:	0024002a 	.word	0x0024002a
 80064a4:	002e0030 	.word	0x002e0030
 80064a8:	00030006 	.word	0x00030006
 80064ac:	000a000f 	.word	0x000a000f
 80064b0:	0015001c 	.word	0x0015001c

080064b4 <D80_1CH_HTONS_VOL_HP>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4613      	mov	r3, r2
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	4686      	mov	lr, r0
 80064be:	6918      	ldr	r0, [r3, #16]
 80064c0:	9000      	str	r0, [sp, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	461c      	mov	r4, r3
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	9302      	str	r3, [sp, #8]
 80064ca:	6983      	ldr	r3, [r0, #24]
 80064cc:	9306      	str	r3, [sp, #24]
 80064ce:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80064d2:	69c3      	ldr	r3, [r0, #28]
 80064d4:	68c0      	ldr	r0, [r0, #12]
 80064d6:	9207      	str	r2, [sp, #28]
 80064d8:	9001      	str	r0, [sp, #4]
 80064da:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80064dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80064de:	9003      	str	r0, [sp, #12]
 80064e0:	6a20      	ldr	r0, [r4, #32]
 80064e2:	9004      	str	r0, [sp, #16]
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	f000 80d2 	beq.w	800668e <D80_1CH_HTONS_VOL_HP+0x1da>
 80064ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80064ee:	4869      	ldr	r0, [pc, #420]	; (8006694 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80064f0:	9205      	str	r2, [sp, #20]
 80064f2:	461c      	mov	r4, r3
 80064f4:	f8de 5000 	ldr.w	r5, [lr]
 80064f8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80064fc:	f8de 3008 	ldr.w	r3, [lr, #8]
 8006500:	f10e 0e0a 	add.w	lr, lr, #10
 8006504:	ba6d      	rev16	r5, r5
 8006506:	ba52      	rev16	r2, r2
 8006508:	fa93 fb93 	rev16.w	fp, r3
 800650c:	b2ee      	uxtb	r6, r5
 800650e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8006512:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8006516:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800651a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800651e:	eb04 0a07 	add.w	sl, r4, r7
 8006522:	0e2d      	lsrs	r5, r5, #24
 8006524:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8006528:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800652c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8006530:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8006534:	b2d5      	uxtb	r5, r2
 8006536:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800653a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800653e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8006542:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006546:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800654a:	0e12      	lsrs	r2, r2, #24
 800654c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8006550:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8006554:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006558:	fa5f f48b 	uxtb.w	r4, fp
 800655c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8006560:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8006564:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8006568:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800656c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8006570:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006574:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8006578:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800657c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006580:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006584:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006588:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800658c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006590:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006594:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8006598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800659c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80065a0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80065a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80065a8:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80065ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80065b0:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80065b4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80065b8:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80065bc:	4d36      	ldr	r5, [pc, #216]	; (8006698 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80065be:	9f01      	ldr	r7, [sp, #4]
 80065c0:	fb23 7505 	smlad	r5, r3, r5, r7
 80065c4:	4f35      	ldr	r7, [pc, #212]	; (800669c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80065c6:	fb29 5507 	smlad	r5, r9, r7, r5
 80065ca:	4f35      	ldr	r7, [pc, #212]	; (80066a0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80065cc:	fb28 5507 	smlad	r5, r8, r7, r5
 80065d0:	4f34      	ldr	r7, [pc, #208]	; (80066a4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80065d2:	fb22 5507 	smlad	r5, r2, r7, r5
 80065d6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80065da:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80065de:	4d32      	ldr	r5, [pc, #200]	; (80066a8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80065e0:	fb23 cc05 	smlad	ip, r3, r5, ip
 80065e4:	4d31      	ldr	r5, [pc, #196]	; (80066ac <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80065e6:	fb29 cc05 	smlad	ip, r9, r5, ip
 80065ea:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80065ee:	fb28 c505 	smlad	r5, r8, r5, ip
 80065f2:	4f2f      	ldr	r7, [pc, #188]	; (80066b0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80065f4:	fb22 5507 	smlad	r5, r2, r7, r5
 80065f8:	4f2e      	ldr	r7, [pc, #184]	; (80066b4 <D80_1CH_HTONS_VOL_HP+0x200>)
 80065fa:	fb26 5507 	smlad	r5, r6, r7, r5
 80065fe:	f04f 0a01 	mov.w	sl, #1
 8006602:	9501      	str	r5, [sp, #4]
 8006604:	fb23 fa0a 	smuad	sl, r3, sl
 8006608:	4b2b      	ldr	r3, [pc, #172]	; (80066b8 <D80_1CH_HTONS_VOL_HP+0x204>)
 800660a:	fb29 a903 	smlad	r9, r9, r3, sl
 800660e:	4d2b      	ldr	r5, [pc, #172]	; (80066bc <D80_1CH_HTONS_VOL_HP+0x208>)
 8006610:	fb28 9805 	smlad	r8, r8, r5, r9
 8006614:	4d2a      	ldr	r5, [pc, #168]	; (80066c0 <D80_1CH_HTONS_VOL_HP+0x20c>)
 8006616:	fb22 8205 	smlad	r2, r2, r5, r8
 800661a:	4b2a      	ldr	r3, [pc, #168]	; (80066c4 <D80_1CH_HTONS_VOL_HP+0x210>)
 800661c:	fb26 2c03 	smlad	ip, r6, r3, r2
 8006620:	9b00      	ldr	r3, [sp, #0]
 8006622:	9d04      	ldr	r5, [sp, #16]
 8006624:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8006628:	4453      	add	r3, sl
 800662a:	461a      	mov	r2, r3
 800662c:	9b02      	ldr	r3, [sp, #8]
 800662e:	f8cd a008 	str.w	sl, [sp, #8]
 8006632:	1ad2      	subs	r2, r2, r3
 8006634:	17d7      	asrs	r7, r2, #31
 8006636:	fba2 2305 	umull	r2, r3, r2, r5
 800663a:	fb05 3307 	mla	r3, r5, r7, r3
 800663e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006642:	f143 0300 	adc.w	r3, r3, #0
 8006646:	9d03      	ldr	r5, [sp, #12]
 8006648:	029a      	lsls	r2, r3, #10
 800664a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800664e:	2700      	movs	r7, #0
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	fbc5 6702 	smlal	r6, r7, r5, r2
 8006656:	10ba      	asrs	r2, r7, #2
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f302 020f 	ssat	r2, #16, r2
 800665e:	9b05      	ldr	r3, [sp, #20]
 8006660:	f821 2b02 	strh.w	r2, [r1], #2
 8006664:	4299      	cmp	r1, r3
 8006666:	f47f af45 	bne.w	80064f4 <D80_1CH_HTONS_VOL_HP+0x40>
 800666a:	4623      	mov	r3, r4
 800666c:	9907      	ldr	r1, [sp, #28]
 800666e:	9801      	ldr	r0, [sp, #4]
 8006670:	60c8      	str	r0, [r1, #12]
 8006672:	9a00      	ldr	r2, [sp, #0]
 8006674:	f8c1 c008 	str.w	ip, [r1, #8]
 8006678:	4608      	mov	r0, r1
 800667a:	61cb      	str	r3, [r1, #28]
 800667c:	610a      	str	r2, [r1, #16]
 800667e:	f8c1 a014 	str.w	sl, [r1, #20]
 8006682:	9906      	ldr	r1, [sp, #24]
 8006684:	6181      	str	r1, [r0, #24]
 8006686:	2000      	movs	r0, #0
 8006688:	b009      	add	sp, #36	; 0x24
 800668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8006692:	e7eb      	b.n	800666c <D80_1CH_HTONS_VOL_HP+0x1b8>
 8006694:	200000a0 	.word	0x200000a0
 8006698:	002d0024 	.word	0x002d0024
 800669c:	001c0015 	.word	0x001c0015
 80066a0:	000f000a 	.word	0x000f000a
 80066a4:	00060003 	.word	0x00060003
 80066a8:	0037003f 	.word	0x0037003f
 80066ac:	00450049 	.word	0x00450049
 80066b0:	00490045 	.word	0x00490045
 80066b4:	003f0037 	.word	0x003f0037
 80066b8:	00030006 	.word	0x00030006
 80066bc:	000a000f 	.word	0x000a000f
 80066c0:	0015001c 	.word	0x0015001c
 80066c4:	0024002d 	.word	0x0024002d

080066c8 <D128_1CH_HTONS_VOL_HP>:
 80066c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	b093      	sub	sp, #76	; 0x4c
 80066ce:	4614      	mov	r4, r2
 80066d0:	9211      	str	r2, [sp, #68]	; 0x44
 80066d2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80066d4:	6912      	ldr	r2, [r2, #16]
 80066d6:	9203      	str	r2, [sp, #12]
 80066d8:	4622      	mov	r2, r4
 80066da:	4615      	mov	r5, r2
 80066dc:	6964      	ldr	r4, [r4, #20]
 80066de:	9406      	str	r4, [sp, #24]
 80066e0:	4614      	mov	r4, r2
 80066e2:	6992      	ldr	r2, [r2, #24]
 80066e4:	9210      	str	r2, [sp, #64]	; 0x40
 80066e6:	68ea      	ldr	r2, [r5, #12]
 80066e8:	9204      	str	r2, [sp, #16]
 80066ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80066ec:	69e6      	ldr	r6, [r4, #28]
 80066ee:	920d      	str	r2, [sp, #52]	; 0x34
 80066f0:	68a4      	ldr	r4, [r4, #8]
 80066f2:	6a2a      	ldr	r2, [r5, #32]
 80066f4:	9405      	str	r4, [sp, #20]
 80066f6:	920e      	str	r2, [sp, #56]	; 0x38
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8145 	beq.w	8006988 <D128_1CH_HTONS_VOL_HP+0x2c0>
 80066fe:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006702:	930f      	str	r3, [sp, #60]	; 0x3c
 8006704:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80069e4 <D128_1CH_HTONS_VOL_HP+0x31c>
 8006708:	9107      	str	r1, [sp, #28]
 800670a:	f100 0310 	add.w	r3, r0, #16
 800670e:	4699      	mov	r9, r3
 8006710:	f1a9 0110 	sub.w	r1, r9, #16
 8006714:	c90e      	ldmia	r1, {r1, r2, r3}
 8006716:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800671a:	ba49      	rev16	r1, r1
 800671c:	ba52      	rev16	r2, r2
 800671e:	ba5b      	rev16	r3, r3
 8006720:	fa90 fa90 	rev16.w	sl, r0
 8006724:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006728:	b2cc      	uxtb	r4, r1
 800672a:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800672e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006732:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006736:	0e09      	lsrs	r1, r1, #24
 8006738:	4426      	add	r6, r4
 800673a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800673e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8006742:	b2d0      	uxtb	r0, r2
 8006744:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8006748:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800674c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006750:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006754:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8006758:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800675c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006760:	0e12      	lsrs	r2, r2, #24
 8006762:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8006766:	9701      	str	r7, [sp, #4]
 8006768:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800676c:	4627      	mov	r7, r4
 800676e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8006772:	9702      	str	r7, [sp, #8]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800677a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800677e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8006782:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8006786:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800678a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800678e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006792:	0e1b      	lsrs	r3, r3, #24
 8006794:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8006798:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800679c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80067a0:	fa5f f38a 	uxtb.w	r3, sl
 80067a4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80067a8:	960a      	str	r6, [sp, #40]	; 0x28
 80067aa:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80067ae:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80067b2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80067b6:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80067ba:	950b      	str	r5, [sp, #44]	; 0x2c
 80067bc:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80067c0:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80067c4:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80067c8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80067cc:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80067d0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80067d4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80067d8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80067dc:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80067e0:	9308      	str	r3, [sp, #32]
 80067e2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80067e6:	9b01      	ldr	r3, [sp, #4]
 80067e8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80067ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80067f0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80067f4:	9b02      	ldr	r3, [sp, #8]
 80067f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067fa:	9302      	str	r3, [sp, #8]
 80067fc:	9b08      	ldr	r3, [sp, #32]
 80067fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006802:	9308      	str	r3, [sp, #32]
 8006804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006806:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800680a:	950c      	str	r5, [sp, #48]	; 0x30
 800680c:	461d      	mov	r5, r3
 800680e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006810:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006814:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006818:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800681c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	9202      	str	r2, [sp, #8]
 8006826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006828:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800682a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800682e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006832:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006836:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800683a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800683e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006842:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8006846:	9b08      	ldr	r3, [sp, #32]
 8006848:	9f01      	ldr	r7, [sp, #4]
 800684a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800684e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006852:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006856:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800685a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800685e:	46be      	mov	lr, r7
 8006860:	0a96      	lsrs	r6, r2, #10
 8006862:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8006866:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800686a:	4f49      	ldr	r7, [pc, #292]	; (8006990 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800686c:	9a04      	ldr	r2, [sp, #16]
 800686e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8006872:	4a48      	ldr	r2, [pc, #288]	; (8006994 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8006874:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006878:	4a47      	ldr	r2, [pc, #284]	; (8006998 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800687a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800687e:	4a47      	ldr	r2, [pc, #284]	; (800699c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8006880:	fb24 ee02 	smlad	lr, r4, r2, lr
 8006884:	4a46      	ldr	r2, [pc, #280]	; (80069a0 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8006886:	9f02      	ldr	r7, [sp, #8]
 8006888:	fb27 ee02 	smlad	lr, r7, r2, lr
 800688c:	4a45      	ldr	r2, [pc, #276]	; (80069a4 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800688e:	fb20 ee02 	smlad	lr, r0, r2, lr
 8006892:	4a45      	ldr	r2, [pc, #276]	; (80069a8 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8006894:	fb23 e702 	smlad	r7, r3, r2, lr
 8006898:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800689c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80068a0:	9f01      	ldr	r7, [sp, #4]
 80068a2:	4a42      	ldr	r2, [pc, #264]	; (80069ac <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80068a4:	46bc      	mov	ip, r7
 80068a6:	9f05      	ldr	r7, [sp, #20]
 80068a8:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80068ac:	4a40      	ldr	r2, [pc, #256]	; (80069b0 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80068ae:	fb2a cc02 	smlad	ip, sl, r2, ip
 80068b2:	4f40      	ldr	r7, [pc, #256]	; (80069b4 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80068b4:	fb21 cc07 	smlad	ip, r1, r7, ip
 80068b8:	4f3f      	ldr	r7, [pc, #252]	; (80069b8 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80068ba:	fb24 cc07 	smlad	ip, r4, r7, ip
 80068be:	4f3f      	ldr	r7, [pc, #252]	; (80069bc <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80068c0:	9a02      	ldr	r2, [sp, #8]
 80068c2:	fb22 cc07 	smlad	ip, r2, r7, ip
 80068c6:	4f3e      	ldr	r7, [pc, #248]	; (80069c0 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80068c8:	fb20 cc07 	smlad	ip, r0, r7, ip
 80068cc:	4f3d      	ldr	r7, [pc, #244]	; (80069c4 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80068ce:	fb23 c707 	smlad	r7, r3, r7, ip
 80068d2:	f8df c114 	ldr.w	ip, [pc, #276]	; 80069e8 <D128_1CH_HTONS_VOL_HP+0x320>
 80068d6:	fb25 720c 	smlad	r2, r5, ip, r7
 80068da:	f04f 0b01 	mov.w	fp, #1
 80068de:	9204      	str	r2, [sp, #16]
 80068e0:	9f01      	ldr	r7, [sp, #4]
 80068e2:	fb27 fb0b 	smuad	fp, r7, fp
 80068e6:	4f38      	ldr	r7, [pc, #224]	; (80069c8 <D128_1CH_HTONS_VOL_HP+0x300>)
 80068e8:	fb2a ba07 	smlad	sl, sl, r7, fp
 80068ec:	4f37      	ldr	r7, [pc, #220]	; (80069cc <D128_1CH_HTONS_VOL_HP+0x304>)
 80068ee:	fb21 aa07 	smlad	sl, r1, r7, sl
 80068f2:	4f37      	ldr	r7, [pc, #220]	; (80069d0 <D128_1CH_HTONS_VOL_HP+0x308>)
 80068f4:	fb24 aa07 	smlad	sl, r4, r7, sl
 80068f8:	4f36      	ldr	r7, [pc, #216]	; (80069d4 <D128_1CH_HTONS_VOL_HP+0x30c>)
 80068fa:	9a02      	ldr	r2, [sp, #8]
 80068fc:	fb22 a707 	smlad	r7, r2, r7, sl
 8006900:	4a35      	ldr	r2, [pc, #212]	; (80069d8 <D128_1CH_HTONS_VOL_HP+0x310>)
 8006902:	fb20 7702 	smlad	r7, r0, r2, r7
 8006906:	4a35      	ldr	r2, [pc, #212]	; (80069dc <D128_1CH_HTONS_VOL_HP+0x314>)
 8006908:	fb23 7702 	smlad	r7, r3, r2, r7
 800690c:	4b34      	ldr	r3, [pc, #208]	; (80069e0 <D128_1CH_HTONS_VOL_HP+0x318>)
 800690e:	fb25 7303 	smlad	r3, r5, r3, r7
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006918:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800691c:	4473      	add	r3, lr
 800691e:	461a      	mov	r2, r3
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	f8cd e018 	str.w	lr, [sp, #24]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	17d1      	asrs	r1, r2, #31
 800692a:	fba2 2304 	umull	r2, r3, r2, r4
 800692e:	fb04 3301 	mla	r3, r4, r1, r3
 8006932:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006936:	f143 0300 	adc.w	r3, r3, #0
 800693a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800693c:	021a      	lsls	r2, r3, #8
 800693e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006942:	2100      	movs	r1, #0
 8006944:	fbc4 0102 	smlal	r0, r1, r4, r2
 8006948:	108a      	asrs	r2, r1, #2
 800694a:	9907      	ldr	r1, [sp, #28]
 800694c:	f302 020f 	ssat	r2, #16, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	f821 2b02 	strh.w	r2, [r1], #2
 8006956:	9303      	str	r3, [sp, #12]
 8006958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800695a:	9107      	str	r1, [sp, #28]
 800695c:	4299      	cmp	r1, r3
 800695e:	f109 0910 	add.w	r9, r9, #16
 8006962:	f47f aed5 	bne.w	8006710 <D128_1CH_HTONS_VOL_HP+0x48>
 8006966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006968:	9905      	ldr	r1, [sp, #20]
 800696a:	6091      	str	r1, [r2, #8]
 800696c:	9904      	ldr	r1, [sp, #16]
 800696e:	60d1      	str	r1, [r2, #12]
 8006970:	4613      	mov	r3, r2
 8006972:	61d6      	str	r6, [r2, #28]
 8006974:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006976:	9a03      	ldr	r2, [sp, #12]
 8006978:	611a      	str	r2, [r3, #16]
 800697a:	2000      	movs	r0, #0
 800697c:	f8c3 e014 	str.w	lr, [r3, #20]
 8006980:	6199      	str	r1, [r3, #24]
 8006982:	b013      	add	sp, #76	; 0x4c
 8006984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006988:	f8dd e018 	ldr.w	lr, [sp, #24]
 800698c:	e7eb      	b.n	8006966 <D128_1CH_HTONS_VOL_HP+0x29e>
 800698e:	bf00      	nop
 8006990:	00780069 	.word	0x00780069
 8006994:	005b004e 	.word	0x005b004e
 8006998:	00420037 	.word	0x00420037
 800699c:	002d0024 	.word	0x002d0024
 80069a0:	001c0015 	.word	0x001c0015
 80069a4:	000f000a 	.word	0x000f000a
 80069a8:	00060003 	.word	0x00060003
 80069ac:	00880096 	.word	0x00880096
 80069b0:	00a200ac 	.word	0x00a200ac
 80069b4:	00b400ba 	.word	0x00b400ba
 80069b8:	00be00c0 	.word	0x00be00c0
 80069bc:	00c000be 	.word	0x00c000be
 80069c0:	00ba00b4 	.word	0x00ba00b4
 80069c4:	00ac00a2 	.word	0x00ac00a2
 80069c8:	00030006 	.word	0x00030006
 80069cc:	000a000f 	.word	0x000a000f
 80069d0:	0015001c 	.word	0x0015001c
 80069d4:	0024002d 	.word	0x0024002d
 80069d8:	00370042 	.word	0x00370042
 80069dc:	004e005b 	.word	0x004e005b
 80069e0:	00690078 	.word	0x00690078
 80069e4:	200000a0 	.word	0x200000a0
 80069e8:	00960088 	.word	0x00960088

080069ec <PDM_Filter_Init>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	2240      	movs	r2, #64	; 0x40
 80069f0:	4604      	mov	r4, r0
 80069f2:	2100      	movs	r1, #0
 80069f4:	300c      	adds	r0, #12
 80069f6:	f000 f9f3 	bl	8006de0 <memset>
 80069fa:	493b      	ldr	r1, [pc, #236]	; (8006ae8 <PDM_Filter_Init+0xfc>)
 80069fc:	483b      	ldr	r0, [pc, #236]	; (8006aec <PDM_Filter_Init+0x100>)
 80069fe:	f000 f98d 	bl	8006d1c <CRC_Lock>
 8006a02:	8822      	ldrh	r2, [r4, #0]
 8006a04:	8963      	ldrh	r3, [r4, #10]
 8006a06:	4938      	ldr	r1, [pc, #224]	; (8006ae8 <PDM_Filter_Init+0xfc>)
 8006a08:	8925      	ldrh	r5, [r4, #8]
 8006a0a:	86a3      	strh	r3, [r4, #52]	; 0x34
 8006a0c:	2801      	cmp	r0, #1
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	bf18      	it	ne
 8006a14:	2100      	movne	r1, #0
 8006a16:	2a01      	cmp	r2, #1
 8006a18:	6461      	str	r1, [r4, #68]	; 0x44
 8006a1a:	86e5      	strh	r5, [r4, #54]	; 0x36
 8006a1c:	61a3      	str	r3, [r4, #24]
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	6163      	str	r3, [r4, #20]
 8006a22:	60e3      	str	r3, [r4, #12]
 8006a24:	6263      	str	r3, [r4, #36]	; 0x24
 8006a26:	61e3      	str	r3, [r4, #28]
 8006a28:	6223      	str	r3, [r4, #32]
 8006a2a:	6423      	str	r3, [r4, #64]	; 0x40
 8006a2c:	d918      	bls.n	8006a60 <PDM_Filter_Init+0x74>
 8006a2e:	2003      	movs	r0, #3
 8006a30:	2302      	movs	r3, #2
 8006a32:	8862      	ldrh	r2, [r4, #2]
 8006a34:	2a01      	cmp	r2, #1
 8006a36:	d91d      	bls.n	8006a74 <PDM_Filter_Init+0x88>
 8006a38:	2140      	movs	r1, #64	; 0x40
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006a3e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8006a42:	6862      	ldr	r2, [r4, #4]
 8006a44:	bf04      	itt	eq
 8006a46:	6421      	streq	r1, [r4, #64]	; 0x40
 8006a48:	460b      	moveq	r3, r1
 8006a4a:	b11a      	cbz	r2, 8006a54 <PDM_Filter_Init+0x68>
 8006a4c:	f043 0310 	orr.w	r3, r3, #16
 8006a50:	6423      	str	r3, [r4, #64]	; 0x40
 8006a52:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006a54:	2200      	movs	r2, #0
 8006a56:	8722      	strh	r2, [r4, #56]	; 0x38
 8006a58:	b908      	cbnz	r0, 8006a5e <PDM_Filter_Init+0x72>
 8006a5a:	3380      	adds	r3, #128	; 0x80
 8006a5c:	6423      	str	r3, [r4, #64]	; 0x40
 8006a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a60:	4d23      	ldr	r5, [pc, #140]	; (8006af0 <PDM_Filter_Init+0x104>)
 8006a62:	d010      	beq.n	8006a86 <PDM_Filter_Init+0x9a>
 8006a64:	782a      	ldrb	r2, [r5, #0]
 8006a66:	2a01      	cmp	r2, #1
 8006a68:	d027      	beq.n	8006aba <PDM_Filter_Init+0xce>
 8006a6a:	8862      	ldrh	r2, [r4, #2]
 8006a6c:	2a01      	cmp	r2, #1
 8006a6e:	f04f 0001 	mov.w	r0, #1
 8006a72:	d8e1      	bhi.n	8006a38 <PDM_Filter_Init+0x4c>
 8006a74:	d001      	beq.n	8006a7a <PDM_Filter_Init+0x8e>
 8006a76:	4618      	mov	r0, r3
 8006a78:	e7de      	b.n	8006a38 <PDM_Filter_Init+0x4c>
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	6422      	str	r2, [r4, #64]	; 0x40
 8006a80:	4613      	mov	r3, r2
 8006a82:	2160      	movs	r1, #96	; 0x60
 8006a84:	e7da      	b.n	8006a3c <PDM_Filter_Init+0x50>
 8006a86:	7829      	ldrb	r1, [r5, #0]
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	d1ee      	bne.n	8006a6a <PDM_Filter_Init+0x7e>
 8006a8c:	4919      	ldr	r1, [pc, #100]	; (8006af4 <PDM_Filter_Init+0x108>)
 8006a8e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006afc <PDM_Filter_Init+0x110>
 8006a92:	4f19      	ldr	r7, [pc, #100]	; (8006af8 <PDM_Filter_Init+0x10c>)
 8006a94:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8006a98:	684a      	ldr	r2, [r1, #4]
 8006a9a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8006a9e:	ea02 0007 	and.w	r0, r2, r7
 8006aa2:	4303      	orrs	r3, r0
 8006aa4:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f841 3f04 	str.w	r3, [r1, #4]!
 8006aae:	428e      	cmp	r6, r1
 8006ab0:	d1f2      	bne.n	8006a98 <PDM_Filter_Init+0xac>
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	7028      	strb	r0, [r5, #0]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e7bb      	b.n	8006a32 <PDM_Filter_Init+0x46>
 8006aba:	490e      	ldr	r1, [pc, #56]	; (8006af4 <PDM_Filter_Init+0x108>)
 8006abc:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006afc <PDM_Filter_Init+0x110>
 8006ac0:	4f0d      	ldr	r7, [pc, #52]	; (8006af8 <PDM_Filter_Init+0x10c>)
 8006ac2:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8006ac6:	684a      	ldr	r2, [r1, #4]
 8006ac8:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8006acc:	ea02 0007 	and.w	r0, r2, r7
 8006ad0:	4303      	orrs	r3, r0
 8006ad2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f841 3f04 	str.w	r3, [r1, #4]!
 8006adc:	428e      	cmp	r6, r1
 8006ade:	d1f2      	bne.n	8006ac6 <PDM_Filter_Init+0xda>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	702b      	strb	r3, [r5, #0]
 8006ae4:	e7c1      	b.n	8006a6a <PDM_Filter_Init+0x7e>
 8006ae6:	bf00      	nop
 8006ae8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006aec:	f407a5c2 	.word	0xf407a5c2
 8006af0:	20000814 	.word	0x20000814
 8006af4:	2000009c 	.word	0x2000009c
 8006af8:	000ffc00 	.word	0x000ffc00
 8006afc:	3ff00000 	.word	0x3ff00000

08006b00 <PDM_Filter_setConfig>:
 8006b00:	4b66      	ldr	r3, [pc, #408]	; (8006c9c <PDM_Filter_setConfig+0x19c>)
 8006b02:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d001      	beq.n	8006b0c <PDM_Filter_setConfig+0xc>
 8006b08:	2004      	movs	r0, #4
 8006b0a:	4770      	bx	lr
 8006b0c:	b530      	push	{r4, r5, lr}
 8006b0e:	880a      	ldrh	r2, [r1, #0]
 8006b10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b12:	ed2d 8b04 	vpush	{d8-d9}
 8006b16:	4604      	mov	r4, r0
 8006b18:	460d      	mov	r5, r1
 8006b1a:	1e51      	subs	r1, r2, #1
 8006b1c:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8006b20:	2906      	cmp	r1, #6
 8006b22:	b083      	sub	sp, #12
 8006b24:	6420      	str	r0, [r4, #64]	; 0x40
 8006b26:	d91a      	bls.n	8006b5e <PDM_Filter_setConfig+0x5e>
 8006b28:	2008      	movs	r0, #8
 8006b2a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006b2e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006b32:	4299      	cmp	r1, r3
 8006b34:	d07e      	beq.n	8006c34 <PDM_Filter_setConfig+0x134>
 8006b36:	f113 0f0c 	cmn.w	r3, #12
 8006b3a:	da2a      	bge.n	8006b92 <PDM_Filter_setConfig+0x92>
 8006b3c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006b40:	3040      	adds	r0, #64	; 0x40
 8006b42:	80ab      	strh	r3, [r5, #4]
 8006b44:	8622      	strh	r2, [r4, #48]	; 0x30
 8006b46:	886b      	ldrh	r3, [r5, #2]
 8006b48:	8663      	strh	r3, [r4, #50]	; 0x32
 8006b4a:	b920      	cbnz	r0, 8006b56 <PDM_Filter_setConfig+0x56>
 8006b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b52:	6423      	str	r3, [r4, #64]	; 0x40
 8006b54:	2000      	movs	r0, #0
 8006b56:	b003      	add	sp, #12
 8006b58:	ecbd 8b04 	vpop	{d8-d9}
 8006b5c:	bd30      	pop	{r4, r5, pc}
 8006b5e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006b60:	4291      	cmp	r1, r2
 8006b62:	d06c      	beq.n	8006c3e <PDM_Filter_setConfig+0x13e>
 8006b64:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8006b72:	6423      	str	r3, [r4, #64]	; 0x40
 8006b74:	2970      	cmp	r1, #112	; 0x70
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b7e:	d066      	beq.n	8006c4e <PDM_Filter_setConfig+0x14e>
 8006b80:	2b06      	cmp	r3, #6
 8006b82:	f200 8089 	bhi.w	8006c98 <PDM_Filter_setConfig+0x198>
 8006b86:	e8df f003 	tbb	[pc, r3]
 8006b8a:	4f52      	.short	0x4f52
 8006b8c:	3d43494c 	.word	0x3d43494c
 8006b90:	46          	.byte	0x46
 8006b91:	00          	.byte	0x00
 8006b92:	2b33      	cmp	r3, #51	; 0x33
 8006b94:	dc32      	bgt.n	8006bfc <PDM_Filter_setConfig+0xfc>
 8006b96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b98:	f002 020f 	and.w	r2, r2, #15
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	2a06      	cmp	r2, #6
 8006ba0:	d872      	bhi.n	8006c88 <PDM_Filter_setConfig+0x188>
 8006ba2:	493f      	ldr	r1, [pc, #252]	; (8006ca0 <PDM_Filter_setConfig+0x1a0>)
 8006ba4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006ba8:	ed92 9a00 	vldr	s18, [r2]
 8006bac:	ed92 8a07 	vldr	s16, [r2, #28]
 8006bb0:	9001      	str	r0, [sp, #4]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bba:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8006bbe:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8006bc2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006bc6:	f000 f939 	bl	8006e3c <powf>
 8006bca:	eddf 0a36 	vldr	s1, [pc, #216]	; 8006ca4 <PDM_Filter_setConfig+0x1a4>
 8006bce:	eef0 8a40 	vmov.f32	s17, s0
 8006bd2:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8006bd6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006bda:	f000 f92f 	bl	8006e3c <powf>
 8006bde:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006be2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006be6:	f000 f903 	bl	8006df0 <roundf>
 8006bea:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006bee:	88ab      	ldrh	r3, [r5, #4]
 8006bf0:	882a      	ldrh	r2, [r5, #0]
 8006bf2:	9801      	ldr	r0, [sp, #4]
 8006bf4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8006bf8:	8723      	strh	r3, [r4, #56]	; 0x38
 8006bfa:	e7a3      	b.n	8006b44 <PDM_Filter_setConfig+0x44>
 8006bfc:	2333      	movs	r3, #51	; 0x33
 8006bfe:	3040      	adds	r0, #64	; 0x40
 8006c00:	80ab      	strh	r3, [r5, #4]
 8006c02:	e79f      	b.n	8006b44 <PDM_Filter_setConfig+0x44>
 8006c04:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <PDM_Filter_setConfig+0x1a8>)
 8006c06:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c08:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	e792      	b.n	8006b36 <PDM_Filter_setConfig+0x36>
 8006c10:	4b26      	ldr	r3, [pc, #152]	; (8006cac <PDM_Filter_setConfig+0x1ac>)
 8006c12:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c14:	e7f8      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <PDM_Filter_setConfig+0x1b0>)
 8006c18:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c1a:	e7f5      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c1c:	4b25      	ldr	r3, [pc, #148]	; (8006cb4 <PDM_Filter_setConfig+0x1b4>)
 8006c1e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c20:	e7f2      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c22:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <PDM_Filter_setConfig+0x1b8>)
 8006c24:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c26:	e7ef      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c28:	4b24      	ldr	r3, [pc, #144]	; (8006cbc <PDM_Filter_setConfig+0x1bc>)
 8006c2a:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c2c:	e7ec      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <PDM_Filter_setConfig+0x1c0>)
 8006c30:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c32:	e7e9      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c34:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006c36:	4291      	cmp	r1, r2
 8006c38:	f47f af7d 	bne.w	8006b36 <PDM_Filter_setConfig+0x36>
 8006c3c:	e783      	b.n	8006b46 <PDM_Filter_setConfig+0x46>
 8006c3e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006c42:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d023      	beq.n	8006c92 <PDM_Filter_setConfig+0x192>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e773      	b.n	8006b36 <PDM_Filter_setConfig+0x36>
 8006c4e:	2b06      	cmp	r3, #6
 8006c50:	d822      	bhi.n	8006c98 <PDM_Filter_setConfig+0x198>
 8006c52:	e8df f003 	tbb	[pc, r3]
 8006c56:	1316      	.short	0x1316
 8006c58:	070a0d10 	.word	0x070a0d10
 8006c5c:	04          	.byte	0x04
 8006c5d:	00          	.byte	0x00
 8006c5e:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <PDM_Filter_setConfig+0x1c4>)
 8006c60:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c62:	e7d1      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c64:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <PDM_Filter_setConfig+0x1c8>)
 8006c66:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c68:	e7ce      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c6a:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <PDM_Filter_setConfig+0x1cc>)
 8006c6c:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c6e:	e7cb      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c70:	4b17      	ldr	r3, [pc, #92]	; (8006cd0 <PDM_Filter_setConfig+0x1d0>)
 8006c72:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c74:	e7c8      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c76:	4b17      	ldr	r3, [pc, #92]	; (8006cd4 <PDM_Filter_setConfig+0x1d4>)
 8006c78:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c7a:	e7c5      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c7c:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <PDM_Filter_setConfig+0x1d8>)
 8006c7e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c80:	e7c2      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c82:	4b16      	ldr	r3, [pc, #88]	; (8006cdc <PDM_Filter_setConfig+0x1dc>)
 8006c84:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c86:	e7bf      	b.n	8006c08 <PDM_Filter_setConfig+0x108>
 8006c88:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8006ce0 <PDM_Filter_setConfig+0x1e0>
 8006c8c:	eeb0 9a48 	vmov.f32	s18, s16
 8006c90:	e78e      	b.n	8006bb0 <PDM_Filter_setConfig+0xb0>
 8006c92:	886b      	ldrh	r3, [r5, #2]
 8006c94:	8663      	strh	r3, [r4, #50]	; 0x32
 8006c96:	e759      	b.n	8006b4c <PDM_Filter_setConfig+0x4c>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	e746      	b.n	8006b2a <PDM_Filter_setConfig+0x2a>
 8006c9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ca0:	080078f8 	.word	0x080078f8
 8006ca4:	42000000 	.word	0x42000000
 8006ca8:	0800506d 	.word	0x0800506d
 8006cac:	08004f4d 	.word	0x08004f4d
 8006cb0:	080051fd 	.word	0x080051fd
 8006cb4:	08005a41 	.word	0x08005a41
 8006cb8:	080057a1 	.word	0x080057a1
 8006cbc:	08005581 	.word	0x08005581
 8006cc0:	08005395 	.word	0x08005395
 8006cc4:	0800604d 	.word	0x0800604d
 8006cc8:	08005f15 	.word	0x08005f15
 8006ccc:	08005e31 	.word	0x08005e31
 8006cd0:	080066c9 	.word	0x080066c9
 8006cd4:	080064b5 	.word	0x080064b5
 8006cd8:	080062fd 	.word	0x080062fd
 8006cdc:	08006191 	.word	0x08006191
 8006ce0:	00000000 	.word	0x00000000

08006ce4 <PDM_Filter>:
 8006ce4:	b410      	push	{r4}
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <PDM_Filter+0x34>)
 8006ce8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d003      	beq.n	8006cf6 <PDM_Filter+0x12>
 8006cee:	2004      	movs	r0, #4
 8006cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006cf8:	05dc      	lsls	r4, r3, #23
 8006cfa:	d407      	bmi.n	8006d0c <PDM_Filter+0x28>
 8006cfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d00:	bf14      	ite	ne
 8006d02:	2020      	movne	r0, #32
 8006d04:	2030      	moveq	r0, #48	; 0x30
 8006d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d12:	320c      	adds	r2, #12
 8006d14:	4718      	bx	r3
 8006d16:	bf00      	nop
 8006d18:	b5e8b5cd 	.word	0xb5e8b5cd

08006d1c <CRC_Lock>:
 8006d1c:	4a17      	ldr	r2, [pc, #92]	; (8006d7c <CRC_Lock+0x60>)
 8006d1e:	6813      	ldr	r3, [r2, #0]
 8006d20:	b410      	push	{r4}
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	4c16      	ldr	r4, [pc, #88]	; (8006d80 <CRC_Lock+0x64>)
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	b933      	cbnz	r3, 8006d3c <CRC_Lock+0x20>
 8006d2e:	4b15      	ldr	r3, [pc, #84]	; (8006d84 <CRC_Lock+0x68>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d36:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006d3a:	d00f      	beq.n	8006d5c <CRC_Lock+0x40>
 8006d3c:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <CRC_Lock+0x6c>)
 8006d3e:	2301      	movs	r3, #1
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1fc      	bne.n	8006d42 <CRC_Lock+0x26>
 8006d48:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <CRC_Lock+0x70>)
 8006d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4e:	6018      	str	r0, [r3, #0]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	1a08      	subs	r0, r1, r0
 8006d54:	fab0 f080 	clz	r0, r0
 8006d58:	0940      	lsrs	r0, r0, #5
 8006d5a:	4770      	bx	lr
 8006d5c:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <CRC_Lock+0x74>)
 8006d5e:	2301      	movs	r3, #1
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1fc      	bne.n	8006d62 <CRC_Lock+0x46>
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <CRC_Lock+0x78>)
 8006d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6e:	6018      	str	r0, [r3, #0]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	1a40      	subs	r0, r0, r1
 8006d74:	fab0 f080 	clz	r0, r0
 8006d78:	0940      	lsrs	r0, r0, #5
 8006d7a:	4770      	bx	lr
 8006d7c:	e0002000 	.word	0xe0002000
 8006d80:	e0042000 	.word	0xe0042000
 8006d84:	5c001000 	.word	0x5c001000
 8006d88:	40023008 	.word	0x40023008
 8006d8c:	40023000 	.word	0x40023000
 8006d90:	58024c08 	.word	0x58024c08
 8006d94:	58024c00 	.word	0x58024c00

08006d98 <__libc_init_array>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	4e0d      	ldr	r6, [pc, #52]	; (8006dd0 <__libc_init_array+0x38>)
 8006d9c:	4c0d      	ldr	r4, [pc, #52]	; (8006dd4 <__libc_init_array+0x3c>)
 8006d9e:	1ba4      	subs	r4, r4, r6
 8006da0:	10a4      	asrs	r4, r4, #2
 8006da2:	2500      	movs	r5, #0
 8006da4:	42a5      	cmp	r5, r4
 8006da6:	d109      	bne.n	8006dbc <__libc_init_array+0x24>
 8006da8:	4e0b      	ldr	r6, [pc, #44]	; (8006dd8 <__libc_init_array+0x40>)
 8006daa:	4c0c      	ldr	r4, [pc, #48]	; (8006ddc <__libc_init_array+0x44>)
 8006dac:	f000 fd52 	bl	8007854 <_init>
 8006db0:	1ba4      	subs	r4, r4, r6
 8006db2:	10a4      	asrs	r4, r4, #2
 8006db4:	2500      	movs	r5, #0
 8006db6:	42a5      	cmp	r5, r4
 8006db8:	d105      	bne.n	8006dc6 <__libc_init_array+0x2e>
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dc0:	4798      	blx	r3
 8006dc2:	3501      	adds	r5, #1
 8006dc4:	e7ee      	b.n	8006da4 <__libc_init_array+0xc>
 8006dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dca:	4798      	blx	r3
 8006dcc:	3501      	adds	r5, #1
 8006dce:	e7f2      	b.n	8006db6 <__libc_init_array+0x1e>
 8006dd0:	08007960 	.word	0x08007960
 8006dd4:	08007960 	.word	0x08007960
 8006dd8:	08007960 	.word	0x08007960
 8006ddc:	08007964 	.word	0x08007964

08006de0 <memset>:
 8006de0:	4402      	add	r2, r0
 8006de2:	4603      	mov	r3, r0
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d100      	bne.n	8006dea <memset+0xa>
 8006de8:	4770      	bx	lr
 8006dea:	f803 1b01 	strb.w	r1, [r3], #1
 8006dee:	e7f9      	b.n	8006de4 <memset+0x4>

08006df0 <roundf>:
 8006df0:	ee10 0a10 	vmov	r0, s0
 8006df4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006df8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8006dfc:	2a16      	cmp	r2, #22
 8006dfe:	dc15      	bgt.n	8006e2c <roundf+0x3c>
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	da08      	bge.n	8006e16 <roundf+0x26>
 8006e04:	3201      	adds	r2, #1
 8006e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006e0a:	d101      	bne.n	8006e10 <roundf+0x20>
 8006e0c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006e10:	ee00 3a10 	vmov	s0, r3
 8006e14:	4770      	bx	lr
 8006e16:	4908      	ldr	r1, [pc, #32]	; (8006e38 <roundf+0x48>)
 8006e18:	4111      	asrs	r1, r2
 8006e1a:	4208      	tst	r0, r1
 8006e1c:	d0fa      	beq.n	8006e14 <roundf+0x24>
 8006e1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e22:	4113      	asrs	r3, r2
 8006e24:	4403      	add	r3, r0
 8006e26:	ea23 0301 	bic.w	r3, r3, r1
 8006e2a:	e7f1      	b.n	8006e10 <roundf+0x20>
 8006e2c:	2a80      	cmp	r2, #128	; 0x80
 8006e2e:	d1f1      	bne.n	8006e14 <roundf+0x24>
 8006e30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	007fffff 	.word	0x007fffff

08006e3c <powf>:
 8006e3c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8006e40:	ed2d 8b04 	vpush	{d8-d9}
 8006e44:	4ca7      	ldr	r4, [pc, #668]	; (80070e4 <powf+0x2a8>)
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	eef0 8a40 	vmov.f32	s17, s0
 8006e4c:	eeb0 8a60 	vmov.f32	s16, s1
 8006e50:	f000 f958 	bl	8007104 <__ieee754_powf>
 8006e54:	f994 5000 	ldrsb.w	r5, [r4]
 8006e58:	1c6b      	adds	r3, r5, #1
 8006e5a:	eeb0 9a40 	vmov.f32	s18, s0
 8006e5e:	4626      	mov	r6, r4
 8006e60:	d05f      	beq.n	8006f22 <powf+0xe6>
 8006e62:	eeb4 8a48 	vcmp.f32	s16, s16
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	d65a      	bvs.n	8006f22 <powf+0xe6>
 8006e6c:	eef4 8a68 	vcmp.f32	s17, s17
 8006e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e74:	d721      	bvc.n	8006eba <powf+0x7e>
 8006e76:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7e:	d150      	bne.n	8006f22 <powf+0xe6>
 8006e80:	2301      	movs	r3, #1
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4b98      	ldr	r3, [pc, #608]	; (80070e8 <powf+0x2ac>)
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	ee18 0a90 	vmov	r0, s17
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9308      	str	r3, [sp, #32]
 8006e90:	f7f9 fb06 	bl	80004a0 <__aeabi_f2d>
 8006e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e98:	ee18 0a10 	vmov	r0, s16
 8006e9c:	f7f9 fb00 	bl	80004a0 <__aeabi_f2d>
 8006ea0:	4b92      	ldr	r3, [pc, #584]	; (80070ec <powf+0x2b0>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2d02      	cmp	r5, #2
 8006ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006eae:	d032      	beq.n	8006f16 <powf+0xda>
 8006eb0:	4668      	mov	r0, sp
 8006eb2:	f000 fbea 	bl	800768a <matherr>
 8006eb6:	bb40      	cbnz	r0, 8006f0a <powf+0xce>
 8006eb8:	e065      	b.n	8006f86 <powf+0x14a>
 8006eba:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80070f0 <powf+0x2b4>
 8006ebe:	eef4 8a69 	vcmp.f32	s17, s19
 8006ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec6:	d163      	bne.n	8006f90 <powf+0x154>
 8006ec8:	eeb4 8a69 	vcmp.f32	s16, s19
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	d12e      	bne.n	8006f30 <powf+0xf4>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4b84      	ldr	r3, [pc, #528]	; (80070e8 <powf+0x2ac>)
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	ee18 0a90 	vmov	r0, s17
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	f7f9 fadd 	bl	80004a0 <__aeabi_f2d>
 8006ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eea:	ee18 0a10 	vmov	r0, s16
 8006eee:	f7f9 fad7 	bl	80004a0 <__aeabi_f2d>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006efa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	d0d6      	beq.n	8006eb0 <powf+0x74>
 8006f02:	4b7a      	ldr	r3, [pc, #488]	; (80070ec <powf+0x2b0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f0a:	9b08      	ldr	r3, [sp, #32]
 8006f0c:	b11b      	cbz	r3, 8006f16 <powf+0xda>
 8006f0e:	f000 fc9b 	bl	8007848 <__errno>
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f1a:	f7f9 fb19 	bl	8000550 <__aeabi_d2f>
 8006f1e:	ee09 0a10 	vmov	s18, r0
 8006f22:	eeb0 0a49 	vmov.f32	s0, s18
 8006f26:	b00a      	add	sp, #40	; 0x28
 8006f28:	ecbd 8b04 	vpop	{d8-d9}
 8006f2c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f30:	eeb0 0a48 	vmov.f32	s0, s16
 8006f34:	f000 fbb2 	bl	800769c <finitef>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d0f2      	beq.n	8006f22 <powf+0xe6>
 8006f3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f44:	d5ed      	bpl.n	8006f22 <powf+0xe6>
 8006f46:	2301      	movs	r3, #1
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4b67      	ldr	r3, [pc, #412]	; (80070e8 <powf+0x2ac>)
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	ee18 0a90 	vmov	r0, s17
 8006f52:	2300      	movs	r3, #0
 8006f54:	9308      	str	r3, [sp, #32]
 8006f56:	f7f9 faa3 	bl	80004a0 <__aeabi_f2d>
 8006f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f5e:	ee18 0a10 	vmov	r0, s16
 8006f62:	f7f9 fa9d 	bl	80004a0 <__aeabi_f2d>
 8006f66:	f994 3000 	ldrsb.w	r3, [r4]
 8006f6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f6e:	b923      	cbnz	r3, 8006f7a <powf+0x13e>
 8006f70:	2200      	movs	r2, #0
 8006f72:	2300      	movs	r3, #0
 8006f74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f78:	e79a      	b.n	8006eb0 <powf+0x74>
 8006f7a:	495e      	ldr	r1, [pc, #376]	; (80070f4 <powf+0x2b8>)
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d194      	bne.n	8006eb0 <powf+0x74>
 8006f86:	f000 fc5f 	bl	8007848 <__errno>
 8006f8a:	2321      	movs	r3, #33	; 0x21
 8006f8c:	6003      	str	r3, [r0, #0]
 8006f8e:	e7bc      	b.n	8006f0a <powf+0xce>
 8006f90:	f000 fb84 	bl	800769c <finitef>
 8006f94:	4605      	mov	r5, r0
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d173      	bne.n	8007082 <powf+0x246>
 8006f9a:	eeb0 0a68 	vmov.f32	s0, s17
 8006f9e:	f000 fb7d 	bl	800769c <finitef>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d06d      	beq.n	8007082 <powf+0x246>
 8006fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8006faa:	f000 fb77 	bl	800769c <finitef>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d067      	beq.n	8007082 <powf+0x246>
 8006fb2:	ee18 0a90 	vmov	r0, s17
 8006fb6:	f7f9 fa73 	bl	80004a0 <__aeabi_f2d>
 8006fba:	4680      	mov	r8, r0
 8006fbc:	ee18 0a10 	vmov	r0, s16
 8006fc0:	4689      	mov	r9, r1
 8006fc2:	f7f9 fa6d 	bl	80004a0 <__aeabi_f2d>
 8006fc6:	eeb4 9a49 	vcmp.f32	s18, s18
 8006fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fce:	f994 4000 	ldrsb.w	r4, [r4]
 8006fd2:	4b45      	ldr	r3, [pc, #276]	; (80070e8 <powf+0x2ac>)
 8006fd4:	d713      	bvc.n	8006ffe <powf+0x1c2>
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	e9cd 2300 	strd	r2, r3, [sp]
 8006fdc:	9508      	str	r5, [sp, #32]
 8006fde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006fe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fe6:	2c00      	cmp	r4, #0
 8006fe8:	d0c2      	beq.n	8006f70 <powf+0x134>
 8006fea:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8006fee:	ee17 0a90 	vmov	r0, s15
 8006ff2:	f7f9 fa55 	bl	80004a0 <__aeabi_f2d>
 8006ff6:	2c02      	cmp	r4, #2
 8006ff8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ffc:	e7c2      	b.n	8006f84 <powf+0x148>
 8006ffe:	2203      	movs	r2, #3
 8007000:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007004:	e9cd 2300 	strd	r2, r3, [sp]
 8007008:	9508      	str	r5, [sp, #32]
 800700a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800700e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007012:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007016:	b9fc      	cbnz	r4, 8007058 <powf+0x21c>
 8007018:	4b37      	ldr	r3, [pc, #220]	; (80070f8 <powf+0x2bc>)
 800701a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800701e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702a:	d553      	bpl.n	80070d4 <powf+0x298>
 800702c:	eeb0 0a48 	vmov.f32	s0, s16
 8007030:	f000 fb44 	bl	80076bc <rintf>
 8007034:	eeb4 0a48 	vcmp.f32	s0, s16
 8007038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703c:	d004      	beq.n	8007048 <powf+0x20c>
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <powf+0x2c0>)
 8007040:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007044:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007048:	f996 3000 	ldrsb.w	r3, [r6]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d141      	bne.n	80070d4 <powf+0x298>
 8007050:	f000 fbfa 	bl	8007848 <__errno>
 8007054:	2322      	movs	r3, #34	; 0x22
 8007056:	e799      	b.n	8006f8c <powf+0x150>
 8007058:	4b29      	ldr	r3, [pc, #164]	; (8007100 <powf+0x2c4>)
 800705a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800705e:	2200      	movs	r2, #0
 8007060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007064:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007068:	d5ee      	bpl.n	8007048 <powf+0x20c>
 800706a:	eeb0 0a48 	vmov.f32	s0, s16
 800706e:	f000 fb25 	bl	80076bc <rintf>
 8007072:	eeb4 0a48 	vcmp.f32	s0, s16
 8007076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707a:	d0e5      	beq.n	8007048 <powf+0x20c>
 800707c:	2200      	movs	r2, #0
 800707e:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <powf+0x2b8>)
 8007080:	e7e0      	b.n	8007044 <powf+0x208>
 8007082:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708a:	f47f af4a 	bne.w	8006f22 <powf+0xe6>
 800708e:	eeb0 0a68 	vmov.f32	s0, s17
 8007092:	f000 fb03 	bl	800769c <finitef>
 8007096:	2800      	cmp	r0, #0
 8007098:	f43f af43 	beq.w	8006f22 <powf+0xe6>
 800709c:	eeb0 0a48 	vmov.f32	s0, s16
 80070a0:	f000 fafc 	bl	800769c <finitef>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	f43f af3c 	beq.w	8006f22 <powf+0xe6>
 80070aa:	2304      	movs	r3, #4
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4b0e      	ldr	r3, [pc, #56]	; (80070e8 <powf+0x2ac>)
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	ee18 0a90 	vmov	r0, s17
 80070b6:	2300      	movs	r3, #0
 80070b8:	9308      	str	r3, [sp, #32]
 80070ba:	f7f9 f9f1 	bl	80004a0 <__aeabi_f2d>
 80070be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c2:	ee18 0a10 	vmov	r0, s16
 80070c6:	f7f9 f9eb 	bl	80004a0 <__aeabi_f2d>
 80070ca:	2200      	movs	r2, #0
 80070cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070d0:	2300      	movs	r3, #0
 80070d2:	e7b7      	b.n	8007044 <powf+0x208>
 80070d4:	4668      	mov	r0, sp
 80070d6:	f000 fad8 	bl	800768a <matherr>
 80070da:	2800      	cmp	r0, #0
 80070dc:	f47f af15 	bne.w	8006f0a <powf+0xce>
 80070e0:	e7b6      	b.n	8007050 <powf+0x214>
 80070e2:	bf00      	nop
 80070e4:	20000504 	.word	0x20000504
 80070e8:	08007930 	.word	0x08007930
 80070ec:	3ff00000 	.word	0x3ff00000
 80070f0:	00000000 	.word	0x00000000
 80070f4:	fff00000 	.word	0xfff00000
 80070f8:	47efffff 	.word	0x47efffff
 80070fc:	c7efffff 	.word	0xc7efffff
 8007100:	7ff00000 	.word	0x7ff00000

08007104 <__ieee754_powf>:
 8007104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007108:	ee10 5a90 	vmov	r5, s1
 800710c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007110:	ed2d 8b02 	vpush	{d8}
 8007114:	eeb0 8a40 	vmov.f32	s16, s0
 8007118:	eef0 8a60 	vmov.f32	s17, s1
 800711c:	f000 8293 	beq.w	8007646 <__ieee754_powf+0x542>
 8007120:	ee10 8a10 	vmov	r8, s0
 8007124:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007128:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800712c:	dc06      	bgt.n	800713c <__ieee754_powf+0x38>
 800712e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007132:	dd0a      	ble.n	800714a <__ieee754_powf+0x46>
 8007134:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007138:	f000 8285 	beq.w	8007646 <__ieee754_powf+0x542>
 800713c:	ecbd 8b02 	vpop	{d8}
 8007140:	48d9      	ldr	r0, [pc, #868]	; (80074a8 <__ieee754_powf+0x3a4>)
 8007142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007146:	f000 bab3 	b.w	80076b0 <nanf>
 800714a:	f1b8 0f00 	cmp.w	r8, #0
 800714e:	da1d      	bge.n	800718c <__ieee754_powf+0x88>
 8007150:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007154:	da2c      	bge.n	80071b0 <__ieee754_powf+0xac>
 8007156:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800715a:	db30      	blt.n	80071be <__ieee754_powf+0xba>
 800715c:	15fb      	asrs	r3, r7, #23
 800715e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007162:	fa47 f603 	asr.w	r6, r7, r3
 8007166:	fa06 f303 	lsl.w	r3, r6, r3
 800716a:	42bb      	cmp	r3, r7
 800716c:	d127      	bne.n	80071be <__ieee754_powf+0xba>
 800716e:	f006 0601 	and.w	r6, r6, #1
 8007172:	f1c6 0602 	rsb	r6, r6, #2
 8007176:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800717a:	d122      	bne.n	80071c2 <__ieee754_powf+0xbe>
 800717c:	2d00      	cmp	r5, #0
 800717e:	f280 8268 	bge.w	8007652 <__ieee754_powf+0x54e>
 8007182:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007186:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800718a:	e00d      	b.n	80071a8 <__ieee754_powf+0xa4>
 800718c:	2600      	movs	r6, #0
 800718e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007192:	d1f0      	bne.n	8007176 <__ieee754_powf+0x72>
 8007194:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007198:	f000 8255 	beq.w	8007646 <__ieee754_powf+0x542>
 800719c:	dd0a      	ble.n	80071b4 <__ieee754_powf+0xb0>
 800719e:	2d00      	cmp	r5, #0
 80071a0:	f280 8254 	bge.w	800764c <__ieee754_powf+0x548>
 80071a4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80074ac <__ieee754_powf+0x3a8>
 80071a8:	ecbd 8b02 	vpop	{d8}
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	2602      	movs	r6, #2
 80071b2:	e7ec      	b.n	800718e <__ieee754_powf+0x8a>
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	daf5      	bge.n	80071a4 <__ieee754_powf+0xa0>
 80071b8:	eeb1 0a68 	vneg.f32	s0, s17
 80071bc:	e7f4      	b.n	80071a8 <__ieee754_powf+0xa4>
 80071be:	2600      	movs	r6, #0
 80071c0:	e7d9      	b.n	8007176 <__ieee754_powf+0x72>
 80071c2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80071c6:	d102      	bne.n	80071ce <__ieee754_powf+0xca>
 80071c8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80071cc:	e7ec      	b.n	80071a8 <__ieee754_powf+0xa4>
 80071ce:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80071d2:	eeb0 0a48 	vmov.f32	s0, s16
 80071d6:	d108      	bne.n	80071ea <__ieee754_powf+0xe6>
 80071d8:	f1b8 0f00 	cmp.w	r8, #0
 80071dc:	db05      	blt.n	80071ea <__ieee754_powf+0xe6>
 80071de:	ecbd 8b02 	vpop	{d8}
 80071e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	f000 ba4d 	b.w	8007684 <__ieee754_sqrtf>
 80071ea:	f000 fa50 	bl	800768e <fabsf>
 80071ee:	b124      	cbz	r4, 80071fa <__ieee754_powf+0xf6>
 80071f0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80071f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80071f8:	d117      	bne.n	800722a <__ieee754_powf+0x126>
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	bfbc      	itt	lt
 80071fe:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007202:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007206:	f1b8 0f00 	cmp.w	r8, #0
 800720a:	dacd      	bge.n	80071a8 <__ieee754_powf+0xa4>
 800720c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007210:	ea54 0306 	orrs.w	r3, r4, r6
 8007214:	d104      	bne.n	8007220 <__ieee754_powf+0x11c>
 8007216:	ee70 7a40 	vsub.f32	s15, s0, s0
 800721a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800721e:	e7c3      	b.n	80071a8 <__ieee754_powf+0xa4>
 8007220:	2e01      	cmp	r6, #1
 8007222:	d1c1      	bne.n	80071a8 <__ieee754_powf+0xa4>
 8007224:	eeb1 0a40 	vneg.f32	s0, s0
 8007228:	e7be      	b.n	80071a8 <__ieee754_powf+0xa4>
 800722a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800722e:	3801      	subs	r0, #1
 8007230:	ea56 0300 	orrs.w	r3, r6, r0
 8007234:	d104      	bne.n	8007240 <__ieee754_powf+0x13c>
 8007236:	ee38 8a48 	vsub.f32	s16, s16, s16
 800723a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800723e:	e7b3      	b.n	80071a8 <__ieee754_powf+0xa4>
 8007240:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007244:	dd6d      	ble.n	8007322 <__ieee754_powf+0x21e>
 8007246:	4b9a      	ldr	r3, [pc, #616]	; (80074b0 <__ieee754_powf+0x3ac>)
 8007248:	429c      	cmp	r4, r3
 800724a:	dc06      	bgt.n	800725a <__ieee754_powf+0x156>
 800724c:	2d00      	cmp	r5, #0
 800724e:	daa9      	bge.n	80071a4 <__ieee754_powf+0xa0>
 8007250:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80074b4 <__ieee754_powf+0x3b0>
 8007254:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007258:	e7a6      	b.n	80071a8 <__ieee754_powf+0xa4>
 800725a:	4b97      	ldr	r3, [pc, #604]	; (80074b8 <__ieee754_powf+0x3b4>)
 800725c:	429c      	cmp	r4, r3
 800725e:	dd02      	ble.n	8007266 <__ieee754_powf+0x162>
 8007260:	2d00      	cmp	r5, #0
 8007262:	dcf5      	bgt.n	8007250 <__ieee754_powf+0x14c>
 8007264:	e79e      	b.n	80071a4 <__ieee754_powf+0xa0>
 8007266:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800726a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800726e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80074bc <__ieee754_powf+0x3b8>
 8007272:	eef1 6a40 	vneg.f32	s13, s0
 8007276:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800727a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800727e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007282:	eee7 7a40 	vfms.f32	s15, s14, s0
 8007286:	ee60 0a00 	vmul.f32	s1, s0, s0
 800728a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80074c0 <__ieee754_powf+0x3bc>
 800728e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8007292:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80074c4 <__ieee754_powf+0x3c0>
 8007296:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800729a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800729e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80074c8 <__ieee754_powf+0x3c4>
 80072a2:	eeb0 6a67 	vmov.f32	s12, s15
 80072a6:	eea0 6a07 	vfma.f32	s12, s0, s14
 80072aa:	ee16 3a10 	vmov	r3, s12
 80072ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80072b2:	f023 030f 	bic.w	r3, r3, #15
 80072b6:	ee00 3a90 	vmov	s1, r3
 80072ba:	eee6 0a87 	vfma.f32	s1, s13, s14
 80072be:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80072c2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80072c6:	f025 050f 	bic.w	r5, r5, #15
 80072ca:	ee07 5a10 	vmov	s14, r5
 80072ce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80072d2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eee7 0a27 	vfma.f32	s1, s14, s15
 80072de:	3e01      	subs	r6, #1
 80072e0:	ea56 0200 	orrs.w	r2, r6, r0
 80072e4:	ee07 5a10 	vmov	s14, r5
 80072e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072ec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80072f0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80072f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80072f8:	ee17 4a10 	vmov	r4, s14
 80072fc:	bf08      	it	eq
 80072fe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007302:	2c00      	cmp	r4, #0
 8007304:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007308:	f340 8184 	ble.w	8007614 <__ieee754_powf+0x510>
 800730c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007310:	f340 80fc 	ble.w	800750c <__ieee754_powf+0x408>
 8007314:	eddf 7a67 	vldr	s15, [pc, #412]	; 80074b4 <__ieee754_powf+0x3b0>
 8007318:	ee28 0a27 	vmul.f32	s0, s16, s15
 800731c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007320:	e742      	b.n	80071a8 <__ieee754_powf+0xa4>
 8007322:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8007326:	bfbf      	itttt	lt
 8007328:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80074cc <__ieee754_powf+0x3c8>
 800732c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007330:	f06f 0217 	mvnlt.w	r2, #23
 8007334:	ee17 4a90 	vmovlt	r4, s15
 8007338:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800733c:	bfa8      	it	ge
 800733e:	2200      	movge	r2, #0
 8007340:	3b7f      	subs	r3, #127	; 0x7f
 8007342:	4413      	add	r3, r2
 8007344:	4a62      	ldr	r2, [pc, #392]	; (80074d0 <__ieee754_powf+0x3cc>)
 8007346:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800734a:	4294      	cmp	r4, r2
 800734c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007350:	dd06      	ble.n	8007360 <__ieee754_powf+0x25c>
 8007352:	4a60      	ldr	r2, [pc, #384]	; (80074d4 <__ieee754_powf+0x3d0>)
 8007354:	4294      	cmp	r4, r2
 8007356:	f340 80a5 	ble.w	80074a4 <__ieee754_powf+0x3a0>
 800735a:	3301      	adds	r3, #1
 800735c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007360:	2400      	movs	r4, #0
 8007362:	4a5d      	ldr	r2, [pc, #372]	; (80074d8 <__ieee754_powf+0x3d4>)
 8007364:	00a7      	lsls	r7, r4, #2
 8007366:	443a      	add	r2, r7
 8007368:	ee07 1a90 	vmov	s15, r1
 800736c:	ed92 7a00 	vldr	s14, [r2]
 8007370:	4a5a      	ldr	r2, [pc, #360]	; (80074dc <__ieee754_powf+0x3d8>)
 8007372:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007376:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800737a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800737e:	1049      	asrs	r1, r1, #1
 8007380:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007384:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007388:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800738c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8007390:	ee06 1a10 	vmov	s12, r1
 8007394:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8007398:	ee14 ca90 	vmov	ip, s9
 800739c:	ea02 0c0c 	and.w	ip, r2, ip
 80073a0:	ee05 ca10 	vmov	s10, ip
 80073a4:	eeb1 4a45 	vneg.f32	s8, s10
 80073a8:	eee4 5a06 	vfma.f32	s11, s8, s12
 80073ac:	ee36 6a47 	vsub.f32	s12, s12, s14
 80073b0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80074e0 <__ieee754_powf+0x3dc>
 80073b4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80073b8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80073bc:	eee4 5a06 	vfma.f32	s11, s8, s12
 80073c0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80073c4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80073c8:	eddf 5a46 	vldr	s11, [pc, #280]	; 80074e4 <__ieee754_powf+0x3e0>
 80073cc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80073d0:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074e8 <__ieee754_powf+0x3e4>
 80073d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80073d8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80074bc <__ieee754_powf+0x3b8>
 80073dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80073e0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80074ec <__ieee754_powf+0x3e8>
 80073e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80073e8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80074f0 <__ieee754_powf+0x3ec>
 80073ec:	ee75 6a24 	vadd.f32	s13, s10, s9
 80073f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80073f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80073f8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80073fc:	eef0 7a65 	vmov.f32	s15, s11
 8007400:	eee3 6a87 	vfma.f32	s13, s7, s14
 8007404:	eee5 7a05 	vfma.f32	s15, s10, s10
 8007408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740c:	ee17 1a90 	vmov	r1, s15
 8007410:	4011      	ands	r1, r2
 8007412:	ee07 1a90 	vmov	s15, r1
 8007416:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800741a:	eddf 5a36 	vldr	s11, [pc, #216]	; 80074f4 <__ieee754_powf+0x3f0>
 800741e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8007422:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007426:	ee27 7a24 	vmul.f32	s14, s14, s9
 800742a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800742e:	eeb0 6a47 	vmov.f32	s12, s14
 8007432:	eea5 6a27 	vfma.f32	s12, s10, s15
 8007436:	ee16 1a10 	vmov	r1, s12
 800743a:	4011      	ands	r1, r2
 800743c:	ee06 1a90 	vmov	s13, r1
 8007440:	eee4 6a27 	vfma.f32	s13, s8, s15
 8007444:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80074f8 <__ieee754_powf+0x3f4>
 8007448:	ee37 7a66 	vsub.f32	s14, s14, s13
 800744c:	ee06 1a10 	vmov	s12, r1
 8007450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007454:	eddf 7a29 	vldr	s15, [pc, #164]	; 80074fc <__ieee754_powf+0x3f8>
 8007458:	4929      	ldr	r1, [pc, #164]	; (8007500 <__ieee754_powf+0x3fc>)
 800745a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800745e:	4439      	add	r1, r7
 8007460:	edd1 7a00 	vldr	s15, [r1]
 8007464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef0 0a47 	vmov.f32	s1, s14
 8007470:	4b24      	ldr	r3, [pc, #144]	; (8007504 <__ieee754_powf+0x400>)
 8007472:	eee6 0a25 	vfma.f32	s1, s12, s11
 8007476:	443b      	add	r3, r7
 8007478:	ed93 5a00 	vldr	s10, [r3]
 800747c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007480:	ee70 0a85 	vadd.f32	s1, s1, s10
 8007484:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8007488:	ee17 3a90 	vmov	r3, s15
 800748c:	4013      	ands	r3, r2
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007496:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800749a:	eee6 7a65 	vfms.f32	s15, s12, s11
 800749e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074a2:	e70e      	b.n	80072c2 <__ieee754_powf+0x1be>
 80074a4:	2401      	movs	r4, #1
 80074a6:	e75c      	b.n	8007362 <__ieee754_powf+0x25e>
 80074a8:	08007934 	.word	0x08007934
 80074ac:	00000000 	.word	0x00000000
 80074b0:	3f7ffff7 	.word	0x3f7ffff7
 80074b4:	7149f2ca 	.word	0x7149f2ca
 80074b8:	3f800007 	.word	0x3f800007
 80074bc:	3eaaaaab 	.word	0x3eaaaaab
 80074c0:	36eca570 	.word	0x36eca570
 80074c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80074c8:	3fb8aa00 	.word	0x3fb8aa00
 80074cc:	4b800000 	.word	0x4b800000
 80074d0:	001cc471 	.word	0x001cc471
 80074d4:	005db3d6 	.word	0x005db3d6
 80074d8:	08007938 	.word	0x08007938
 80074dc:	fffff000 	.word	0xfffff000
 80074e0:	3e6c3255 	.word	0x3e6c3255
 80074e4:	3e53f142 	.word	0x3e53f142
 80074e8:	3e8ba305 	.word	0x3e8ba305
 80074ec:	3edb6db7 	.word	0x3edb6db7
 80074f0:	3f19999a 	.word	0x3f19999a
 80074f4:	3f763800 	.word	0x3f763800
 80074f8:	3f76384f 	.word	0x3f76384f
 80074fc:	369dc3a0 	.word	0x369dc3a0
 8007500:	08007948 	.word	0x08007948
 8007504:	08007940 	.word	0x08007940
 8007508:	3338aa3c 	.word	0x3338aa3c
 800750c:	f040 8092 	bne.w	8007634 <__ieee754_powf+0x530>
 8007510:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007508 <__ieee754_powf+0x404>
 8007514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007518:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800751c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007524:	f73f aef6 	bgt.w	8007314 <__ieee754_powf+0x210>
 8007528:	15db      	asrs	r3, r3, #23
 800752a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800752e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007532:	4103      	asrs	r3, r0
 8007534:	4423      	add	r3, r4
 8007536:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800753a:	4947      	ldr	r1, [pc, #284]	; (8007658 <__ieee754_powf+0x554>)
 800753c:	3a7f      	subs	r2, #127	; 0x7f
 800753e:	4111      	asrs	r1, r2
 8007540:	ea23 0101 	bic.w	r1, r3, r1
 8007544:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007548:	ee07 1a10 	vmov	s14, r1
 800754c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007550:	f1c2 0217 	rsb	r2, r2, #23
 8007554:	4110      	asrs	r0, r2
 8007556:	2c00      	cmp	r4, #0
 8007558:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800755c:	bfb8      	it	lt
 800755e:	4240      	neglt	r0, r0
 8007560:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007564:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800765c <__ieee754_powf+0x558>
 8007568:	ee17 3a10 	vmov	r3, s14
 800756c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007570:	f023 030f 	bic.w	r3, r3, #15
 8007574:	ee07 3a10 	vmov	s14, r3
 8007578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800757c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007580:	eddf 7a37 	vldr	s15, [pc, #220]	; 8007660 <__ieee754_powf+0x55c>
 8007584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007588:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800758c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007664 <__ieee754_powf+0x560>
 8007590:	eeb0 0a67 	vmov.f32	s0, s15
 8007594:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007598:	eeb0 6a40 	vmov.f32	s12, s0
 800759c:	eea7 6a66 	vfms.f32	s12, s14, s13
 80075a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80075a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80075a8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007668 <__ieee754_powf+0x564>
 80075ac:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800766c <__ieee754_powf+0x568>
 80075b0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80075b4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007670 <__ieee754_powf+0x56c>
 80075b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80075bc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007674 <__ieee754_powf+0x570>
 80075c0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80075c4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8007678 <__ieee754_powf+0x574>
 80075c8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80075cc:	eeb0 6a40 	vmov.f32	s12, s0
 80075d0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80075d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80075d8:	eeb0 7a46 	vmov.f32	s14, s12
 80075dc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80075e0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80075e4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80075e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80075ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80075f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80075f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80075fc:	ee10 3a10 	vmov	r3, s0
 8007600:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007608:	da1a      	bge.n	8007640 <__ieee754_powf+0x53c>
 800760a:	f000 f8b1 	bl	8007770 <scalbnf>
 800760e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007612:	e5c9      	b.n	80071a8 <__ieee754_powf+0xa4>
 8007614:	4a19      	ldr	r2, [pc, #100]	; (800767c <__ieee754_powf+0x578>)
 8007616:	4293      	cmp	r3, r2
 8007618:	dd02      	ble.n	8007620 <__ieee754_powf+0x51c>
 800761a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007680 <__ieee754_powf+0x57c>
 800761e:	e67b      	b.n	8007318 <__ieee754_powf+0x214>
 8007620:	d108      	bne.n	8007634 <__ieee754_powf+0x530>
 8007622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007626:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762e:	f6ff af7b 	blt.w	8007528 <__ieee754_powf+0x424>
 8007632:	e7f2      	b.n	800761a <__ieee754_powf+0x516>
 8007634:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007638:	f73f af76 	bgt.w	8007528 <__ieee754_powf+0x424>
 800763c:	2000      	movs	r0, #0
 800763e:	e78f      	b.n	8007560 <__ieee754_powf+0x45c>
 8007640:	ee00 3a10 	vmov	s0, r3
 8007644:	e7e3      	b.n	800760e <__ieee754_powf+0x50a>
 8007646:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800764a:	e5ad      	b.n	80071a8 <__ieee754_powf+0xa4>
 800764c:	eeb0 0a68 	vmov.f32	s0, s17
 8007650:	e5aa      	b.n	80071a8 <__ieee754_powf+0xa4>
 8007652:	eeb0 0a48 	vmov.f32	s0, s16
 8007656:	e5a7      	b.n	80071a8 <__ieee754_powf+0xa4>
 8007658:	007fffff 	.word	0x007fffff
 800765c:	3f317218 	.word	0x3f317218
 8007660:	35bfbe8c 	.word	0x35bfbe8c
 8007664:	3f317200 	.word	0x3f317200
 8007668:	3331bb4c 	.word	0x3331bb4c
 800766c:	b5ddea0e 	.word	0xb5ddea0e
 8007670:	388ab355 	.word	0x388ab355
 8007674:	bb360b61 	.word	0xbb360b61
 8007678:	3e2aaaab 	.word	0x3e2aaaab
 800767c:	43160000 	.word	0x43160000
 8007680:	0da24260 	.word	0x0da24260

08007684 <__ieee754_sqrtf>:
 8007684:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007688:	4770      	bx	lr

0800768a <matherr>:
 800768a:	2000      	movs	r0, #0
 800768c:	4770      	bx	lr

0800768e <fabsf>:
 800768e:	ee10 3a10 	vmov	r3, s0
 8007692:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007696:	ee00 3a10 	vmov	s0, r3
 800769a:	4770      	bx	lr

0800769c <finitef>:
 800769c:	ee10 3a10 	vmov	r3, s0
 80076a0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80076a4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80076a8:	bfac      	ite	ge
 80076aa:	2000      	movge	r0, #0
 80076ac:	2001      	movlt	r0, #1
 80076ae:	4770      	bx	lr

080076b0 <nanf>:
 80076b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80076b8 <nanf+0x8>
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	7fc00000 	.word	0x7fc00000

080076bc <rintf>:
 80076bc:	b513      	push	{r0, r1, r4, lr}
 80076be:	ee10 1a10 	vmov	r1, s0
 80076c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076c6:	0ddc      	lsrs	r4, r3, #23
 80076c8:	3c7f      	subs	r4, #127	; 0x7f
 80076ca:	2c16      	cmp	r4, #22
 80076cc:	dc46      	bgt.n	800775c <rintf+0xa0>
 80076ce:	b32b      	cbz	r3, 800771c <rintf+0x60>
 80076d0:	2c00      	cmp	r4, #0
 80076d2:	ee10 2a10 	vmov	r2, s0
 80076d6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80076da:	da21      	bge.n	8007720 <rintf+0x64>
 80076dc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80076e0:	425b      	negs	r3, r3
 80076e2:	4a21      	ldr	r2, [pc, #132]	; (8007768 <rintf+0xac>)
 80076e4:	0a5b      	lsrs	r3, r3, #9
 80076e6:	0d09      	lsrs	r1, r1, #20
 80076e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ec:	0509      	lsls	r1, r1, #20
 80076ee:	430b      	orrs	r3, r1
 80076f0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	edd2 6a00 	vldr	s13, [r2]
 80076fc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8007700:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007704:	eddd 7a01 	vldr	s15, [sp, #4]
 8007708:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800770c:	ee17 3a90 	vmov	r3, s15
 8007710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007714:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8007718:	ee00 3a10 	vmov	s0, r3
 800771c:	b002      	add	sp, #8
 800771e:	bd10      	pop	{r4, pc}
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <rintf+0xb0>)
 8007722:	4123      	asrs	r3, r4
 8007724:	4219      	tst	r1, r3
 8007726:	d0f9      	beq.n	800771c <rintf+0x60>
 8007728:	085b      	lsrs	r3, r3, #1
 800772a:	4219      	tst	r1, r3
 800772c:	d006      	beq.n	800773c <rintf+0x80>
 800772e:	ea21 0203 	bic.w	r2, r1, r3
 8007732:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007736:	fa43 f404 	asr.w	r4, r3, r4
 800773a:	4322      	orrs	r2, r4
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <rintf+0xac>)
 800773e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007742:	ed90 7a00 	vldr	s14, [r0]
 8007746:	ee07 2a90 	vmov	s15, r2
 800774a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800774e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007752:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007756:	ee30 0a47 	vsub.f32	s0, s0, s14
 800775a:	e7df      	b.n	800771c <rintf+0x60>
 800775c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007760:	d3dc      	bcc.n	800771c <rintf+0x60>
 8007762:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007766:	e7d9      	b.n	800771c <rintf+0x60>
 8007768:	08007950 	.word	0x08007950
 800776c:	007fffff 	.word	0x007fffff

08007770 <scalbnf>:
 8007770:	b508      	push	{r3, lr}
 8007772:	ee10 2a10 	vmov	r2, s0
 8007776:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800777a:	ed2d 8b02 	vpush	{d8}
 800777e:	eef0 0a40 	vmov.f32	s1, s0
 8007782:	d004      	beq.n	800778e <scalbnf+0x1e>
 8007784:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007788:	d306      	bcc.n	8007798 <scalbnf+0x28>
 800778a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800778e:	ecbd 8b02 	vpop	{d8}
 8007792:	eeb0 0a60 	vmov.f32	s0, s1
 8007796:	bd08      	pop	{r3, pc}
 8007798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800779c:	d21c      	bcs.n	80077d8 <scalbnf+0x68>
 800779e:	4b1f      	ldr	r3, [pc, #124]	; (800781c <scalbnf+0xac>)
 80077a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007820 <scalbnf+0xb0>
 80077a4:	4298      	cmp	r0, r3
 80077a6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80077aa:	db10      	blt.n	80077ce <scalbnf+0x5e>
 80077ac:	ee10 2a90 	vmov	r2, s1
 80077b0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80077b4:	3b19      	subs	r3, #25
 80077b6:	4403      	add	r3, r0
 80077b8:	2bfe      	cmp	r3, #254	; 0xfe
 80077ba:	dd0f      	ble.n	80077dc <scalbnf+0x6c>
 80077bc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007824 <scalbnf+0xb4>
 80077c0:	eeb0 0a48 	vmov.f32	s0, s16
 80077c4:	f000 f834 	bl	8007830 <copysignf>
 80077c8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80077cc:	e7df      	b.n	800778e <scalbnf+0x1e>
 80077ce:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007828 <scalbnf+0xb8>
 80077d2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80077d6:	e7da      	b.n	800778e <scalbnf+0x1e>
 80077d8:	0ddb      	lsrs	r3, r3, #23
 80077da:	e7ec      	b.n	80077b6 <scalbnf+0x46>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dd06      	ble.n	80077ee <scalbnf+0x7e>
 80077e0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80077e4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80077e8:	ee00 3a90 	vmov	s1, r3
 80077ec:	e7cf      	b.n	800778e <scalbnf+0x1e>
 80077ee:	f113 0f16 	cmn.w	r3, #22
 80077f2:	da06      	bge.n	8007802 <scalbnf+0x92>
 80077f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80077f8:	4298      	cmp	r0, r3
 80077fa:	dcdf      	bgt.n	80077bc <scalbnf+0x4c>
 80077fc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007828 <scalbnf+0xb8>
 8007800:	e7de      	b.n	80077c0 <scalbnf+0x50>
 8007802:	3319      	adds	r3, #25
 8007804:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007808:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800780c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800782c <scalbnf+0xbc>
 8007810:	ee07 3a10 	vmov	s14, r3
 8007814:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007818:	e7b9      	b.n	800778e <scalbnf+0x1e>
 800781a:	bf00      	nop
 800781c:	ffff3cb0 	.word	0xffff3cb0
 8007820:	4c000000 	.word	0x4c000000
 8007824:	7149f2ca 	.word	0x7149f2ca
 8007828:	0da24260 	.word	0x0da24260
 800782c:	33000000 	.word	0x33000000

08007830 <copysignf>:
 8007830:	ee10 3a10 	vmov	r3, s0
 8007834:	ee10 2a90 	vmov	r2, s1
 8007838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800783c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007840:	4313      	orrs	r3, r2
 8007842:	ee00 3a10 	vmov	s0, r3
 8007846:	4770      	bx	lr

08007848 <__errno>:
 8007848:	4b01      	ldr	r3, [pc, #4]	; (8007850 <__errno+0x8>)
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	200004a0 	.word	0x200004a0

08007854 <_init>:
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	bf00      	nop
 8007858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785a:	bc08      	pop	{r3}
 800785c:	469e      	mov	lr, r3
 800785e:	4770      	bx	lr

08007860 <_fini>:
 8007860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007862:	bf00      	nop
 8007864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007866:	bc08      	pop	{r3}
 8007868:	469e      	mov	lr, r3
 800786a:	4770      	bx	lr
