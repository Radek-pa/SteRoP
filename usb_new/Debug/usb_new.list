
usb_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e80  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800a018  0800a018  0001a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0c8  0800a0c8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0c8  0800a0c8  0001a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d0  0800a0d0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000117c  20000090  0800a168  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000120c  0800a168  0002120c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002973f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005406  00000000  00000000  000497ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d8  00000000  00000000  0004ec08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  000502e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d927  00000000  00000000  00051788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a739  00000000  00000000  0006f0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009319a  00000000  00000000  000897e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b0  00000000  00000000  0011ca00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a000 	.word	0x0800a000

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a000 	.word	0x0800a000

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b60      	ldr	r3, [pc, #384]	; (8000674 <MX_GPIO_Init+0x19c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a5f      	ldr	r2, [pc, #380]	; (8000674 <MX_GPIO_Init+0x19c>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b5d      	ldr	r3, [pc, #372]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b59      	ldr	r3, [pc, #356]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a58      	ldr	r2, [pc, #352]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b56      	ldr	r3, [pc, #344]	; (8000674 <MX_GPIO_Init+0x19c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b52      	ldr	r3, [pc, #328]	; (8000674 <MX_GPIO_Init+0x19c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a51      	ldr	r2, [pc, #324]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b4f      	ldr	r3, [pc, #316]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b4b      	ldr	r3, [pc, #300]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a4a      	ldr	r2, [pc, #296]	; (8000674 <MX_GPIO_Init+0x19c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b48      	ldr	r3, [pc, #288]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a43      	ldr	r2, [pc, #268]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a3c      	ldr	r2, [pc, #240]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <MX_GPIO_Init+0x19c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4837      	ldr	r0, [pc, #220]	; (8000678 <MX_GPIO_Init+0x1a0>)
 800059c:	f001 f816 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4835      	ldr	r0, [pc, #212]	; (800067c <MX_GPIO_Init+0x1a4>)
 80005a6:	f001 f811 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b0:	4833      	ldr	r0, [pc, #204]	; (8000680 <MX_GPIO_Init+0x1a8>)
 80005b2:	f001 f80b 	bl	80015cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b6:	2304      	movs	r3, #4
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	482b      	ldr	r0, [pc, #172]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005ca:	f000 fe7d 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4824      	ldr	r0, [pc, #144]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005e6:	f000 fe6f 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005ea:	2332      	movs	r3, #50	; 0x32
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <MX_GPIO_Init+0x1ac>)
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	481e      	ldr	r0, [pc, #120]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005fe:	f000 fe63 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <MX_GPIO_Init+0x1a4>)
 800061a:	f000 fe55 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0x1ac>)
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_GPIO_Init+0x1b0>)
 8000632:	f000 fe49 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000636:	f24f 0310 	movw	r3, #61456	; 0xf010
 800063a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_GPIO_Init+0x1a8>)
 8000650:	f000 fe3a 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_GPIO_Init+0x1a8>)
 8000668:	f000 fe2e 	bl	80012c8 <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40021000 	.word	0x40021000
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	10120000 	.word	0x10120000
 8000688:	40020000 	.word	0x40020000

0800068c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f002 fc89 	bl	8002fe0 <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 fa28 	bl	8000b28 <Error_Handler>
  }

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000f8 	.word	0x200000f8
 80006e0:	40005400 	.word	0x40005400
 80006e4:	000186a0 	.word	0x000186a0

080006e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_I2C_MspInit+0x84>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d12c      	bne.n	8000764 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000726:	f44f 7310 	mov.w	r3, #576	; 0x240
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000738:	2304      	movs	r3, #4
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <HAL_I2C_MspInit+0x8c>)
 8000744:	f000 fdc0 	bl	80012c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40005400 	.word	0x40005400
 8000770:	40023800 	.word	0x40023800
 8000774:	40020400 	.word	0x40020400

08000778 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2S2_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2S2_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2S2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2S2_Init+0x50>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <MX_I2S2_Init+0x58>)
 80007a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b6:	f002 fd4b 	bl	8003250 <HAL_I2S_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f9b2 	bl	8000b28 <Error_Handler>
  }

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000014c 	.word	0x2000014c
 80007cc:	40003800 	.word	0x40003800
 80007d0:	00017700 	.word	0x00017700

080007d4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2S3_Init+0x54>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_I2S3_Init+0x58>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_I2S3_Init+0x54>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_I2S3_Init+0x5c>)
 80007fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_I2S3_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2S3_Init+0x54>)
 8000814:	f002 fd1c 	bl	8003250 <HAL_I2S_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081e:	f000 f983 	bl	8000b28 <Error_Handler>
  }

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000194 	.word	0x20000194
 800082c:	40003c00 	.word	0x40003c00
 8000830:	00017700 	.word	0x00017700

08000834 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a59      	ldr	r2, [pc, #356]	; (80009b8 <HAL_I2S_MspInit+0x184>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d15b      	bne.n	800090e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	4b58      	ldr	r3, [pc, #352]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a57      	ldr	r2, [pc, #348]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b55      	ldr	r3, [pc, #340]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	623b      	str	r3, [r7, #32]
 8000870:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a50      	ldr	r2, [pc, #320]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a49      	ldr	r2, [pc, #292]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b47      	ldr	r3, [pc, #284]	; (80009bc <HAL_I2S_MspInit+0x188>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008aa:	2304      	movs	r3, #4
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008ba:	2306      	movs	r3, #6
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	483e      	ldr	r0, [pc, #248]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80008c6:	f000 fcff 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008da:	2305      	movs	r3, #5
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4836      	ldr	r0, [pc, #216]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80008e6:	f000 fcef 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fc:	2305      	movs	r3, #5
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	482f      	ldr	r0, [pc, #188]	; (80009c4 <HAL_I2S_MspInit+0x190>)
 8000908:	f000 fcde 	bl	80012c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800090c:	e04f      	b.n	80009ae <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <HAL_I2S_MspInit+0x194>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d14a      	bne.n	80009ae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800096c:	2310      	movs	r3, #16
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097c:	2306      	movs	r3, #6
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <HAL_I2S_MspInit+0x198>)
 8000988:	f000 fc9e 	bl	80012c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800098c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099e:	2306      	movs	r3, #6
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80009aa:	f000 fc8d 	bl	80012c8 <HAL_GPIO_Init>
}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40003800 	.word	0x40003800
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40003c00 	.word	0x40003c00
 80009cc:	40020000 	.word	0x40020000

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 facf 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f81f 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f7ff fd79 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009e6:	f7ff fe51 	bl	800068c <MX_I2C1_Init>
  MX_I2S2_Init();
 80009ea:	f7ff fec5 	bl	8000778 <MX_I2S2_Init>
  MX_I2S3_Init();
 80009ee:	f7ff fef1 	bl	80007d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009f2:	f000 f8a1 	bl	8000b38 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009f6:	f008 fb0d 	bl	8009014 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 80009fa:	f004 fdf9 	bl	80055f0 <MX_FATFS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009fe:	f008 fb2f 	bl	8009060 <MX_USB_HOST_Process>
    // BSP_AUDIO_IN_Record(wtext, sizeof(wtext));
    //Write_usb(wtext, sizeof(wtext));
    rFile = open_r("Name.TXT");
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <main+0x4c>)
 8000a04:	f008 fadc 	bl	8008fc0 <open_r>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000a0e:	f102 0204 	add.w	r2, r2, #4
 8000a12:	6013      	str	r3, [r2, #0]
    HAL_Delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f000 fb23 	bl	8001060 <HAL_Delay>
  {
 8000a1a:	e7f0      	b.n	80009fe <main+0x2e>
 8000a1c:	0800a018 	.word	0x0800a018

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09a      	sub	sp, #104	; 0x68
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f008 ffb3 	bl	800999a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <SystemClock_Config+0x100>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a30      	ldr	r2, [pc, #192]	; (8000b20 <SystemClock_Config+0x100>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <SystemClock_Config+0x100>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <SystemClock_Config+0x104>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a2a      	ldr	r2, [pc, #168]	; (8000b24 <SystemClock_Config+0x104>)
 8000a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <SystemClock_Config+0x104>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000aa6:	23c0      	movs	r3, #192	; 0xc0
 8000aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 f84c 	bl	8003b54 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 f831 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 faa6 	bl	8004034 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aee:	f000 f81b 	bl	8000b28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000af2:	2301      	movs	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000af6:	23c8      	movs	r3, #200	; 0xc8
 8000af8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000afa:	2305      	movs	r3, #5
 8000afc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fc72 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b12:	f000 f809 	bl	8000b28 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3768      	adds	r7, #104	; 0x68
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_SPI1_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b8a:	f003 fd7f 	bl	800468c <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b94:	f7ff ffc8 	bl	8000b28 <Error_Handler>
  }

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200001dc 	.word	0x200001dc
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_SPI_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12b      	bne.n	8000c1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bfe:	23e0      	movs	r3, #224	; 0xe0
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000c1a:	f000 fb55 	bl	80012c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40013000 	.word	0x40013000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c72:	2007      	movs	r0, #7
 8000c74:	f000 fae6 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f9a2 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <OTG_FS_IRQHandler+0x10>)
 8000ce6:	f000 ff19 	bl	8001b1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000f44 	.word	0x20000f44

08000cf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
	}

return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e009      	b.n	8000d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf1      	blt.n	8000d40 <_write+0x12>
	}
	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_close>:

int _close(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_isatty>:

int _isatty(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	return 1;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_open>:

int _open(char *path, int flags, ...)
{
 8000dce:	b40e      	push	{r1, r2, r3}
 8000dd0:	b480      	push	{r7}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	b003      	add	sp, #12
 8000de8:	4770      	bx	lr
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f008 fc3a 	bl	8009694 <__errno>
 8000e20:	4602      	mov	r2, r0
 8000e22:	230c      	movs	r3, #12
 8000e24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000800 	.word	0x00000800
 8000e50:	200000ac 	.word	0x200000ac
 8000e54:	20001210 	.word	0x20001210

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SystemInit+0x28>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <SystemInit+0x28>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SystemInit+0x28>)
 8000e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e72:	609a      	str	r2, [r3, #8]
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e8a:	e003      	b.n	8000e94 <LoopCopyDataInit>

08000e8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e92:	3104      	adds	r1, #4

08000e94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e9c:	d3f6      	bcc.n	8000e8c <CopyDataInit>
  ldr  r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ea0:	e002      	b.n	8000ea8 <LoopFillZerobss>

08000ea2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ea2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ea4:	f842 3b04 	str.w	r3, [r2], #4

08000ea8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eac:	d3f9      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eae:	f7ff ffd3 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f008 fccf 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fd8b 	bl	80009d0 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ec0:	0800a0d8 	.word	0x0800a0d8
  ldr  r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ec8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000ecc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000ed0:	2000120c 	.word	0x2000120c

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_I2S_TxCpltCallback+0x20>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8000eea:	f000 f807 	bl	8000efc <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40003c00 	.word	0x40003c00

08000efc <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8000f20:	f000 f804 	bl	8000f2c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_I2S_ErrorCallback+0x2c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8000f5a:	f7ff ffd6 	bl	8000f0a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_I2S_ErrorCallback+0x30>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8000f68:	f7ff ffe7 	bl	8000f3a <BSP_AUDIO_IN_Error_Callback>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40003c00 	.word	0x40003c00
 8000f78:	40003800 	.word	0x40003800

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94d 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fe40 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f965 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f92d 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	20000234 	.word	0x20000234

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000234 	.word	0x20000234

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_Delay+0x40>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e159      	b.n	8001598 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8148 	bne.w	8001592 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d00b      	beq.n	8001322 <HAL_GPIO_Init+0x5a>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001316:	2b11      	cmp	r3, #17
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b12      	cmp	r3, #18
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0xfc>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b12      	cmp	r3, #18
 80013c2:	d123      	bne.n	800140c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a2 	beq.w	8001592 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <HAL_GPIO_Init+0x2e4>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a55      	ldr	r2, [pc, #340]	; (80015ac <HAL_GPIO_Init+0x2e4>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <HAL_GPIO_Init+0x2e4>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146a:	4a51      	ldr	r2, [pc, #324]	; (80015b0 <HAL_GPIO_Init+0x2e8>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_GPIO_Init+0x2ec>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x202>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a47      	ldr	r2, [pc, #284]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x1fe>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a46      	ldr	r2, [pc, #280]	; (80015bc <HAL_GPIO_Init+0x2f4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x1fa>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a45      	ldr	r2, [pc, #276]	; (80015c0 <HAL_GPIO_Init+0x2f8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x1f6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <HAL_GPIO_Init+0x2fc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x1f2>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e008      	b.n	80014cc <HAL_GPIO_Init+0x204>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x204>
 80014be:	2303      	movs	r3, #3
 80014c0:	e004      	b.n	80014cc <HAL_GPIO_Init+0x204>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_Init+0x204>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_Init+0x204>
 80014ca:	2300      	movs	r3, #0
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	f002 0203 	and.w	r2, r2, #3
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	4093      	lsls	r3, r2
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014dc:	4934      	ldr	r1, [pc, #208]	; (80015b0 <HAL_GPIO_Init+0x2e8>)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <HAL_GPIO_Init+0x300>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150e:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <HAL_GPIO_Init+0x300>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <HAL_GPIO_Init+0x300>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001538:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <HAL_GPIO_Init+0x300>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_GPIO_Init+0x300>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_GPIO_Init+0x300>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_GPIO_Init+0x300>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_GPIO_Init+0x300>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3301      	adds	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	f67f aea2 	bls.w	80012e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a0:	bf00      	nop
 80015a2:	3724      	adds	r7, #36	; 0x24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e8:	e003      	b.n	80015f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001600:	b08f      	sub	sp, #60	; 0x3c
 8001602:	af0a      	add	r7, sp, #40	; 0x28
 8001604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e054      	b.n	80016ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f007 fd54 	bl	80090d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f003 f8f2 	bl	8004838 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	687e      	ldr	r6, [r7, #4]
 800165c:	466d      	mov	r5, sp
 800165e:	f106 0410 	add.w	r4, r6, #16
 8001662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800166e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001672:	1d33      	adds	r3, r6, #4
 8001674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001676:	6838      	ldr	r0, [r7, #0]
 8001678:	f003 f86c 	bl	8004754 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f003 f8e9 	bl	800485a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	687e      	ldr	r6, [r7, #4]
 8001690:	466d      	mov	r5, sp
 8001692:	f106 0410 	add.w	r4, r6, #16
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a6:	1d33      	adds	r3, r6, #4
 80016a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f003 f9fc 	bl	8004aa8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016c2:	b590      	push	{r4, r7, lr}
 80016c4:	b089      	sub	sp, #36	; 0x24
 80016c6:	af04      	add	r7, sp, #16
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	4608      	mov	r0, r1
 80016cc:	4611      	mov	r1, r2
 80016ce:	461a      	mov	r2, r3
 80016d0:	4603      	mov	r3, r0
 80016d2:	70fb      	strb	r3, [r7, #3]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70bb      	strb	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_HCD_HC_Init+0x28>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e07f      	b.n	80017ea <HAL_HCD_HC_Init+0x128>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	333d      	adds	r3, #61	; 0x3d
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	3338      	adds	r3, #56	; 0x38
 8001716:	787a      	ldrb	r2, [r7, #1]
 8001718:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3340      	adds	r3, #64	; 0x40
 800172a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800172c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	3339      	adds	r3, #57	; 0x39
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	333f      	adds	r3, #63	; 0x3f
 8001752:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001756:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	78bb      	ldrb	r3, [r7, #2]
 800175c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001760:	b2d8      	uxtb	r0, r3
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	333a      	adds	r3, #58	; 0x3a
 8001770:	4602      	mov	r2, r0
 8001772:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001778:	2b00      	cmp	r3, #0
 800177a:	da0a      	bge.n	8001792 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	333b      	adds	r3, #59	; 0x3b
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e009      	b.n	80017a6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	333b      	adds	r3, #59	; 0x3b
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	333c      	adds	r3, #60	; 0x3c
 80017b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	787c      	ldrb	r4, [r7, #1]
 80017c2:	78ba      	ldrb	r2, [r7, #2]
 80017c4:	78f9      	ldrb	r1, [r7, #3]
 80017c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	4623      	mov	r3, r4
 80017d8:	f003 fae8 	bl	8004dac <USB_HC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}

080017f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_HCD_HC_Halt+0x1e>
 800180c:	2302      	movs	r3, #2
 800180e:	e00f      	b.n	8001830 <HAL_HCD_HC_Halt+0x3e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fd24 	bl	800526e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4603      	mov	r3, r0
 8001848:	70fb      	strb	r3, [r7, #3]
 800184a:	460b      	mov	r3, r1
 800184c:	70bb      	strb	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	333b      	adds	r3, #59	; 0x3b
 8001862:	78ba      	ldrb	r2, [r7, #2]
 8001864:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	333f      	adds	r3, #63	; 0x3f
 8001876:	787a      	ldrb	r2, [r7, #1]
 8001878:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800187a:	7c3b      	ldrb	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d114      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2203      	movs	r2, #3
 8001892:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	333d      	adds	r3, #61	; 0x3d
 80018a4:	7f3a      	ldrb	r2, [r7, #28]
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e009      	b.n	80018be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	3342      	adds	r3, #66	; 0x42
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018be:	787b      	ldrb	r3, [r7, #1]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	f200 80d6 	bhi.w	8001a72 <HAL_HCD_HC_SubmitRequest+0x23a>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	08001a5d 	.word	0x08001a5d
 80018d4:	08001949 	.word	0x08001949
 80018d8:	080019d3 	.word	0x080019d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018dc:	7c3b      	ldrb	r3, [r7, #16]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 80c9 	bne.w	8001a76 <HAL_HCD_HC_SubmitRequest+0x23e>
 80018e4:	78bb      	ldrb	r3, [r7, #2]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80c5 	bne.w	8001a76 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80018ec:	8b3b      	ldrh	r3, [r7, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3351      	adds	r3, #81	; 0x51
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	3351      	adds	r3, #81	; 0x51
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3342      	adds	r3, #66	; 0x42
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001930:	e0a1      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	3342      	adds	r3, #66	; 0x42
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
      break;
 8001946:	e096      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d120      	bne.n	8001990 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	3351      	adds	r3, #81	; 0x51
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10a      	bne.n	800197a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3342      	adds	r3, #66	; 0x42
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001978:	e07e      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3342      	adds	r3, #66	; 0x42
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e073      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	3350      	adds	r3, #80	; 0x50
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10a      	bne.n	80019bc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	3342      	adds	r3, #66	; 0x42
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
      break;
 80019ba:	e05d      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	440b      	add	r3, r1
 80019ca:	3342      	adds	r3, #66	; 0x42
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
      break;
 80019d0:	e052      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019d2:	78bb      	ldrb	r3, [r7, #2]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d120      	bne.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	3351      	adds	r3, #81	; 0x51
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3342      	adds	r3, #66	; 0x42
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a02:	e039      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	3342      	adds	r3, #66	; 0x42
 8001a14:	2202      	movs	r2, #2
 8001a16:	701a      	strb	r2, [r3, #0]
      break;
 8001a18:	e02e      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	3350      	adds	r3, #80	; 0x50
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3342      	adds	r3, #66	; 0x42
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
      break;
 8001a44:	e018      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e00d      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	3342      	adds	r3, #66	; 0x42
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
      break;
 8001a70:	e002      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001a76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	3344      	adds	r3, #68	; 0x44
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	8b39      	ldrh	r1, [r7, #24]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4403      	add	r3, r0
 8001a9c:	3348      	adds	r3, #72	; 0x48
 8001a9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	335c      	adds	r3, #92	; 0x5c
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	334c      	adds	r3, #76	; 0x4c
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3339      	adds	r3, #57	; 0x39
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	335d      	adds	r3, #93	; 0x5d
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	3338      	adds	r3, #56	; 0x38
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	18d1      	adds	r1, r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f003 fa58 	bl	8004fc0 <USB_HC_StartXfer>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop

08001b1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 ff75 	bl	8004a22 <USB_GetMode>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	f040 80ef 	bne.w	8001d1e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 ff59 	bl	80049fc <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80e5 	beq.w	8001d1c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 ff50 	bl	80049fc <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b66:	d104      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 ff40 	bl	80049fc <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b86:	d104      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 ff30 	bl	80049fc <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ba6:	d104      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 ff20 	bl	80049fc <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d103      	bne.n	8001bce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 ff12 	bl	80049fc <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be2:	d115      	bne.n	8001c10 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f007 fae8 	bl	80091d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 f808 	bl	8004c20 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 fef1 	bl	80049fc <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d102      	bne.n	8001c2c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f001 f966 	bl	8002ef8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fee3 	bl	80049fc <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d106      	bne.n	8001c4e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f007 faab 	bl	800919c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 fed2 	bl	80049fc <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c62:	d138      	bne.n	8001cd6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 faef 	bl	800524c <USB_HC_ReadInterrupt>
 8001c6e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e025      	b.n	8001cc2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d018      	beq.n	8001cbc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8cf 	bl	8001e4c <HCD_HC_IN_IRQHandler>
 8001cae:	e005      	b.n	8001cbc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fcfd 	bl	80026b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3d4      	bcc.n	8001c76 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fe8e 	bl	80049fc <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d101      	bne.n	8001cee <HAL_HCD_IRQHandler+0x1d2>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_HCD_IRQHandler+0x1d4>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0210 	bic.w	r2, r2, #16
 8001d02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f001 f84b 	bl	8002da0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0210 	orr.w	r2, r2, #16
 8001d18:	619a      	str	r2, [r3, #24]
 8001d1a:	e000      	b.n	8001d1e <HAL_HCD_IRQHandler+0x202>
      return;
 8001d1c:	bf00      	nop
    }
  }
}
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_HCD_Start+0x16>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e013      	b.n	8001d62 <HAL_HCD_Start+0x3e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fd65 	bl	8004816 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 ffc8 	bl	8004ce8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_HCD_Stop+0x16>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e00d      	b.n	8001d9c <HAL_HCD_Stop+0x32>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fba9 	bl	80054e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 ff6f 	bl	8004c94 <USB_ResetPort>
 8001db6:	4603      	mov	r3, r0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	335c      	adds	r3, #92	; 0x5c
 8001ddc:	781b      	ldrb	r3, [r3, #0]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	334c      	adds	r3, #76	; 0x4c
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 ffb1 	bl	8004d88 <USB_GetCurrentFrame>
 8001e26:	4603      	mov	r3, r0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 ff8c 	bl	8004d5a <USB_GetHostSpeed>
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d119      	bne.n	8001eb0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	0151      	lsls	r1, r2, #5
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	60d3      	str	r3, [r2, #12]
 8001eae:	e0ce      	b.n	800204e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec6:	d12c      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	335d      	adds	r3, #93	; 0x5d
 8001eec:	2207      	movs	r2, #7
 8001eee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	0151      	lsls	r1, r2, #5
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	440a      	add	r2, r1
 8001f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 f9a7 	bl	800526e <USB_HC_Halt>
 8001f20:	e095      	b.n	800204e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d109      	bne.n	8001f4c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2320      	movs	r3, #32
 8001f48:	6093      	str	r3, [r2, #8]
 8001f4a:	e080      	b.n	800204e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d134      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	335d      	adds	r3, #93	; 0x5d
 8001f92:	2205      	movs	r2, #5
 8001f94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 f952 	bl	800526e <USB_HC_Halt>
 8001fca:	e040      	b.n	800204e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe2:	d134      	bne.n	800204e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	0151      	lsls	r1, r2, #5
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	440a      	add	r2, r1
 8001ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f003 f92d 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	2310      	movs	r3, #16
 8002024:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	335d      	adds	r3, #93	; 0x5d
 8002036:	2208      	movs	r2, #8
 8002038:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002064:	d122      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	0151      	lsls	r1, r2, #5
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	440a      	add	r2, r1
 800207c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f003 f8ec 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	461a      	mov	r2, r3
 80020a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020aa:	e300      	b.n	80026ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	f040 80fd 	bne.w	80022be <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01b      	beq.n	8002104 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	3348      	adds	r3, #72	; 0x48
 80020dc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	0159      	lsls	r1, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	440b      	add	r3, r1
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020f0:	1ad1      	subs	r1, r2, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4403      	add	r3, r0
 8002100:	334c      	adds	r3, #76	; 0x4c
 8002102:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	335d      	adds	r3, #93	; 0x5d
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	3358      	adds	r3, #88	; 0x58
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	461a      	mov	r2, r3
 800213a:	2301      	movs	r3, #1
 800213c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	333f      	adds	r3, #63	; 0x3f
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	333f      	adds	r3, #63	; 0x3f
 8002164:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002166:	2b02      	cmp	r3, #2
 8002168:	d121      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	0151      	lsls	r1, r2, #5
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	440a      	add	r2, r1
 8002180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f003 f86a 	bl	800526e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	461a      	mov	r2, r3
 80021a8:	2310      	movs	r3, #16
 80021aa:	6093      	str	r3, [r2, #8]
 80021ac:	e070      	b.n	8002290 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	333f      	adds	r3, #63	; 0x3f
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d12a      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	0151      	lsls	r1, r2, #5
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	440a      	add	r2, r1
 80021da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335c      	adds	r3, #92	; 0x5c
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	b2d8      	uxtb	r0, r3
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	335c      	adds	r3, #92	; 0x5c
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	4601      	mov	r1, r0
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f006 ffec 	bl	80091f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002218:	e03a      	b.n	8002290 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	333f      	adds	r3, #63	; 0x3f
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d12f      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3350      	adds	r3, #80	; 0x50
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	3350      	adds	r3, #80	; 0x50
 800226c:	4602      	mov	r2, r0
 800226e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	b2d8      	uxtb	r0, r3
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	335c      	adds	r3, #92	; 0x5c
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	4601      	mov	r1, r0
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f006 ffb0 	bl	80091f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	3350      	adds	r3, #80	; 0x50
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2d8      	uxtb	r0, r3
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	3350      	adds	r3, #80	; 0x50
 80022b8:	4602      	mov	r2, r0
 80022ba:	701a      	strb	r2, [r3, #0]
}
 80022bc:	e1f7      	b.n	80026ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f040 811a 	bne.w	800250a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	0151      	lsls	r1, r2, #5
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	440a      	add	r2, r1
 80022ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f0:	f023 0302 	bic.w	r3, r3, #2
 80022f4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	335d      	adds	r3, #93	; 0x5d
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10a      	bne.n	8002322 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e0d9      	b.n	80024d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	335d      	adds	r3, #93	; 0x5d
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d10a      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	335c      	adds	r3, #92	; 0x5c
 8002348:	2205      	movs	r2, #5
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e0c3      	b.n	80024d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	335d      	adds	r3, #93	; 0x5d
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d00a      	beq.n	800237a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	335d      	adds	r3, #93	; 0x5d
 8002374:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002376:	2b08      	cmp	r3, #8
 8002378:	d156      	bne.n	8002428 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	3358      	adds	r3, #88	; 0x58
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c59      	adds	r1, r3, #1
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4403      	add	r3, r0
 800239c:	3358      	adds	r3, #88	; 0x58
 800239e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	3358      	adds	r3, #88	; 0x58
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d914      	bls.n	80023e0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	3358      	adds	r3, #88	; 0x58
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	335c      	adds	r3, #92	; 0x5c
 80023da:	2204      	movs	r2, #4
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e009      	b.n	80023f4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	335c      	adds	r3, #92	; 0x5c
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800240a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002412:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e056      	b.n	80024d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	335d      	adds	r3, #93	; 0x5d
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d123      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	335c      	adds	r3, #92	; 0x5c
 800244e:	2202      	movs	r2, #2
 8002450:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002468:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002470:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e027      	b.n	80024d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	335d      	adds	r3, #93	; 0x5d
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b07      	cmp	r3, #7
 800249a:	d11c      	bne.n	80024d6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	3358      	adds	r3, #88	; 0x58
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4403      	add	r3, r0
 80024be:	3358      	adds	r3, #88	; 0x58
 80024c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	335c      	adds	r3, #92	; 0x5c
 80024d2:	2204      	movs	r2, #4
 80024d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	2302      	movs	r3, #2
 80024e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	b2d8      	uxtb	r0, r3
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	335c      	adds	r3, #92	; 0x5c
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4601      	mov	r1, r0
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f006 fe74 	bl	80091f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002508:	e0d1      	b.n	80026ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d13e      	bne.n	800259e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	0151      	lsls	r1, r2, #5
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	440a      	add	r2, r1
 8002536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3358      	adds	r3, #88	; 0x58
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4403      	add	r3, r0
 8002562:	3358      	adds	r3, #88	; 0x58
 8002564:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	335d      	adds	r3, #93	; 0x5d
 8002576:	2206      	movs	r2, #6
 8002578:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f002 fe72 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	6093      	str	r3, [r2, #8]
}
 800259c:	e087      	b.n	80026ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d17c      	bne.n	80026ae <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	333f      	adds	r3, #63	; 0x3f
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d122      	bne.n	8002610 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3358      	adds	r3, #88	; 0x58
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	0151      	lsls	r1, r2, #5
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	440a      	add	r2, r1
 80025f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fe30 	bl	800526e <USB_HC_Halt>
 800260e:	e045      	b.n	800269c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	333f      	adds	r3, #63	; 0x3f
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	333f      	adds	r3, #63	; 0x3f
 8002636:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002638:	2b02      	cmp	r3, #2
 800263a:	d12f      	bne.n	800269c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	3358      	adds	r3, #88	; 0x58
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d121      	bne.n	800269c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	335d      	adds	r3, #93	; 0x5d
 8002668:	2203      	movs	r2, #3
 800266a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	0151      	lsls	r1, r2, #5
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	440a      	add	r2, r1
 8002682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fde9 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2310      	movs	r3, #16
 80026ac:	6093      	str	r3, [r2, #8]
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d119      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	2304      	movs	r3, #4
 80026f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	440a      	add	r2, r1
 800270e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002718:	e33e      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b20      	cmp	r3, #32
 800272e:	d141      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	461a      	mov	r2, r3
 800273e:	2320      	movs	r3, #32
 8002740:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	333d      	adds	r3, #61	; 0x3d
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 831f 	bne.w	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	333d      	adds	r3, #61	; 0x3d
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	335c      	adds	r3, #92	; 0x5c
 800277e:	2202      	movs	r2, #2
 8002780:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	0151      	lsls	r1, r2, #5
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	440a      	add	r2, r1
 8002798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 fd5e 	bl	800526e <USB_HC_Halt>
}
 80027b2:	e2f1      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d13f      	bne.n	800284a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	335d      	adds	r3, #93	; 0x5d
 80027da:	2204      	movs	r2, #4
 80027dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	333d      	adds	r3, #61	; 0x3d
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	3358      	adds	r3, #88	; 0x58
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	440a      	add	r2, r1
 800281c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fd1c 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	2340      	movs	r3, #64	; 0x40
 8002846:	6093      	str	r3, [r2, #8]
}
 8002848:	e2a6      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d122      	bne.n	80028a8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	0151      	lsls	r1, r2, #5
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	440a      	add	r2, r1
 8002878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fcee 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	6093      	str	r3, [r2, #8]
}
 80028a6:	e277      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d135      	bne.n	800292a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	3358      	adds	r3, #88	; 0x58
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	0151      	lsls	r1, r2, #5
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	440a      	add	r2, r1
 80028e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fcb6 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	461a      	mov	r2, r3
 8002910:	2301      	movs	r3, #1
 8002912:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	335d      	adds	r3, #93	; 0x5d
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
}
 8002928:	e236      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b08      	cmp	r3, #8
 800293e:	d12b      	bne.n	8002998 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	461a      	mov	r2, r3
 800294e:	2308      	movs	r3, #8
 8002950:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	0151      	lsls	r1, r2, #5
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	440a      	add	r2, r1
 8002968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fc76 	bl	800526e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	335d      	adds	r3, #93	; 0x5d
 8002992:	2205      	movs	r2, #5
 8002994:	701a      	strb	r2, [r3, #0]
}
 8002996:	e1ff      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d155      	bne.n	8002a5a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	3358      	adds	r3, #88	; 0x58
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	335d      	adds	r3, #93	; 0x5d
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	333d      	adds	r3, #61	; 0x3d
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d114      	bne.n	8002a16 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	333c      	adds	r3, #60	; 0x3c
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	333d      	adds	r3, #61	; 0x3d
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	0151      	lsls	r1, r2, #5
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	440a      	add	r2, r1
 8002a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fc14 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	2310      	movs	r3, #16
 8002a56:	6093      	str	r3, [r2, #8]
}
 8002a58:	e19e      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d12b      	bne.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	0151      	lsls	r1, r2, #5
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	440a      	add	r2, r1
 8002a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 fbe7 	bl	800526e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	335d      	adds	r3, #93	; 0x5d
 8002ab0:	2206      	movs	r2, #6
 8002ab2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	6093      	str	r3, [r2, #8]
}
 8002ac6:	e167      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ade:	d135      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	0151      	lsls	r1, r2, #5
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	440a      	add	r2, r1
 8002af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 fbaf 	bl	800526e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2310      	movs	r3, #16
 8002b20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	335d      	adds	r3, #93	; 0x5d
 8002b46:	2208      	movs	r2, #8
 8002b48:	701a      	strb	r2, [r3, #0]
}
 8002b4a:	e125      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	f040 811a 	bne.w	8002d98 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7e:	f023 0302 	bic.w	r3, r3, #2
 8002b82:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	335d      	adds	r3, #93	; 0x5d
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d137      	bne.n	8002c0a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	335c      	adds	r3, #92	; 0x5c
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	333f      	adds	r3, #63	; 0x3f
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d00b      	beq.n	8002bdc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	333f      	adds	r3, #63	; 0x3f
 8002bd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	f040 80c5 	bne.w	8002d66 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3351      	adds	r3, #81	; 0x51
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	f083 0301 	eor.w	r3, r3, #1
 8002bf2:	b2d8      	uxtb	r0, r3
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3351      	adds	r3, #81	; 0x51
 8002c04:	4602      	mov	r2, r0
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e0ad      	b.n	8002d66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	335d      	adds	r3, #93	; 0x5d
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d10a      	bne.n	8002c36 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e097      	b.n	8002d66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	335d      	adds	r3, #93	; 0x5d
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d10a      	bne.n	8002c62 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e081      	b.n	8002d66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	335d      	adds	r3, #93	; 0x5d
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d10a      	bne.n	8002c8e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	335c      	adds	r3, #92	; 0x5c
 8002c88:	2205      	movs	r2, #5
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e06b      	b.n	8002d66 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	335d      	adds	r3, #93	; 0x5d
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d00a      	beq.n	8002cba <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	335d      	adds	r3, #93	; 0x5d
 8002cb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d155      	bne.n	8002d66 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3358      	adds	r3, #88	; 0x58
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	1c59      	adds	r1, r3, #1
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4403      	add	r3, r0
 8002cdc:	3358      	adds	r3, #88	; 0x58
 8002cde:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3358      	adds	r3, #88	; 0x58
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d914      	bls.n	8002d20 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3358      	adds	r3, #88	; 0x58
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	335c      	adds	r3, #92	; 0x5c
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e009      	b.n	8002d34 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	2202      	movs	r2, #2
 8002d32:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d4a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d52:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	2302      	movs	r3, #2
 8002d76:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	b2d8      	uxtb	r0, r3
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	335c      	adds	r3, #92	; 0x5c
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4601      	mov	r1, r0
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f006 fa2c 	bl	80091f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	0c5b      	lsrs	r3, r3, #17
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d003      	beq.n	8002de4 <HCD_RXQLVL_IRQHandler+0x44>
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	f000 8082 	beq.w	8002ee6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002de2:	e083      	b.n	8002eec <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d07f      	beq.n	8002eea <HCD_RXQLVL_IRQHandler+0x14a>
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	3344      	adds	r3, #68	; 0x44
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d074      	beq.n	8002eea <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3344      	adds	r3, #68	; 0x44
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f001 fdc5 	bl	80049aa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3344      	adds	r3, #68	; 0x44
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	18d1      	adds	r1, r2, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4403      	add	r3, r0
 8002e44:	3344      	adds	r3, #68	; 0x44
 8002e46:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	334c      	adds	r3, #76	; 0x4c
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	18d1      	adds	r1, r2, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4403      	add	r3, r0
 8002e6c:	334c      	adds	r3, #76	; 0x4c
 8002e6e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d031      	beq.n	8002eea <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3350      	adds	r3, #80	; 0x50
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	3350      	adds	r3, #80	; 0x50
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	701a      	strb	r2, [r3, #0]
      break;
 8002ee4:	e001      	b.n	8002eea <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002eea:	bf00      	nop
  }
}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	; 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	1ff80000 	.word	0x1ff80000

08002ef8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d10b      	bne.n	8002f48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f006 f93c 	bl	80091b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d132      	bne.n	8002fb8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d126      	bne.n	8002fb2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d113      	bne.n	8002f94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f76:	d106      	bne.n	8002f86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 fe4e 	bl	8004c20 <USB_InitFSLSPClkSel>
 8002f84:	e011      	b.n	8002faa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fe47 	bl	8004c20 <USB_InitFSLSPClkSel>
 8002f92:	e00a      	b.n	8002faa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fa8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f006 f92e 	bl	800920c <HAL_HCD_PortEnabled_Callback>
 8002fb0:	e002      	b.n	8002fb8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f006 f938 	bl	8009228 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d103      	bne.n	8002fca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f043 0320 	orr.w	r3, r3, #32
 8002fc8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	6013      	str	r3, [r2, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e11f      	b.n	8003232 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fb6e 	bl	80006e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	; 0x24
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003044:	f001 f9c0 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8003048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a7b      	ldr	r2, [pc, #492]	; (800323c <HAL_I2C_Init+0x25c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d807      	bhi.n	8003064 <HAL_I2C_Init+0x84>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a7a      	ldr	r2, [pc, #488]	; (8003240 <HAL_I2C_Init+0x260>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e006      	b.n	8003072 <HAL_I2C_Init+0x92>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a77      	ldr	r2, [pc, #476]	; (8003244 <HAL_I2C_Init+0x264>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0db      	b.n	8003232 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a72      	ldr	r2, [pc, #456]	; (8003248 <HAL_I2C_Init+0x268>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0c9b      	lsrs	r3, r3, #18
 8003084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a64      	ldr	r2, [pc, #400]	; (800323c <HAL_I2C_Init+0x25c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d802      	bhi.n	80030b4 <HAL_I2C_Init+0xd4>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3301      	adds	r3, #1
 80030b2:	e009      	b.n	80030c8 <HAL_I2C_Init+0xe8>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	4a63      	ldr	r2, [pc, #396]	; (800324c <HAL_I2C_Init+0x26c>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	3301      	adds	r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4956      	ldr	r1, [pc, #344]	; (800323c <HAL_I2C_Init+0x25c>)
 80030e4:	428b      	cmp	r3, r1
 80030e6:	d80d      	bhi.n	8003104 <HAL_I2C_Init+0x124>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e59      	subs	r1, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	bf38      	it	cc
 8003100:	2304      	movcc	r3, #4
 8003102:	e04f      	b.n	80031a4 <HAL_I2C_Init+0x1c4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d111      	bne.n	8003130 <HAL_I2C_Init+0x150>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e58      	subs	r0, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e012      	b.n	8003156 <HAL_I2C_Init+0x176>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	0099      	lsls	r1, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x17e>
 800315a:	2301      	movs	r3, #1
 800315c:	e022      	b.n	80031a4 <HAL_I2C_Init+0x1c4>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_I2C_Init+0x1a4>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e58      	subs	r0, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	440b      	add	r3, r1
 8003174:	fbb0 f3f3 	udiv	r3, r0, r3
 8003178:	3301      	adds	r3, #1
 800317a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Init+0x1c4>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	6809      	ldr	r1, [r1, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6911      	ldr	r1, [r2, #16]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	000186a0 	.word	0x000186a0
 8003240:	001e847f 	.word	0x001e847f
 8003244:	003d08ff 	.word	0x003d08ff
 8003248:	431bde83 	.word	0x431bde83
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e128      	b.n	80034b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a90      	ldr	r2, [pc, #576]	; (80034bc <HAL_I2S_Init+0x26c>)
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd fad9 	bl	8000834 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003298:	f023 030f 	bic.w	r3, r3, #15
 800329c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d060      	beq.n	8003370 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032b6:	2310      	movs	r3, #16
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e001      	b.n	80032c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d802      	bhi.n	80032ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ce:	2001      	movs	r0, #1
 80032d0:	f001 f97e 	bl	80045d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032de:	d125      	bne.n	800332c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	3305      	adds	r3, #5
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	e01f      	b.n	800334a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	fbb2 f2f3 	udiv	r2, r2, r3
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	3305      	adds	r3, #5
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	e00e      	b.n	800334a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	3305      	adds	r3, #5
 8003348:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_I2S_Init+0x270>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	08db      	lsrs	r3, r3, #3
 8003354:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e003      	b.n	8003378 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003370:	2302      	movs	r3, #2
 8003372:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d902      	bls.n	8003384 <HAL_I2S_Init+0x134>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2bff      	cmp	r3, #255	; 0xff
 8003382:	d907      	bls.n	8003394 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e08f      	b.n	80034b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	ea42 0103 	orr.w	r1, r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033b2:	f023 030f 	bic.w	r3, r3, #15
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6851      	ldr	r1, [r2, #4]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68d2      	ldr	r2, [r2, #12]
 80033c4:	4311      	orrs	r1, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6992      	ldr	r2, [r2, #24]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d161      	bne.n	80034a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a38      	ldr	r2, [pc, #224]	; (80034c4 <HAL_I2S_Init+0x274>)
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a37      	ldr	r2, [pc, #220]	; (80034c8 <HAL_I2S_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x1a4>
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x1a8>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4932      	ldr	r1, [pc, #200]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003400:	428a      	cmp	r2, r1
 8003402:	d101      	bne.n	8003408 <HAL_I2S_Init+0x1b8>
 8003404:	4a31      	ldr	r2, [pc, #196]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x1bc>
 8003408:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800340c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003410:	f023 030f 	bic.w	r3, r3, #15
 8003414:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_I2S_Init+0x278>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <HAL_I2S_Init+0x1d4>
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003422:	e001      	b.n	8003428 <HAL_I2S_Init+0x1d8>
 8003424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003428:	2202      	movs	r2, #2
 800342a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_I2S_Init+0x1ea>
 8003436:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003438:	e001      	b.n	800343e <HAL_I2S_Init+0x1ee>
 800343a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344a:	d003      	beq.n	8003454 <HAL_I2S_Init+0x204>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e001      	b.n	8003460 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	b299      	uxth	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003476:	4303      	orrs	r3, r0
 8003478:	b29b      	uxth	r3, r3
 800347a:	430b      	orrs	r3, r1
 800347c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800347e:	4313      	orrs	r3, r2
 8003480:	b29a      	uxth	r2, r3
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	4313      	orrs	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800348c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_I2S_Init+0x24c>
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_I2S_Init+0x27c>)
 800349a:	e001      	b.n	80034a0 <HAL_I2S_Init+0x250>
 800349c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a0:	897a      	ldrh	r2, [r7, #10]
 80034a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	0800358b 	.word	0x0800358b
 80034c0:	cccccccd 	.word	0xcccccccd
 80034c4:	080036a1 	.word	0x080036a1
 80034c8:	40003800 	.word	0x40003800
 80034cc:	40003400 	.word	0x40003400

080034d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10e      	bne.n	8003524 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003514:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fcda 	bl	8000ed8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	b292      	uxth	r2, r2
 8003540:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	1c9a      	adds	r2, r3, #2
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10e      	bne.n	8003582 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003572:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fd fccb 	bl	8000f18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d13a      	bne.n	800361c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d109      	bne.n	80035c4 <I2S_IRQHandler+0x3a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d102      	bne.n	80035c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ffb4 	bl	800352c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d126      	bne.n	800361c <I2S_IRQHandler+0x92>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d11f      	bne.n	800361c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fc96 	bl	8000f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b03      	cmp	r3, #3
 8003626:	d136      	bne.n	8003696 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d109      	bne.n	8003646 <I2S_IRQHandler+0xbc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d102      	bne.n	8003646 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff45 	bl	80034d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d122      	bne.n	8003696 <I2S_IRQHandler+0x10c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d11b      	bne.n	8003696 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800366c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fd fc59 	bl	8000f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4aa2      	ldr	r2, [pc, #648]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036ba:	4ba2      	ldr	r3, [pc, #648]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036bc:	e001      	b.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a9b      	ldr	r2, [pc, #620]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036d8:	4b9a      	ldr	r3, [pc, #616]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036da:	e001      	b.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ec:	d004      	beq.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 8099 	bne.w	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d107      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f925 	bl	800395c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f9c8 	bl	8003abc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d13a      	bne.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d035      	beq.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a7e      	ldr	r2, [pc, #504]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800374a:	4b7e      	ldr	r3, [pc, #504]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800374c:	e001      	b.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800374e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4979      	ldr	r1, [pc, #484]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800375a:	428b      	cmp	r3, r1
 800375c:	d101      	bne.n	8003762 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800375e:	4b79      	ldr	r3, [pc, #484]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003760:	e001      	b.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800376a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800377a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd fbce 	bl	8000f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	f040 80be 	bne.w	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80b8 	beq.w	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a59      	ldr	r2, [pc, #356]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037de:	4b59      	ldr	r3, [pc, #356]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e0:	e001      	b.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4954      	ldr	r1, [pc, #336]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ee:	428b      	cmp	r3, r1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037f2:	4b54      	ldr	r3, [pc, #336]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f4:	e001      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fb90 	bl	8000f48 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003828:	e084      	b.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d107      	bne.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8be 	bl	80039c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8fd 	bl	8003a58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d12f      	bne.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02a      	beq.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003880:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800388c:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800388e:	e001      	b.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4929      	ldr	r1, [pc, #164]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d101      	bne.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038a2:	e001      	b.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fb40 	bl	8000f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d131      	bne.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02c      	beq.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a17      	ldr	r2, [pc, #92]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038e6:	4b17      	ldr	r3, [pc, #92]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038e8:	e001      	b.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4912      	ldr	r1, [pc, #72]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038f6:	428b      	cmp	r3, r1
 80038f8:	d101      	bne.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038fc:	e001      	b.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003906:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003916:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f043 0204 	orr.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fd fb0b 	bl	8000f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003932:	e000      	b.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003934:	bf00      	nop
}
 8003936:	bf00      	nop
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40003800 	.word	0x40003800
 8003944:	40003400 	.word	0x40003400

08003948 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c99      	adds	r1, r3, #2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6251      	str	r1, [r2, #36]	; 0x24
 800396e:	881a      	ldrh	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d113      	bne.n	80039b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ffc9 	bl	8003948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	1c99      	adds	r1, r3, #2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6251      	str	r1, [r2, #36]	; 0x24
 80039d2:	8819      	ldrh	r1, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <I2SEx_TxISR_I2SExt+0x90>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <I2SEx_TxISR_I2SExt+0x22>
 80039de:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <I2SEx_TxISR_I2SExt+0x94>)
 80039e0:	e001      	b.n	80039e6 <I2SEx_TxISR_I2SExt+0x26>
 80039e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e6:	460a      	mov	r2, r1
 80039e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d121      	bne.n	8003a46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <I2SEx_TxISR_I2SExt+0x90>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <I2SEx_TxISR_I2SExt+0x50>
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <I2SEx_TxISR_I2SExt+0x94>)
 8003a0e:	e001      	b.n	8003a14 <I2SEx_TxISR_I2SExt+0x54>
 8003a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	490d      	ldr	r1, [pc, #52]	; (8003a50 <I2SEx_TxISR_I2SExt+0x90>)
 8003a1c:	428b      	cmp	r3, r1
 8003a1e:	d101      	bne.n	8003a24 <I2SEx_TxISR_I2SExt+0x64>
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <I2SEx_TxISR_I2SExt+0x94>)
 8003a22:	e001      	b.n	8003a28 <I2SEx_TxISR_I2SExt+0x68>
 8003a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff81 	bl	8003948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40003800 	.word	0x40003800
 8003a54:	40003400 	.word	0x40003400

08003a58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68d8      	ldr	r0, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	1c99      	adds	r1, r3, #2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a70:	b282      	uxth	r2, r0
 8003a72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d113      	bne.n	8003ab4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ff4a 	bl	8003948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <I2SEx_RxISR_I2SExt+0x90>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <I2SEx_RxISR_I2SExt+0x16>
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <I2SEx_RxISR_I2SExt+0x94>)
 8003ad0:	e001      	b.n	8003ad6 <I2SEx_RxISR_I2SExt+0x1a>
 8003ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad6:	68d8      	ldr	r0, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	1c99      	adds	r1, r3, #2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ae2:	b282      	uxth	r2, r0
 8003ae4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d121      	bne.n	8003b42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <I2SEx_RxISR_I2SExt+0x90>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <I2SEx_RxISR_I2SExt+0x50>
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <I2SEx_RxISR_I2SExt+0x94>)
 8003b0a:	e001      	b.n	8003b10 <I2SEx_RxISR_I2SExt+0x54>
 8003b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	490d      	ldr	r1, [pc, #52]	; (8003b4c <I2SEx_RxISR_I2SExt+0x90>)
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	d101      	bne.n	8003b20 <I2SEx_RxISR_I2SExt+0x64>
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <I2SEx_RxISR_I2SExt+0x94>)
 8003b1e:	e001      	b.n	8003b24 <I2SEx_RxISR_I2SExt+0x68>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff03 	bl	8003948 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40003800 	.word	0x40003800
 8003b50:	40003400 	.word	0x40003400

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e25b      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d075      	beq.n	8003c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b72:	4ba3      	ldr	r3, [pc, #652]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00c      	beq.n	8003b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7e:	4ba0      	ldr	r3, [pc, #640]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d112      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b9d      	ldr	r3, [pc, #628]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	4b99      	ldr	r3, [pc, #612]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05b      	beq.n	8003c5c <HAL_RCC_OscConfig+0x108>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d157      	bne.n	8003c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e236      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x74>
 8003bba:	4b91      	ldr	r3, [pc, #580]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a90      	ldr	r2, [pc, #576]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e01d      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x98>
 8003bd2:	4b8b      	ldr	r3, [pc, #556]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a8a      	ldr	r2, [pc, #552]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a87      	ldr	r2, [pc, #540]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bec:	4b84      	ldr	r3, [pc, #528]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a83      	ldr	r2, [pc, #524]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a80      	ldr	r2, [pc, #512]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fa1c 	bl	8001048 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fd fa18 	bl	8001048 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1fb      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0xc0>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd fa08 	bl	8001048 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fa04 	bl	8001048 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1e7      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4e:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0xe8>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d063      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6a:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d116      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	4b5c      	ldr	r3, [pc, #368]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1bb      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b56      	ldr	r3, [pc, #344]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4952      	ldr	r1, [pc, #328]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	e03a      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b4f      	ldr	r3, [pc, #316]	; (8003e04 <HAL_RCC_OscConfig+0x2b0>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fd f9bd 	bl	8001048 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fd f9b9 	bl	8001048 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e19c      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4940      	ldr	r1, [pc, #256]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCC_OscConfig+0x2b0>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f99c 	bl	8001048 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fd f998 	bl	8001048 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e17b      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d030      	beq.n	8003da0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <HAL_RCC_OscConfig+0x2b4>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fd f97c 	bl	8001048 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fd f978 	bl	8001048 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e15b      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x200>
 8003d72:	e015      	b.n	8003da0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCC_OscConfig+0x2b4>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fd f965 	bl	8001048 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fd f961 	bl	8001048 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e144      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a0 	beq.w	8003eee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10f      	bne.n	8003dde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_OscConfig+0x2b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d121      	bne.n	8003e2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <HAL_RCC_OscConfig+0x2b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a07      	ldr	r2, [pc, #28]	; (8003e0c <HAL_RCC_OscConfig+0x2b8>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df6:	f7fd f927 	bl	8001048 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	e011      	b.n	8003e22 <HAL_RCC_OscConfig+0x2ce>
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	42470000 	.word	0x42470000
 8003e08:	42470e80 	.word	0x42470e80
 8003e0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fd f91a 	bl	8001048 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0fd      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b81      	ldr	r3, [pc, #516]	; (8004028 <HAL_RCC_OscConfig+0x4d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x2f0>
 8003e36:	4b7d      	ldr	r3, [pc, #500]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a7c      	ldr	r2, [pc, #496]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
 8003e42:	e01c      	b.n	8003e7e <HAL_RCC_OscConfig+0x32a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d10c      	bne.n	8003e66 <HAL_RCC_OscConfig+0x312>
 8003e4c:	4b77      	ldr	r3, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a76      	ldr	r2, [pc, #472]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	4b74      	ldr	r3, [pc, #464]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a73      	ldr	r2, [pc, #460]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	e00b      	b.n	8003e7e <HAL_RCC_OscConfig+0x32a>
 8003e66:	4b71      	ldr	r3, [pc, #452]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a70      	ldr	r2, [pc, #448]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	4b6e      	ldr	r3, [pc, #440]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a6d      	ldr	r2, [pc, #436]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d015      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fd f8df 	bl	8001048 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd f8db 	bl	8001048 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0bc      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	4b61      	ldr	r3, [pc, #388]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ee      	beq.n	8003e8e <HAL_RCC_OscConfig+0x33a>
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb2:	f7fd f8c9 	bl	8001048 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd f8c5 	bl	8001048 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0a6      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed0:	4b56      	ldr	r3, [pc, #344]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ee      	bne.n	8003eba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee2:	4b52      	ldr	r3, [pc, #328]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a51      	ldr	r2, [pc, #324]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8092 	beq.w	800401c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d05c      	beq.n	8003fbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d141      	bne.n	8003f90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <HAL_RCC_OscConfig+0x4dc>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fd f899 	bl	8001048 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fd f895 	bl	8001048 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e078      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2c:	4b3f      	ldr	r3, [pc, #252]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	019b      	lsls	r3, r3, #6
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	3b01      	subs	r3, #1
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	061b      	lsls	r3, r3, #24
 8003f5c:	4933      	ldr	r1, [pc, #204]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f62:	4b33      	ldr	r3, [pc, #204]	; (8004030 <HAL_RCC_OscConfig+0x4dc>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd f86e 	bl	8001048 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd f86a 	bl	8001048 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e04d      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x41c>
 8003f8e:	e045      	b.n	800401c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f90:	4b27      	ldr	r3, [pc, #156]	; (8004030 <HAL_RCC_OscConfig+0x4dc>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f96:	f7fd f857 	bl	8001048 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fd f853 	bl	8001048 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e036      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0x44a>
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e029      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fca:	4b18      	ldr	r3, [pc, #96]	; (800402c <HAL_RCC_OscConfig+0x4d8>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d11c      	bne.n	8004018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d115      	bne.n	8004018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d10d      	bne.n	8004018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d106      	bne.n	8004018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40007000 	.word	0x40007000
 800402c:	40023800 	.word	0x40023800
 8004030:	42470060 	.word	0x42470060

08004034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0cc      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004048:	4b68      	ldr	r3, [pc, #416]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d90c      	bls.n	8004070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b65      	ldr	r3, [pc, #404]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0b8      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004088:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a52      	ldr	r2, [pc, #328]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	494d      	ldr	r1, [pc, #308]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d044      	beq.n	8004154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d119      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e07f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e06f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e067      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004112:	4b37      	ldr	r3, [pc, #220]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4934      	ldr	r1, [pc, #208]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004124:	f7fc ff90 	bl	8001048 <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	e00a      	b.n	8004142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fc ff8c 	bl	8001048 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	; 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e04f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 020c 	and.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	429a      	cmp	r2, r3
 8004152:	d1eb      	bne.n	800412c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004154:	4b25      	ldr	r3, [pc, #148]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d20c      	bcs.n	800417c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e032      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4916      	ldr	r1, [pc, #88]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	490e      	ldr	r1, [pc, #56]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ba:	f000 f821 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80041be:	4601      	mov	r1, r0
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	fa21 f303 	lsr.w	r3, r1, r3
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc fef0 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023c00 	.word	0x40023c00
 80041f0:	40023800 	.word	0x40023800
 80041f4:	0800a038 	.word	0x0800a038
 80041f8:	20000000 	.word	0x20000000
 80041fc:	20000004 	.word	0x20000004

08004200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	2300      	movs	r3, #0
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004216:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b04      	cmp	r3, #4
 8004220:	d007      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x32>
 8004222:	2b08      	cmp	r3, #8
 8004224:	d008      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x38>
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 80b4 	bne.w	8004394 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4b5e      	ldr	r3, [pc, #376]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800422e:	60bb      	str	r3, [r7, #8]
       break;
 8004230:	e0b3      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004234:	60bb      	str	r3, [r7, #8]
      break;
 8004236:	e0b0      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004242:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d04a      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	4b55      	ldr	r3, [pc, #340]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	f04f 0400 	mov.w	r4, #0
 8004258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	ea03 0501 	and.w	r5, r3, r1
 8004264:	ea04 0602 	and.w	r6, r4, r2
 8004268:	4629      	mov	r1, r5
 800426a:	4632      	mov	r2, r6
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	0154      	lsls	r4, r2, #5
 8004276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800427a:	014b      	lsls	r3, r1, #5
 800427c:	4619      	mov	r1, r3
 800427e:	4622      	mov	r2, r4
 8004280:	1b49      	subs	r1, r1, r5
 8004282:	eb62 0206 	sbc.w	r2, r2, r6
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	f04f 0400 	mov.w	r4, #0
 800428e:	0194      	lsls	r4, r2, #6
 8004290:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004294:	018b      	lsls	r3, r1, #6
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	eb64 0402 	sbc.w	r4, r4, r2
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	00e2      	lsls	r2, r4, #3
 80042a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042aa:	00d9      	lsls	r1, r3, #3
 80042ac:	460b      	mov	r3, r1
 80042ae:	4614      	mov	r4, r2
 80042b0:	195b      	adds	r3, r3, r5
 80042b2:	eb44 0406 	adc.w	r4, r4, r6
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	0262      	lsls	r2, r4, #9
 80042c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042c4:	0259      	lsls	r1, r3, #9
 80042c6:	460b      	mov	r3, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	4621      	mov	r1, r4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	f7fb ff7e 	bl	80001d8 <__aeabi_uldivmod>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	e049      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e4:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	099b      	lsrs	r3, r3, #6
 80042ea:	f04f 0400 	mov.w	r4, #0
 80042ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	ea03 0501 	and.w	r5, r3, r1
 80042fa:	ea04 0602 	and.w	r6, r4, r2
 80042fe:	4629      	mov	r1, r5
 8004300:	4632      	mov	r2, r6
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	0154      	lsls	r4, r2, #5
 800430c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004310:	014b      	lsls	r3, r1, #5
 8004312:	4619      	mov	r1, r3
 8004314:	4622      	mov	r2, r4
 8004316:	1b49      	subs	r1, r1, r5
 8004318:	eb62 0206 	sbc.w	r2, r2, r6
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	f04f 0400 	mov.w	r4, #0
 8004324:	0194      	lsls	r4, r2, #6
 8004326:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	1a5b      	subs	r3, r3, r1
 800432e:	eb64 0402 	sbc.w	r4, r4, r2
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	00e2      	lsls	r2, r4, #3
 800433c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004340:	00d9      	lsls	r1, r3, #3
 8004342:	460b      	mov	r3, r1
 8004344:	4614      	mov	r4, r2
 8004346:	195b      	adds	r3, r3, r5
 8004348:	eb44 0406 	adc.w	r4, r4, r6
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	02a2      	lsls	r2, r4, #10
 8004356:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800435a:	0299      	lsls	r1, r3, #10
 800435c:	460b      	mov	r3, r1
 800435e:	4614      	mov	r4, r2
 8004360:	4618      	mov	r0, r3
 8004362:	4621      	mov	r1, r4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f04f 0400 	mov.w	r4, #0
 800436a:	461a      	mov	r2, r3
 800436c:	4623      	mov	r3, r4
 800436e:	f7fb ff33 	bl	80001d8 <__aeabi_uldivmod>
 8004372:	4603      	mov	r3, r0
 8004374:	460c      	mov	r4, r1
 8004376:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	60bb      	str	r3, [r7, #8]
      break;
 8004392:	e002      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004396:	60bb      	str	r3, [r7, #8]
      break;
 8004398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439a:	68bb      	ldr	r3, [r7, #8]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000000 	.word	0x20000000

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043cc:	f7ff fff0 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043d0:	4601      	mov	r1, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0a9b      	lsrs	r3, r3, #10
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4a03      	ldr	r2, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	0800a048 	.word	0x0800a048

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004414:	2b00      	cmp	r3, #0
 8004416:	d038      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004418:	4b68      	ldr	r3, [pc, #416]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800441e:	f7fc fe13 	bl	8001048 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004426:	f7fc fe0f 	bl	8001048 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0bd      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004438:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	019b      	lsls	r3, r3, #6
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	495a      	ldr	r1, [pc, #360]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800445e:	4b57      	ldr	r3, [pc, #348]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004464:	f7fc fdf0 	bl	8001048 <HAL_GetTick>
 8004468:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800446a:	e008      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800446c:	f7fc fdec 	bl	8001048 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e09a      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800447e:	4b50      	ldr	r3, [pc, #320]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8083 	beq.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	4b48      	ldr	r3, [pc, #288]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	4a47      	ldr	r2, [pc, #284]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6413      	str	r3, [r2, #64]	; 0x40
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a42      	ldr	r2, [pc, #264]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044c0:	f7fc fdc2 	bl	8001048 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fc fdbe 	bl	8001048 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e06c      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044da:	4b3a      	ldr	r3, [pc, #232]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e6:	4b36      	ldr	r3, [pc, #216]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02f      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d028      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004504:	4b2e      	ldr	r3, [pc, #184]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450e:	4b2e      	ldr	r3, [pc, #184]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004514:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800451a:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d114      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800452c:	f7fc fd8c 	bl	8001048 <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	e00a      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fc fd88 	bl	8001048 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e034      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ee      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004562:	d10d      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004564:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004578:	4911      	ldr	r1, [pc, #68]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
 800457e:	e005      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800458a:	6093      	str	r3, [r2, #8]
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004598:	4909      	ldr	r1, [pc, #36]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	7d1a      	ldrb	r2, [r3, #20]
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80045b0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	42470068 	.word	0x42470068
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40007000 	.word	0x40007000
 80045c8:	42470e40 	.word	0x42470e40
 80045cc:	424711e0 	.word	0x424711e0

080045d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d13f      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045ee:	4b23      	ldr	r3, [pc, #140]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d131      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004602:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004604:	617b      	str	r3, [r7, #20]
          break;
 8004606:	e031      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004608:	4b1c      	ldr	r3, [pc, #112]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004614:	d109      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004616:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004620:	4a18      	ldr	r2, [pc, #96]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004622:	fbb2 f3f3 	udiv	r3, r2, r3
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	e008      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800462a:	4b14      	ldr	r3, [pc, #80]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800463e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004656:	0f1b      	lsrs	r3, r3, #28
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
          break;
 8004664:	e002      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
          break;
 800466a:	bf00      	nop
        }
      }
      break;
 800466c:	bf00      	nop
    }
  }
  return frequency;
 800466e:	697b      	ldr	r3, [r7, #20]
}
 8004670:	4618      	mov	r0, r3
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40023800 	.word	0x40023800
 8004680:	00bb8000 	.word	0x00bb8000
 8004684:	007a1200 	.word	0x007a1200
 8004688:	00f42400 	.word	0x00f42400

0800468c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e056      	b.n	800474c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fc fa73 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	ea42 0103 	orr.w	r1, r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	f003 0104 	and.w	r1, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004754:	b084      	sub	sp, #16
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	f107 001c 	add.w	r0, r7, #28
 8004762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	2b01      	cmp	r3, #1
 800476a:	d122      	bne.n	80047b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f94a 	bl	8004a40 <USB_CoreReset>
 80047ac:	4603      	mov	r3, r0
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e01a      	b.n	80047e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f93e 	bl	8004a40 <USB_CoreReset>
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
 80047da:	e005      	b.n	80047e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10b      	bne.n	8004806 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f043 0206 	orr.w	r2, r3, #6
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004812:	b004      	add	sp, #16
 8004814:	4770      	bx	lr

08004816 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 0201 	bic.w	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	460b      	mov	r3, r1
 8004864:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	e00b      	b.n	800489e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	e001      	b.n	800489e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e003      	b.n	80048a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800489e:	2032      	movs	r0, #50	; 0x32
 80048a0:	f7fc fbde 	bl	8001060 <HAL_Delay>

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <USB_FlushTxFifo+0x48>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d0f0      	beq.n	80048ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	00030d40 	.word	0x00030d40

080048fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2210      	movs	r2, #16
 800490c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3301      	adds	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <USB_FlushRxFifo+0x40>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e006      	b.n	800492e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b10      	cmp	r3, #16
 800492a:	d0f0      	beq.n	800490e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	00030d40 	.word	0x00030d40

08004940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	4611      	mov	r1, r2
 800494c:	461a      	mov	r2, r3
 800494e:	460b      	mov	r3, r1
 8004950:	71fb      	strb	r3, [r7, #7]
 8004952:	4613      	mov	r3, r2
 8004954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800495e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d11a      	bne.n	800499c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004966:	88bb      	ldrh	r3, [r7, #4]
 8004968:	3303      	adds	r3, #3
 800496a:	089b      	lsrs	r3, r3, #2
 800496c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e00f      	b.n	8004994 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	031a      	lsls	r2, r3, #12
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	461a      	mov	r2, r3
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3304      	adds	r3, #4
 800498c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	3301      	adds	r3, #1
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d3eb      	bcc.n	8004974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b089      	sub	sp, #36	; 0x24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	4613      	mov	r3, r2
 80049b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	3303      	adds	r3, #3
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e00b      	b.n	80049e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3304      	adds	r3, #4
 80049de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d3ef      	bcc.n	80049ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80049ee:	69fb      	ldr	r3, [r7, #28]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3724      	adds	r7, #36	; 0x24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4013      	ands	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a13      	ldr	r2, [pc, #76]	; (8004aa4 <USB_CoreReset+0x64>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e01b      	b.n	8004a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	daf2      	bge.n	8004a4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f043 0201 	orr.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <USB_CoreReset+0x64>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e006      	b.n	8004a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d0f0      	beq.n	8004a76 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	00030d40 	.word	0x00030d40

08004aa8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	f107 001c 	add.w	r0, r7, #28
 8004ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d018      	beq.n	8004b2c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10a      	bne.n	8004b16 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b0e:	f043 0304 	orr.w	r3, r3, #4
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e014      	b.n	8004b40 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b24:	f023 0304 	bic.w	r3, r3, #4
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e009      	b.n	8004b40 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004b40:	2110      	movs	r1, #16
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff feb4 	bl	80048b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fed7 	bl	80048fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e015      	b.n	8004b80 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	461a      	mov	r2, r3
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d3e5      	bcc.n	8004b54 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004b88:	2101      	movs	r1, #1
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8ac 	bl	8004ce8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004b90:	20c8      	movs	r0, #200	; 0xc8
 8004b92:	f7fc fa65 	bl	8001060 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <USB_HostInit+0x164>)
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <USB_HostInit+0x168>)
 8004bc2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004bc6:	e009      	b.n	8004bdc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <USB_HostInit+0x16c>)
 8004bd2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a10      	ldr	r2, [pc, #64]	; (8004c18 <USB_HostInit+0x170>)
 8004bd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f043 0210 	orr.w	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <USB_HostInit+0x174>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c06:	b004      	add	sp, #16
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	01000200 	.word	0x01000200
 8004c10:	00e00300 	.word	0x00e00300
 8004c14:	00600080 	.word	0x00600080
 8004c18:	004000e0 	.word	0x004000e0
 8004c1c:	a3200008 	.word	0xa3200008

08004c20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c5c:	78fb      	ldrb	r3, [r7, #3]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c6e:	6053      	str	r3, [r2, #4]
 8004c70:	e009      	b.n	8004c86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d106      	bne.n	8004c86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	f7fc f9cb 	bl	8001060 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004cd8:	200a      	movs	r0, #10
 8004cda:	f7fc f9c1 	bl	8001060 <HAL_Delay>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <USB_DriveVbus+0x44>
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d106      	bne.n	8004d2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	d109      	bne.n	8004d4c <USB_DriveVbus+0x64>
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	0c5b      	lsrs	r3, r3, #17
 8004d78:	f003 0303 	and.w	r3, r3, #3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	b29b      	uxth	r3, r3
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	461a      	mov	r2, r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	70fb      	strb	r3, [r7, #3]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70bb      	strb	r3, [r7, #2]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8004de0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004de2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d87e      	bhi.n	8004ee8 <USB_HC_Init+0x13c>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <USB_HC_Init+0x44>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004eab 	.word	0x08004eab
 8004df8:	08004e01 	.word	0x08004e01
 8004dfc:	08004e6d 	.word	0x08004e6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da10      	bge.n	8004e3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004e3c:	e057      	b.n	8004eee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d051      	beq.n	8004eee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e68:	60d3      	str	r3, [r2, #12]
      break;
 8004e6a:	e040      	b.n	8004eee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	da34      	bge.n	8004ef2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ea8:	e023      	b.n	8004ef2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f240 2325 	movw	r3, #549	; 0x225
 8004ebc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ebe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da17      	bge.n	8004ef6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004ee4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004ee6:	e006      	b.n	8004ef6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
      break;
 8004eec:	e004      	b.n	8004ef8 <USB_HC_Init+0x14c>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e002      	b.n	8004ef8 <USB_HC_Init+0x14c>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <USB_HC_Init+0x14c>
      break;
 8004ef6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f12:	4313      	orrs	r3, r2
 8004f14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	da03      	bge.n	8004f32 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e001      	b.n	8004f36 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d103      	bne.n	8004f46 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f4a:	787b      	ldrb	r3, [r7, #1]
 8004f4c:	059b      	lsls	r3, r3, #22
 8004f4e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f52:	78bb      	ldrb	r3, [r7, #2]
 8004f54:	02db      	lsls	r3, r3, #11
 8004f56:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f5a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f60:	049b      	lsls	r3, r3, #18
 8004f62:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f66:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f6e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	0159      	lsls	r1, r3, #5
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	440b      	add	r3, r1
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f86:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004f88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d10f      	bne.n	8004fb0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fae:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop

08004fc0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fdc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d028      	beq.n	800503c <USB_HC_StartXfer+0x7c>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	791b      	ldrb	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d124      	bne.n	800503c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <USB_HC_StartXfer+0x50>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	795b      	ldrb	r3, [r3, #5]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d107      	bne.n	8005010 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	4619      	mov	r1, r3
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa30 	bl	800546c <USB_DoPing>
      return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e114      	b.n	800523a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d112      	bne.n	800503c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	6a3a      	ldr	r2, [r7, #32]
 800502a:	440a      	add	r2, r1
 800502c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005030:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005034:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d018      	beq.n	8005076 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	8912      	ldrh	r2, [r2, #8]
 800504c:	4413      	add	r3, r2
 800504e:	3b01      	subs	r3, #1
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	8912      	ldrh	r2, [r2, #8]
 8005054:	fbb3 f3f2 	udiv	r3, r3, r2
 8005058:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800505a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800505c:	8b7b      	ldrh	r3, [r7, #26]
 800505e:	429a      	cmp	r2, r3
 8005060:	d90b      	bls.n	800507a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005062:	8b7b      	ldrh	r3, [r7, #26]
 8005064:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005066:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	8912      	ldrh	r2, [r2, #8]
 800506c:	fb02 f203 	mul.w	r2, r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	611a      	str	r2, [r3, #16]
 8005074:	e001      	b.n	800507a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005076:	2301      	movs	r3, #1
 8005078:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	78db      	ldrb	r3, [r3, #3]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d006      	beq.n	8005090 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	8912      	ldrh	r2, [r2, #8]
 8005088:	fb02 f203 	mul.w	r2, r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800509a:	04d9      	lsls	r1, r3, #19
 800509c:	4b69      	ldr	r3, [pc, #420]	; (8005244 <USB_HC_StartXfer+0x284>)
 800509e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80050a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	7a9b      	ldrb	r3, [r3, #10]
 80050a6:	075b      	lsls	r3, r3, #29
 80050a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	0148      	lsls	r0, r1, #5
 80050b0:	6a39      	ldr	r1, [r7, #32]
 80050b2:	4401      	add	r1, r0
 80050b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80050ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	68d9      	ldr	r1, [r3, #12]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d2:	460a      	mov	r2, r1
 80050d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	440a      	add	r2, r1
 8005104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005108:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800510c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	7e7b      	ldrb	r3, [r7, #25]
 800511e:	075b      	lsls	r3, r3, #29
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	0148      	lsls	r0, r1, #5
 8005124:	6a39      	ldr	r1, [r7, #32]
 8005126:	4401      	add	r1, r0
 8005128:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a42      	ldr	r2, [pc, #264]	; (8005248 <USB_HC_StartXfer+0x288>)
 8005140:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <USB_HC_StartXfer+0x288>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <USB_HC_StartXfer+0x288>)
 800514c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	78db      	ldrb	r3, [r3, #3]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005156:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <USB_HC_StartXfer+0x288>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <USB_HC_StartXfer+0x288>)
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e005      	b.n	8005170 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005164:	4b38      	ldr	r3, [pc, #224]	; (8005248 <USB_HC_StartXfer+0x288>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800516c:	4a36      	ldr	r2, [pc, #216]	; (8005248 <USB_HC_StartXfer+0x288>)
 800516e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005170:	4b35      	ldr	r3, [pc, #212]	; (8005248 <USB_HC_StartXfer+0x288>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005178:	4a33      	ldr	r2, [pc, #204]	; (8005248 <USB_HC_StartXfer+0x288>)
 800517a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	461a      	mov	r2, r3
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <USB_HC_StartXfer+0x288>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e04f      	b.n	800523a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	78db      	ldrb	r3, [r3, #3]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d14a      	bne.n	8005238 <USB_HC_StartXfer+0x278>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d046      	beq.n	8005238 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	79db      	ldrb	r3, [r3, #7]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d830      	bhi.n	8005214 <USB_HC_StartXfer+0x254>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <USB_HC_StartXfer+0x1f8>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051c9 	.word	0x080051c9
 80051bc:	080051ed 	.word	0x080051ed
 80051c0:	080051c9 	.word	0x080051c9
 80051c4:	080051ed 	.word	0x080051ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	3303      	adds	r3, #3
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80051d2:	8afa      	ldrh	r2, [r7, #22]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	b29b      	uxth	r3, r3
 80051da:	429a      	cmp	r2, r3
 80051dc:	d91c      	bls.n	8005218 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f043 0220 	orr.w	r2, r3, #32
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80051ea:	e015      	b.n	8005218 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	3303      	adds	r3, #3
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80051f6:	8afa      	ldrh	r2, [r7, #22]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	b29b      	uxth	r3, r3
 8005202:	429a      	cmp	r2, r3
 8005204:	d90a      	bls.n	800521c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	619a      	str	r2, [r3, #24]
        }
        break;
 8005212:	e003      	b.n	800521c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005214:	bf00      	nop
 8005216:	e002      	b.n	800521e <USB_HC_StartXfer+0x25e>
        break;
 8005218:	bf00      	nop
 800521a:	e000      	b.n	800521e <USB_HC_StartXfer+0x25e>
        break;
 800521c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	68d9      	ldr	r1, [r3, #12]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	785a      	ldrb	r2, [r3, #1]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	b298      	uxth	r0, r3
 800522c:	2300      	movs	r3, #0
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	4603      	mov	r3, r0
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fb84 	bl	8004940 <USB_WritePacket>
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	1ff80000 	.word	0x1ff80000
 8005248:	200000b0 	.word	0x200000b0

0800524c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	b29b      	uxth	r3, r3
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800526e:	b480      	push	{r7}
 8005270:	b087      	sub	sp, #28
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0c9b      	lsrs	r3, r3, #18
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <USB_HC_Halt+0x3a>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d16c      	bne.n	8005382 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d143      	bne.n	800535c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	440a      	add	r2, r1
 800530a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005312:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	440a      	add	r2, r1
 800532a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800532e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005332:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3301      	adds	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005340:	d81d      	bhi.n	800537e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005358:	d0ec      	beq.n	8005334 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800535a:	e080      	b.n	800545e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	440a      	add	r2, r1
 8005372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800537a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800537c:	e06f      	b.n	800545e <USB_HC_Halt+0x1f0>
          break;
 800537e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005380:	e06d      	b.n	800545e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	440a      	add	r2, r1
 8005398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800539c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d143      	bne.n	800543a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	440a      	add	r2, r1
 8005408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800540c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005410:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	3301      	adds	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800541e:	d81d      	bhi.n	800545c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4413      	add	r3, r2
 8005428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005436:	d0ec      	beq.n	8005412 <USB_HC_Halt+0x1a4>
 8005438:	e011      	b.n	800545e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	440a      	add	r2, r1
 8005450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e000      	b.n	800545e <USB_HC_Halt+0x1f0>
          break;
 800545c:	bf00      	nop
    }
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005480:	2301      	movs	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	04da      	lsls	r2, r3, #19
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <USB_DoPing+0x74>)
 800548a:	4013      	ands	r3, r2
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	440a      	add	r2, r1
 8005494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800549c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	461a      	mov	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	1ff80000 	.word	0x1ff80000

080054e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff f99f 	bl	8004838 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80054fa:	2110      	movs	r1, #16
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff f9d7 	bl	80048b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff f9fa 	bl	80048fc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	e01f      	b.n	800554e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005524:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800552c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005534:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	461a      	mov	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3301      	adds	r3, #1
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d9dc      	bls.n	800550e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e034      	b.n	80055c4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005570:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005578:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005580:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	461a      	mov	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3301      	adds	r3, #1
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055a0:	d80c      	bhi.n	80055bc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b8:	d0ec      	beq.n	8005594 <USB_StopHost+0xb0>
 80055ba:	e000      	b.n	80055be <USB_StopHost+0xda>
        break;
 80055bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	d9c7      	bls.n	800555a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d0:	461a      	mov	r2, r3
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295
 80055d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff f918 	bl	8004816 <USB_EnableGlobalInt>

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80055f4:	4904      	ldr	r1, [pc, #16]	; (8005608 <MX_FATFS_Init+0x18>)
 80055f6:	4805      	ldr	r0, [pc, #20]	; (800560c <MX_FATFS_Init+0x1c>)
 80055f8:	f003 fcc6 	bl	8008f88 <FATFS_LinkDriver>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <MX_FATFS_Init+0x20>)
 8005602:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005604:	bf00      	nop
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000238 	.word	0x20000238
 800560c:	0800a050 	.word	0x0800a050
 8005610:	2000069c 	.word	0x2000069c

08005614 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	4619      	mov	r1, r3
 800563e:	4808      	ldr	r0, [pc, #32]	; (8005660 <USBH_status+0x34>)
 8005640:	f000 fe11 	bl	8006266 <USBH_MSC_UnitIsReady>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <USBH_status+0x24>
  {
    res = RES_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e001      	b.n	8005654 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200006a0 	.word	0x200006a0

08005664 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b094      	sub	sp, #80	; 0x50
 8005668:	af02      	add	r7, sp, #8
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800567a:	7bf9      	ldrb	r1, [r7, #15]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4812      	ldr	r0, [pc, #72]	; (80056d0 <USBH_read+0x6c>)
 8005686:	f000 fe38 	bl	80062fa <USBH_MSC_Read>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <USBH_read+0x34>
  {
    res = RES_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005696:	e015      	b.n	80056c4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005698:	f107 0210 	add.w	r2, r7, #16
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	4619      	mov	r1, r3
 80056a0:	480b      	ldr	r0, [pc, #44]	; (80056d0 <USBH_read+0x6c>)
 80056a2:	f000 fe06 	bl	80062b2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80056a6:	7f7b      	ldrb	r3, [r7, #29]
 80056a8:	2b28      	cmp	r3, #40	; 0x28
 80056aa:	d003      	beq.n	80056b4 <USBH_read+0x50>
 80056ac:	2b3a      	cmp	r3, #58	; 0x3a
 80056ae:	d001      	beq.n	80056b4 <USBH_read+0x50>
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d103      	bne.n	80056bc <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80056b4:	2303      	movs	r3, #3
 80056b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80056ba:	e003      	b.n	80056c4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80056c2:	bf00      	nop
    }
  }

  return res;
 80056c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3748      	adds	r7, #72	; 0x48
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200006a0 	.word	0x200006a0

080056d4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b094      	sub	sp, #80	; 0x50
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4603      	mov	r3, r0
 80056e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80056ea:	7bf9      	ldrb	r1, [r7, #15]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4817      	ldr	r0, [pc, #92]	; (8005754 <USBH_write+0x80>)
 80056f6:	f000 fe69 	bl	80063cc <USBH_MSC_Write>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <USBH_write+0x34>
  {
    res = RES_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005706:	e01f      	b.n	8005748 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005708:	f107 0210 	add.w	r2, r7, #16
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	4619      	mov	r1, r3
 8005710:	4810      	ldr	r0, [pc, #64]	; (8005754 <USBH_write+0x80>)
 8005712:	f000 fdce 	bl	80062b2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005716:	7f7b      	ldrb	r3, [r7, #29]
 8005718:	2b27      	cmp	r3, #39	; 0x27
 800571a:	d009      	beq.n	8005730 <USBH_write+0x5c>
 800571c:	2b27      	cmp	r3, #39	; 0x27
 800571e:	dc02      	bgt.n	8005726 <USBH_write+0x52>
 8005720:	2b04      	cmp	r3, #4
 8005722:	d009      	beq.n	8005738 <USBH_write+0x64>
 8005724:	e00c      	b.n	8005740 <USBH_write+0x6c>
 8005726:	2b28      	cmp	r3, #40	; 0x28
 8005728:	d006      	beq.n	8005738 <USBH_write+0x64>
 800572a:	2b3a      	cmp	r3, #58	; 0x3a
 800572c:	d004      	beq.n	8005738 <USBH_write+0x64>
 800572e:	e007      	b.n	8005740 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005730:	2302      	movs	r3, #2
 8005732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005736:	e007      	b.n	8005748 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005738:	2303      	movs	r3, #3
 800573a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800573e:	e003      	b.n	8005748 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005746:	bf00      	nop
    }
  }

  return res;
 8005748:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800574c:	4618      	mov	r0, r3
 800574e:	3748      	adds	r7, #72	; 0x48
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	200006a0 	.word	0x200006a0

08005758 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b090      	sub	sp, #64	; 0x40
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	603a      	str	r2, [r7, #0]
 8005762:	71fb      	strb	r3, [r7, #7]
 8005764:	460b      	mov	r3, r1
 8005766:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800576e:	79bb      	ldrb	r3, [r7, #6]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d852      	bhi.n	800581a <USBH_ioctl+0xc2>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <USBH_ioctl+0x24>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	0800578d 	.word	0x0800578d
 8005780:	08005795 	.word	0x08005795
 8005784:	080057bf 	.word	0x080057bf
 8005788:	080057eb 	.word	0x080057eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005792:	e045      	b.n	8005820 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005794:	f107 0208 	add.w	r2, r7, #8
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	4619      	mov	r1, r3
 800579c:	4823      	ldr	r0, [pc, #140]	; (800582c <USBH_ioctl+0xd4>)
 800579e:	f000 fd88 	bl	80062b2 <USBH_MSC_GetLUNInfo>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80057b4:	e034      	b.n	8005820 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80057bc:	e030      	b.n	8005820 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80057be:	f107 0208 	add.w	r2, r7, #8
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	4619      	mov	r1, r3
 80057c6:	4819      	ldr	r0, [pc, #100]	; (800582c <USBH_ioctl+0xd4>)
 80057c8:	f000 fd73 	bl	80062b2 <USBH_MSC_GetLUNInfo>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d107      	bne.n	80057e2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80057d2:	8a3b      	ldrh	r3, [r7, #16]
 80057d4:	461a      	mov	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80057e0:	e01e      	b.n	8005820 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80057e8:	e01a      	b.n	8005820 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80057ea:	f107 0208 	add.w	r2, r7, #8
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	4619      	mov	r1, r3
 80057f2:	480e      	ldr	r0, [pc, #56]	; (800582c <USBH_ioctl+0xd4>)
 80057f4:	f000 fd5d 	bl	80062b2 <USBH_MSC_GetLUNInfo>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80057fe:	8a3b      	ldrh	r3, [r7, #16]
 8005800:	0a5b      	lsrs	r3, r3, #9
 8005802:	b29b      	uxth	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005810:	e006      	b.n	8005820 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005818:	e002      	b.n	8005820 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800581a:	2304      	movs	r3, #4
 800581c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005820:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005824:	4618      	mov	r0, r3
 8005826:	3740      	adds	r7, #64	; 0x40
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	200006a0 	.word	0x200006a0

08005830 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b089      	sub	sp, #36	; 0x24
 8005834:	af04      	add	r7, sp, #16
 8005836:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800583e:	7919      	ldrb	r1, [r3, #4]
 8005840:	2350      	movs	r3, #80	; 0x50
 8005842:	2206      	movs	r2, #6
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fc4f 	bl	80070e8 <USBH_FindInterface>
 800584a:	4603      	mov	r3, r0
 800584c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2bff      	cmp	r3, #255	; 0xff
 8005852:	d002      	beq.n	800585a <USBH_MSC_InterfaceInit+0x2a>
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d901      	bls.n	800585e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800585a:	2302      	movs	r3, #2
 800585c:	e0ef      	b.n	8005a3e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 fc24 	bl	80070b0 <USBH_SelectInterface>
 8005868:	4603      	mov	r3, r0
 800586a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005872:	2302      	movs	r3, #2
 8005874:	e0e3      	b.n	8005a3e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800587c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005880:	f004 f870 	bl	8009964 <malloc>
 8005884:	4603      	mov	r3, r0
 8005886:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005898:	2302      	movs	r3, #2
 800589a:	e0d0      	b.n	8005a3e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800589c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a0:	2100      	movs	r1, #0
 80058a2:	68b8      	ldr	r0, [r7, #8]
 80058a4:	f004 f879 	bl	800999a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	211a      	movs	r1, #26
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da16      	bge.n	80058ee <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	211a      	movs	r1, #26
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	211a      	movs	r1, #26
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058e6:	881a      	ldrh	r2, [r3, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	815a      	strh	r2, [r3, #10]
 80058ec:	e015      	b.n	800591a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	211a      	movs	r1, #26
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80058fe:	781a      	ldrb	r2, [r3, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	211a      	movs	r1, #26
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	211a      	movs	r1, #26
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	4413      	add	r3, r2
 8005926:	f203 3356 	addw	r3, r3, #854	; 0x356
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b25b      	sxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	da16      	bge.n	8005960 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	211a      	movs	r1, #26
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	4413      	add	r3, r2
 800593e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	211a      	movs	r1, #26
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	815a      	strh	r2, [r3, #10]
 800595e:	e015      	b.n	800598c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	211a      	movs	r1, #26
 8005966:	fb01 f303 	mul.w	r3, r1, r3
 800596a:	4413      	add	r3, r2
 800596c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	211a      	movs	r1, #26
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005986:	881a      	ldrh	r2, [r3, #0]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	799b      	ldrb	r3, [r3, #6]
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f002 fdc2 	bl	800852e <USBH_AllocPipe>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	79db      	ldrb	r3, [r3, #7]
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f002 fdb8 	bl	800852e <USBH_AllocPipe>
 80059be:	4603      	mov	r3, r0
 80059c0:	461a      	mov	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fda4 	bl	8006514 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	7959      	ldrb	r1, [r3, #5]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	7998      	ldrb	r0, [r3, #6]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	8912      	ldrh	r2, [r2, #8]
 80059e4:	9202      	str	r2, [sp, #8]
 80059e6:	2202      	movs	r2, #2
 80059e8:	9201      	str	r2, [sp, #4]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4623      	mov	r3, r4
 80059ee:	4602      	mov	r2, r0
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f002 fd6d 	bl	80084d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	7919      	ldrb	r1, [r3, #4]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	79d8      	ldrb	r0, [r3, #7]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	8952      	ldrh	r2, [r2, #10]
 8005a0e:	9202      	str	r2, [sp, #8]
 8005a10:	2202      	movs	r2, #2
 8005a12:	9201      	str	r2, [sp, #4]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	4623      	mov	r3, r4
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f002 fd58 	bl	80084d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	791b      	ldrb	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f003 fd79 	bl	8009520 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	795b      	ldrb	r3, [r3, #5]
 8005a32:	2200      	movs	r2, #0
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f003 fd72 	bl	8009520 <USBH_LL_SetToggle>

  return USBH_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd90      	pop	{r4, r7, pc}

08005a46 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	795b      	ldrb	r3, [r3, #5]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	795b      	ldrb	r3, [r3, #5]
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f002 fd51 	bl	800850e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	795b      	ldrb	r3, [r3, #5]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f002 fd7c 	bl	8008570 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00e      	beq.n	8005aa4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	791b      	ldrb	r3, [r3, #4]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f002 fd3e 	bl	800850e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	791b      	ldrb	r3, [r3, #4]
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f002 fd69 	bl	8008570 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f003 ff5b 	bl	8009974 <free>
    phost->pActiveClass->pData = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	7b9b      	ldrb	r3, [r3, #14]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d004      	beq.n	8005afa <USBH_MSC_ClassRequest+0x28>
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d03e      	beq.n	8005b72 <USBH_MSC_ClassRequest+0xa0>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d000      	beq.n	8005afa <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8005af8:	e04a      	b.n	8005b90 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fcea 	bl	80064d8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d104      	bne.n	8005b18 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d135      	bne.n	8005b8a <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d804      	bhi.n	8005b30 <USBH_MSC_ClassRequest+0x5e>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	e000      	b.n	8005b32 <USBH_MSC_ClassRequest+0x60>
 8005b30:	2202      	movs	r2, #2
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	73bb      	strb	r3, [r7, #14]
 8005b3a:	e014      	b.n	8005b66 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	2134      	movs	r1, #52	; 0x34
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	3392      	adds	r3, #146	; 0x92
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005b4e:	7bbb      	ldrb	r3, [r7, #14]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	2134      	movs	r1, #52	; 0x34
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	4413      	add	r3, r2
 8005b5a:	33c1      	adds	r3, #193	; 0xc1
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	3301      	adds	r3, #1
 8005b64:	73bb      	strb	r3, [r7, #14]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	7bba      	ldrb	r2, [r7, #14]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d3e5      	bcc.n	8005b3c <USBH_MSC_ClassRequest+0x6a>
      break;
 8005b70:	e00b      	b.n	8005b8a <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005b72:	2100      	movs	r1, #0
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f002 f878 	bl	8007c6a <USBH_ClrFeature>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	7bda      	ldrb	r2, [r3, #15]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	739a      	strb	r2, [r3, #14]
      break;
 8005b88:	e001      	b.n	8005b8e <USBH_MSC_ClassRequest+0xbc>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <USBH_MSC_ClassRequest+0xbe>
      break;
 8005b8e:	bf00      	nop
  }

  return status;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	7b1b      	ldrb	r3, [r3, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <USBH_MSC_Process+0x2e>
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	f000 8271 	beq.w	80060aa <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005bc8:	e272      	b.n	80060b0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	f080 824f 	bcs.w	800607a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005be2:	4619      	mov	r1, r3
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	2334      	movs	r3, #52	; 0x34
 8005be8:	fb03 f301 	mul.w	r3, r3, r1
 8005bec:	4413      	add	r3, r2
 8005bee:	3391      	adds	r3, #145	; 0x91
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	2334      	movs	r3, #52	; 0x34
 8005c00:	fb03 f301 	mul.w	r3, r3, r1
 8005c04:	4413      	add	r3, r2
 8005c06:	3390      	adds	r3, #144	; 0x90
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	f200 8243 	bhi.w	8006096 <USBH_MSC_Process+0x4fa>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <USBH_MSC_Process+0x7c>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08006097 	.word	0x08006097
 8005c20:	08005d05 	.word	0x08005d05
 8005c24:	08005e89 	.word	0x08005e89
 8005c28:	08005c63 	.word	0x08005c63
 8005c2c:	08005f55 	.word	0x08005f55
 8005c30:	08006097 	.word	0x08006097
 8005c34:	08006097 	.word	0x08006097
 8005c38:	08006069 	.word	0x08006069
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c42:	4619      	mov	r1, r3
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	2334      	movs	r3, #52	; 0x34
 8005c48:	fb03 f301 	mul.w	r3, r3, r1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3390      	adds	r3, #144	; 0x90
 8005c50:	2204      	movs	r2, #4
 8005c52:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005c60:	e222      	b.n	80060a8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c68:	b2d9      	uxtb	r1, r3
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c70:	461a      	mov	r2, r3
 8005c72:	2334      	movs	r3, #52	; 0x34
 8005c74:	fb03 f302 	mul.w	r3, r3, r2
 8005c78:	3398      	adds	r3, #152	; 0x98
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3307      	adds	r3, #7
 8005c80:	461a      	mov	r2, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 ff68 	bl	8006b58 <USBH_MSC_SCSI_Inquiry>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c98:	4619      	mov	r1, r3
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	2334      	movs	r3, #52	; 0x34
 8005c9e:	fb03 f301 	mul.w	r3, r3, r1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3390      	adds	r3, #144	; 0x90
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d10c      	bne.n	8005cca <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	2334      	movs	r3, #52	; 0x34
 8005cbc:	fb03 f301 	mul.w	r3, r3, r1
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3390      	adds	r3, #144	; 0x90
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	701a      	strb	r2, [r3, #0]
            break;
 8005cc8:	e1e7      	b.n	800609a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	f040 81e4 	bne.w	800609a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cd8:	4619      	mov	r1, r3
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	2334      	movs	r3, #52	; 0x34
 8005cde:	fb03 f301 	mul.w	r3, r3, r1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3390      	adds	r3, #144	; 0x90
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	2334      	movs	r3, #52	; 0x34
 8005cf6:	fb03 f301 	mul.w	r3, r3, r1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3391      	adds	r3, #145	; 0x91
 8005cfe:	2202      	movs	r2, #2
 8005d00:	701a      	strb	r2, [r3, #0]
            break;
 8005d02:	e1ca      	b.n	800609a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fe64 	bl	80069dc <USBH_MSC_SCSI_TestUnitReady>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d149      	bne.n	8005db2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d24:	4619      	mov	r1, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	2334      	movs	r3, #52	; 0x34
 8005d2a:	fb03 f301 	mul.w	r3, r3, r1
 8005d2e:	4413      	add	r3, r2
 8005d30:	3392      	adds	r3, #146	; 0x92
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00c      	beq.n	8005d52 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d3e:	4619      	mov	r1, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	2334      	movs	r3, #52	; 0x34
 8005d44:	fb03 f301 	mul.w	r3, r3, r1
 8005d48:	4413      	add	r3, r2
 8005d4a:	33c1      	adds	r3, #193	; 0xc1
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	e00b      	b.n	8005d6a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d58:	4619      	mov	r1, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	2334      	movs	r3, #52	; 0x34
 8005d5e:	fb03 f301 	mul.w	r3, r3, r1
 8005d62:	4413      	add	r3, r2
 8005d64:	33c1      	adds	r3, #193	; 0xc1
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d70:	4619      	mov	r1, r3
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	2334      	movs	r3, #52	; 0x34
 8005d76:	fb03 f301 	mul.w	r3, r3, r1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3390      	adds	r3, #144	; 0x90
 8005d7e:	2203      	movs	r2, #3
 8005d80:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d88:	4619      	mov	r1, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	2334      	movs	r3, #52	; 0x34
 8005d8e:	fb03 f301 	mul.w	r3, r3, r1
 8005d92:	4413      	add	r3, r2
 8005d94:	3391      	adds	r3, #145	; 0x91
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005da0:	4619      	mov	r1, r3
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	2334      	movs	r3, #52	; 0x34
 8005da6:	fb03 f301 	mul.w	r3, r3, r1
 8005daa:	4413      	add	r3, r2
 8005dac:	3392      	adds	r3, #146	; 0x92
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d14a      	bne.n	8005e4e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	2334      	movs	r3, #52	; 0x34
 8005dc4:	fb03 f301 	mul.w	r3, r3, r1
 8005dc8:	4413      	add	r3, r2
 8005dca:	3392      	adds	r3, #146	; 0x92
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d00c      	beq.n	8005dec <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dd8:	4619      	mov	r1, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	2334      	movs	r3, #52	; 0x34
 8005dde:	fb03 f301 	mul.w	r3, r3, r1
 8005de2:	4413      	add	r3, r2
 8005de4:	33c1      	adds	r3, #193	; 0xc1
 8005de6:	2201      	movs	r2, #1
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	e00b      	b.n	8005e04 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005df2:	4619      	mov	r1, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	2334      	movs	r3, #52	; 0x34
 8005df8:	fb03 f301 	mul.w	r3, r3, r1
 8005dfc:	4413      	add	r3, r2
 8005dfe:	33c1      	adds	r3, #193	; 0xc1
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	2334      	movs	r3, #52	; 0x34
 8005e10:	fb03 f301 	mul.w	r3, r3, r1
 8005e14:	4413      	add	r3, r2
 8005e16:	3390      	adds	r3, #144	; 0x90
 8005e18:	2205      	movs	r2, #5
 8005e1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e22:	4619      	mov	r1, r3
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	2334      	movs	r3, #52	; 0x34
 8005e28:	fb03 f301 	mul.w	r3, r3, r1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3391      	adds	r3, #145	; 0x91
 8005e30:	2201      	movs	r2, #1
 8005e32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	2334      	movs	r3, #52	; 0x34
 8005e40:	fb03 f301 	mul.w	r3, r3, r1
 8005e44:	4413      	add	r3, r2
 8005e46:	3392      	adds	r3, #146	; 0x92
 8005e48:	2202      	movs	r2, #2
 8005e4a:	701a      	strb	r2, [r3, #0]
            break;
 8005e4c:	e127      	b.n	800609e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005e4e:	7bbb      	ldrb	r3, [r7, #14]
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	f040 8124 	bne.w	800609e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	2334      	movs	r3, #52	; 0x34
 8005e62:	fb03 f301 	mul.w	r3, r3, r1
 8005e66:	4413      	add	r3, r2
 8005e68:	3390      	adds	r3, #144	; 0x90
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e74:	4619      	mov	r1, r3
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	2334      	movs	r3, #52	; 0x34
 8005e7a:	fb03 f301 	mul.w	r3, r3, r1
 8005e7e:	4413      	add	r3, r2
 8005e80:	3391      	adds	r3, #145	; 0x91
 8005e82:	2202      	movs	r2, #2
 8005e84:	701a      	strb	r2, [r3, #0]
            break;
 8005e86:	e10a      	b.n	800609e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e8e:	b2d9      	uxtb	r1, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e96:	461a      	mov	r2, r3
 8005e98:	2334      	movs	r3, #52	; 0x34
 8005e9a:	fb03 f302 	mul.w	r3, r3, r2
 8005e9e:	3390      	adds	r3, #144	; 0x90
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fdda 	bl	8006a62 <USBH_MSC_SCSI_ReadCapacity>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d120      	bne.n	8005efa <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	2334      	movs	r3, #52	; 0x34
 8005ec4:	fb03 f301 	mul.w	r3, r3, r1
 8005ec8:	4413      	add	r3, r2
 8005eca:	3390      	adds	r3, #144	; 0x90
 8005ecc:	2201      	movs	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	2334      	movs	r3, #52	; 0x34
 8005edc:	fb03 f301 	mul.w	r3, r3, r1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3391      	adds	r3, #145	; 0x91
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eee:	3301      	adds	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005ef8:	e0d3      	b.n	80060a2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d10c      	bne.n	8005f1a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f06:	4619      	mov	r1, r3
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	2334      	movs	r3, #52	; 0x34
 8005f0c:	fb03 f301 	mul.w	r3, r3, r1
 8005f10:	4413      	add	r3, r2
 8005f12:	3390      	adds	r3, #144	; 0x90
 8005f14:	2205      	movs	r2, #5
 8005f16:	701a      	strb	r2, [r3, #0]
            break;
 8005f18:	e0c3      	b.n	80060a2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	f040 80c0 	bne.w	80060a2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f28:	4619      	mov	r1, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	2334      	movs	r3, #52	; 0x34
 8005f2e:	fb03 f301 	mul.w	r3, r3, r1
 8005f32:	4413      	add	r3, r2
 8005f34:	3390      	adds	r3, #144	; 0x90
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f40:	4619      	mov	r1, r3
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	2334      	movs	r3, #52	; 0x34
 8005f46:	fb03 f301 	mul.w	r3, r3, r1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3391      	adds	r3, #145	; 0x91
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
            break;
 8005f52:	e0a6      	b.n	80060a2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f5a:	b2d9      	uxtb	r1, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f62:	461a      	mov	r2, r3
 8005f64:	2334      	movs	r3, #52	; 0x34
 8005f66:	fb03 f302 	mul.w	r3, r3, r2
 8005f6a:	3398      	adds	r3, #152	; 0x98
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	3304      	adds	r3, #4
 8005f72:	461a      	mov	r2, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fe94 	bl	8006ca2 <USBH_MSC_SCSI_RequestSense>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d145      	bne.n	8006010 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	2334      	movs	r3, #52	; 0x34
 8005f90:	fb03 f301 	mul.w	r3, r3, r1
 8005f94:	4413      	add	r3, r2
 8005f96:	339c      	adds	r3, #156	; 0x9c
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d00c      	beq.n	8005fb8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	2334      	movs	r3, #52	; 0x34
 8005faa:	fb03 f301 	mul.w	r3, r3, r1
 8005fae:	4413      	add	r3, r2
 8005fb0:	339c      	adds	r3, #156	; 0x9c
 8005fb2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d117      	bne.n	8005fe8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d80c      	bhi.n	8005fe8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	2334      	movs	r3, #52	; 0x34
 8005fda:	fb03 f301 	mul.w	r3, r3, r1
 8005fde:	4413      	add	r3, r2
 8005fe0:	3390      	adds	r3, #144	; 0x90
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	701a      	strb	r2, [r3, #0]
                  break;
 8005fe6:	e05f      	b.n	80060a8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fee:	4619      	mov	r1, r3
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	2334      	movs	r3, #52	; 0x34
 8005ff4:	fb03 f301 	mul.w	r3, r3, r1
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3390      	adds	r3, #144	; 0x90
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006006:	3301      	adds	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d10c      	bne.n	8006030 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800601c:	4619      	mov	r1, r3
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	2334      	movs	r3, #52	; 0x34
 8006022:	fb03 f301 	mul.w	r3, r3, r1
 8006026:	4413      	add	r3, r2
 8006028:	3390      	adds	r3, #144	; 0x90
 800602a:	2208      	movs	r2, #8
 800602c:	701a      	strb	r2, [r3, #0]
            break;
 800602e:	e03a      	b.n	80060a6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b04      	cmp	r3, #4
 8006034:	d137      	bne.n	80060a6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800603c:	4619      	mov	r1, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	2334      	movs	r3, #52	; 0x34
 8006042:	fb03 f301 	mul.w	r3, r3, r1
 8006046:	4413      	add	r3, r2
 8006048:	3390      	adds	r3, #144	; 0x90
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006054:	4619      	mov	r1, r3
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	2334      	movs	r3, #52	; 0x34
 800605a:	fb03 f301 	mul.w	r3, r3, r1
 800605e:	4413      	add	r3, r2
 8006060:	3391      	adds	r3, #145	; 0x91
 8006062:	2202      	movs	r2, #2
 8006064:	701a      	strb	r2, [r3, #0]
            break;
 8006066:	e01e      	b.n	80060a6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800606e:	3301      	adds	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006078:	e016      	b.n	80060a8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2200      	movs	r2, #0
 800607e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2201      	movs	r2, #1
 8006086:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800608e:	2102      	movs	r1, #2
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
      break;
 8006094:	e00c      	b.n	80060b0 <USBH_MSC_Process+0x514>
            break;
 8006096:	bf00      	nop
 8006098:	e00a      	b.n	80060b0 <USBH_MSC_Process+0x514>
            break;
 800609a:	bf00      	nop
 800609c:	e008      	b.n	80060b0 <USBH_MSC_Process+0x514>
            break;
 800609e:	bf00      	nop
 80060a0:	e006      	b.n	80060b0 <USBH_MSC_Process+0x514>
            break;
 80060a2:	bf00      	nop
 80060a4:	e004      	b.n	80060b0 <USBH_MSC_Process+0x514>
            break;
 80060a6:	bf00      	nop
      break;
 80060a8:	e002      	b.n	80060b0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]
      break;
 80060ae:	bf00      	nop
  }
  return error;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop

080060bc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b088      	sub	sp, #32
 80060d6:	af02      	add	r7, sp, #8
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80060e8:	2301      	movs	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80060ec:	2301      	movs	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	2134      	movs	r1, #52	; 0x34
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	3390      	adds	r3, #144	; 0x90
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b06      	cmp	r3, #6
 8006102:	d004      	beq.n	800610e <USBH_MSC_RdWrProcess+0x3c>
 8006104:	2b07      	cmp	r3, #7
 8006106:	d037      	beq.n	8006178 <USBH_MSC_RdWrProcess+0xa6>
 8006108:	2b05      	cmp	r3, #5
 800610a:	d06a      	beq.n	80061e2 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800610c:	e0a6      	b.n	800625c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800610e:	78f9      	ldrb	r1, [r7, #3]
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	2200      	movs	r2, #0
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fea6 	bl	8006e6a <USBH_MSC_SCSI_Read>
 800611e:	4603      	mov	r3, r0
 8006120:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	2134      	movs	r1, #52	; 0x34
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3390      	adds	r3, #144	; 0x90
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	75fb      	strb	r3, [r7, #23]
      break;
 800613e:	e088      	b.n	8006252 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d109      	bne.n	800615a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	2134      	movs	r1, #52	; 0x34
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	3390      	adds	r3, #144	; 0x90
 8006154:	2205      	movs	r2, #5
 8006156:	701a      	strb	r2, [r3, #0]
      break;
 8006158:	e07b      	b.n	8006252 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d178      	bne.n	8006252 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	2134      	movs	r1, #52	; 0x34
 8006166:	fb01 f303 	mul.w	r3, r1, r3
 800616a:	4413      	add	r3, r2
 800616c:	3390      	adds	r3, #144	; 0x90
 800616e:	2208      	movs	r2, #8
 8006170:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006172:	2302      	movs	r3, #2
 8006174:	75fb      	strb	r3, [r7, #23]
      break;
 8006176:	e06c      	b.n	8006252 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006178:	78f9      	ldrb	r1, [r7, #3]
 800617a:	2300      	movs	r3, #0
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	2300      	movs	r3, #0
 8006180:	2200      	movs	r2, #0
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fe06 	bl	8006d94 <USBH_MSC_SCSI_Write>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10b      	bne.n	80061aa <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	2134      	movs	r1, #52	; 0x34
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	4413      	add	r3, r2
 800619e:	3390      	adds	r3, #144	; 0x90
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	75fb      	strb	r3, [r7, #23]
      break;
 80061a8:	e055      	b.n	8006256 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d109      	bne.n	80061c4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	2134      	movs	r1, #52	; 0x34
 80061b6:	fb01 f303 	mul.w	r3, r1, r3
 80061ba:	4413      	add	r3, r2
 80061bc:	3390      	adds	r3, #144	; 0x90
 80061be:	2205      	movs	r2, #5
 80061c0:	701a      	strb	r2, [r3, #0]
      break;
 80061c2:	e048      	b.n	8006256 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d145      	bne.n	8006256 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	2134      	movs	r1, #52	; 0x34
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	3390      	adds	r3, #144	; 0x90
 80061d8:	2208      	movs	r2, #8
 80061da:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80061dc:	2302      	movs	r3, #2
 80061de:	75fb      	strb	r3, [r7, #23]
      break;
 80061e0:	e039      	b.n	8006256 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	2234      	movs	r2, #52	; 0x34
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	3398      	adds	r3, #152	; 0x98
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	1d1a      	adds	r2, r3, #4
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fd53 	bl	8006ca2 <USBH_MSC_SCSI_RequestSense>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d113      	bne.n	800622e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	2134      	movs	r1, #52	; 0x34
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	4413      	add	r3, r2
 8006212:	3390      	adds	r3, #144	; 0x90
 8006214:	2201      	movs	r2, #1
 8006216:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	2134      	movs	r1, #52	; 0x34
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	3391      	adds	r3, #145	; 0x91
 8006226:	2202      	movs	r2, #2
 8006228:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800622a:	2302      	movs	r3, #2
 800622c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d012      	beq.n	800625a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d10f      	bne.n	800625a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	2134      	movs	r1, #52	; 0x34
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	4413      	add	r3, r2
 8006246:	3390      	adds	r3, #144	; 0x90
 8006248:	2208      	movs	r2, #8
 800624a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800624c:	2302      	movs	r3, #2
 800624e:	75fb      	strb	r3, [r7, #23]
      break;
 8006250:	e003      	b.n	800625a <USBH_MSC_RdWrProcess+0x188>
      break;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800625a:	bf00      	nop

  }
  return error;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b0b      	cmp	r3, #11
 8006284:	d10c      	bne.n	80062a0 <USBH_MSC_UnitIsReady+0x3a>
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	2134      	movs	r1, #52	; 0x34
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	3391      	adds	r3, #145	; 0x91
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
 800629e:	e001      	b.n	80062a4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	460b      	mov	r3, r1
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b0b      	cmp	r3, #11
 80062d2:	d10d      	bne.n	80062f0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80062d4:	7afb      	ldrb	r3, [r7, #11]
 80062d6:	2234      	movs	r2, #52	; 0x34
 80062d8:	fb02 f303 	mul.w	r3, r2, r3
 80062dc:	3390      	adds	r3, #144	; 0x90
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	2234      	movs	r2, #52	; 0x34
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f003 fb4c 	bl	8009984 <memcpy>
    return USBH_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b088      	sub	sp, #32
 80062fe:	af02      	add	r7, sp, #8
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	460b      	mov	r3, r1
 8006308:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00e      	beq.n	800633e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006326:	2b0b      	cmp	r3, #11
 8006328:	d109      	bne.n	800633e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800632a:	7afb      	ldrb	r3, [r7, #11]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	2134      	movs	r1, #52	; 0x34
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	4413      	add	r3, r2
 8006336:	3390      	adds	r3, #144	; 0x90
 8006338:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800633a:	2b01      	cmp	r3, #1
 800633c:	d001      	beq.n	8006342 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800633e:	2302      	movs	r3, #2
 8006340:	e040      	b.n	80063c4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2206      	movs	r2, #6
 8006346:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	2134      	movs	r1, #52	; 0x34
 800634e:	fb01 f303 	mul.w	r3, r1, r3
 8006352:	4413      	add	r3, r2
 8006354:	3390      	adds	r3, #144	; 0x90
 8006356:	2206      	movs	r2, #6
 8006358:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	b29a      	uxth	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006364:	7af9      	ldrb	r1, [r7, #11]
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fd7b 	bl	8006e6a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800637a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800637c:	e016      	b.n	80063ac <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	f242 7110 	movw	r1, #10000	; 0x2710
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	429a      	cmp	r2, r3
 8006394:	d805      	bhi.n	80063a2 <USBH_MSC_Read+0xa8>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2201      	movs	r2, #1
 80063a6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80063a8:	2302      	movs	r3, #2
 80063aa:	e00b      	b.n	80063c4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	4619      	mov	r1, r3
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff fe8e 	bl	80060d2 <USBH_MSC_RdWrProcess>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d0e0      	beq.n	800637e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2201      	movs	r2, #1
 80063c0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	460b      	mov	r3, r1
 80063da:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00e      	beq.n	8006410 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80063f8:	2b0b      	cmp	r3, #11
 80063fa:	d109      	bne.n	8006410 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	2134      	movs	r1, #52	; 0x34
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	3390      	adds	r3, #144	; 0x90
 800640a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800640c:	2b01      	cmp	r3, #1
 800640e:	d001      	beq.n	8006414 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006410:	2302      	movs	r3, #2
 8006412:	e040      	b.n	8006496 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2207      	movs	r2, #7
 8006418:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	2134      	movs	r1, #52	; 0x34
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	4413      	add	r3, r2
 8006426:	3390      	adds	r3, #144	; 0x90
 8006428:	2207      	movs	r2, #7
 800642a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	b29a      	uxth	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006436:	7af9      	ldrb	r1, [r7, #11]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fca7 	bl	8006d94 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800644c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800644e:	e016      	b.n	800647e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad2      	subs	r2, r2, r3
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	429a      	cmp	r2, r3
 8006466:	d805      	bhi.n	8006474 <USBH_MSC_Write+0xa8>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2201      	movs	r2, #1
 8006478:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800647a:	2302      	movs	r3, #2
 800647c:	e00b      	b.n	8006496 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	4619      	mov	r1, r3
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fe25 	bl	80060d2 <USBH_MSC_RdWrProcess>
 8006488:	4603      	mov	r3, r0
 800648a:	2b01      	cmp	r3, #1
 800648c:	d0e0      	beq.n	8006450 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2201      	movs	r2, #1
 8006492:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2221      	movs	r2, #33	; 0x21
 80064aa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	22ff      	movs	r2, #255	; 0xff
 80064b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80064c4:	2200      	movs	r2, #0
 80064c6:	2100      	movs	r1, #0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fdae 	bl	800802a <USBH_CtlReq>
 80064ce:	4603      	mov	r3, r0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	22a1      	movs	r2, #161	; 0xa1
 80064e6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	22fe      	movs	r2, #254	; 0xfe
 80064ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006500:	2201      	movs	r2, #1
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fd90 	bl	800802a <USBH_CtlReq>
 800650a:	4603      	mov	r3, r0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a09      	ldr	r2, [pc, #36]	; (8006550 <USBH_MSC_BOT_Init+0x3c>)
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4a09      	ldr	r2, [pc, #36]	; (8006554 <USBH_MSC_BOT_Init+0x40>)
 8006530:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	43425355 	.word	0x43425355
 8006554:	20304050 	.word	0x20304050

08006558 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af02      	add	r7, sp, #8
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006568:	2301      	movs	r3, #1
 800656a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800656c:	2301      	movs	r3, #1
 800656e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006570:	2300      	movs	r3, #0
 8006572:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006588:	3b01      	subs	r3, #1
 800658a:	2b0a      	cmp	r3, #10
 800658c:	f200 81a1 	bhi.w	80068d2 <USBH_MSC_BOT_Process+0x37a>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <USBH_MSC_BOT_Process+0x40>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065ef 	.word	0x080065ef
 80065a0:	08006659 	.word	0x08006659
 80065a4:	08006677 	.word	0x08006677
 80065a8:	080066fb 	.word	0x080066fb
 80065ac:	0800671f 	.word	0x0800671f
 80065b0:	080067b9 	.word	0x080067b9
 80065b4:	080067d5 	.word	0x080067d5
 80065b8:	08006827 	.word	0x08006827
 80065bc:	08006857 	.word	0x08006857
 80065c0:	080068b9 	.word	0x080068b9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	795a      	ldrb	r2, [r3, #5]
 80065de:	2301      	movs	r3, #1
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	4613      	mov	r3, r2
 80065e4:	221f      	movs	r2, #31
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 ff2f 	bl	800844a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80065ec:	e180      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	795b      	ldrb	r3, [r3, #5]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 ff69 	bl	80094cc <USBH_LL_GetURBState>
 80065fa:	4603      	mov	r3, r0
 80065fc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80065fe:	7d3b      	ldrb	r3, [r7, #20]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d118      	bne.n	8006636 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00f      	beq.n	800662c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006612:	b25b      	sxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	da04      	bge.n	8006622 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2203      	movs	r2, #3
 800661c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006620:	e159      	b.n	80068d6 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2205      	movs	r2, #5
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800662a:	e154      	b.n	80068d6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2207      	movs	r2, #7
 8006630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006634:	e14f      	b.n	80068d6 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006636:	7d3b      	ldrb	r3, [r7, #20]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d104      	bne.n	8006646 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006644:	e147      	b.n	80068d6 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8006646:	7d3b      	ldrb	r3, [r7, #20]
 8006648:	2b05      	cmp	r3, #5
 800664a:	f040 8144 	bne.w	80068d6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	220a      	movs	r2, #10
 8006652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006656:	e13e      	b.n	80068d6 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	895a      	ldrh	r2, [r3, #10]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	791b      	ldrb	r3, [r3, #4]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 ff14 	bl	8008494 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2204      	movs	r2, #4
 8006670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006674:	e13c      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	791b      	ldrb	r3, [r3, #4]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f002 ff25 	bl	80094cc <USBH_LL_GetURBState>
 8006682:	4603      	mov	r3, r0
 8006684:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006686:	7d3b      	ldrb	r3, [r7, #20]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d12d      	bne.n	80066e8 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	8952      	ldrh	r2, [r2, #10]
 8006694:	4293      	cmp	r3, r2
 8006696:	d910      	bls.n	80066ba <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	8952      	ldrh	r2, [r2, #10]
 80066a2:	441a      	add	r2, r3
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	8952      	ldrh	r2, [r2, #10]
 80066b2:	1a9a      	subs	r2, r3, r2
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80066b8:	e002      	b.n	80066c0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2200      	movs	r2, #0
 80066be:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	895a      	ldrh	r2, [r3, #10]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	791b      	ldrb	r3, [r3, #4]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fedc 	bl	8008494 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80066dc:	e0fd      	b.n	80068da <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2207      	movs	r2, #7
 80066e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066e6:	e0f8      	b.n	80068da <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80066e8:	7d3b      	ldrb	r3, [r7, #20]
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	f040 80f5 	bne.w	80068da <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2209      	movs	r2, #9
 80066f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066f8:	e0ef      	b.n	80068da <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	891a      	ldrh	r2, [r3, #8]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	7958      	ldrb	r0, [r3, #5]
 8006708:	2301      	movs	r3, #1
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fe9b 	bl	800844a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2206      	movs	r2, #6
 8006718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800671c:	e0e8      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	795b      	ldrb	r3, [r3, #5]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f002 fed1 	bl	80094cc <USBH_LL_GetURBState>
 800672a:	4603      	mov	r3, r0
 800672c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800672e:	7d3b      	ldrb	r3, [r7, #20]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d130      	bne.n	8006796 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	8912      	ldrh	r2, [r2, #8]
 800673c:	4293      	cmp	r3, r2
 800673e:	d910      	bls.n	8006762 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	8912      	ldrh	r2, [r2, #8]
 800674a:	441a      	add	r2, r3
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	8912      	ldrh	r2, [r2, #8]
 800675a:	1a9a      	subs	r2, r3, r2
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006760:	e002      	b.n	8006768 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2200      	movs	r2, #0
 8006766:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	891a      	ldrh	r2, [r3, #8]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	7958      	ldrb	r0, [r3, #5]
 800677e:	2301      	movs	r3, #1
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	4603      	mov	r3, r0
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fe60 	bl	800844a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800678a:	e0a8      	b.n	80068de <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2207      	movs	r2, #7
 8006790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006794:	e0a3      	b.n	80068de <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006796:	7d3b      	ldrb	r3, [r7, #20]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d104      	bne.n	80067a6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2205      	movs	r2, #5
 80067a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067a4:	e09b      	b.n	80068de <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 80067a6:	7d3b      	ldrb	r3, [r7, #20]
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	f040 8098 	bne.w	80068de <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	220a      	movs	r2, #10
 80067b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067b6:	e092      	b.n	80068de <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	791b      	ldrb	r3, [r3, #4]
 80067c2:	220d      	movs	r2, #13
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fe65 	bl	8008494 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2208      	movs	r2, #8
 80067ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067d2:	e08d      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	791b      	ldrb	r3, [r3, #4]
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f002 fe76 	bl	80094cc <USBH_LL_GetURBState>
 80067e0:	4603      	mov	r3, r0
 80067e2:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80067e4:	7d3b      	ldrb	r3, [r7, #20]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d115      	bne.n	8006816 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8aa 	bl	8006954 <USBH_MSC_DecodeCSW>
 8006800:	4603      	mov	r3, r0
 8006802:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006804:	7d7b      	ldrb	r3, [r7, #21]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800680e:	e068      	b.n	80068e2 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8006810:	2302      	movs	r3, #2
 8006812:	75fb      	strb	r3, [r7, #23]
      break;
 8006814:	e065      	b.n	80068e2 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8006816:	7d3b      	ldrb	r3, [r7, #20]
 8006818:	2b05      	cmp	r3, #5
 800681a:	d162      	bne.n	80068e2 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2209      	movs	r2, #9
 8006820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006824:	e05d      	b.n	80068e2 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	2200      	movs	r2, #0
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f865 	bl	80068fc <USBH_MSC_BOT_Abort>
 8006832:	4603      	mov	r3, r0
 8006834:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006836:	7dbb      	ldrb	r3, [r7, #22]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2207      	movs	r2, #7
 8006840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006844:	e04f      	b.n	80068e6 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006846:	7dbb      	ldrb	r3, [r7, #22]
 8006848:	2b04      	cmp	r3, #4
 800684a:	d14c      	bne.n	80068e6 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	220b      	movs	r2, #11
 8006850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006854:	e047      	b.n	80068e6 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	2201      	movs	r2, #1
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f84d 	bl	80068fc <USBH_MSC_BOT_Abort>
 8006862:	4603      	mov	r3, r0
 8006864:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006866:	7dbb      	ldrb	r3, [r7, #22]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11d      	bne.n	80068a8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	795b      	ldrb	r3, [r3, #5]
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f002 fe87 	bl	8009586 <USBH_LL_GetToggle>
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	7959      	ldrb	r1, [r3, #5]
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	f1c3 0301 	rsb	r3, r3, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f002 fe48 	bl	8009520 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	791b      	ldrb	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f002 fe41 	bl	8009520 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2209      	movs	r2, #9
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80068a6:	e020      	b.n	80068ea <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 80068a8:	7dbb      	ldrb	r3, [r7, #22]
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d11d      	bne.n	80068ea <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	220b      	movs	r2, #11
 80068b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80068b6:	e018      	b.n	80068ea <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fdf0 	bl	800649e <USBH_MSC_BOT_REQ_Reset>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d112      	bne.n	80068ee <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80068d0:	e00d      	b.n	80068ee <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 80068d2:	bf00      	nop
 80068d4:	e00c      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>
      break;
 80068d6:	bf00      	nop
 80068d8:	e00a      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>
      break;
 80068da:	bf00      	nop
 80068dc:	e008      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>
      break;
 80068de:	bf00      	nop
 80068e0:	e006      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>
      break;
 80068e2:	bf00      	nop
 80068e4:	e004      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>
      break;
 80068e6:	bf00      	nop
 80068e8:	e002      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>
      break;
 80068ea:	bf00      	nop
 80068ec:	e000      	b.n	80068f0 <USBH_MSC_BOT_Process+0x398>
      break;
 80068ee:	bf00      	nop
  }
  return status;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop

080068fc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
 8006908:	4613      	mov	r3, r2
 800690a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800690c:	2302      	movs	r3, #2
 800690e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800691a:	78bb      	ldrb	r3, [r7, #2]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <USBH_MSC_BOT_Abort+0x2a>
 8006920:	2b01      	cmp	r3, #1
 8006922:	d009      	beq.n	8006938 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006924:	e011      	b.n	800694a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	79db      	ldrb	r3, [r3, #7]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 f99c 	bl	8007c6a <USBH_ClrFeature>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
      break;
 8006936:	e008      	b.n	800694a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	799b      	ldrb	r3, [r3, #6]
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 f993 	bl	8007c6a <USBH_ClrFeature>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	bf00      	nop
  }
  return status;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006966:	2301      	movs	r3, #1
 8006968:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	791b      	ldrb	r3, [r3, #4]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f002 fd19 	bl	80093a8 <USBH_LL_GetLastXferSize>
 8006976:	4603      	mov	r3, r0
 8006978:	2b0d      	cmp	r3, #13
 800697a:	d002      	beq.n	8006982 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800697c:	2302      	movs	r3, #2
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e024      	b.n	80069cc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <USBH_MSC_DecodeCSW+0x84>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d11d      	bne.n	80069c8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006994:	429a      	cmp	r2, r3
 8006996:	d119      	bne.n	80069cc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d102      	bne.n	80069a8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	e011      	b.n	80069cc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d102      	bne.n	80069b8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80069b2:	2301      	movs	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
 80069b6:	e009      	b.n	80069cc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d104      	bne.n	80069cc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80069c2:	2302      	movs	r3, #2
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	e001      	b.n	80069cc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80069c8:	2302      	movs	r3, #2
 80069ca:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	53425355 	.word	0x53425355

080069dc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80069e8:	2302      	movs	r3, #2
 80069ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d002      	beq.n	8006a06 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d021      	beq.n	8006a48 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006a04:	e028      	b.n	8006a58 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	220a      	movs	r2, #10
 8006a18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3363      	adds	r3, #99	; 0x63
 8006a20:	2210      	movs	r2, #16
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f002 ffb8 	bl	800999a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]
      break;
 8006a46:	e007      	b.n	8006a58 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff fd83 	bl	8006558 <USBH_MSC_BOT_Process>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	bf00      	nop
  }

  return error;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006a70:	2301      	movs	r3, #1
 8006a72:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d002      	beq.n	8006a8e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d027      	beq.n	8006adc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006a8c:	e05f      	b.n	8006b4e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2208      	movs	r2, #8
 8006a92:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2280      	movs	r2, #128	; 0x80
 8006a98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3363      	adds	r3, #99	; 0x63
 8006aa8:	2210      	movs	r2, #16
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f002 ff74 	bl	800999a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2225      	movs	r2, #37	; 0x25
 8006ab6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f103 0210 	add.w	r2, r3, #16
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ada:	e038      	b.n	8006b4e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff fd39 	bl	8006558 <USBH_MSC_BOT_Process>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d12d      	bne.n	8006b4c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af6:	3303      	adds	r3, #3
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b02:	3302      	adds	r3, #2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b10:	3301      	adds	r3, #1
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006b16:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2e:	3307      	adds	r3, #7
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3a:	3306      	adds	r3, #6
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4313      	orrs	r3, r2
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	809a      	strh	r2, [r3, #4]
      break;
 8006b4c:	bf00      	nop
  }

  return error;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	460b      	mov	r3, r1
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006b66:	2302      	movs	r3, #2
 8006b68:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d002      	beq.n	8006b84 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d03d      	beq.n	8006bfe <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006b82:	e089      	b.n	8006c98 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2224      	movs	r2, #36	; 0x24
 8006b88:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2280      	movs	r2, #128	; 0x80
 8006b8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	220a      	movs	r2, #10
 8006b96:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3363      	adds	r3, #99	; 0x63
 8006b9e:	220a      	movs	r2, #10
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f002 fef9 	bl	800999a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2212      	movs	r2, #18
 8006bac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	015b      	lsls	r3, r3, #5
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2224      	movs	r2, #36	; 0x24
 8006bd0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f103 0210 	add.w	r2, r3, #16
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfc:	e04c      	b.n	8006c98 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	4619      	mov	r1, r3
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff fca8 	bl	8006558 <USBH_MSC_BOT_Process>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d141      	bne.n	8006c96 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006c12:	2222      	movs	r2, #34	; 0x22
 8006c14:	2100      	movs	r1, #0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f002 febf 	bl	800999a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c44:	3301      	adds	r3, #1
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da03      	bge.n	8006c56 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	709a      	strb	r2, [r3, #2]
 8006c54:	e002      	b.n	8006c5c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1cd8      	adds	r0, r3, #3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c66:	3308      	adds	r3, #8
 8006c68:	2208      	movs	r2, #8
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f002 fe8a 	bl	8009984 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f103 000c 	add.w	r0, r3, #12
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	2210      	movs	r2, #16
 8006c80:	4619      	mov	r1, r3
 8006c82:	f002 fe7f 	bl	8009984 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	331d      	adds	r3, #29
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006c90:	3220      	adds	r2, #32
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	601a      	str	r2, [r3, #0]
      break;
 8006c96:	bf00      	nop
  }

  return error;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	460b      	mov	r3, r1
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d002      	beq.n	8006cce <USBH_MSC_SCSI_RequestSense+0x2c>
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d03d      	beq.n	8006d48 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006ccc:	e05d      	b.n	8006d8a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	220e      	movs	r2, #14
 8006cd2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	220a      	movs	r2, #10
 8006ce0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	3363      	adds	r3, #99	; 0x63
 8006ce8:	2210      	movs	r2, #16
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f002 fe54 	bl	800999a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006cfa:	7afb      	ldrb	r3, [r7, #11]
 8006cfc:	015b      	lsls	r3, r3, #5
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	220e      	movs	r2, #14
 8006d1a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f103 0210 	add.w	r2, r3, #16
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
      break;
 8006d46:	e020      	b.n	8006d8a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006d48:	7afb      	ldrb	r3, [r7, #11]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff fc03 	bl	8006558 <USBH_MSC_BOT_Process>
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d115      	bne.n	8006d88 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d62:	3302      	adds	r3, #2
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d76:	7b1a      	ldrb	r2, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d82:	7b5a      	ldrb	r2, [r3, #13]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	709a      	strb	r2, [r3, #2]
      break;
 8006d88:	bf00      	nop
  }

  return error;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	460b      	mov	r3, r1
 8006da2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006da4:	2302      	movs	r3, #2
 8006da6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d002      	beq.n	8006dc2 <USBH_MSC_SCSI_Write+0x2e>
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d047      	beq.n	8006e50 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006dc0:	e04e      	b.n	8006e60 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	fb03 f202 	mul.w	r2, r3, r2
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	220a      	movs	r2, #10
 8006de0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	3363      	adds	r3, #99	; 0x63
 8006de8:	2210      	movs	r2, #16
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f002 fdd4 	bl	800999a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	222a      	movs	r2, #42	; 0x2a
 8006df6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006dfa:	79fa      	ldrb	r2, [r7, #7]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006e02:	79ba      	ldrb	r2, [r7, #6]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006e0a:	797a      	ldrb	r2, [r7, #5]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	781a      	ldrb	r2, [r3, #0]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006e1c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006e26:	f107 0320 	add.w	r3, r7, #32
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4e:	e007      	b.n	8006e60 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006e50:	7afb      	ldrb	r3, [r7, #11]
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fb7f 	bl	8006558 <USBH_MSC_BOT_Process>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5e:	bf00      	nop
  }

  return error;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
 8006e76:	460b      	mov	r3, r1
 8006e78:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d002      	beq.n	8006e98 <USBH_MSC_SCSI_Read+0x2e>
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d047      	beq.n	8006f26 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006e96:	e04e      	b.n	8006f36 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	fb03 f202 	mul.w	r2, r3, r2
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2280      	movs	r2, #128	; 0x80
 8006eae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	220a      	movs	r2, #10
 8006eb6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3363      	adds	r3, #99	; 0x63
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f002 fd69 	bl	800999a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2228      	movs	r2, #40	; 0x28
 8006ecc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006ed0:	79fa      	ldrb	r2, [r7, #7]
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006ed8:	79ba      	ldrb	r2, [r7, #6]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006ee0:	797a      	ldrb	r2, [r7, #5]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006ee8:	1d3b      	adds	r3, r7, #4
 8006eea:	781a      	ldrb	r2, [r3, #0]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006ef2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006efc:	f107 0320 	add.w	r3, r7, #32
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006f20:	2301      	movs	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
      break;
 8006f24:	e007      	b.n	8006f36 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fb14 	bl	8006558 <USBH_MSC_BOT_Process>
 8006f30:	4603      	mov	r3, r0
 8006f32:	75fb      	strb	r3, [r7, #23]
      break;
 8006f34:	bf00      	nop
  }

  return error;
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e029      	b.n	8006fac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	79fa      	ldrb	r2, [r7, #7]
 8006f5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f81f 	bl	8006fb4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f002 f94d 	bl	8009244 <USBH_LL_Init>

  return USBH_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e009      	b.n	8006fda <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	33e0      	adds	r3, #224	; 0xe0
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b0e      	cmp	r3, #14
 8006fde:	d9f2      	bls.n	8006fc6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e009      	b.n	8006ffa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007000:	d3f1      	bcc.n	8006fe6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2240      	movs	r2, #64	; 0x40
 8007026:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d016      	beq.n	800709e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10e      	bne.n	8007098 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	33de      	adds	r3, #222	; 0xde
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
 8007096:	e004      	b.n	80070a2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007098:	2302      	movs	r3, #2
 800709a:	73fb      	strb	r3, [r7, #15]
 800709c:	e001      	b.n	80070a2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800709e:	2302      	movs	r3, #2
 80070a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d204      	bcs.n	80070d6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070d4:	e001      	b.n	80070da <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	70fb      	strb	r3, [r7, #3]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70bb      	strb	r3, [r7, #2]
 80070fe:	4613      	mov	r3, r2
 8007100:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007110:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007112:	e025      	b.n	8007160 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	221a      	movs	r2, #26
 8007118:	fb02 f303 	mul.w	r3, r2, r3
 800711c:	3308      	adds	r3, #8
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	3302      	adds	r3, #2
 8007124:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	795b      	ldrb	r3, [r3, #5]
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	429a      	cmp	r2, r3
 800712e:	d002      	beq.n	8007136 <USBH_FindInterface+0x4e>
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	2bff      	cmp	r3, #255	; 0xff
 8007134:	d111      	bne.n	800715a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800713a:	78ba      	ldrb	r2, [r7, #2]
 800713c:	429a      	cmp	r2, r3
 800713e:	d002      	beq.n	8007146 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007140:	78bb      	ldrb	r3, [r7, #2]
 8007142:	2bff      	cmp	r3, #255	; 0xff
 8007144:	d109      	bne.n	800715a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800714a:	787a      	ldrb	r2, [r7, #1]
 800714c:	429a      	cmp	r2, r3
 800714e:	d002      	beq.n	8007156 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007150:	787b      	ldrb	r3, [r7, #1]
 8007152:	2bff      	cmp	r3, #255	; 0xff
 8007154:	d101      	bne.n	800715a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	e006      	b.n	8007168 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	3301      	adds	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d9d6      	bls.n	8007114 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007166:	23ff      	movs	r3, #255	; 0xff
}
 8007168:	4618      	mov	r0, r3
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f002 f89d 	bl	80092bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007182:	2101      	movs	r1, #1
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f002 f9b4 	bl	80094f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af04      	add	r7, sp, #16
 800719a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800719c:	2302      	movs	r3, #2
 800719e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d102      	bne.n	80071b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2203      	movs	r2, #3
 80071b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b0b      	cmp	r3, #11
 80071be:	f200 81b3 	bhi.w	8007528 <USBH_Process+0x394>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <USBH_Process+0x34>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071f9 	.word	0x080071f9
 80071cc:	0800722b 	.word	0x0800722b
 80071d0:	08007293 	.word	0x08007293
 80071d4:	080074c3 	.word	0x080074c3
 80071d8:	08007529 	.word	0x08007529
 80071dc:	08007337 	.word	0x08007337
 80071e0:	08007469 	.word	0x08007469
 80071e4:	0800736d 	.word	0x0800736d
 80071e8:	0800738d 	.word	0x0800738d
 80071ec:	080073ad 	.word	0x080073ad
 80071f0:	080073db 	.word	0x080073db
 80071f4:	080074ab 	.word	0x080074ab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8193 	beq.w	800752c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800720c:	20c8      	movs	r0, #200	; 0xc8
 800720e:	f002 f9ed 	bl	80095ec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 f8ad 	bl	8009372 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007228:	e180      	b.n	800752c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007230:	2b01      	cmp	r3, #1
 8007232:	d107      	bne.n	8007244 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007242:	e182      	b.n	800754a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800724a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800724e:	d914      	bls.n	800727a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007256:	3301      	adds	r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007266:	2b03      	cmp	r3, #3
 8007268:	d903      	bls.n	8007272 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	220d      	movs	r2, #13
 800726e:	701a      	strb	r2, [r3, #0]
      break;
 8007270:	e16b      	b.n	800754a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
      break;
 8007278:	e167      	b.n	800754a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007280:	f103 020a 	add.w	r2, r3, #10
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800728a:	200a      	movs	r0, #10
 800728c:	f002 f9ae 	bl	80095ec <USBH_Delay>
      break;
 8007290:	e15b      	b.n	800754a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a2:	2104      	movs	r1, #4
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072a8:	2064      	movs	r0, #100	; 0x64
 80072aa:	f002 f99f 	bl	80095ec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f002 f83a 	bl	8009328 <USBH_LL_GetSpeed>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2205      	movs	r2, #5
 80072c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072c4:	2100      	movs	r1, #0
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 f931 	bl	800852e <USBH_AllocPipe>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072d4:	2180      	movs	r1, #128	; 0x80
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 f929 	bl	800852e <USBH_AllocPipe>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7919      	ldrb	r1, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072f8:	b292      	uxth	r2, r2
 80072fa:	9202      	str	r2, [sp, #8]
 80072fc:	2200      	movs	r2, #0
 80072fe:	9201      	str	r2, [sp, #4]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	4603      	mov	r3, r0
 8007304:	2280      	movs	r2, #128	; 0x80
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 f8e2 	bl	80084d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	7959      	ldrb	r1, [r3, #5]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007320:	b292      	uxth	r2, r2
 8007322:	9202      	str	r2, [sp, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4603      	mov	r3, r0
 800732c:	2200      	movs	r2, #0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 f8ce 	bl	80084d0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007334:	e109      	b.n	800754a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f90c 	bl	8007554 <USBH_HandleEnum>
 800733c:	4603      	mov	r3, r0
 800733e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	f040 80f3 	bne.w	8007530 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007358:	2b01      	cmp	r3, #1
 800735a:	d103      	bne.n	8007364 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2208      	movs	r2, #8
 8007360:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007362:	e0e5      	b.n	8007530 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2207      	movs	r2, #7
 8007368:	701a      	strb	r2, [r3, #0]
      break;
 800736a:	e0e1      	b.n	8007530 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 80de 	beq.w	8007534 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800737e:	2101      	movs	r1, #1
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2208      	movs	r2, #8
 8007388:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800738a:	e0d3      	b.n	8007534 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007392:	b29b      	uxth	r3, r3
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fc20 	bl	8007bdc <USBH_SetCfg>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f040 80ca 	bne.w	8007538 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2209      	movs	r2, #9
 80073a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073aa:	e0c5      	b.n	8007538 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80073ba:	2101      	movs	r1, #1
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc30 	bl	8007c22 <USBH_SetFeature>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f040 80b9 	bne.w	800753c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	220a      	movs	r2, #10
 80073ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073d0:	e0b4      	b.n	800753c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	220a      	movs	r2, #10
 80073d6:	701a      	strb	r2, [r3, #0]
      break;
 80073d8:	e0b0      	b.n	800753c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80ad 	beq.w	8007540 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
 80073f2:	e016      	b.n	8007422 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80073f4:	7bfa      	ldrb	r2, [r7, #15]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32de      	adds	r2, #222	; 0xde
 80073fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fe:	791a      	ldrb	r2, [r3, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007406:	429a      	cmp	r2, r3
 8007408:	d108      	bne.n	800741c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800740a:	7bfa      	ldrb	r2, [r7, #15]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	32de      	adds	r2, #222	; 0xde
 8007410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800741a:	e005      	b.n	8007428 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	3301      	adds	r3, #1
 8007420:	73fb      	strb	r3, [r7, #15]
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0e5      	beq.n	80073f4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d109      	bne.n	8007458 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2206      	movs	r2, #6
 8007448:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007450:	2103      	movs	r1, #3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007456:	e073      	b.n	8007540 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	220d      	movs	r2, #13
 800745c:	701a      	strb	r2, [r3, #0]
      break;
 800745e:	e06f      	b.n	8007540 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	220d      	movs	r2, #13
 8007464:	701a      	strb	r2, [r3, #0]
      break;
 8007466:	e06b      	b.n	8007540 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d017      	beq.n	80074a2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
 800747e:	4603      	mov	r3, r0
 8007480:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	220b      	movs	r2, #11
 800748e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007490:	e058      	b.n	8007544 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d154      	bne.n	8007544 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	220d      	movs	r2, #13
 800749e:	701a      	strb	r2, [r3, #0]
      break;
 80074a0:	e050      	b.n	8007544 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	220d      	movs	r2, #13
 80074a6:	701a      	strb	r2, [r3, #0]
      break;
 80074a8:	e04c      	b.n	8007544 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d049      	beq.n	8007548 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
      }
      break;
 80074c0:	e042      	b.n	8007548 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fd72 	bl	8006fb4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074fe:	2105      	movs	r1, #5
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d107      	bne.n	8007520 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff fe2b 	bl	8007174 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800751e:	e014      	b.n	800754a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fecb 	bl	80092bc <USBH_LL_Start>
      break;
 8007526:	e010      	b.n	800754a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007528:	bf00      	nop
 800752a:	e00e      	b.n	800754a <USBH_Process+0x3b6>
      break;
 800752c:	bf00      	nop
 800752e:	e00c      	b.n	800754a <USBH_Process+0x3b6>
      break;
 8007530:	bf00      	nop
 8007532:	e00a      	b.n	800754a <USBH_Process+0x3b6>
    break;
 8007534:	bf00      	nop
 8007536:	e008      	b.n	800754a <USBH_Process+0x3b6>
      break;
 8007538:	bf00      	nop
 800753a:	e006      	b.n	800754a <USBH_Process+0x3b6>
      break;
 800753c:	bf00      	nop
 800753e:	e004      	b.n	800754a <USBH_Process+0x3b6>
      break;
 8007540:	bf00      	nop
 8007542:	e002      	b.n	800754a <USBH_Process+0x3b6>
      break;
 8007544:	bf00      	nop
 8007546:	e000      	b.n	800754a <USBH_Process+0x3b6>
      break;
 8007548:	bf00      	nop
  }
  return USBH_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af04      	add	r7, sp, #16
 800755a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007560:	2301      	movs	r3, #1
 8007562:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b07      	cmp	r3, #7
 800756a:	f200 81c1 	bhi.w	80078f0 <USBH_HandleEnum+0x39c>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <USBH_HandleEnum+0x20>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	08007595 	.word	0x08007595
 8007578:	08007653 	.word	0x08007653
 800757c:	080076bd 	.word	0x080076bd
 8007580:	0800774b 	.word	0x0800774b
 8007584:	080077b5 	.word	0x080077b5
 8007588:	08007825 	.word	0x08007825
 800758c:	0800786b 	.word	0x0800786b
 8007590:	080078b1 	.word	0x080078b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007594:	2108      	movs	r1, #8
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fa50 	bl	8007a3c <USBH_Get_DevDesc>
 800759c:	4603      	mov	r3, r0
 800759e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d130      	bne.n	8007608 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	7919      	ldrb	r1, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ca:	b292      	uxth	r2, r2
 80075cc:	9202      	str	r2, [sp, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	9201      	str	r2, [sp, #4]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4603      	mov	r3, r0
 80075d6:	2280      	movs	r2, #128	; 0x80
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 ff79 	bl	80084d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7959      	ldrb	r1, [r3, #5]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075f2:	b292      	uxth	r2, r2
 80075f4:	9202      	str	r2, [sp, #8]
 80075f6:	2200      	movs	r2, #0
 80075f8:	9201      	str	r2, [sp, #4]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	4603      	mov	r3, r0
 80075fe:	2200      	movs	r2, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 ff65 	bl	80084d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007606:	e175      	b.n	80078f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b03      	cmp	r3, #3
 800760c:	f040 8172 	bne.w	80078f4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007616:	3301      	adds	r3, #1
 8007618:	b2da      	uxtb	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007626:	2b03      	cmp	r3, #3
 8007628:	d903      	bls.n	8007632 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	220d      	movs	r2, #13
 800762e:	701a      	strb	r2, [r3, #0]
      break;
 8007630:	e160      	b.n	80078f4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	795b      	ldrb	r3, [r3, #5]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 ff99 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	791b      	ldrb	r3, [r3, #4]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 ff93 	bl	8008570 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
      break;
 8007650:	e150      	b.n	80078f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007652:	2112      	movs	r1, #18
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f9f1 	bl	8007a3c <USBH_Get_DevDesc>
 800765a:	4603      	mov	r3, r0
 800765c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d103      	bne.n	800766c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800766a:	e145      	b.n	80078f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b03      	cmp	r3, #3
 8007670:	f040 8142 	bne.w	80078f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800767a:	3301      	adds	r3, #1
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800768a:	2b03      	cmp	r3, #3
 800768c:	d903      	bls.n	8007696 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	220d      	movs	r2, #13
 8007692:	701a      	strb	r2, [r3, #0]
      break;
 8007694:	e130      	b.n	80078f8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	795b      	ldrb	r3, [r3, #5]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 ff67 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	791b      	ldrb	r3, [r3, #4]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 ff61 	bl	8008570 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
      break;
 80076ba:	e11d      	b.n	80078f8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076bc:	2101      	movs	r1, #1
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa68 	bl	8007b94 <USBH_SetAddress>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d132      	bne.n	8007734 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076ce:	2002      	movs	r0, #2
 80076d0:	f001 ff8c 	bl	80095ec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2203      	movs	r2, #3
 80076e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7919      	ldrb	r1, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076f6:	b292      	uxth	r2, r2
 80076f8:	9202      	str	r2, [sp, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	9201      	str	r2, [sp, #4]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	4603      	mov	r3, r0
 8007702:	2280      	movs	r2, #128	; 0x80
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fee3 	bl	80084d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7959      	ldrb	r1, [r3, #5]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800771e:	b292      	uxth	r2, r2
 8007720:	9202      	str	r2, [sp, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	9201      	str	r2, [sp, #4]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	4603      	mov	r3, r0
 800772a:	2200      	movs	r2, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fecf 	bl	80084d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007732:	e0e3      	b.n	80078fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b03      	cmp	r3, #3
 8007738:	f040 80e0 	bne.w	80078fc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	220d      	movs	r2, #13
 8007740:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	705a      	strb	r2, [r3, #1]
      break;
 8007748:	e0d8      	b.n	80078fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800774a:	2109      	movs	r1, #9
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f99d 	bl	8007a8c <USBH_Get_CfgDesc>
 8007752:	4603      	mov	r3, r0
 8007754:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d103      	bne.n	8007764 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2204      	movs	r2, #4
 8007760:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007762:	e0cd      	b.n	8007900 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b03      	cmp	r3, #3
 8007768:	f040 80ca 	bne.w	8007900 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007772:	3301      	adds	r3, #1
 8007774:	b2da      	uxtb	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007782:	2b03      	cmp	r3, #3
 8007784:	d903      	bls.n	800778e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	220d      	movs	r2, #13
 800778a:	701a      	strb	r2, [r3, #0]
      break;
 800778c:	e0b8      	b.n	8007900 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	795b      	ldrb	r3, [r3, #5]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 feeb 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	791b      	ldrb	r3, [r3, #4]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fee5 	bl	8008570 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e0a5      	b.n	8007900 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f965 	bl	8007a8c <USBH_Get_CfgDesc>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2205      	movs	r2, #5
 80077d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077d2:	e097      	b.n	8007904 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	f040 8094 	bne.w	8007904 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077e2:	3301      	adds	r3, #1
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d903      	bls.n	80077fe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	220d      	movs	r2, #13
 80077fa:	701a      	strb	r2, [r3, #0]
      break;
 80077fc:	e082      	b.n	8007904 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	795b      	ldrb	r3, [r3, #5]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 feb3 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	791b      	ldrb	r3, [r3, #4]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fead 	bl	8008570 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	701a      	strb	r2, [r3, #0]
      break;
 8007822:	e06f      	b.n	8007904 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800782a:	2b00      	cmp	r3, #0
 800782c:	d019      	beq.n	8007862 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800783a:	23ff      	movs	r3, #255	; 0xff
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f949 	bl	8007ad4 <USBH_Get_StringDesc>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2206      	movs	r2, #6
 8007850:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007852:	e059      	b.n	8007908 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d156      	bne.n	8007908 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2206      	movs	r2, #6
 800785e:	705a      	strb	r2, [r3, #1]
      break;
 8007860:	e052      	b.n	8007908 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2206      	movs	r2, #6
 8007866:	705a      	strb	r2, [r3, #1]
      break;
 8007868:	e04e      	b.n	8007908 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007870:	2b00      	cmp	r3, #0
 8007872:	d019      	beq.n	80078a8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007880:	23ff      	movs	r3, #255	; 0xff
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f926 	bl	8007ad4 <USBH_Get_StringDesc>
 8007888:	4603      	mov	r3, r0
 800788a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d103      	bne.n	800789a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2207      	movs	r2, #7
 8007896:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007898:	e038      	b.n	800790c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b03      	cmp	r3, #3
 800789e:	d135      	bne.n	800790c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2207      	movs	r2, #7
 80078a4:	705a      	strb	r2, [r3, #1]
      break;
 80078a6:	e031      	b.n	800790c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2207      	movs	r2, #7
 80078ac:	705a      	strb	r2, [r3, #1]
      break;
 80078ae:	e02d      	b.n	800790c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d017      	beq.n	80078ea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078c6:	23ff      	movs	r3, #255	; 0xff
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f903 	bl	8007ad4 <USBH_Get_StringDesc>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078dc:	e018      	b.n	8007910 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d115      	bne.n	8007910 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
      break;
 80078e8:	e012      	b.n	8007910 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
      break;
 80078ee:	e00f      	b.n	8007910 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80078f0:	bf00      	nop
 80078f2:	e00e      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 80078f4:	bf00      	nop
 80078f6:	e00c      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 80078f8:	bf00      	nop
 80078fa:	e00a      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 80078fc:	bf00      	nop
 80078fe:	e008      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 8007900:	bf00      	nop
 8007902:	e006      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 8007904:	bf00      	nop
 8007906:	e004      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 8007908:	bf00      	nop
 800790a:	e002      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 800790c:	bf00      	nop
 800790e:	e000      	b.n	8007912 <USBH_HandleEnum+0x3be>
      break;
 8007910:	bf00      	nop
  }
  return Status;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f804 	bl	800795e <USBH_HandleSof>
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b0b      	cmp	r3, #11
 800796e:	d10a      	bne.n	8007986 <USBH_HandleSof+0x28>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
  }
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800799e:	bf00      	nop
}
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079ba:	bf00      	nop
}
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fc6c 	bl	80092f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	791b      	ldrb	r3, [r3, #4]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fda5 	bl	8008570 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	795b      	ldrb	r3, [r3, #5]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fd9f 	bl	8008570 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f864 	bl	8007b2a <USBH_GetDescriptor>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10a      	bne.n	8007a82 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f000 f918 	bl	8007cb2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	331c      	adds	r3, #28
 8007a9c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a9e:	887b      	ldrh	r3, [r7, #2]
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f83d 	bl	8007b2a <USBH_GetDescriptor>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	72fb      	strb	r3, [r7, #11]
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d107      	bne.n	8007aca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ac0:	887a      	ldrh	r2, [r7, #2]
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f964 	bl	8007d92 <USBH_ParseCfgDesc>
  }

  return status;
 8007aca:	7afb      	ldrb	r3, [r7, #11]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	607a      	str	r2, [r7, #4]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	72fb      	strb	r3, [r7, #11]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007af0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007af8:	893b      	ldrh	r3, [r7, #8]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	460b      	mov	r3, r1
 8007afe:	2100      	movs	r1, #0
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f812 	bl	8007b2a <USBH_GetDescriptor>
 8007b06:	4603      	mov	r3, r0
 8007b08:	75fb      	strb	r3, [r7, #23]
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d107      	bne.n	8007b20 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b16:	893a      	ldrh	r2, [r7, #8]
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fa37 	bl	8007f8e <USBH_ParseStringDesc>
  }

  return status;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	607b      	str	r3, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	72fb      	strb	r3, [r7, #11]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	789b      	ldrb	r3, [r3, #2]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d11c      	bne.n	8007b7e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2206      	movs	r2, #6
 8007b54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	893a      	ldrh	r2, [r7, #8]
 8007b5a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b5c:	893b      	ldrh	r3, [r7, #8]
 8007b5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b66:	d104      	bne.n	8007b72 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f240 4209 	movw	r2, #1033	; 0x409
 8007b6e:	829a      	strh	r2, [r3, #20]
 8007b70:	e002      	b.n	8007b78 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8b3a      	ldrh	r2, [r7, #24]
 8007b7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b7e:	8b3b      	ldrh	r3, [r7, #24]
 8007b80:	461a      	mov	r2, r3
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fa50 	bl	800802a <USBH_CtlReq>
 8007b8a:	4603      	mov	r3, r0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10f      	bne.n	8007bc8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fa2c 	bl	800802a <USBH_CtlReq>
 8007bd2:	4603      	mov	r3, r0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	789b      	ldrb	r3, [r3, #2]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10e      	bne.n	8007c0e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2209      	movs	r2, #9
 8007bfa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	887a      	ldrh	r2, [r7, #2]
 8007c00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa09 	bl	800802a <USBH_CtlReq>
 8007c18:	4603      	mov	r3, r0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	789b      	ldrb	r3, [r3, #2]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d10f      	bne.n	8007c56 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2203      	movs	r2, #3
 8007c40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c42:	78fb      	ldrb	r3, [r7, #3]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f9e5 	bl	800802a <USBH_CtlReq>
 8007c60:	4603      	mov	r3, r0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	789b      	ldrb	r3, [r3, #2]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10f      	bne.n	8007c9e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2202      	movs	r2, #2
 8007c82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9c1 	bl	800802a <USBH_CtlReq>
 8007ca8:	4603      	mov	r3, r0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	785a      	ldrb	r2, [r3, #1]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3303      	adds	r3, #3
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	791a      	ldrb	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	795a      	ldrb	r2, [r3, #5]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	799a      	ldrb	r2, [r3, #6]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	79da      	ldrb	r2, [r3, #7]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	d939      	bls.n	8007d86 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	3308      	adds	r3, #8
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	3309      	adds	r3, #9
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	330a      	adds	r3, #10
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	330b      	adds	r3, #11
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	330d      	adds	r3, #13
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	7b9a      	ldrb	r2, [r3, #14]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	7bda      	ldrb	r2, [r3, #15]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	7c1a      	ldrb	r2, [r3, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	7c5a      	ldrb	r2, [r3, #17]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	745a      	strb	r2, [r3, #17]
  }
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b08a      	sub	sp, #40	; 0x28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	781a      	ldrb	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	785a      	ldrb	r2, [r3, #1]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3302      	adds	r3, #2
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	3303      	adds	r3, #3
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	791a      	ldrb	r2, [r3, #4]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	795a      	ldrb	r2, [r3, #5]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	799a      	ldrb	r2, [r3, #6]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	79da      	ldrb	r2, [r3, #7]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	7a1a      	ldrb	r2, [r3, #8]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	2b09      	cmp	r3, #9
 8007e0c:	d95f      	bls.n	8007ece <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e0e:	2309      	movs	r3, #9
 8007e10:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e16:	e051      	b.n	8007ebc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e18:	f107 0316 	add.w	r3, r7, #22
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e20:	f000 f8e8 	bl	8007ff4 <USBH_GetNextDesc>
 8007e24:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d146      	bne.n	8007ebc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e32:	221a      	movs	r2, #26
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
 8007e38:	3308      	adds	r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3302      	adds	r3, #2
 8007e40:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e44:	69f8      	ldr	r0, [r7, #28]
 8007e46:	f000 f846 	bl	8007ed6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e54:	e022      	b.n	8007e9c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e56:	f107 0316 	add.w	r3, r7, #22
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e5e:	f000 f8c9 	bl	8007ff4 <USBH_GetNextDesc>
 8007e62:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b05      	cmp	r3, #5
 8007e6a:	d117      	bne.n	8007e9c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007e74:	3201      	adds	r2, #1
 8007e76:	00d2      	lsls	r2, r2, #3
 8007e78:	211a      	movs	r1, #26
 8007e7a:	fb01 f303 	mul.w	r3, r1, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	3308      	adds	r3, #8
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	3304      	adds	r3, #4
 8007e88:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e8c:	69b8      	ldr	r0, [r7, #24]
 8007e8e:	f000 f851 	bl	8007f34 <USBH_ParseEPDesc>
            ep_ix++;
 8007e92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007e96:	3301      	adds	r3, #1
 8007e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	791b      	ldrb	r3, [r3, #4]
 8007ea0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d204      	bcs.n	8007eb2 <USBH_ParseCfgDesc+0x120>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	885a      	ldrh	r2, [r3, #2]
 8007eac:	8afb      	ldrh	r3, [r7, #22]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d8d1      	bhi.n	8007e56 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d804      	bhi.n	8007ece <USBH_ParseCfgDesc+0x13c>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	885a      	ldrh	r2, [r3, #2]
 8007ec8:	8afb      	ldrh	r3, [r7, #22]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d8a4      	bhi.n	8007e18 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007ece:	bf00      	nop
 8007ed0:	3728      	adds	r7, #40	; 0x28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781a      	ldrb	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785a      	ldrb	r2, [r3, #1]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	789a      	ldrb	r2, [r3, #2]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	78da      	ldrb	r2, [r3, #3]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	791a      	ldrb	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	795a      	ldrb	r2, [r3, #5]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	799a      	ldrb	r2, [r3, #6]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	79da      	ldrb	r2, [r3, #7]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	7a1a      	ldrb	r2, [r3, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	721a      	strb	r2, [r3, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	785a      	ldrb	r2, [r3, #1]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	789a      	ldrb	r2, [r3, #2]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	78da      	ldrb	r2, [r3, #3]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	3304      	adds	r3, #4
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	3305      	adds	r3, #5
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	4313      	orrs	r3, r2
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	799a      	ldrb	r2, [r3, #6]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	719a      	strb	r2, [r3, #6]
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b087      	sub	sp, #28
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d120      	bne.n	8007fe8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	1e9a      	subs	r2, r3, #2
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	bf28      	it	cs
 8007fb2:	4613      	movcs	r3, r2
 8007fb4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3302      	adds	r3, #2
 8007fba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	82fb      	strh	r3, [r7, #22]
 8007fc0:	e00b      	b.n	8007fda <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007fc2:	8afb      	ldrh	r3, [r7, #22]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007fd4:	8afb      	ldrh	r3, [r7, #22]
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	82fb      	strh	r3, [r7, #22]
 8007fda:	8afa      	ldrh	r2, [r7, #22]
 8007fdc:	8abb      	ldrh	r3, [r7, #20]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d3ef      	bcc.n	8007fc2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
  }
}
 8007fe8:	bf00      	nop
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	881a      	ldrh	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	4413      	add	r3, r2
 800800a:	b29a      	uxth	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800801c:	68fb      	ldr	r3, [r7, #12]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b086      	sub	sp, #24
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	4613      	mov	r3, r2
 8008036:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008038:	2301      	movs	r3, #1
 800803a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	789b      	ldrb	r3, [r3, #2]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d002      	beq.n	800804a <USBH_CtlReq+0x20>
 8008044:	2b02      	cmp	r3, #2
 8008046:	d00f      	beq.n	8008068 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008048:	e027      	b.n	800809a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2202      	movs	r2, #2
 8008060:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008062:	2301      	movs	r3, #1
 8008064:	75fb      	strb	r3, [r7, #23]
      break;
 8008066:	e018      	b.n	800809a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f81b 	bl	80080a4 <USBH_HandleControl>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <USBH_CtlReq+0x54>
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	2b03      	cmp	r3, #3
 800807c:	d106      	bne.n	800808c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	761a      	strb	r2, [r3, #24]
      break;
 800808a:	e005      	b.n	8008098 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d102      	bne.n	8008098 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	709a      	strb	r2, [r3, #2]
      break;
 8008098:	bf00      	nop
  }
  return status;
 800809a:	7dfb      	ldrb	r3, [r7, #23]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080ac:	2301      	movs	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	7e1b      	ldrb	r3, [r3, #24]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	2b0a      	cmp	r3, #10
 80080bc:	f200 8158 	bhi.w	8008370 <USBH_HandleControl+0x2cc>
 80080c0:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <USBH_HandleControl+0x24>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	080080f5 	.word	0x080080f5
 80080cc:	0800810f 	.word	0x0800810f
 80080d0:	08008179 	.word	0x08008179
 80080d4:	0800819f 	.word	0x0800819f
 80080d8:	080081d7 	.word	0x080081d7
 80080dc:	08008203 	.word	0x08008203
 80080e0:	08008255 	.word	0x08008255
 80080e4:	08008277 	.word	0x08008277
 80080e8:	080082b3 	.word	0x080082b3
 80080ec:	080082db 	.word	0x080082db
 80080f0:	08008319 	.word	0x08008319
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f103 0110 	add.w	r1, r3, #16
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	795b      	ldrb	r3, [r3, #5]
 80080fe:	461a      	mov	r2, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f945 	bl	8008390 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	761a      	strb	r2, [r3, #24]
      break;
 800810c:	e13b      	b.n	8008386 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	795b      	ldrb	r3, [r3, #5]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f9d9 	bl	80094cc <USBH_LL_GetURBState>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d11e      	bne.n	8008162 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7c1b      	ldrb	r3, [r3, #16]
 8008128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800812c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8adb      	ldrh	r3, [r3, #22]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008136:	7b7b      	ldrb	r3, [r7, #13]
 8008138:	2b80      	cmp	r3, #128	; 0x80
 800813a:	d103      	bne.n	8008144 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2203      	movs	r2, #3
 8008140:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008142:	e117      	b.n	8008374 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2205      	movs	r2, #5
 8008148:	761a      	strb	r2, [r3, #24]
      break;
 800814a:	e113      	b.n	8008374 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800814c:	7b7b      	ldrb	r3, [r7, #13]
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d103      	bne.n	800815a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2209      	movs	r2, #9
 8008156:	761a      	strb	r2, [r3, #24]
      break;
 8008158:	e10c      	b.n	8008374 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2207      	movs	r2, #7
 800815e:	761a      	strb	r2, [r3, #24]
      break;
 8008160:	e108      	b.n	8008374 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b04      	cmp	r3, #4
 8008166:	d003      	beq.n	8008170 <USBH_HandleControl+0xcc>
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b02      	cmp	r3, #2
 800816c:	f040 8102 	bne.w	8008374 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	220b      	movs	r2, #11
 8008174:	761a      	strb	r2, [r3, #24]
      break;
 8008176:	e0fd      	b.n	8008374 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6899      	ldr	r1, [r3, #8]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	899a      	ldrh	r2, [r3, #12]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	791b      	ldrb	r3, [r3, #4]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f93c 	bl	800840e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2204      	movs	r2, #4
 800819a:	761a      	strb	r2, [r3, #24]
      break;
 800819c:	e0f3      	b.n	8008386 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	791b      	ldrb	r3, [r3, #4]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f991 	bl	80094cc <USBH_LL_GetURBState>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d102      	bne.n	80081ba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2209      	movs	r2, #9
 80081b8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b05      	cmp	r3, #5
 80081be:	d102      	bne.n	80081c6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80081c0:	2303      	movs	r3, #3
 80081c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081c4:	e0d8      	b.n	8008378 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	f040 80d5 	bne.w	8008378 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	220b      	movs	r2, #11
 80081d2:	761a      	strb	r2, [r3, #24]
      break;
 80081d4:	e0d0      	b.n	8008378 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6899      	ldr	r1, [r3, #8]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	899a      	ldrh	r2, [r3, #12]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	7958      	ldrb	r0, [r3, #5]
 80081e2:	2301      	movs	r3, #1
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4603      	mov	r3, r0
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f8eb 	bl	80083c4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2206      	movs	r2, #6
 80081fe:	761a      	strb	r2, [r3, #24]
      break;
 8008200:	e0c1      	b.n	8008386 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	795b      	ldrb	r3, [r3, #5]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f95f 	bl	80094cc <USBH_LL_GetURBState>
 800820e:	4603      	mov	r3, r0
 8008210:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d103      	bne.n	8008220 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2207      	movs	r2, #7
 800821c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800821e:	e0ad      	b.n	800837c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b05      	cmp	r3, #5
 8008224:	d105      	bne.n	8008232 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	220c      	movs	r2, #12
 800822a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800822c:	2303      	movs	r3, #3
 800822e:	73fb      	strb	r3, [r7, #15]
      break;
 8008230:	e0a4      	b.n	800837c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d103      	bne.n	8008240 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2205      	movs	r2, #5
 800823c:	761a      	strb	r2, [r3, #24]
      break;
 800823e:	e09d      	b.n	800837c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b04      	cmp	r3, #4
 8008244:	f040 809a 	bne.w	800837c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	220b      	movs	r2, #11
 800824c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800824e:	2302      	movs	r3, #2
 8008250:	73fb      	strb	r3, [r7, #15]
      break;
 8008252:	e093      	b.n	800837c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	791b      	ldrb	r3, [r3, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	2100      	movs	r1, #0
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f8d6 	bl	800840e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2208      	movs	r2, #8
 8008272:	761a      	strb	r2, [r3, #24]

      break;
 8008274:	e087      	b.n	8008386 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f925 	bl	80094cc <USBH_LL_GetURBState>
 8008282:	4603      	mov	r3, r0
 8008284:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d105      	bne.n	8008298 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	220d      	movs	r2, #13
 8008290:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008296:	e073      	b.n	8008380 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b04      	cmp	r3, #4
 800829c:	d103      	bne.n	80082a6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	220b      	movs	r2, #11
 80082a2:	761a      	strb	r2, [r3, #24]
      break;
 80082a4:	e06c      	b.n	8008380 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	d169      	bne.n	8008380 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80082ac:	2303      	movs	r3, #3
 80082ae:	73fb      	strb	r3, [r7, #15]
      break;
 80082b0:	e066      	b.n	8008380 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	795a      	ldrb	r2, [r3, #5]
 80082b6:	2301      	movs	r3, #1
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	2200      	movs	r2, #0
 80082be:	2100      	movs	r1, #0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f87f 	bl	80083c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	220a      	movs	r2, #10
 80082d6:	761a      	strb	r2, [r3, #24]
      break;
 80082d8:	e055      	b.n	8008386 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	795b      	ldrb	r3, [r3, #5]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f8f3 	bl	80094cc <USBH_LL_GetURBState>
 80082e6:	4603      	mov	r3, r0
 80082e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d105      	bne.n	80082fc <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	220d      	movs	r2, #13
 80082f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082fa:	e043      	b.n	8008384 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d103      	bne.n	800830a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2209      	movs	r2, #9
 8008306:	761a      	strb	r2, [r3, #24]
      break;
 8008308:	e03c      	b.n	8008384 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b04      	cmp	r3, #4
 800830e:	d139      	bne.n	8008384 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	220b      	movs	r2, #11
 8008314:	761a      	strb	r2, [r3, #24]
      break;
 8008316:	e035      	b.n	8008384 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7e5b      	ldrb	r3, [r3, #25]
 800831c:	3301      	adds	r3, #1
 800831e:	b2da      	uxtb	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	765a      	strb	r2, [r3, #25]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7e5b      	ldrb	r3, [r3, #25]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d806      	bhi.n	800833a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008338:	e025      	b.n	8008386 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008340:	2106      	movs	r1, #6
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	795b      	ldrb	r3, [r3, #5]
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f90c 	bl	8008570 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	791b      	ldrb	r3, [r3, #4]
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f906 	bl	8008570 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800836a:	2302      	movs	r3, #2
 800836c:	73fb      	strb	r3, [r7, #15]
      break;
 800836e:	e00a      	b.n	8008386 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008370:	bf00      	nop
 8008372:	e008      	b.n	8008386 <USBH_HandleControl+0x2e2>
      break;
 8008374:	bf00      	nop
 8008376:	e006      	b.n	8008386 <USBH_HandleControl+0x2e2>
      break;
 8008378:	bf00      	nop
 800837a:	e004      	b.n	8008386 <USBH_HandleControl+0x2e2>
      break;
 800837c:	bf00      	nop
 800837e:	e002      	b.n	8008386 <USBH_HandleControl+0x2e2>
      break;
 8008380:	bf00      	nop
 8008382:	e000      	b.n	8008386 <USBH_HandleControl+0x2e2>
      break;
 8008384:	bf00      	nop
  }

  return status;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af04      	add	r7, sp, #16
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	4613      	mov	r3, r2
 800839c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800839e:	79f9      	ldrb	r1, [r7, #7]
 80083a0:	2300      	movs	r3, #0
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	2308      	movs	r3, #8
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	2300      	movs	r3, #0
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2300      	movs	r3, #0
 80083b2:	2200      	movs	r2, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f001 f858 	bl	800946a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4611      	mov	r1, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	460b      	mov	r3, r1
 80083d4:	80fb      	strh	r3, [r7, #6]
 80083d6:	4613      	mov	r3, r2
 80083d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083e8:	7979      	ldrb	r1, [r7, #5]
 80083ea:	7e3b      	ldrb	r3, [r7, #24]
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	2301      	movs	r3, #1
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	2300      	movs	r3, #0
 80083fc:	2200      	movs	r2, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f001 f833 	bl	800946a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b088      	sub	sp, #32
 8008412:	af04      	add	r7, sp, #16
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	4611      	mov	r1, r2
 800841a:	461a      	mov	r2, r3
 800841c:	460b      	mov	r3, r1
 800841e:	80fb      	strh	r3, [r7, #6]
 8008420:	4613      	mov	r3, r2
 8008422:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008424:	7979      	ldrb	r1, [r7, #5]
 8008426:	2300      	movs	r3, #0
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	9302      	str	r3, [sp, #8]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	2301      	movs	r3, #1
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2300      	movs	r3, #0
 8008438:	2201      	movs	r2, #1
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f001 f815 	bl	800946a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008440:	2300      	movs	r3, #0

}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af04      	add	r7, sp, #16
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	4611      	mov	r1, r2
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	80fb      	strh	r3, [r7, #6]
 800845c:	4613      	mov	r3, r2
 800845e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800846e:	7979      	ldrb	r1, [r7, #5]
 8008470:	7e3b      	ldrb	r3, [r7, #24]
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	88fb      	ldrh	r3, [r7, #6]
 8008476:	9302      	str	r3, [sp, #8]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	2301      	movs	r3, #1
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2302      	movs	r3, #2
 8008482:	2200      	movs	r2, #0
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fff0 	bl	800946a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af04      	add	r7, sp, #16
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4611      	mov	r1, r2
 80084a0:	461a      	mov	r2, r3
 80084a2:	460b      	mov	r3, r1
 80084a4:	80fb      	strh	r3, [r7, #6]
 80084a6:	4613      	mov	r3, r2
 80084a8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084aa:	7979      	ldrb	r1, [r7, #5]
 80084ac:	2300      	movs	r3, #0
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	9302      	str	r3, [sp, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	2301      	movs	r3, #1
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2302      	movs	r3, #2
 80084be:	2201      	movs	r2, #1
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 ffd2 	bl	800946a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af04      	add	r7, sp, #16
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	4608      	mov	r0, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	461a      	mov	r2, r3
 80084de:	4603      	mov	r3, r0
 80084e0:	70fb      	strb	r3, [r7, #3]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70bb      	strb	r3, [r7, #2]
 80084e6:	4613      	mov	r3, r2
 80084e8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084ea:	7878      	ldrb	r0, [r7, #1]
 80084ec:	78ba      	ldrb	r2, [r7, #2]
 80084ee:	78f9      	ldrb	r1, [r7, #3]
 80084f0:	8b3b      	ldrh	r3, [r7, #24]
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	7d3b      	ldrb	r3, [r7, #20]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	7c3b      	ldrb	r3, [r7, #16]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4603      	mov	r3, r0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 ff65 	bl	80093ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 ff84 	bl	800942c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f836 	bl	80085ac <USBH_GetFreePipe>
 8008540:	4603      	mov	r3, r0
 8008542:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008544:	89fb      	ldrh	r3, [r7, #14]
 8008546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800854a:	4293      	cmp	r3, r2
 800854c:	d00a      	beq.n	8008564 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	89fb      	ldrh	r3, [r7, #14]
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	33e0      	adds	r3, #224	; 0xe0
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008564:	89fb      	ldrh	r3, [r7, #14]
 8008566:	b2db      	uxtb	r3, r3
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d80d      	bhi.n	800859e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	33e0      	adds	r3, #224	; 0xe0
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	33e0      	adds	r3, #224	; 0xe0
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
 80085bc:	e00f      	b.n	80085de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	33e0      	adds	r3, #224	; 0xe0
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	e007      	b.n	80085e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	3301      	adds	r3, #1
 80085dc:	73fb      	strb	r3, [r7, #15]
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b0a      	cmp	r3, #10
 80085e2:	d9ec      	bls.n	80085be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	4a08      	ldr	r2, [pc, #32]	; (8008624 <disk_status+0x30>)
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	79fa      	ldrb	r2, [r7, #7]
 800860c:	4905      	ldr	r1, [pc, #20]	; (8008624 <disk_status+0x30>)
 800860e:	440a      	add	r2, r1
 8008610:	7a12      	ldrb	r2, [r2, #8]
 8008612:	4610      	mov	r0, r2
 8008614:	4798      	blx	r3
 8008616:	4603      	mov	r3, r0
 8008618:	73fb      	strb	r3, [r7, #15]
  return stat;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200000dc 	.word	0x200000dc

08008628 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	4a0d      	ldr	r2, [pc, #52]	; (8008670 <disk_initialize+0x48>)
 800863a:	5cd3      	ldrb	r3, [r2, r3]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d111      	bne.n	8008664 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	4a0b      	ldr	r2, [pc, #44]	; (8008670 <disk_initialize+0x48>)
 8008644:	2101      	movs	r1, #1
 8008646:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	4a09      	ldr	r2, [pc, #36]	; (8008670 <disk_initialize+0x48>)
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	79fa      	ldrb	r2, [r7, #7]
 8008656:	4906      	ldr	r1, [pc, #24]	; (8008670 <disk_initialize+0x48>)
 8008658:	440a      	add	r2, r1
 800865a:	7a12      	ldrb	r2, [r2, #8]
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200000dc 	.word	0x200000dc

08008674 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	4a0a      	ldr	r2, [pc, #40]	; (80086b0 <disk_read+0x3c>)
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	689c      	ldr	r4, [r3, #8]
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4a07      	ldr	r2, [pc, #28]	; (80086b0 <disk_read+0x3c>)
 8008694:	4413      	add	r3, r2
 8008696:	7a18      	ldrb	r0, [r3, #8]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	47a0      	blx	r4
 80086a0:	4603      	mov	r3, r0
 80086a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}
 80086ae:	bf00      	nop
 80086b0:	200000dc 	.word	0x200000dc

080086b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60b9      	str	r1, [r7, #8]
 80086bc:	607a      	str	r2, [r7, #4]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <disk_write+0x3c>)
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68dc      	ldr	r4, [r3, #12]
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4a07      	ldr	r2, [pc, #28]	; (80086f0 <disk_write+0x3c>)
 80086d4:	4413      	add	r3, r2
 80086d6:	7a18      	ldrb	r0, [r3, #8]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	47a0      	blx	r4
 80086e0:	4603      	mov	r3, r0
 80086e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd90      	pop	{r4, r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200000dc 	.word	0x200000dc

080086f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3301      	adds	r3, #1
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008704:	89fb      	ldrh	r3, [r7, #14]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	b21a      	sxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	b21b      	sxth	r3, r3
 8008710:	4313      	orrs	r3, r2
 8008712:	b21b      	sxth	r3, r3
 8008714:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008716:	89fb      	ldrh	r3, [r7, #14]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3303      	adds	r3, #3
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	3202      	adds	r2, #2
 800873c:	7812      	ldrb	r2, [r2, #0]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	3201      	adds	r2, #1
 800874a:	7812      	ldrb	r2, [r2, #0]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
	return rv;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
	...

0800876c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e010      	b.n	800879c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800877a:	4a0d      	ldr	r2, [pc, #52]	; (80087b0 <clear_lock+0x44>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	4413      	add	r3, r2
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d105      	bne.n	8008796 <clear_lock+0x2a>
 800878a:	4a09      	ldr	r2, [pc, #36]	; (80087b0 <clear_lock+0x44>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	4413      	add	r3, r2
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3301      	adds	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d9eb      	bls.n	800877a <clear_lock+0xe>
	}
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200000bc 	.word	0x200000bc

080087b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	78db      	ldrb	r3, [r3, #3]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d034      	beq.n	8008832 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	7858      	ldrb	r0, [r3, #1]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087d8:	2301      	movs	r3, #1
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	f7ff ff6a 	bl	80086b4 <disk_write>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	73fb      	strb	r3, [r7, #15]
 80087ea:	e022      	b.n	8008832 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d217      	bcs.n	8008832 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	789b      	ldrb	r3, [r3, #2]
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	e010      	b.n	800882c <sync_window+0x78>
					wsect += fs->fsize;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4413      	add	r3, r2
 8008812:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	7858      	ldrb	r0, [r3, #1]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800881e:	2301      	movs	r3, #1
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	f7ff ff47 	bl	80086b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	3b01      	subs	r3, #1
 800882a:	613b      	str	r3, [r7, #16]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d8eb      	bhi.n	800880a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d01b      	beq.n	800888c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ffad 	bl	80087b4 <sync_window>
 800885a:	4603      	mov	r3, r0
 800885c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d113      	bne.n	800888c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7858      	ldrb	r0, [r3, #1]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800886e:	2301      	movs	r3, #1
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	f7ff feff 	bl	8008674 <disk_read>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800887c:	f04f 33ff 	mov.w	r3, #4294967295
 8008880:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008882:	2301      	movs	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008896:	b480      	push	{r7}
 8008898:	b087      	sub	sp, #28
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800889e:	f04f 33ff 	mov.w	r3, #4294967295
 80088a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d031      	beq.n	8008910 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	617b      	str	r3, [r7, #20]
 80088b2:	e002      	b.n	80088ba <get_ldnumber+0x24>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	3301      	adds	r3, #1
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d903      	bls.n	80088ca <get_ldnumber+0x34>
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b3a      	cmp	r3, #58	; 0x3a
 80088c8:	d1f4      	bne.n	80088b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b3a      	cmp	r3, #58	; 0x3a
 80088d0:	d11c      	bne.n	800890c <get_ldnumber+0x76>
			tp = *path;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	60fa      	str	r2, [r7, #12]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	3b30      	subs	r3, #48	; 0x30
 80088e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b09      	cmp	r3, #9
 80088e8:	d80e      	bhi.n	8008908 <get_ldnumber+0x72>
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d10a      	bne.n	8008908 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d107      	bne.n	8008908 <get_ldnumber+0x72>
					vol = (int)i;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	3301      	adds	r3, #1
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	e002      	b.n	8008912 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800890c:	2300      	movs	r3, #0
 800890e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008910:	693b      	ldr	r3, [r7, #16]
}
 8008912:	4618      	mov	r0, r3
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	70da      	strb	r2, [r3, #3]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f04f 32ff 	mov.w	r2, #4294967295
 8008936:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff ff7e 	bl	800883c <move_window>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <check_fs+0x2a>
 8008946:	2304      	movs	r3, #4
 8008948:	e038      	b.n	80089bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3330      	adds	r3, #48	; 0x30
 800894e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fece 	bl	80086f4 <ld_word>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008960:	429a      	cmp	r2, r3
 8008962:	d001      	beq.n	8008968 <check_fs+0x48>
 8008964:	2303      	movs	r3, #3
 8008966:	e029      	b.n	80089bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800896e:	2be9      	cmp	r3, #233	; 0xe9
 8008970:	d009      	beq.n	8008986 <check_fs+0x66>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008978:	2beb      	cmp	r3, #235	; 0xeb
 800897a:	d11e      	bne.n	80089ba <check_fs+0x9a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008982:	2b90      	cmp	r3, #144	; 0x90
 8008984:	d119      	bne.n	80089ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3330      	adds	r3, #48	; 0x30
 800898a:	3336      	adds	r3, #54	; 0x36
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fec9 	bl	8008724 <ld_dword>
 8008992:	4603      	mov	r3, r0
 8008994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008998:	4a0a      	ldr	r2, [pc, #40]	; (80089c4 <check_fs+0xa4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d101      	bne.n	80089a2 <check_fs+0x82>
 800899e:	2300      	movs	r3, #0
 80089a0:	e00c      	b.n	80089bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3330      	adds	r3, #48	; 0x30
 80089a6:	3352      	adds	r3, #82	; 0x52
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff febb 	bl	8008724 <ld_dword>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <check_fs+0xa8>)
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d101      	bne.n	80089ba <check_fs+0x9a>
 80089b6:	2300      	movs	r3, #0
 80089b8:	e000      	b.n	80089bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80089ba:	2302      	movs	r3, #2
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	00544146 	.word	0x00544146
 80089c8:	33544146 	.word	0x33544146

080089cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b096      	sub	sp, #88	; 0x58
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff ff58 	bl	8008896 <get_ldnumber>
 80089e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80089e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da01      	bge.n	80089f2 <find_volume+0x26>
 80089ee:	230b      	movs	r3, #11
 80089f0:	e22e      	b.n	8008e50 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80089f2:	4aa8      	ldr	r2, [pc, #672]	; (8008c94 <find_volume+0x2c8>)
 80089f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <find_volume+0x3a>
 8008a02:	230c      	movs	r3, #12
 8008a04:	e224      	b.n	8008e50 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01a      	beq.n	8008a52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff fde7 	bl	80085f4 <disk_status>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10c      	bne.n	8008a52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d007      	beq.n	8008a4e <find_volume+0x82>
 8008a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008a4a:	230a      	movs	r3, #10
 8008a4c:	e200      	b.n	8008e50 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e1fe      	b.n	8008e50 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fddf 	bl	8008628 <disk_initialize>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e1e7      	b.n	8008e50 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <find_volume+0xca>
 8008a86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008a92:	230a      	movs	r3, #10
 8008a94:	e1dc      	b.n	8008e50 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a9e:	f7ff ff3f 	bl	8008920 <check_fs>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d14b      	bne.n	8008b48 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ab4:	e01f      	b.n	8008af6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008ac4:	4413      	add	r3, r2
 8008ac6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	3304      	adds	r3, #4
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d006      	beq.n	8008ae0 <find_volume+0x114>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fe24 	bl	8008724 <ld_dword>
 8008adc:	4602      	mov	r2, r0
 8008ade:	e000      	b.n	8008ae2 <find_volume+0x116>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008aea:	440b      	add	r3, r1
 8008aec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af2:	3301      	adds	r3, #1
 8008af4:	643b      	str	r3, [r7, #64]	; 0x40
 8008af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d9dc      	bls.n	8008ab6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008afc:	2300      	movs	r3, #0
 8008afe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <find_volume+0x140>
 8008b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008b14:	4413      	add	r3, r2
 8008b16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <find_volume+0x162>
 8008b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b26:	f7ff fefb 	bl	8008920 <check_fs>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	e000      	b.n	8008b30 <find_volume+0x164>
 8008b2e:	2303      	movs	r3, #3
 8008b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d905      	bls.n	8008b48 <find_volume+0x17c>
 8008b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3e:	3301      	adds	r3, #1
 8008b40:	643b      	str	r3, [r7, #64]	; 0x40
 8008b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d9e1      	bls.n	8008b0c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d101      	bne.n	8008b54 <find_volume+0x188>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e17d      	b.n	8008e50 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d901      	bls.n	8008b60 <find_volume+0x194>
 8008b5c:	230d      	movs	r3, #13
 8008b5e:	e177      	b.n	8008e50 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	3330      	adds	r3, #48	; 0x30
 8008b64:	330b      	adds	r3, #11
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fdc4 	bl	80086f4 <ld_word>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b72:	d001      	beq.n	8008b78 <find_volume+0x1ac>
 8008b74:	230d      	movs	r3, #13
 8008b76:	e16b      	b.n	8008e50 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	3330      	adds	r3, #48	; 0x30
 8008b7c:	3316      	adds	r3, #22
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff fdb8 	bl	80086f4 <ld_word>
 8008b84:	4603      	mov	r3, r0
 8008b86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <find_volume+0x1d0>
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	3330      	adds	r3, #48	; 0x30
 8008b92:	3324      	adds	r3, #36	; 0x24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff fdc5 	bl	8008724 <ld_dword>
 8008b9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ba0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	789b      	ldrb	r3, [r3, #2]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d005      	beq.n	8008bc0 <find_volume+0x1f4>
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	789b      	ldrb	r3, [r3, #2]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d001      	beq.n	8008bc0 <find_volume+0x1f4>
 8008bbc:	230d      	movs	r3, #13
 8008bbe:	e147      	b.n	8008e50 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	789b      	ldrb	r3, [r3, #2]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
 8008bcc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	895b      	ldrh	r3, [r3, #10]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d008      	beq.n	8008bf4 <find_volume+0x228>
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	895b      	ldrh	r3, [r3, #10]
 8008be6:	461a      	mov	r2, r3
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	895b      	ldrh	r3, [r3, #10]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <find_volume+0x22c>
 8008bf4:	230d      	movs	r3, #13
 8008bf6:	e12b      	b.n	8008e50 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfa:	3330      	adds	r3, #48	; 0x30
 8008bfc:	3311      	adds	r3, #17
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fd78 	bl	80086f4 <ld_word>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	891b      	ldrh	r3, [r3, #8]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <find_volume+0x252>
 8008c1a:	230d      	movs	r3, #13
 8008c1c:	e118      	b.n	8008e50 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	3330      	adds	r3, #48	; 0x30
 8008c22:	3313      	adds	r3, #19
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff fd65 	bl	80086f4 <ld_word>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <find_volume+0x276>
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	3330      	adds	r3, #48	; 0x30
 8008c38:	3320      	adds	r3, #32
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff fd72 	bl	8008724 <ld_dword>
 8008c40:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	3330      	adds	r3, #48	; 0x30
 8008c46:	330e      	adds	r3, #14
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fd53 	bl	80086f4 <ld_word>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <find_volume+0x290>
 8008c58:	230d      	movs	r3, #13
 8008c5a:	e0f9      	b.n	8008e50 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c60:	4413      	add	r3, r2
 8008c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c64:	8912      	ldrh	r2, [r2, #8]
 8008c66:	0912      	lsrs	r2, r2, #4
 8008c68:	b292      	uxth	r2, r2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d201      	bcs.n	8008c7a <find_volume+0x2ae>
 8008c76:	230d      	movs	r3, #13
 8008c78:	e0ea      	b.n	8008e50 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c82:	8952      	ldrh	r2, [r2, #10]
 8008c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d103      	bne.n	8008c98 <find_volume+0x2cc>
 8008c90:	230d      	movs	r3, #13
 8008c92:	e0dd      	b.n	8008e50 <find_volume+0x484>
 8008c94:	200000b4 	.word	0x200000b4
		fmt = FS_FAT32;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d802      	bhi.n	8008cae <find_volume+0x2e2>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d802      	bhi.n	8008cbe <find_volume+0x2f2>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	1c9a      	adds	r2, r3, #2
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cca:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008ccc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd0:	441a      	add	r2, r3
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008cd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	441a      	add	r2, r3
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d11e      	bne.n	8008d26 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	3330      	adds	r3, #48	; 0x30
 8008cec:	332a      	adds	r3, #42	; 0x2a
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff fd00 	bl	80086f4 <ld_word>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <find_volume+0x332>
 8008cfa:	230d      	movs	r3, #13
 8008cfc:	e0a8      	b.n	8008e50 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	891b      	ldrh	r3, [r3, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <find_volume+0x33e>
 8008d06:	230d      	movs	r3, #13
 8008d08:	e0a2      	b.n	8008e50 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	3330      	adds	r3, #48	; 0x30
 8008d0e:	332c      	adds	r3, #44	; 0x2c
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fd07 	bl	8008724 <ld_dword>
 8008d16:	4602      	mov	r2, r0
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	647b      	str	r3, [r7, #68]	; 0x44
 8008d24:	e01f      	b.n	8008d66 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	891b      	ldrh	r3, [r3, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <find_volume+0x366>
 8008d2e:	230d      	movs	r3, #13
 8008d30:	e08e      	b.n	8008e50 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	6a1a      	ldr	r2, [r3, #32]
 8008d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d38:	441a      	add	r2, r3
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d103      	bne.n	8008d4e <find_volume+0x382>
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	e00a      	b.n	8008d64 <find_volume+0x398>
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	695a      	ldr	r2, [r3, #20]
 8008d52:	4613      	mov	r3, r2
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	4413      	add	r3, r2
 8008d58:	085a      	lsrs	r2, r3, #1
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d64:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	699a      	ldr	r2, [r3, #24]
 8008d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d70:	0a5b      	lsrs	r3, r3, #9
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d201      	bcs.n	8008d7a <find_volume+0x3ae>
 8008d76:	230d      	movs	r3, #13
 8008d78:	e06a      	b.n	8008e50 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d80:	611a      	str	r2, [r3, #16]
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	2280      	movs	r2, #128	; 0x80
 8008d8e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d149      	bne.n	8008e2c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	3330      	adds	r3, #48	; 0x30
 8008d9c:	3330      	adds	r3, #48	; 0x30
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fca8 	bl	80086f4 <ld_word>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d140      	bne.n	8008e2c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dac:	3301      	adds	r3, #1
 8008dae:	4619      	mov	r1, r3
 8008db0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008db2:	f7ff fd43 	bl	800883c <move_window>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d137      	bne.n	8008e2c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	3330      	adds	r3, #48	; 0x30
 8008dc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fc92 	bl	80086f4 <ld_word>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d127      	bne.n	8008e2c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	3330      	adds	r3, #48	; 0x30
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fc9f 	bl	8008724 <ld_dword>
 8008de6:	4602      	mov	r2, r0
 8008de8:	4b1b      	ldr	r3, [pc, #108]	; (8008e58 <find_volume+0x48c>)
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d11e      	bne.n	8008e2c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df0:	3330      	adds	r3, #48	; 0x30
 8008df2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fc94 	bl	8008724 <ld_dword>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	4b17      	ldr	r3, [pc, #92]	; (8008e5c <find_volume+0x490>)
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d113      	bne.n	8008e2c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	3330      	adds	r3, #48	; 0x30
 8008e08:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fc89 	bl	8008724 <ld_dword>
 8008e12:	4602      	mov	r2, r0
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	3330      	adds	r3, #48	; 0x30
 8008e1c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fc7f 	bl	8008724 <ld_dword>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e32:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e34:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <find_volume+0x494>)
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	4b08      	ldr	r3, [pc, #32]	; (8008e60 <find_volume+0x494>)
 8008e3e:	801a      	strh	r2, [r3, #0]
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <find_volume+0x494>)
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e4a:	f7ff fc8f 	bl	800876c <clear_lock>
#endif
	return FR_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3758      	adds	r7, #88	; 0x58
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	41615252 	.word	0x41615252
 8008e5c:	61417272 	.word	0x61417272
 8008e60:	200000b8 	.word	0x200000b8

08008e64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e76:	f107 0310 	add.w	r3, r7, #16
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff fd0b 	bl	8008896 <get_ldnumber>
 8008e80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	da01      	bge.n	8008e8c <f_mount+0x28>
 8008e88:	230b      	movs	r3, #11
 8008e8a:	e02b      	b.n	8008ee4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e8c:	4a17      	ldr	r2, [pc, #92]	; (8008eec <f_mount+0x88>)
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e9c:	69b8      	ldr	r0, [r7, #24]
 8008e9e:	f7ff fc65 	bl	800876c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	490d      	ldr	r1, [pc, #52]	; (8008eec <f_mount+0x88>)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <f_mount+0x66>
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d001      	beq.n	8008ece <f_mount+0x6a>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e00a      	b.n	8008ee4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008ece:	f107 010c 	add.w	r1, r7, #12
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fd77 	bl	80089cc <find_volume>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	200000b4 	.word	0x200000b4

08008ef0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008efe:	2301      	movs	r3, #1
 8008f00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008f06:	4b1f      	ldr	r3, [pc, #124]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f08:	7a5b      	ldrb	r3, [r3, #9]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d131      	bne.n	8008f74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f10:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f12:	7a5b      	ldrb	r3, [r3, #9]
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	461a      	mov	r2, r3
 8008f18:	4b1a      	ldr	r3, [pc, #104]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008f1e:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f20:	7a5b      	ldrb	r3, [r3, #9]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008f2e:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f30:	7a5b      	ldrb	r3, [r3, #9]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	461a      	mov	r2, r3
 8008f36:	4b13      	ldr	r3, [pc, #76]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f38:	4413      	add	r3, r2
 8008f3a:	79fa      	ldrb	r2, [r7, #7]
 8008f3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008f3e:	4b11      	ldr	r3, [pc, #68]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f40:	7a5b      	ldrb	r3, [r3, #9]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	b2d1      	uxtb	r1, r2
 8008f48:	4a0e      	ldr	r2, [pc, #56]	; (8008f84 <FATFS_LinkDriverEx+0x94>)
 8008f4a:	7251      	strb	r1, [r2, #9]
 8008f4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008f4e:	7dbb      	ldrb	r3, [r7, #22]
 8008f50:	3330      	adds	r3, #48	; 0x30
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	223a      	movs	r2, #58	; 0x3a
 8008f5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	3302      	adds	r3, #2
 8008f64:	222f      	movs	r2, #47	; 0x2f
 8008f66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	3303      	adds	r3, #3
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	200000dc 	.word	0x200000dc

08008f88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f92:	2200      	movs	r2, #0
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff ffaa 	bl	8008ef0 <FATFS_LinkDriverEx>
 8008f9c:	4603      	mov	r3, r0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <USB_Error_Handler>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USB_Error_Handler(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
 HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 8008fac:	2201      	movs	r2, #1
 8008fae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008fb2:	4802      	ldr	r0, [pc, #8]	; (8008fbc <USB_Error_Handler+0x14>)
 8008fb4:	f7f8 fb0a 	bl	80015cc <HAL_GPIO_WritePin>
  while(1)
 8008fb8:	e7fe      	b.n	8008fb8 <USB_Error_Handler+0x10>
 8008fba:	bf00      	nop
 8008fbc:	40020c00 	.word	0x40020c00

08008fc0 <open_r>:
  /* Unlink the USB disk I/O driver */
  FATFS_UnLinkDriver(USBDISKPath);
  }
}

FILE* open_r(char* name){
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	if (flag_usb == 1){
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <open_r+0x40>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d110      	bne.n	8008ff2 <open_r+0x32>
	  /* Register the file system object to the FatFs module */
	  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	490c      	ldr	r1, [pc, #48]	; (8009004 <open_r+0x44>)
 8008fd4:	480c      	ldr	r0, [pc, #48]	; (8009008 <open_r+0x48>)
 8008fd6:	f7ff ff45 	bl	8008e64 <f_mount>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <open_r+0x24>
	  {
	    /* FatFs Initialization Error */
	    USB_Error_Handler();
 8008fe0:	f7ff ffe2 	bl	8008fa8 <USB_Error_Handler>
	  }
	  rFILE = fopen(name,"r");
 8008fe4:	4909      	ldr	r1, [pc, #36]	; (800900c <open_r+0x4c>)
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fb9a 	bl	8009720 <fopen>
 8008fec:	4602      	mov	r2, r0
 8008fee:	4b08      	ldr	r3, [pc, #32]	; (8009010 <open_r+0x50>)
 8008ff0:	601a      	str	r2, [r3, #0]
	}
	return rFILE;
 8008ff2:	4b07      	ldr	r3, [pc, #28]	; (8009010 <open_r+0x50>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	200000ec 	.word	0x200000ec
 8009004:	20000a78 	.word	0x20000a78
 8009008:	20000d14 	.word	0x20000d14
 800900c:	0800a034 	.word	0x0800a034
 8009010:	20000a7c 	.word	0x20000a7c

08009014 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009018:	2201      	movs	r2, #1
 800901a:	490e      	ldr	r1, [pc, #56]	; (8009054 <MX_USB_HOST_Init+0x40>)
 800901c:	480e      	ldr	r0, [pc, #56]	; (8009058 <MX_USB_HOST_Init+0x44>)
 800901e:	f7fd ff8f 	bl	8006f40 <USBH_Init>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009028:	f7f7 fd7e 	bl	8000b28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800902c:	490b      	ldr	r1, [pc, #44]	; (800905c <MX_USB_HOST_Init+0x48>)
 800902e:	480a      	ldr	r0, [pc, #40]	; (8009058 <MX_USB_HOST_Init+0x44>)
 8009030:	f7fe f814 	bl	800705c <USBH_RegisterClass>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800903a:	f7f7 fd75 	bl	8000b28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800903e:	4806      	ldr	r0, [pc, #24]	; (8009058 <MX_USB_HOST_Init+0x44>)
 8009040:	f7fe f898 	bl	8007174 <USBH_Start>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800904a:	f7f7 fd6d 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800904e:	bf00      	nop
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	08009075 	.word	0x08009075
 8009058:	200006a0 	.word	0x200006a0
 800905c:	2000000c 	.word	0x2000000c

08009060 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009064:	4802      	ldr	r0, [pc, #8]	; (8009070 <MX_USB_HOST_Process+0x10>)
 8009066:	f7fe f895 	bl	8007194 <USBH_Process>
}
 800906a:	bf00      	nop
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	200006a0 	.word	0x200006a0

08009074 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	3b01      	subs	r3, #1
 8009084:	2b04      	cmp	r3, #4
 8009086:	d81c      	bhi.n	80090c2 <USBH_UserProcess+0x4e>
 8009088:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <USBH_UserProcess+0x1c>)
 800908a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908e:	bf00      	nop
 8009090:	080090c3 	.word	0x080090c3
 8009094:	080090ad 	.word	0x080090ad
 8009098:	080090c3 	.word	0x080090c3
 800909c:	080090bb 	.word	0x080090bb
 80090a0:	080090a5 	.word	0x080090a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <USBH_UserProcess+0x5c>)
 80090a6:	2203      	movs	r2, #3
 80090a8:	701a      	strb	r2, [r3, #0]
  break;
 80090aa:	e00b      	b.n	80090c4 <USBH_UserProcess+0x50>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80090ac:	4b08      	ldr	r3, [pc, #32]	; (80090d0 <USBH_UserProcess+0x5c>)
 80090ae:	2202      	movs	r2, #2
 80090b0:	701a      	strb	r2, [r3, #0]
  flag_usb = 1;
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <USBH_UserProcess+0x60>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
  break;
 80090b8:	e004      	b.n	80090c4 <USBH_UserProcess+0x50>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <USBH_UserProcess+0x5c>)
 80090bc:	2201      	movs	r2, #1
 80090be:	701a      	strb	r2, [r3, #0]
  break;
 80090c0:	e000      	b.n	80090c4 <USBH_UserProcess+0x50>

  default:
  break;
 80090c2:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	200000e8 	.word	0x200000e8
 80090d4:	200000ec 	.word	0x200000ec

080090d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	605a      	str	r2, [r3, #4]
 80090ea:	609a      	str	r2, [r3, #8]
 80090ec:	60da      	str	r2, [r3, #12]
 80090ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090f8:	d147      	bne.n	800918a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fa:	2300      	movs	r3, #0
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	4b25      	ldr	r3, [pc, #148]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	4a24      	ldr	r2, [pc, #144]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	6313      	str	r3, [r2, #48]	; 0x30
 800910a:	4b22      	ldr	r3, [pc, #136]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 800910c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800911a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800911c:	2300      	movs	r3, #0
 800911e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009120:	2300      	movs	r3, #0
 8009122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009124:	f107 0314 	add.w	r3, r7, #20
 8009128:	4619      	mov	r1, r3
 800912a:	481b      	ldr	r0, [pc, #108]	; (8009198 <HAL_HCD_MspInit+0xc0>)
 800912c:	f7f8 f8cc 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009130:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009136:	2302      	movs	r3, #2
 8009138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800913e:	2303      	movs	r3, #3
 8009140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009142:	230a      	movs	r3, #10
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009146:	f107 0314 	add.w	r3, r7, #20
 800914a:	4619      	mov	r1, r3
 800914c:	4812      	ldr	r0, [pc, #72]	; (8009198 <HAL_HCD_MspInit+0xc0>)
 800914e:	f7f8 f8bb 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009152:	4b10      	ldr	r3, [pc, #64]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 8009154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009156:	4a0f      	ldr	r2, [pc, #60]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	6353      	str	r3, [r2, #52]	; 0x34
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 8009164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009166:	4a0b      	ldr	r2, [pc, #44]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 8009168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800916c:	6453      	str	r3, [r2, #68]	; 0x44
 800916e:	4b09      	ldr	r3, [pc, #36]	; (8009194 <HAL_HCD_MspInit+0xbc>)
 8009170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800917a:	2200      	movs	r2, #0
 800917c:	2100      	movs	r1, #0
 800917e:	2043      	movs	r0, #67	; 0x43
 8009180:	f7f8 f86b 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009184:	2043      	movs	r0, #67	; 0x43
 8009186:	f7f8 f884 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800918a:	bf00      	nop
 800918c:	3728      	adds	r7, #40	; 0x28
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	40023800 	.word	0x40023800
 8009198:	40020000 	.word	0x40020000

0800919c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fbc5 	bl	800793a <USBH_LL_IncTimer>
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe fbfd 	bl	80079c6 <USBH_LL_Connect>
}
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fc06 	bl	80079f4 <USBH_LL_Disconnect>
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
 80091fc:	4613      	mov	r3, r2
 80091fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fbb7 	bl	800798e <USBH_LL_PortEnabled>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fbb7 	bl	80079aa <USBH_LL_PortDisabled>
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009252:	2b01      	cmp	r3, #1
 8009254:	d12a      	bne.n	80092ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009256:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <USBH_LL_Init+0x74>)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <USBH_LL_Init+0x74>)
 8009262:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <USBH_LL_Init+0x74>)
 8009268:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800926c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <USBH_LL_Init+0x74>)
 8009270:	2208      	movs	r2, #8
 8009272:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009274:	4b10      	ldr	r3, [pc, #64]	; (80092b8 <USBH_LL_Init+0x74>)
 8009276:	2201      	movs	r2, #1
 8009278:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <USBH_LL_Init+0x74>)
 800927c:	2200      	movs	r2, #0
 800927e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009280:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <USBH_LL_Init+0x74>)
 8009282:	2202      	movs	r2, #2
 8009284:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009286:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <USBH_LL_Init+0x74>)
 8009288:	2200      	movs	r2, #0
 800928a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800928c:	480a      	ldr	r0, [pc, #40]	; (80092b8 <USBH_LL_Init+0x74>)
 800928e:	f7f8 f9b6 	bl	80015fe <HAL_HCD_Init>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009298:	f7f7 fc46 	bl	8000b28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800929c:	4806      	ldr	r0, [pc, #24]	; (80092b8 <USBH_LL_Init+0x74>)
 800929e:	f7f8 fdb9 	bl	8001e14 <HAL_HCD_GetCurrentFrame>
 80092a2:	4603      	mov	r3, r0
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7fe fb38 	bl	800791c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20000f44 	.word	0x20000f44

080092bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f8 fd26 	bl	8001d24 <HAL_HCD_Start>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f990 	bl	8009604 <USBH_Get_USB_Status>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009308:	4618      	mov	r0, r3
 800930a:	f7f8 fd2e 	bl	8001d6a <HAL_HCD_Stop>
 800930e:	4603      	mov	r3, r0
 8009310:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 f975 	bl	8009604 <USBH_Get_USB_Status>
 800931a:	4603      	mov	r3, r0
 800931c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800931e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009330:	2301      	movs	r3, #1
 8009332:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800933a:	4618      	mov	r0, r3
 800933c:	f7f8 fd78 	bl	8001e30 <HAL_HCD_GetCurrentSpeed>
 8009340:	4603      	mov	r3, r0
 8009342:	2b01      	cmp	r3, #1
 8009344:	d007      	beq.n	8009356 <USBH_LL_GetSpeed+0x2e>
 8009346:	2b01      	cmp	r3, #1
 8009348:	d302      	bcc.n	8009350 <USBH_LL_GetSpeed+0x28>
 800934a:	2b02      	cmp	r3, #2
 800934c:	d006      	beq.n	800935c <USBH_LL_GetSpeed+0x34>
 800934e:	e008      	b.n	8009362 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009350:	2300      	movs	r3, #0
 8009352:	73fb      	strb	r3, [r7, #15]
    break;
 8009354:	e008      	b.n	8009368 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009356:	2301      	movs	r3, #1
 8009358:	73fb      	strb	r3, [r7, #15]
    break;
 800935a:	e005      	b.n	8009368 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800935c:	2302      	movs	r3, #2
 800935e:	73fb      	strb	r3, [r7, #15]
    break;
 8009360:	e002      	b.n	8009368 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009362:	2301      	movs	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]
    break;
 8009366:	bf00      	nop
  }
  return  speed;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009388:	4618      	mov	r0, r3
 800938a:	f7f8 fd0b 	bl	8001da4 <HAL_HCD_ResetPort>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f935 	bl	8009604 <USBH_Get_USB_Status>
 800939a:	4603      	mov	r3, r0
 800939c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800939e:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7f8 fd13 	bl	8001dea <HAL_HCD_HC_GetXferCount>
 80093c4:	4603      	mov	r3, r0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093ce:	b590      	push	{r4, r7, lr}
 80093d0:	b089      	sub	sp, #36	; 0x24
 80093d2:	af04      	add	r7, sp, #16
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	4608      	mov	r0, r1
 80093d8:	4611      	mov	r1, r2
 80093da:	461a      	mov	r2, r3
 80093dc:	4603      	mov	r3, r0
 80093de:	70fb      	strb	r3, [r7, #3]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70bb      	strb	r3, [r7, #2]
 80093e4:	4613      	mov	r3, r2
 80093e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80093f6:	787c      	ldrb	r4, [r7, #1]
 80093f8:	78ba      	ldrb	r2, [r7, #2]
 80093fa:	78f9      	ldrb	r1, [r7, #3]
 80093fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	f897 3020 	ldrb.w	r3, [r7, #32]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	4623      	mov	r3, r4
 800940e:	f7f8 f958 	bl	80016c2 <HAL_HCD_HC_Init>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f8f3 	bl	8009604 <USBH_Get_USB_Status>
 800941e:	4603      	mov	r3, r0
 8009420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009422:	7bbb      	ldrb	r3, [r7, #14]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	bd90      	pop	{r4, r7, pc}

0800942c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f7f8 f9d1 	bl	80017f2 <HAL_HCD_HC_Halt>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f8d4 	bl	8009604 <USBH_Get_USB_Status>
 800945c:	4603      	mov	r3, r0
 800945e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009460:	7bbb      	ldrb	r3, [r7, #14]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800946a:	b590      	push	{r4, r7, lr}
 800946c:	b089      	sub	sp, #36	; 0x24
 800946e:	af04      	add	r7, sp, #16
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	461a      	mov	r2, r3
 8009478:	4603      	mov	r3, r0
 800947a:	70fb      	strb	r3, [r7, #3]
 800947c:	460b      	mov	r3, r1
 800947e:	70bb      	strb	r3, [r7, #2]
 8009480:	4613      	mov	r3, r2
 8009482:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009492:	787c      	ldrb	r4, [r7, #1]
 8009494:	78ba      	ldrb	r2, [r7, #2]
 8009496:	78f9      	ldrb	r1, [r7, #3]
 8009498:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800949c:	9303      	str	r3, [sp, #12]
 800949e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094a0:	9302      	str	r3, [sp, #8]
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	4623      	mov	r3, r4
 80094ae:	f7f8 f9c3 	bl	8001838 <HAL_HCD_HC_SubmitRequest>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f8a3 	bl	8009604 <USBH_Get_USB_Status>
 80094be:	4603      	mov	r3, r0
 80094c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd90      	pop	{r4, r7, pc}

080094cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094de:	78fa      	ldrb	r2, [r7, #3]
 80094e0:	4611      	mov	r1, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f8 fc6c 	bl	8001dc0 <HAL_HCD_HC_GetURBState>
 80094e8:	4603      	mov	r3, r0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	460b      	mov	r3, r1
 80094fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009504:	2b01      	cmp	r3, #1
 8009506:	d103      	bne.n	8009510 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f8a6 	bl	800965c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009510:	20c8      	movs	r0, #200	; 0xc8
 8009512:	f7f7 fda5 	bl	8001060 <HAL_Delay>
  return USBH_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
 800952c:	4613      	mov	r3, r2
 800952e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009536:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	68f9      	ldr	r1, [r7, #12]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	440b      	add	r3, r1
 8009546:	333b      	adds	r3, #59	; 0x3b
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	68f9      	ldr	r1, [r7, #12]
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	440b      	add	r3, r1
 800955c:	3350      	adds	r3, #80	; 0x50
 800955e:	78ba      	ldrb	r2, [r7, #2]
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e009      	b.n	8009578 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	68f9      	ldr	r1, [r7, #12]
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	440b      	add	r3, r1
 8009572:	3351      	adds	r3, #81	; 0x51
 8009574:	78ba      	ldrb	r2, [r7, #2]
 8009576:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009586:	b480      	push	{r7}
 8009588:	b085      	sub	sp, #20
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800959c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800959e:	78fa      	ldrb	r2, [r7, #3]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	440b      	add	r3, r1
 80095ac:	333b      	adds	r3, #59	; 0x3b
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00a      	beq.n	80095ca <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	440b      	add	r3, r1
 80095c2:	3350      	adds	r3, #80	; 0x50
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	73fb      	strb	r3, [r7, #15]
 80095c8:	e009      	b.n	80095de <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	68b9      	ldr	r1, [r7, #8]
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	440b      	add	r3, r1
 80095d8:	3351      	adds	r3, #81	; 0x51
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80095de:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7f7 fd33 	bl	8001060 <HAL_Delay>
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d817      	bhi.n	8009648 <USBH_Get_USB_Status+0x44>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <USBH_Get_USB_Status+0x1c>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009631 	.word	0x08009631
 8009624:	08009637 	.word	0x08009637
 8009628:	0800963d 	.word	0x0800963d
 800962c:	08009643 	.word	0x08009643
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e00b      	b.n	800964e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	e008      	b.n	800964e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	e005      	b.n	800964e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009642:	2302      	movs	r3, #2
 8009644:	73fb      	strb	r3, [r7, #15]
    break;
 8009646:	e002      	b.n	800964e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	bf00      	nop
  }
  return usb_status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	e001      	b.n	800967a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	461a      	mov	r2, r3
 800967e:	2101      	movs	r1, #1
 8009680:	4803      	ldr	r0, [pc, #12]	; (8009690 <MX_DriverVbusFS+0x34>)
 8009682:	f7f7 ffa3 	bl	80015cc <HAL_GPIO_WritePin>
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	40020800 	.word	0x40020800

08009694 <__errno>:
 8009694:	4b01      	ldr	r3, [pc, #4]	; (800969c <__errno+0x8>)
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	2000002c 	.word	0x2000002c

080096a0 <_fopen_r>:
 80096a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a2:	460f      	mov	r7, r1
 80096a4:	4611      	mov	r1, r2
 80096a6:	aa01      	add	r2, sp, #4
 80096a8:	4605      	mov	r5, r0
 80096aa:	f000 fc0d 	bl	8009ec8 <__sflags>
 80096ae:	4606      	mov	r6, r0
 80096b0:	b918      	cbnz	r0, 80096ba <_fopen_r+0x1a>
 80096b2:	2400      	movs	r4, #0
 80096b4:	4620      	mov	r0, r4
 80096b6:	b003      	add	sp, #12
 80096b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 fbc6 	bl	8009e4c <__sfp>
 80096c0:	4604      	mov	r4, r0
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d0f5      	beq.n	80096b2 <_fopen_r+0x12>
 80096c6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80096ca:	9a01      	ldr	r2, [sp, #4]
 80096cc:	4639      	mov	r1, r7
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 fa14 	bl	8009afc <_open_r>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	da06      	bge.n	80096e6 <_fopen_r+0x46>
 80096d8:	2500      	movs	r5, #0
 80096da:	f000 fbf3 	bl	8009ec4 <__sfp_lock_acquire>
 80096de:	81a5      	strh	r5, [r4, #12]
 80096e0:	f000 fbf1 	bl	8009ec6 <__sfp_lock_release>
 80096e4:	e7e5      	b.n	80096b2 <_fopen_r+0x12>
 80096e6:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <_fopen_r+0x70>)
 80096e8:	6263      	str	r3, [r4, #36]	; 0x24
 80096ea:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <_fopen_r+0x74>)
 80096ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <_fopen_r+0x78>)
 80096f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096f2:	4b0a      	ldr	r3, [pc, #40]	; (800971c <_fopen_r+0x7c>)
 80096f4:	6323      	str	r3, [r4, #48]	; 0x30
 80096f6:	05f3      	lsls	r3, r6, #23
 80096f8:	81e0      	strh	r0, [r4, #14]
 80096fa:	81a6      	strh	r6, [r4, #12]
 80096fc:	6224      	str	r4, [r4, #32]
 80096fe:	d5d9      	bpl.n	80096b4 <_fopen_r+0x14>
 8009700:	2302      	movs	r3, #2
 8009702:	2200      	movs	r2, #0
 8009704:	4621      	mov	r1, r4
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f812 	bl	8009730 <_fseek_r>
 800970c:	e7d2      	b.n	80096b4 <_fopen_r+0x14>
 800970e:	bf00      	nop
 8009710:	08009b41 	.word	0x08009b41
 8009714:	08009b63 	.word	0x08009b63
 8009718:	08009b9b 	.word	0x08009b9b
 800971c:	08009bbf 	.word	0x08009bbf

08009720 <fopen>:
 8009720:	4b02      	ldr	r3, [pc, #8]	; (800972c <fopen+0xc>)
 8009722:	460a      	mov	r2, r1
 8009724:	4601      	mov	r1, r0
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	f7ff bfba 	b.w	80096a0 <_fopen_r>
 800972c:	2000002c 	.word	0x2000002c

08009730 <_fseek_r>:
 8009730:	f000 b800 	b.w	8009734 <_fseeko_r>

08009734 <_fseeko_r>:
 8009734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009738:	460c      	mov	r4, r1
 800973a:	4691      	mov	r9, r2
 800973c:	461e      	mov	r6, r3
 800973e:	4605      	mov	r5, r0
 8009740:	b118      	cbz	r0, 800974a <_fseeko_r+0x16>
 8009742:	6983      	ldr	r3, [r0, #24]
 8009744:	b90b      	cbnz	r3, 800974a <_fseeko_r+0x16>
 8009746:	f000 fb51 	bl	8009dec <__sinit>
 800974a:	4b3f      	ldr	r3, [pc, #252]	; (8009848 <_fseeko_r+0x114>)
 800974c:	429c      	cmp	r4, r3
 800974e:	d112      	bne.n	8009776 <_fseeko_r+0x42>
 8009750:	686c      	ldr	r4, [r5, #4]
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8009758:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800975c:	d103      	bne.n	8009766 <_fseeko_r+0x32>
 800975e:	4621      	mov	r1, r4
 8009760:	4628      	mov	r0, r5
 8009762:	f000 fad9 	bl	8009d18 <_fflush_r>
 8009766:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800976a:	f1b8 0f00 	cmp.w	r8, #0
 800976e:	d10c      	bne.n	800978a <_fseeko_r+0x56>
 8009770:	231d      	movs	r3, #29
 8009772:	602b      	str	r3, [r5, #0]
 8009774:	e057      	b.n	8009826 <_fseeko_r+0xf2>
 8009776:	4b35      	ldr	r3, [pc, #212]	; (800984c <_fseeko_r+0x118>)
 8009778:	429c      	cmp	r4, r3
 800977a:	d101      	bne.n	8009780 <_fseeko_r+0x4c>
 800977c:	68ac      	ldr	r4, [r5, #8]
 800977e:	e7e8      	b.n	8009752 <_fseeko_r+0x1e>
 8009780:	4b33      	ldr	r3, [pc, #204]	; (8009850 <_fseeko_r+0x11c>)
 8009782:	429c      	cmp	r4, r3
 8009784:	bf08      	it	eq
 8009786:	68ec      	ldreq	r4, [r5, #12]
 8009788:	e7e3      	b.n	8009752 <_fseeko_r+0x1e>
 800978a:	2e01      	cmp	r6, #1
 800978c:	d030      	beq.n	80097f0 <_fseeko_r+0xbc>
 800978e:	2e02      	cmp	r6, #2
 8009790:	d001      	beq.n	8009796 <_fseeko_r+0x62>
 8009792:	2e00      	cmp	r6, #0
 8009794:	d155      	bne.n	8009842 <_fseeko_r+0x10e>
 8009796:	6923      	ldr	r3, [r4, #16]
 8009798:	b91b      	cbnz	r3, 80097a2 <_fseeko_r+0x6e>
 800979a:	4621      	mov	r1, r4
 800979c:	4628      	mov	r0, r5
 800979e:	f000 f8a1 	bl	80098e4 <__smakebuf_r>
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 fab7 	bl	8009d18 <_fflush_r>
 80097aa:	4607      	mov	r7, r0
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d13a      	bne.n	8009826 <_fseeko_r+0xf2>
 80097b0:	4633      	mov	r3, r6
 80097b2:	464a      	mov	r2, r9
 80097b4:	6a21      	ldr	r1, [r4, #32]
 80097b6:	4628      	mov	r0, r5
 80097b8:	47c0      	blx	r8
 80097ba:	3001      	adds	r0, #1
 80097bc:	d033      	beq.n	8009826 <_fseeko_r+0xf2>
 80097be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097c0:	b141      	cbz	r1, 80097d4 <_fseeko_r+0xa0>
 80097c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097c6:	4299      	cmp	r1, r3
 80097c8:	d002      	beq.n	80097d0 <_fseeko_r+0x9c>
 80097ca:	4628      	mov	r0, r5
 80097cc:	f000 f8ee 	bl	80099ac <_free_r>
 80097d0:	2300      	movs	r3, #0
 80097d2:	6363      	str	r3, [r4, #52]	; 0x34
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	2100      	movs	r1, #0
 80097dc:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80097e0:	6061      	str	r1, [r4, #4]
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	2208      	movs	r2, #8
 80097e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097ea:	f000 f8d6 	bl	800999a <memset>
 80097ee:	e01c      	b.n	800982a <_fseeko_r+0xf6>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 fa90 	bl	8009d18 <_fflush_r>
 80097f8:	89a2      	ldrh	r2, [r4, #12]
 80097fa:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097fe:	d00c      	beq.n	800981a <_fseeko_r+0xe6>
 8009800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	075a      	lsls	r2, r3, #29
 8009806:	d513      	bpl.n	8009830 <_fseeko_r+0xfc>
 8009808:	6863      	ldr	r3, [r4, #4]
 800980a:	1ac0      	subs	r0, r0, r3
 800980c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800980e:	b10b      	cbz	r3, 8009814 <_fseeko_r+0xe0>
 8009810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009812:	1ac0      	subs	r0, r0, r3
 8009814:	4481      	add	r9, r0
 8009816:	2600      	movs	r6, #0
 8009818:	e7bd      	b.n	8009796 <_fseeko_r+0x62>
 800981a:	6a21      	ldr	r1, [r4, #32]
 800981c:	4633      	mov	r3, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47c0      	blx	r8
 8009822:	1c41      	adds	r1, r0, #1
 8009824:	d1ed      	bne.n	8009802 <_fseeko_r+0xce>
 8009826:	f04f 37ff 	mov.w	r7, #4294967295
 800982a:	4638      	mov	r0, r7
 800982c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009830:	071b      	lsls	r3, r3, #28
 8009832:	d5ef      	bpl.n	8009814 <_fseeko_r+0xe0>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	6922      	ldr	r2, [r4, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0eb      	beq.n	8009814 <_fseeko_r+0xe0>
 800983c:	1a9b      	subs	r3, r3, r2
 800983e:	4418      	add	r0, r3
 8009840:	e7e8      	b.n	8009814 <_fseeko_r+0xe0>
 8009842:	2316      	movs	r3, #22
 8009844:	e795      	b.n	8009772 <_fseeko_r+0x3e>
 8009846:	bf00      	nop
 8009848:	0800a088 	.word	0x0800a088
 800984c:	0800a0a8 	.word	0x0800a0a8
 8009850:	0800a068 	.word	0x0800a068

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4e0d      	ldr	r6, [pc, #52]	; (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	; (8009890 <__libc_init_array+0x3c>)
 800985a:	1ba4      	subs	r4, r4, r6
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2500      	movs	r5, #0
 8009860:	42a5      	cmp	r5, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4e0b      	ldr	r6, [pc, #44]	; (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	; (8009898 <__libc_init_array+0x44>)
 8009868:	f000 fbca 	bl	800a000 <_init>
 800986c:	1ba4      	subs	r4, r4, r6
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2500      	movs	r5, #0
 8009872:	42a5      	cmp	r5, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800987c:	4798      	blx	r3
 800987e:	3501      	adds	r5, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009886:	4798      	blx	r3
 8009888:	3501      	adds	r5, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800a0d0 	.word	0x0800a0d0
 8009890:	0800a0d0 	.word	0x0800a0d0
 8009894:	0800a0d0 	.word	0x0800a0d0
 8009898:	0800a0d4 	.word	0x0800a0d4

0800989c <__swhatbuf_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	460e      	mov	r6, r1
 80098a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a4:	2900      	cmp	r1, #0
 80098a6:	b096      	sub	sp, #88	; 0x58
 80098a8:	4614      	mov	r4, r2
 80098aa:	461d      	mov	r5, r3
 80098ac:	da07      	bge.n	80098be <__swhatbuf_r+0x22>
 80098ae:	2300      	movs	r3, #0
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	89b3      	ldrh	r3, [r6, #12]
 80098b4:	061a      	lsls	r2, r3, #24
 80098b6:	d410      	bmi.n	80098da <__swhatbuf_r+0x3e>
 80098b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098bc:	e00e      	b.n	80098dc <__swhatbuf_r+0x40>
 80098be:	466a      	mov	r2, sp
 80098c0:	f000 fb38 	bl	8009f34 <_fstat_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	dbf2      	blt.n	80098ae <__swhatbuf_r+0x12>
 80098c8:	9a01      	ldr	r2, [sp, #4]
 80098ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098d2:	425a      	negs	r2, r3
 80098d4:	415a      	adcs	r2, r3
 80098d6:	602a      	str	r2, [r5, #0]
 80098d8:	e7ee      	b.n	80098b8 <__swhatbuf_r+0x1c>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	2000      	movs	r0, #0
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	b016      	add	sp, #88	; 0x58
 80098e2:	bd70      	pop	{r4, r5, r6, pc}

080098e4 <__smakebuf_r>:
 80098e4:	898b      	ldrh	r3, [r1, #12]
 80098e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098e8:	079d      	lsls	r5, r3, #30
 80098ea:	4606      	mov	r6, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	d507      	bpl.n	8009900 <__smakebuf_r+0x1c>
 80098f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	2301      	movs	r3, #1
 80098fa:	6163      	str	r3, [r4, #20]
 80098fc:	b002      	add	sp, #8
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	ab01      	add	r3, sp, #4
 8009902:	466a      	mov	r2, sp
 8009904:	f7ff ffca 	bl	800989c <__swhatbuf_r>
 8009908:	9900      	ldr	r1, [sp, #0]
 800990a:	4605      	mov	r5, r0
 800990c:	4630      	mov	r0, r6
 800990e:	f000 f89b 	bl	8009a48 <_malloc_r>
 8009912:	b948      	cbnz	r0, 8009928 <__smakebuf_r+0x44>
 8009914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009918:	059a      	lsls	r2, r3, #22
 800991a:	d4ef      	bmi.n	80098fc <__smakebuf_r+0x18>
 800991c:	f023 0303 	bic.w	r3, r3, #3
 8009920:	f043 0302 	orr.w	r3, r3, #2
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	e7e3      	b.n	80098f0 <__smakebuf_r+0xc>
 8009928:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <__smakebuf_r+0x7c>)
 800992a:	62b3      	str	r3, [r6, #40]	; 0x28
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	6020      	str	r0, [r4, #0]
 8009930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	9b00      	ldr	r3, [sp, #0]
 8009938:	6163      	str	r3, [r4, #20]
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	6120      	str	r0, [r4, #16]
 800993e:	b15b      	cbz	r3, 8009958 <__smakebuf_r+0x74>
 8009940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009944:	4630      	mov	r0, r6
 8009946:	f000 fb25 	bl	8009f94 <_isatty_r>
 800994a:	b128      	cbz	r0, 8009958 <__smakebuf_r+0x74>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f023 0303 	bic.w	r3, r3, #3
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	431d      	orrs	r5, r3
 800995c:	81a5      	strh	r5, [r4, #12]
 800995e:	e7cd      	b.n	80098fc <__smakebuf_r+0x18>
 8009960:	08009db5 	.word	0x08009db5

08009964 <malloc>:
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <malloc+0xc>)
 8009966:	4601      	mov	r1, r0
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f000 b86d 	b.w	8009a48 <_malloc_r>
 800996e:	bf00      	nop
 8009970:	2000002c 	.word	0x2000002c

08009974 <free>:
 8009974:	4b02      	ldr	r3, [pc, #8]	; (8009980 <free+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f000 b817 	b.w	80099ac <_free_r>
 800997e:	bf00      	nop
 8009980:	2000002c 	.word	0x2000002c

08009984 <memcpy>:
 8009984:	b510      	push	{r4, lr}
 8009986:	1e43      	subs	r3, r0, #1
 8009988:	440a      	add	r2, r1
 800998a:	4291      	cmp	r1, r2
 800998c:	d100      	bne.n	8009990 <memcpy+0xc>
 800998e:	bd10      	pop	{r4, pc}
 8009990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009998:	e7f7      	b.n	800998a <memcpy+0x6>

0800999a <memset>:
 800999a:	4402      	add	r2, r0
 800999c:	4603      	mov	r3, r0
 800999e:	4293      	cmp	r3, r2
 80099a0:	d100      	bne.n	80099a4 <memset+0xa>
 80099a2:	4770      	bx	lr
 80099a4:	f803 1b01 	strb.w	r1, [r3], #1
 80099a8:	e7f9      	b.n	800999e <memset+0x4>
	...

080099ac <_free_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4605      	mov	r5, r0
 80099b0:	2900      	cmp	r1, #0
 80099b2:	d045      	beq.n	8009a40 <_free_r+0x94>
 80099b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b8:	1f0c      	subs	r4, r1, #4
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfb8      	it	lt
 80099be:	18e4      	addlt	r4, r4, r3
 80099c0:	f000 fb0a 	bl	8009fd8 <__malloc_lock>
 80099c4:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <_free_r+0x98>)
 80099c6:	6813      	ldr	r3, [r2, #0]
 80099c8:	4610      	mov	r0, r2
 80099ca:	b933      	cbnz	r3, 80099da <_free_r+0x2e>
 80099cc:	6063      	str	r3, [r4, #4]
 80099ce:	6014      	str	r4, [r2, #0]
 80099d0:	4628      	mov	r0, r5
 80099d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d6:	f000 bb00 	b.w	8009fda <__malloc_unlock>
 80099da:	42a3      	cmp	r3, r4
 80099dc:	d90c      	bls.n	80099f8 <_free_r+0x4c>
 80099de:	6821      	ldr	r1, [r4, #0]
 80099e0:	1862      	adds	r2, r4, r1
 80099e2:	4293      	cmp	r3, r2
 80099e4:	bf04      	itt	eq
 80099e6:	681a      	ldreq	r2, [r3, #0]
 80099e8:	685b      	ldreq	r3, [r3, #4]
 80099ea:	6063      	str	r3, [r4, #4]
 80099ec:	bf04      	itt	eq
 80099ee:	1852      	addeq	r2, r2, r1
 80099f0:	6022      	streq	r2, [r4, #0]
 80099f2:	6004      	str	r4, [r0, #0]
 80099f4:	e7ec      	b.n	80099d0 <_free_r+0x24>
 80099f6:	4613      	mov	r3, r2
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	b10a      	cbz	r2, 8009a00 <_free_r+0x54>
 80099fc:	42a2      	cmp	r2, r4
 80099fe:	d9fa      	bls.n	80099f6 <_free_r+0x4a>
 8009a00:	6819      	ldr	r1, [r3, #0]
 8009a02:	1858      	adds	r0, r3, r1
 8009a04:	42a0      	cmp	r0, r4
 8009a06:	d10b      	bne.n	8009a20 <_free_r+0x74>
 8009a08:	6820      	ldr	r0, [r4, #0]
 8009a0a:	4401      	add	r1, r0
 8009a0c:	1858      	adds	r0, r3, r1
 8009a0e:	4282      	cmp	r2, r0
 8009a10:	6019      	str	r1, [r3, #0]
 8009a12:	d1dd      	bne.n	80099d0 <_free_r+0x24>
 8009a14:	6810      	ldr	r0, [r2, #0]
 8009a16:	6852      	ldr	r2, [r2, #4]
 8009a18:	605a      	str	r2, [r3, #4]
 8009a1a:	4401      	add	r1, r0
 8009a1c:	6019      	str	r1, [r3, #0]
 8009a1e:	e7d7      	b.n	80099d0 <_free_r+0x24>
 8009a20:	d902      	bls.n	8009a28 <_free_r+0x7c>
 8009a22:	230c      	movs	r3, #12
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	e7d3      	b.n	80099d0 <_free_r+0x24>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	1821      	adds	r1, r4, r0
 8009a2c:	428a      	cmp	r2, r1
 8009a2e:	bf04      	itt	eq
 8009a30:	6811      	ldreq	r1, [r2, #0]
 8009a32:	6852      	ldreq	r2, [r2, #4]
 8009a34:	6062      	str	r2, [r4, #4]
 8009a36:	bf04      	itt	eq
 8009a38:	1809      	addeq	r1, r1, r0
 8009a3a:	6021      	streq	r1, [r4, #0]
 8009a3c:	605c      	str	r4, [r3, #4]
 8009a3e:	e7c7      	b.n	80099d0 <_free_r+0x24>
 8009a40:	bd38      	pop	{r3, r4, r5, pc}
 8009a42:	bf00      	nop
 8009a44:	200000f0 	.word	0x200000f0

08009a48 <_malloc_r>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	1ccd      	adds	r5, r1, #3
 8009a4c:	f025 0503 	bic.w	r5, r5, #3
 8009a50:	3508      	adds	r5, #8
 8009a52:	2d0c      	cmp	r5, #12
 8009a54:	bf38      	it	cc
 8009a56:	250c      	movcc	r5, #12
 8009a58:	2d00      	cmp	r5, #0
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	db01      	blt.n	8009a62 <_malloc_r+0x1a>
 8009a5e:	42a9      	cmp	r1, r5
 8009a60:	d903      	bls.n	8009a6a <_malloc_r+0x22>
 8009a62:	230c      	movs	r3, #12
 8009a64:	6033      	str	r3, [r6, #0]
 8009a66:	2000      	movs	r0, #0
 8009a68:	bd70      	pop	{r4, r5, r6, pc}
 8009a6a:	f000 fab5 	bl	8009fd8 <__malloc_lock>
 8009a6e:	4a21      	ldr	r2, [pc, #132]	; (8009af4 <_malloc_r+0xac>)
 8009a70:	6814      	ldr	r4, [r2, #0]
 8009a72:	4621      	mov	r1, r4
 8009a74:	b991      	cbnz	r1, 8009a9c <_malloc_r+0x54>
 8009a76:	4c20      	ldr	r4, [pc, #128]	; (8009af8 <_malloc_r+0xb0>)
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	b91b      	cbnz	r3, 8009a84 <_malloc_r+0x3c>
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f000 f84f 	bl	8009b20 <_sbrk_r>
 8009a82:	6020      	str	r0, [r4, #0]
 8009a84:	4629      	mov	r1, r5
 8009a86:	4630      	mov	r0, r6
 8009a88:	f000 f84a 	bl	8009b20 <_sbrk_r>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d124      	bne.n	8009ada <_malloc_r+0x92>
 8009a90:	230c      	movs	r3, #12
 8009a92:	6033      	str	r3, [r6, #0]
 8009a94:	4630      	mov	r0, r6
 8009a96:	f000 faa0 	bl	8009fda <__malloc_unlock>
 8009a9a:	e7e4      	b.n	8009a66 <_malloc_r+0x1e>
 8009a9c:	680b      	ldr	r3, [r1, #0]
 8009a9e:	1b5b      	subs	r3, r3, r5
 8009aa0:	d418      	bmi.n	8009ad4 <_malloc_r+0x8c>
 8009aa2:	2b0b      	cmp	r3, #11
 8009aa4:	d90f      	bls.n	8009ac6 <_malloc_r+0x7e>
 8009aa6:	600b      	str	r3, [r1, #0]
 8009aa8:	50cd      	str	r5, [r1, r3]
 8009aaa:	18cc      	adds	r4, r1, r3
 8009aac:	4630      	mov	r0, r6
 8009aae:	f000 fa94 	bl	8009fda <__malloc_unlock>
 8009ab2:	f104 000b 	add.w	r0, r4, #11
 8009ab6:	1d23      	adds	r3, r4, #4
 8009ab8:	f020 0007 	bic.w	r0, r0, #7
 8009abc:	1ac3      	subs	r3, r0, r3
 8009abe:	d0d3      	beq.n	8009a68 <_malloc_r+0x20>
 8009ac0:	425a      	negs	r2, r3
 8009ac2:	50e2      	str	r2, [r4, r3]
 8009ac4:	e7d0      	b.n	8009a68 <_malloc_r+0x20>
 8009ac6:	428c      	cmp	r4, r1
 8009ac8:	684b      	ldr	r3, [r1, #4]
 8009aca:	bf16      	itet	ne
 8009acc:	6063      	strne	r3, [r4, #4]
 8009ace:	6013      	streq	r3, [r2, #0]
 8009ad0:	460c      	movne	r4, r1
 8009ad2:	e7eb      	b.n	8009aac <_malloc_r+0x64>
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	6849      	ldr	r1, [r1, #4]
 8009ad8:	e7cc      	b.n	8009a74 <_malloc_r+0x2c>
 8009ada:	1cc4      	adds	r4, r0, #3
 8009adc:	f024 0403 	bic.w	r4, r4, #3
 8009ae0:	42a0      	cmp	r0, r4
 8009ae2:	d005      	beq.n	8009af0 <_malloc_r+0xa8>
 8009ae4:	1a21      	subs	r1, r4, r0
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f81a 	bl	8009b20 <_sbrk_r>
 8009aec:	3001      	adds	r0, #1
 8009aee:	d0cf      	beq.n	8009a90 <_malloc_r+0x48>
 8009af0:	6025      	str	r5, [r4, #0]
 8009af2:	e7db      	b.n	8009aac <_malloc_r+0x64>
 8009af4:	200000f0 	.word	0x200000f0
 8009af8:	200000f4 	.word	0x200000f4

08009afc <_open_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4c07      	ldr	r4, [pc, #28]	; (8009b1c <_open_r+0x20>)
 8009b00:	4605      	mov	r5, r0
 8009b02:	4608      	mov	r0, r1
 8009b04:	4611      	mov	r1, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f7f7 f95f 	bl	8000dce <_open>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_open_r+0x1e>
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_open_r+0x1e>
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20001208 	.word	0x20001208

08009b20 <_sbrk_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4c06      	ldr	r4, [pc, #24]	; (8009b3c <_sbrk_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4605      	mov	r5, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	f7f7 f95e 	bl	8000dec <_sbrk>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_sbrk_r+0x1a>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_sbrk_r+0x1a>
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20001208 	.word	0x20001208

08009b40 <__sread>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	460c      	mov	r4, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	f000 fa48 	bl	8009fdc <_read_r>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	bfab      	itete	ge
 8009b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b52:	89a3      	ldrhlt	r3, [r4, #12]
 8009b54:	181b      	addge	r3, r3, r0
 8009b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b5a:	bfac      	ite	ge
 8009b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b5e:	81a3      	strhlt	r3, [r4, #12]
 8009b60:	bd10      	pop	{r4, pc}

08009b62 <__swrite>:
 8009b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b66:	461f      	mov	r7, r3
 8009b68:	898b      	ldrh	r3, [r1, #12]
 8009b6a:	05db      	lsls	r3, r3, #23
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	4616      	mov	r6, r2
 8009b72:	d505      	bpl.n	8009b80 <__swrite+0x1e>
 8009b74:	2302      	movs	r3, #2
 8009b76:	2200      	movs	r2, #0
 8009b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7c:	f000 fa1a 	bl	8009fb4 <_lseek_r>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	463b      	mov	r3, r7
 8009b90:	4628      	mov	r0, r5
 8009b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b96:	f000 b817 	b.w	8009bc8 <_write_r>

08009b9a <__sseek>:
 8009b9a:	b510      	push	{r4, lr}
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba2:	f000 fa07 	bl	8009fb4 <_lseek_r>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	bf15      	itete	ne
 8009bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bb6:	81a3      	strheq	r3, [r4, #12]
 8009bb8:	bf18      	it	ne
 8009bba:	81a3      	strhne	r3, [r4, #12]
 8009bbc:	bd10      	pop	{r4, pc}

08009bbe <__sclose>:
 8009bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc2:	f000 b813 	b.w	8009bec <_close_r>
	...

08009bc8 <_write_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4c07      	ldr	r4, [pc, #28]	; (8009be8 <_write_r+0x20>)
 8009bcc:	4605      	mov	r5, r0
 8009bce:	4608      	mov	r0, r1
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	6022      	str	r2, [r4, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f7f7 f8a9 	bl	8000d2e <_write>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d102      	bne.n	8009be6 <_write_r+0x1e>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	b103      	cbz	r3, 8009be6 <_write_r+0x1e>
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	20001208 	.word	0x20001208

08009bec <_close_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4c06      	ldr	r4, [pc, #24]	; (8009c08 <_close_r+0x1c>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	f7f7 f8b5 	bl	8000d66 <_close>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_close_r+0x1a>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_close_r+0x1a>
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	20001208 	.word	0x20001208

08009c0c <__sflush_r>:
 8009c0c:	898a      	ldrh	r2, [r1, #12]
 8009c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c12:	4605      	mov	r5, r0
 8009c14:	0710      	lsls	r0, r2, #28
 8009c16:	460c      	mov	r4, r1
 8009c18:	d458      	bmi.n	8009ccc <__sflush_r+0xc0>
 8009c1a:	684b      	ldr	r3, [r1, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dc05      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dc02      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c26:	2000      	movs	r0, #0
 8009c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	d0f9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c32:	2300      	movs	r3, #0
 8009c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c38:	682f      	ldr	r7, [r5, #0]
 8009c3a:	6a21      	ldr	r1, [r4, #32]
 8009c3c:	602b      	str	r3, [r5, #0]
 8009c3e:	d032      	beq.n	8009ca6 <__sflush_r+0x9a>
 8009c40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	075a      	lsls	r2, r3, #29
 8009c46:	d505      	bpl.n	8009c54 <__sflush_r+0x48>
 8009c48:	6863      	ldr	r3, [r4, #4]
 8009c4a:	1ac0      	subs	r0, r0, r3
 8009c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4e:	b10b      	cbz	r3, 8009c54 <__sflush_r+0x48>
 8009c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c52:	1ac0      	subs	r0, r0, r3
 8009c54:	2300      	movs	r3, #0
 8009c56:	4602      	mov	r2, r0
 8009c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c5a:	6a21      	ldr	r1, [r4, #32]
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b0      	blx	r6
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	d106      	bne.n	8009c74 <__sflush_r+0x68>
 8009c66:	6829      	ldr	r1, [r5, #0]
 8009c68:	291d      	cmp	r1, #29
 8009c6a:	d848      	bhi.n	8009cfe <__sflush_r+0xf2>
 8009c6c:	4a29      	ldr	r2, [pc, #164]	; (8009d14 <__sflush_r+0x108>)
 8009c6e:	40ca      	lsrs	r2, r1
 8009c70:	07d6      	lsls	r6, r2, #31
 8009c72:	d544      	bpl.n	8009cfe <__sflush_r+0xf2>
 8009c74:	2200      	movs	r2, #0
 8009c76:	6062      	str	r2, [r4, #4]
 8009c78:	04d9      	lsls	r1, r3, #19
 8009c7a:	6922      	ldr	r2, [r4, #16]
 8009c7c:	6022      	str	r2, [r4, #0]
 8009c7e:	d504      	bpl.n	8009c8a <__sflush_r+0x7e>
 8009c80:	1c42      	adds	r2, r0, #1
 8009c82:	d101      	bne.n	8009c88 <__sflush_r+0x7c>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b903      	cbnz	r3, 8009c8a <__sflush_r+0x7e>
 8009c88:	6560      	str	r0, [r4, #84]	; 0x54
 8009c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8c:	602f      	str	r7, [r5, #0]
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	d0c9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c96:	4299      	cmp	r1, r3
 8009c98:	d002      	beq.n	8009ca0 <__sflush_r+0x94>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff fe86 	bl	80099ac <_free_r>
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	6360      	str	r0, [r4, #52]	; 0x34
 8009ca4:	e7c0      	b.n	8009c28 <__sflush_r+0x1c>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b0      	blx	r6
 8009cac:	1c41      	adds	r1, r0, #1
 8009cae:	d1c8      	bne.n	8009c42 <__sflush_r+0x36>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0c5      	beq.n	8009c42 <__sflush_r+0x36>
 8009cb6:	2b1d      	cmp	r3, #29
 8009cb8:	d001      	beq.n	8009cbe <__sflush_r+0xb2>
 8009cba:	2b16      	cmp	r3, #22
 8009cbc:	d101      	bne.n	8009cc2 <__sflush_r+0xb6>
 8009cbe:	602f      	str	r7, [r5, #0]
 8009cc0:	e7b1      	b.n	8009c26 <__sflush_r+0x1a>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	e7ad      	b.n	8009c28 <__sflush_r+0x1c>
 8009ccc:	690f      	ldr	r7, [r1, #16]
 8009cce:	2f00      	cmp	r7, #0
 8009cd0:	d0a9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009cd2:	0793      	lsls	r3, r2, #30
 8009cd4:	680e      	ldr	r6, [r1, #0]
 8009cd6:	bf08      	it	eq
 8009cd8:	694b      	ldreq	r3, [r1, #20]
 8009cda:	600f      	str	r7, [r1, #0]
 8009cdc:	bf18      	it	ne
 8009cde:	2300      	movne	r3, #0
 8009ce0:	eba6 0807 	sub.w	r8, r6, r7
 8009ce4:	608b      	str	r3, [r1, #8]
 8009ce6:	f1b8 0f00 	cmp.w	r8, #0
 8009cea:	dd9c      	ble.n	8009c26 <__sflush_r+0x1a>
 8009cec:	4643      	mov	r3, r8
 8009cee:	463a      	mov	r2, r7
 8009cf0:	6a21      	ldr	r1, [r4, #32]
 8009cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b0      	blx	r6
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	dc06      	bgt.n	8009d0a <__sflush_r+0xfe>
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e78e      	b.n	8009c28 <__sflush_r+0x1c>
 8009d0a:	4407      	add	r7, r0
 8009d0c:	eba8 0800 	sub.w	r8, r8, r0
 8009d10:	e7e9      	b.n	8009ce6 <__sflush_r+0xda>
 8009d12:	bf00      	nop
 8009d14:	20400001 	.word	0x20400001

08009d18 <_fflush_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	690b      	ldr	r3, [r1, #16]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	b1db      	cbz	r3, 8009d5a <_fflush_r+0x42>
 8009d22:	b118      	cbz	r0, 8009d2c <_fflush_r+0x14>
 8009d24:	6983      	ldr	r3, [r0, #24]
 8009d26:	b90b      	cbnz	r3, 8009d2c <_fflush_r+0x14>
 8009d28:	f000 f860 	bl	8009dec <__sinit>
 8009d2c:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <_fflush_r+0x48>)
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	d109      	bne.n	8009d46 <_fflush_r+0x2e>
 8009d32:	686c      	ldr	r4, [r5, #4]
 8009d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d38:	b17b      	cbz	r3, 8009d5a <_fflush_r+0x42>
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d42:	f7ff bf63 	b.w	8009c0c <__sflush_r>
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <_fflush_r+0x4c>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	d101      	bne.n	8009d50 <_fflush_r+0x38>
 8009d4c:	68ac      	ldr	r4, [r5, #8]
 8009d4e:	e7f1      	b.n	8009d34 <_fflush_r+0x1c>
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <_fflush_r+0x50>)
 8009d52:	429c      	cmp	r4, r3
 8009d54:	bf08      	it	eq
 8009d56:	68ec      	ldreq	r4, [r5, #12]
 8009d58:	e7ec      	b.n	8009d34 <_fflush_r+0x1c>
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	bd38      	pop	{r3, r4, r5, pc}
 8009d5e:	bf00      	nop
 8009d60:	0800a088 	.word	0x0800a088
 8009d64:	0800a0a8 	.word	0x0800a0a8
 8009d68:	0800a068 	.word	0x0800a068

08009d6c <std>:
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	4604      	mov	r4, r0
 8009d72:	e9c0 3300 	strd	r3, r3, [r0]
 8009d76:	6083      	str	r3, [r0, #8]
 8009d78:	8181      	strh	r1, [r0, #12]
 8009d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d7c:	81c2      	strh	r2, [r0, #14]
 8009d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d82:	6183      	str	r3, [r0, #24]
 8009d84:	4619      	mov	r1, r3
 8009d86:	2208      	movs	r2, #8
 8009d88:	305c      	adds	r0, #92	; 0x5c
 8009d8a:	f7ff fe06 	bl	800999a <memset>
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <std+0x38>)
 8009d90:	6263      	str	r3, [r4, #36]	; 0x24
 8009d92:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <std+0x3c>)
 8009d94:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <std+0x40>)
 8009d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d9a:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <std+0x44>)
 8009d9c:	6224      	str	r4, [r4, #32]
 8009d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	bf00      	nop
 8009da4:	08009b41 	.word	0x08009b41
 8009da8:	08009b63 	.word	0x08009b63
 8009dac:	08009b9b 	.word	0x08009b9b
 8009db0:	08009bbf 	.word	0x08009bbf

08009db4 <_cleanup_r>:
 8009db4:	4901      	ldr	r1, [pc, #4]	; (8009dbc <_cleanup_r+0x8>)
 8009db6:	f000 b8cf 	b.w	8009f58 <_fwalk_reent>
 8009dba:	bf00      	nop
 8009dbc:	08009d19 	.word	0x08009d19

08009dc0 <__sfmoreglue>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	1e4a      	subs	r2, r1, #1
 8009dc4:	2568      	movs	r5, #104	; 0x68
 8009dc6:	4355      	muls	r5, r2
 8009dc8:	460e      	mov	r6, r1
 8009dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dce:	f7ff fe3b 	bl	8009a48 <_malloc_r>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	b140      	cbz	r0, 8009de8 <__sfmoreglue+0x28>
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8009ddc:	300c      	adds	r0, #12
 8009dde:	60a0      	str	r0, [r4, #8]
 8009de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009de4:	f7ff fdd9 	bl	800999a <memset>
 8009de8:	4620      	mov	r0, r4
 8009dea:	bd70      	pop	{r4, r5, r6, pc}

08009dec <__sinit>:
 8009dec:	6983      	ldr	r3, [r0, #24]
 8009dee:	b510      	push	{r4, lr}
 8009df0:	4604      	mov	r4, r0
 8009df2:	bb33      	cbnz	r3, 8009e42 <__sinit+0x56>
 8009df4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009df8:	6503      	str	r3, [r0, #80]	; 0x50
 8009dfa:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <__sinit+0x58>)
 8009dfc:	4a12      	ldr	r2, [pc, #72]	; (8009e48 <__sinit+0x5c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6282      	str	r2, [r0, #40]	; 0x28
 8009e02:	4298      	cmp	r0, r3
 8009e04:	bf04      	itt	eq
 8009e06:	2301      	moveq	r3, #1
 8009e08:	6183      	streq	r3, [r0, #24]
 8009e0a:	f000 f81f 	bl	8009e4c <__sfp>
 8009e0e:	6060      	str	r0, [r4, #4]
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 f81b 	bl	8009e4c <__sfp>
 8009e16:	60a0      	str	r0, [r4, #8]
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f000 f817 	bl	8009e4c <__sfp>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	60e0      	str	r0, [r4, #12]
 8009e22:	2104      	movs	r1, #4
 8009e24:	6860      	ldr	r0, [r4, #4]
 8009e26:	f7ff ffa1 	bl	8009d6c <std>
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	2109      	movs	r1, #9
 8009e2e:	68a0      	ldr	r0, [r4, #8]
 8009e30:	f7ff ff9c 	bl	8009d6c <std>
 8009e34:	2202      	movs	r2, #2
 8009e36:	2112      	movs	r1, #18
 8009e38:	68e0      	ldr	r0, [r4, #12]
 8009e3a:	f7ff ff97 	bl	8009d6c <std>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	61a3      	str	r3, [r4, #24]
 8009e42:	bd10      	pop	{r4, pc}
 8009e44:	0800a064 	.word	0x0800a064
 8009e48:	08009db5 	.word	0x08009db5

08009e4c <__sfp>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	4b1b      	ldr	r3, [pc, #108]	; (8009ebc <__sfp+0x70>)
 8009e50:	681e      	ldr	r6, [r3, #0]
 8009e52:	69b3      	ldr	r3, [r6, #24]
 8009e54:	4607      	mov	r7, r0
 8009e56:	b913      	cbnz	r3, 8009e5e <__sfp+0x12>
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7ff ffc7 	bl	8009dec <__sinit>
 8009e5e:	3648      	adds	r6, #72	; 0x48
 8009e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	d503      	bpl.n	8009e70 <__sfp+0x24>
 8009e68:	6833      	ldr	r3, [r6, #0]
 8009e6a:	b133      	cbz	r3, 8009e7a <__sfp+0x2e>
 8009e6c:	6836      	ldr	r6, [r6, #0]
 8009e6e:	e7f7      	b.n	8009e60 <__sfp+0x14>
 8009e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e74:	b16d      	cbz	r5, 8009e92 <__sfp+0x46>
 8009e76:	3468      	adds	r4, #104	; 0x68
 8009e78:	e7f4      	b.n	8009e64 <__sfp+0x18>
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f7ff ff9f 	bl	8009dc0 <__sfmoreglue>
 8009e82:	6030      	str	r0, [r6, #0]
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d1f1      	bne.n	8009e6c <__sfp+0x20>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	4620      	mov	r0, r4
 8009e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e92:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <__sfp+0x74>)
 8009e94:	6665      	str	r5, [r4, #100]	; 0x64
 8009e96:	e9c4 5500 	strd	r5, r5, [r4]
 8009e9a:	60a5      	str	r5, [r4, #8]
 8009e9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009ea0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ea4:	2208      	movs	r2, #8
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009eac:	f7ff fd75 	bl	800999a <memset>
 8009eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009eb8:	e7e9      	b.n	8009e8e <__sfp+0x42>
 8009eba:	bf00      	nop
 8009ebc:	0800a064 	.word	0x0800a064
 8009ec0:	ffff0001 	.word	0xffff0001

08009ec4 <__sfp_lock_acquire>:
 8009ec4:	4770      	bx	lr

08009ec6 <__sfp_lock_release>:
 8009ec6:	4770      	bx	lr

08009ec8 <__sflags>:
 8009ec8:	780b      	ldrb	r3, [r1, #0]
 8009eca:	2b72      	cmp	r3, #114	; 0x72
 8009ecc:	b530      	push	{r4, r5, lr}
 8009ece:	d02c      	beq.n	8009f2a <__sflags+0x62>
 8009ed0:	2b77      	cmp	r3, #119	; 0x77
 8009ed2:	d007      	beq.n	8009ee4 <__sflags+0x1c>
 8009ed4:	2b61      	cmp	r3, #97	; 0x61
 8009ed6:	d10f      	bne.n	8009ef8 <__sflags+0x30>
 8009ed8:	f44f 7402 	mov.w	r4, #520	; 0x208
 8009edc:	2301      	movs	r3, #1
 8009ede:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009ee2:	e003      	b.n	8009eec <__sflags+0x24>
 8009ee4:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8009ee8:	2301      	movs	r3, #1
 8009eea:	2008      	movs	r0, #8
 8009eec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009ef0:	b935      	cbnz	r5, 8009f00 <__sflags+0x38>
 8009ef2:	4323      	orrs	r3, r4
 8009ef4:	6013      	str	r3, [r2, #0]
 8009ef6:	e002      	b.n	8009efe <__sflags+0x36>
 8009ef8:	2316      	movs	r3, #22
 8009efa:	6003      	str	r3, [r0, #0]
 8009efc:	2000      	movs	r0, #0
 8009efe:	bd30      	pop	{r4, r5, pc}
 8009f00:	2d62      	cmp	r5, #98	; 0x62
 8009f02:	d00c      	beq.n	8009f1e <__sflags+0x56>
 8009f04:	2d78      	cmp	r5, #120	; 0x78
 8009f06:	d00d      	beq.n	8009f24 <__sflags+0x5c>
 8009f08:	2d2b      	cmp	r5, #43	; 0x2b
 8009f0a:	d1ef      	bne.n	8009eec <__sflags+0x24>
 8009f0c:	f020 001c 	bic.w	r0, r0, #28
 8009f10:	f023 0303 	bic.w	r3, r3, #3
 8009f14:	f040 0010 	orr.w	r0, r0, #16
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	e7e6      	b.n	8009eec <__sflags+0x24>
 8009f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f22:	e7e3      	b.n	8009eec <__sflags+0x24>
 8009f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f28:	e7e0      	b.n	8009eec <__sflags+0x24>
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	4623      	mov	r3, r4
 8009f2e:	2004      	movs	r0, #4
 8009f30:	e7dc      	b.n	8009eec <__sflags+0x24>
	...

08009f34 <_fstat_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4c07      	ldr	r4, [pc, #28]	; (8009f54 <_fstat_r+0x20>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	f7f6 ff1c 	bl	8000d7e <_fstat>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d102      	bne.n	8009f50 <_fstat_r+0x1c>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	b103      	cbz	r3, 8009f50 <_fstat_r+0x1c>
 8009f4e:	602b      	str	r3, [r5, #0]
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	20001208 	.word	0x20001208

08009f58 <_fwalk_reent>:
 8009f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4689      	mov	r9, r1
 8009f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f64:	2600      	movs	r6, #0
 8009f66:	b914      	cbnz	r4, 8009f6e <_fwalk_reent+0x16>
 8009f68:	4630      	mov	r0, r6
 8009f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009f72:	3f01      	subs	r7, #1
 8009f74:	d501      	bpl.n	8009f7a <_fwalk_reent+0x22>
 8009f76:	6824      	ldr	r4, [r4, #0]
 8009f78:	e7f5      	b.n	8009f66 <_fwalk_reent+0xe>
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d907      	bls.n	8009f90 <_fwalk_reent+0x38>
 8009f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f84:	3301      	adds	r3, #1
 8009f86:	d003      	beq.n	8009f90 <_fwalk_reent+0x38>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	47c8      	blx	r9
 8009f8e:	4306      	orrs	r6, r0
 8009f90:	3568      	adds	r5, #104	; 0x68
 8009f92:	e7ee      	b.n	8009f72 <_fwalk_reent+0x1a>

08009f94 <_isatty_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4c06      	ldr	r4, [pc, #24]	; (8009fb0 <_isatty_r+0x1c>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	6023      	str	r3, [r4, #0]
 8009fa0:	f7f6 fefd 	bl	8000d9e <_isatty>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_isatty_r+0x1a>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_isatty_r+0x1a>
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20001208 	.word	0x20001208

08009fb4 <_lseek_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4c07      	ldr	r4, [pc, #28]	; (8009fd4 <_lseek_r+0x20>)
 8009fb8:	4605      	mov	r5, r0
 8009fba:	4608      	mov	r0, r1
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	6022      	str	r2, [r4, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f7f6 fef6 	bl	8000db4 <_lseek>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_lseek_r+0x1e>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_lseek_r+0x1e>
 8009fd0:	602b      	str	r3, [r5, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	20001208 	.word	0x20001208

08009fd8 <__malloc_lock>:
 8009fd8:	4770      	bx	lr

08009fda <__malloc_unlock>:
 8009fda:	4770      	bx	lr

08009fdc <_read_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4c07      	ldr	r4, [pc, #28]	; (8009ffc <_read_r+0x20>)
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	6022      	str	r2, [r4, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f7f6 fe82 	bl	8000cf4 <_read>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_read_r+0x1e>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_read_r+0x1e>
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	20001208 	.word	0x20001208

0800a000 <_init>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	bf00      	nop
 800a004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a006:	bc08      	pop	{r3}
 800a008:	469e      	mov	lr, r3
 800a00a:	4770      	bx	lr

0800a00c <_fini>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	bf00      	nop
 800a010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a012:	bc08      	pop	{r3}
 800a014:	469e      	mov	lr, r3
 800a016:	4770      	bx	lr
