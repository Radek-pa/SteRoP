
usb_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edb8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800ef50  0800ef50  0001ef50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f148  0800f148  00020494  2**0
                  CONTENTS
  4 .ARM          00000008  0800f148  0800f148  0001f148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f150  0800f150  00020494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f150  0800f150  0001f150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f154  0800f154  0001f154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000494  20000000  0800f158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000494  0800f5ec  00020494  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200017a8  0800f5ec  000217a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029290  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053f5  00000000  00000000  00049754  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d0  00000000  00000000  0004eb50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a0  00000000  00000000  00050220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce69  00000000  00000000  000516c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aa1c  00000000  00000000  0006e529  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009289b  00000000  00000000  00088f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0011b7e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b8  00000000  00000000  0011b8dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000494 	.word	0x20000494
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ef38 	.word	0x0800ef38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000498 	.word	0x20000498
 80001d4:	0800ef38 	.word	0x0800ef38

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a51      	ldr	r2, [pc, #324]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4f      	ldr	r3, [pc, #316]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4a      	ldr	r2, [pc, #296]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a3c      	ldr	r2, [pc, #240]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <MX_GPIO_Init+0x19c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4837      	ldr	r0, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 80009b4:	f001 fc9e 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	4835      	ldr	r0, [pc, #212]	; (8000a94 <MX_GPIO_Init+0x1a4>)
 80009be:	f001 fc99 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009c8:	4833      	ldr	r0, [pc, #204]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 80009ca:	f001 fc93 	bl	80022f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482b      	ldr	r0, [pc, #172]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 80009e2:	f001 fb05 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4824      	ldr	r0, [pc, #144]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 80009fe:	f001 faf7 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a02:	2332      	movs	r3, #50	; 0x32
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481e      	ldr	r0, [pc, #120]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 8000a16:	f001 faeb 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_GPIO_Init+0x1a4>)
 8000a32:	f001 fadd 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000a4a:	f001 fad1 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a4e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a52:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000a68:	f001 fac2 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000a80:	f001 fab6 	bl	8001ff0 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	10120000 	.word	0x10120000
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_I2C1_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_I2C1_Init+0x58>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ae2:	f003 f911 	bl	8003d08 <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fa64 	bl	8000fb8 <Error_Handler>
  }

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000560 	.word	0x20000560
 8000af8:	40005400 	.word	0x40005400
 8000afc:	000186a0 	.word	0x000186a0

08000b00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_I2C_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12c      	bne.n	8000b7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f001 fa48 	bl	8001ff0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <MX_I2S2_Init+0x58>)
 8000bb8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bce:	f003 f9d3 	bl	8003f78 <HAL_I2S_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000bd8:	f000 f9ee 	bl	8000fb8 <Error_Handler>
  }

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200005b4 	.word	0x200005b4
 8000be4:	40003800 	.word	0x40003800
 8000be8:	00017700 	.word	0x00017700

08000bec <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <MX_I2S3_Init+0x58>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c10:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <MX_I2S3_Init+0x5c>)
 8000c16:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c2c:	f003 f9a4 	bl	8003f78 <HAL_I2S_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c36:	f000 f9bf 	bl	8000fb8 <Error_Handler>
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200005fc 	.word	0x200005fc
 8000c44:	40003c00 	.word	0x40003c00
 8000c48:	00017700 	.word	0x00017700

08000c4c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a59      	ldr	r2, [pc, #356]	; (8000dd0 <HAL_I2S_MspInit+0x184>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d15b      	bne.n	8000d26 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a57      	ldr	r2, [pc, #348]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	4b51      	ldr	r3, [pc, #324]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a50      	ldr	r2, [pc, #320]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	483e      	ldr	r0, [pc, #248]	; (8000dd8 <HAL_I2S_MspInit+0x18c>)
 8000cde:	f001 f987 	bl	8001ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <HAL_I2S_MspInit+0x18c>)
 8000cfe:	f001 f977 	bl	8001ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d14:	2305      	movs	r3, #5
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	482f      	ldr	r0, [pc, #188]	; (8000ddc <HAL_I2S_MspInit+0x190>)
 8000d20:	f001 f966 	bl	8001ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d24:	e04f      	b.n	8000dc6 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <HAL_I2S_MspInit+0x194>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d14a      	bne.n	8000dc6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d84:	2310      	movs	r3, #16
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d94:	2306      	movs	r3, #6
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <HAL_I2S_MspInit+0x198>)
 8000da0:	f001 f926 	bl	8001ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000da4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db6:	2306      	movs	r3, #6
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_I2S_MspInit+0x18c>)
 8000dc2:	f001 f915 	bl	8001ff0 <HAL_GPIO_Init>
}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40003800 	.word	0x40003800
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40003c00 	.word	0x40003c00
 8000de4:	40020000 	.word	0x40020000

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b0a4      	sub	sp, #144	; 0x90
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f000 fca7 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f85d 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f7ff fd7b 	bl	80008f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dfa:	f7ff fe53 	bl	8000aa4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000dfe:	f7ff fec7 	bl	8000b90 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000e02:	f7ff fef3 	bl	8000bec <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e06:	f000 f8df 	bl	8000fc8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e0a:	f00b f817 	bl	800be3c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000e0e:	f005 fdf7 	bl	8006a00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  uint8_t wtext[100]; /* File write buffer */
  uint8_t rtext[] = "This is STM32 working with FatFs";
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <main+0xc4>)
 8000e14:	1d3c      	adds	r4, r7, #4
 8000e16:	461d      	mov	r5, r3
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	7023      	strb	r3, [r4, #0]
  FILE * rFile;
  int flag_er;

  flag_er = BSP_AUDIO_IN_Init(44100, 8, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2108      	movs	r1, #8
 8000e28:	f64a 4044 	movw	r0, #44100	; 0xac44
 8000e2c:	f000 fa40 	bl	80012b0 <BSP_AUDIO_IN_Init>
 8000e30:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

  if(flag_er != 0){
 8000e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <main+0x58>
	  Error_Handler();
 8000e3c:	f000 f8bc 	bl	8000fb8 <Error_Handler>
  }

  if(BSP_AUDIO_IN_Record(wtext, sizeof(wtext))== 1){
 8000e40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e44:	2164      	movs	r1, #100	; 0x64
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fa5c 	bl	8001304 <BSP_AUDIO_IN_Record>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <main+0x6e>
          	Error_Handler();
 8000e52:	f000 f8b1 	bl	8000fb8 <Error_Handler>
  }

  BSP_AUDIO_IN_Stop();
 8000e56:	f000 fa6d 	bl	8001334 <BSP_AUDIO_IN_Stop>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e5a:	f00b f815 	bl	800be88 <MX_USB_HOST_Process>
    if(open_to_write() == 1){
 8000e5e:	f00a ff99 	bl	800bd94 <open_to_write>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d1f8      	bne.n	8000e5a <main+0x72>
    	  flag_er = BSP_AUDIO_IN_Init(44100, 8, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2108      	movs	r1, #8
 8000e6c:	f64a 4044 	movw	r0, #44100	; 0xac44
 8000e70:	f000 fa1e 	bl	80012b0 <BSP_AUDIO_IN_Init>
 8000e74:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    	  if(flag_er != 0){
 8000e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <main+0x9c>
    		  Error_Handler();
 8000e80:	f000 f89a 	bl	8000fb8 <Error_Handler>
    	  }

    	  if(BSP_AUDIO_IN_Record(wtext, sizeof(wtext))== 1){
 8000e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e88:	2164      	movs	r1, #100	; 0x64
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fa3a 	bl	8001304 <BSP_AUDIO_IN_Record>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <main+0xb2>
    	          	Error_Handler();
 8000e96:	f000 f88f 	bl	8000fb8 <Error_Handler>
    	  }

    	  BSP_AUDIO_IN_Stop();
 8000e9a:	f000 fa4b 	bl	8001334 <BSP_AUDIO_IN_Stop>

    	  Write_with_open(wtext, sizeof(wtext));
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2164      	movs	r1, #100	; 0x64
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00a ffa1 	bl	800bdec <Write_with_open>
    MX_USB_HOST_Process();
 8000eaa:	e7d6      	b.n	8000e5a <main+0x72>
 8000eac:	0800ef50 	.word	0x0800ef50

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09a      	sub	sp, #104	; 0x68
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00d fa4b 	bl	800e35a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <SystemClock_Config+0x100>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <SystemClock_Config+0x100>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <SystemClock_Config+0x100>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <SystemClock_Config+0x104>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <SystemClock_Config+0x104>)
 8000f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <SystemClock_Config+0x104>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f32:	2304      	movs	r3, #4
 8000f34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f36:	23c0      	movs	r3, #192	; 0xc0
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 ffca 	bl	8004ee0 <HAL_RCC_OscConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f52:	f000 f831 	bl	8000fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f56:	230f      	movs	r3, #15
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	2103      	movs	r1, #3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fa24 	bl	80053c0 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f7e:	f000 f81b 	bl	8000fb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000f86:	23c8      	movs	r3, #200	; 0xc8
 8000f88:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fbf0 	bl	800577c <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000fa2:	f000 f809 	bl	8000fb8 <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3768      	adds	r7, #104	; 0x68
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_SPI1_Init+0x64>)
 8000fce:	4a18      	ldr	r2, [pc, #96]	; (8001030 <MX_SPI1_Init+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_SPI1_Init+0x64>)
 8000fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_SPI1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_SPI1_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_SPI1_Init+0x64>)
 8000ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_SPI1_Init+0x64>)
 8001014:	220a      	movs	r2, #10
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_SPI1_Init+0x64>)
 800101a:	f004 fd3f 	bl	8005a9c <HAL_SPI_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001024:	f7ff ffc8 	bl	8000fb8 <Error_Handler>
  }

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000644 	.word	0x20000644
 8001030:	40013000 	.word	0x40013000

08001034 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_SPI_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12b      	bne.n	80010ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_SPI_MspInit+0x88>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_SPI_MspInit+0x88>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800108e:	23e0      	movs	r3, #224	; 0xe0
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109e:	2305      	movs	r3, #5
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 80010aa:	f000 ffa1 	bl	8001ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40013000 	.word	0x40013000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <HAL_MspInit+0x4c>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x4c>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001102:	2007      	movs	r0, #7
 8001104:	f000 fc80 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 fb3c 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <OTG_FS_IRQHandler+0x10>)
 8001176:	f001 fb65 	bl	8002844 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200014e0 	.word	0x200014e0

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f00d f88c 	bl	800e2d0 <__errno>
 80011b8:	4602      	mov	r2, r0
 80011ba:	230c      	movs	r3, #12
 80011bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20020000 	.word	0x20020000
 80011e4:	00000800 	.word	0x00000800
 80011e8:	200004b4 	.word	0x200004b4
 80011ec:	200017a8 	.word	0x200017a8

080011f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <SystemInit+0x28>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <SystemInit+0x28>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SystemInit+0x28>)
 8001206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800120a:	609a      	str	r2, [r3, #8]
#endif
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001220:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001222:	e003      	b.n	800122c <LoopCopyDataInit>

08001224 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001226:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001228:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800122a:	3104      	adds	r1, #4

0800122c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001230:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001234:	d3f6      	bcc.n	8001224 <CopyDataInit>
  ldr  r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001238:	e002      	b.n	8001240 <LoopFillZerobss>

0800123a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800123a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800123c:	f842 3b04 	str.w	r3, [r2], #4

08001240 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001244:	d3f9      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001246:	f7ff ffd3 	bl	80011f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f00d f847 	bl	800e2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fdcb 	bl	8000de8 <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001254:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001258:	0800f158 	.word	0x0800f158
  ldr  r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001260:	20000494 	.word	0x20000494
  ldr  r2, =_sbss
 8001264:	20000494 	.word	0x20000494
  ldr  r3, = _ebss
 8001268:	200017a8 	.word	0x200017a8

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_I2S_TxCpltCallback+0x20>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8001282:	f000 f807 	bl	8001294 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40003c00 	.word	0x40003c00

08001294 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio Bit resolution.
  * @param  ChnlNbr: Audio Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{  
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  /* Configure PLL clock */ 
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 80012bc:	2200      	movs	r2, #0
 80012be:	68f9      	ldr	r1, [r7, #12]
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <BSP_AUDIO_IN_Init+0x4c>)
 80012c2:	f000 f85d 	bl	8001380 <BSP_AUDIO_IN_ClockConfig>
  
  /* Configure the PDM library */
  /* On STM32F411E-Discovery a single microphone is mounted, samples are duplicated
     to make stereo audio streams */
  PDMDecoder_Init(AudioFreq, ChnlNbr, 2);
 80012c6:	2202      	movs	r2, #2
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f94c 	bl	8001568 <PDMDecoder_Init>

  /* Configure the I2S peripheral */
  hAudioInI2s.Instance = I2S2;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <BSP_AUDIO_IN_Init+0x4c>)
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <BSP_AUDIO_IN_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 80012d6:	4809      	ldr	r0, [pc, #36]	; (80012fc <BSP_AUDIO_IN_Init+0x4c>)
 80012d8:	f003 fa24 	bl	8004724 <HAL_I2S_GetState>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <BSP_AUDIO_IN_Init+0x3a>
  { 
    /* Initialize the I2S Msp: this __weak function can be rewritten by the application */
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 80012e2:	2100      	movs	r1, #0
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <BSP_AUDIO_IN_Init+0x4c>)
 80012e6:	f000 f87b 	bl	80013e0 <BSP_AUDIO_IN_MspInit>
  }
  
  /* Configure the I2S2 */
  I2S2_Init(AudioFreq);
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f9d6 	bl	800169c <I2S2_Init>
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000788 	.word	0x20000788
 8001300:	40003800 	.word	0x40003800

08001304 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Curret size ofn the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <BSP_AUDIO_IN_Record+0x2c>)
 800131c:	f002 ff6c 	bl	80041f8 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	b2db      	uxtb	r3, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000788 	.word	0x20000788

08001334 <BSP_AUDIO_IN_Stop>:

/**
  * @brief  Stops audio recording.
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  uint32_t ret = AUDIO_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <BSP_AUDIO_IN_Stop+0x20>)
 8001340:	f003 f816 	bl	8004370 <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  
  return ret;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	b2db      	uxtb	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000788 	.word	0x20000788

08001358 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001360:	f000 f8ec 	bl	800153c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_I2S_RxHalfCpltCallback>:
/**
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001374:	f000 f8e9 	bl	800154a <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4618      	mov	r0, r3
 8001392:	f004 fae3 	bl	800595c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10d      	bne.n	80013bc <BSP_AUDIO_IN_ClockConfig+0x3c>
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013a0:	2301      	movs	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 80013a8:	23c0      	movs	r3, #192	; 0xc0
 80013aa:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 80013ac:	2306      	movs	r3, #6
 80013ae:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 f9e1 	bl	800577c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 290;
    rccclkinit.PLLI2S.PLLI2SR = 2;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80013ba:	e00d      	b.n	80013d8 <BSP_AUDIO_IN_ClockConfig+0x58>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013bc:	2301      	movs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80013c0:	2308      	movs	r3, #8
 80013c2:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 80013c4:	f44f 7391 	mov.w	r3, #290	; 0x122
 80013c8:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 f9d2 	bl	800577c <HAL_RCCEx_PeriphCLKConfig>
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	69bb      	ldr	r3, [r7, #24]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	4b46      	ldr	r3, [pc, #280]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a45      	ldr	r2, [pc, #276]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b43      	ldr	r3, [pc, #268]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a3e      	ldr	r2, [pc, #248]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b3c      	ldr	r3, [pc, #240]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28

  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 800144a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 8001450:	2305      	movs	r3, #5
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4833      	ldr	r0, [pc, #204]	; (8001528 <BSP_AUDIO_IN_MspInit+0x148>)
 800145c:	f000 fdc8 	bl	8001ff0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 8001460:	2308      	movs	r3, #8
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
 8001464:	2305      	movs	r3, #5
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	482f      	ldr	r0, [pc, #188]	; (800152c <BSP_AUDIO_IN_MspInit+0x14c>)
 8001470:	f000 fdbe 	bl	8001ff0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a29      	ldr	r2, [pc, #164]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 800147e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <BSP_AUDIO_IN_MspInit+0x144>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    
  if(hi2s->Instance == I2S2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a26      	ldr	r2, [pc, #152]	; (8001530 <BSP_AUDIO_IN_MspInit+0x150>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d137      	bne.n	800150a <BSP_AUDIO_IN_MspInit+0x12a>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ba:	615a      	str	r2, [r3, #20]
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c2:	619a      	str	r2, [r3, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ca:	61da      	str	r2, [r3, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014d2:	621a      	str	r2, [r3, #32]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014dc:	2203      	movs	r2, #3
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <BSP_AUDIO_IN_MspInit+0x158>)
 80014f0:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 8001500:	f000 fb72 	bl	8001be8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <BSP_AUDIO_IN_MspInit+0x154>)
 8001506:	f000 fac1 	bl	8001a8c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210f      	movs	r1, #15
 800150e:	200e      	movs	r0, #14
 8001510:	f000 fa85 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8001514:	200e      	movs	r0, #14
 8001516:	f000 fa9e 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40003800 	.word	0x40003800
 8001534:	200004b8 	.word	0x200004b8
 8001538:	40026058 	.word	0x40026058

0800153c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <BSP_AUDIO_IN_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <PDMDecoder_Init>:
  * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
  *         Number of audio channels (1: mono; 2: stereo)
  */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	4b42      	ldr	r3, [pc, #264]	; (8001688 <PDMDecoder_Init+0x120>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a41      	ldr	r2, [pc, #260]	; (8001688 <PDMDecoder_Init+0x120>)
 8001582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <PDMDecoder_Init+0x120>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]

  for(index = 0; index < ChnlNbrIn; index++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e06e      	b.n	8001678 <PDMDecoder_Init+0x110>
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 800159a:	4a3c      	ldr	r2, [pc, #240]	; (800168c <PDMDecoder_Init+0x124>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	214c      	movs	r1, #76	; 0x4c
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80015aa:	4a38      	ldr	r2, [pc, #224]	; (800168c <PDMDecoder_Init+0x124>)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	214c      	movs	r1, #76	; 0x4c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	3302      	adds	r3, #2
 80015b8:	2200      	movs	r2, #0
 80015ba:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80015bc:	4a33      	ldr	r2, [pc, #204]	; (800168c <PDMDecoder_Init+0x124>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	214c      	movs	r1, #76	; 0x4c
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	3304      	adds	r3, #4
 80015ca:	4a31      	ldr	r2, [pc, #196]	; (8001690 <PDMDecoder_Init+0x128>)
 80015cc:	601a      	str	r2, [r3, #0]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	b298      	uxth	r0, r3
 80015d2:	4a2e      	ldr	r2, [pc, #184]	; (800168c <PDMDecoder_Init+0x124>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	214c      	movs	r1, #76	; 0x4c
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	330a      	adds	r3, #10
 80015e0:	4602      	mov	r2, r0
 80015e2:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	b298      	uxth	r0, r3
 80015e8:	4a28      	ldr	r2, [pc, #160]	; (800168c <PDMDecoder_Init+0x124>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	214c      	movs	r1, #76	; 0x4c
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	3308      	adds	r3, #8
 80015f6:	4602      	mov	r2, r0
 80015f8:	801a      	strh	r2, [r3, #0]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	224c      	movs	r2, #76	; 0x4c
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <PDMDecoder_Init+0x124>)
 8001604:	4413      	add	r3, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f00c fca8 	bl	800df5c <PDM_Filter_Init>

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a21      	ldr	r2, [pc, #132]	; (8001694 <PDMDecoder_Init+0x12c>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	b298      	uxth	r0, r3
 8001618:	491f      	ldr	r1, [pc, #124]	; (8001698 <PDMDecoder_Init+0x130>)
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	440b      	add	r3, r1
 8001626:	3302      	adds	r3, #2
 8001628:	4602      	mov	r2, r0
 800162a:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].mic_gain = 24;
 800162c:	491a      	ldr	r1, [pc, #104]	; (8001698 <PDMDecoder_Init+0x130>)
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	440b      	add	r3, r1
 800163a:	3304      	adds	r3, #4
 800163c:	2218      	movs	r2, #24
 800163e:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001640:	4915      	ldr	r1, [pc, #84]	; (8001698 <PDMDecoder_Init+0x130>)
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	440b      	add	r3, r1
 800164e:	2202      	movs	r2, #2
 8001650:	801a      	strh	r2, [r3, #0]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	224c      	movs	r2, #76	; 0x4c
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <PDMDecoder_Init+0x124>)
 800165c:	1898      	adds	r0, r3, r2
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <PDMDecoder_Init+0x130>)
 800166a:	4413      	add	r3, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f00c fcff 	bl	800e070 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	429a      	cmp	r2, r3
 800167e:	d38c      	bcc.n	800159a <PDMDecoder_Init+0x32>
  }
}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	200006a8 	.word	0x200006a8
 8001690:	7e809d48 	.word	0x7e809d48
 8001694:	10624dd3 	.word	0x10624dd3
 8001698:	2000069c 	.word	0x2000069c

0800169c <I2S2_Init>:
  *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S2_Init(uint32_t AudioFreq)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <I2S2_Init+0x68>)
 80016a6:	4a18      	ldr	r2, [pc, #96]	; (8001708 <I2S2_Init+0x6c>)
 80016a8:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <I2S2_Init+0x68>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <I2S2_Init+0x68>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b8:	61da      	str	r2, [r3, #28]
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4a11      	ldr	r2, [pc, #68]	; (8001704 <I2S2_Init+0x68>)
 80016c0:	6153      	str	r3, [r2, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <I2S2_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <I2S2_Init+0x68>)
 80016ca:	2208      	movs	r2, #8
 80016cc:	619a      	str	r2, [r3, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <I2S2_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <I2S2_Init+0x68>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <I2S2_Init+0x68>)
 80016dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016e0:	605a      	str	r2, [r3, #4]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <I2S2_Init+0x68>)
 80016e4:	2220      	movs	r2, #32
 80016e6:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <I2S2_Init+0x68>)
 80016ea:	f002 fc45 	bl	8003f78 <HAL_I2S_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <I2S2_Init+0x5c>
  {
    return AUDIO_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <I2S2_Init+0x5e>
  }
  else
  {
    return AUDIO_OK; 
 80016f8:	2300      	movs	r3, #0
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000788 	.word	0x20000788
 8001708:	40003800 	.word	0x40003800

0800170c <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_I2S_ErrorCallback+0x2c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800171e:	f7ff fdc0 	bl	80012a2 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <HAL_I2S_ErrorCallback+0x30>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 800172c:	f7ff ff14 	bl	8001558 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40003c00 	.word	0x40003c00
 800173c:	40003800 	.word	0x40003800

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f94d 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f808 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fca6 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f965 	bl	8001a72 <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 f92d 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000400 	.word	0x20000400
 80017dc:	20000408 	.word	0x20000408
 80017e0:	20000404 	.word	0x20000404

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000408 	.word	0x20000408
 8001808:	200007d0 	.word	0x200007d0

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200007d0 	.word	0x200007d0

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_Delay+0x40>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184a:	bf00      	nop
 800184c:	f7ff ffde 	bl	800180c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000408 	.word	0x20000408

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff feb8 	bl	800180c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e099      	b.n	8001bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac8:	e00f      	b.n	8001aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aca:	f7ff fe9f 	bl	800180c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d908      	bls.n	8001aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e078      	b.n	8001bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e8      	bne.n	8001aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <HAL_DMA_Init+0x158>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d107      	bne.n	8001b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f023 0307 	bic.w	r3, r3, #7
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d117      	bne.n	8001bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f9b3 	bl	8001efc <DMA_CheckFifoParam>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001baa:	2301      	movs	r3, #1
 8001bac:	e016      	b.n	8001bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f96a 	bl	8001e90 <DMA_CalcBaseAndBitshift>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	223f      	movs	r2, #63	; 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	f010803f 	.word	0xf010803f

08001be8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e050      	b.n	8001c9c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d101      	bne.n	8001c0a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	e048      	b.n	8001c9c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2221      	movs	r2, #33	; 0x21
 8001c48:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f920 	bl	8001e90 <DMA_CalcBaseAndBitshift>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	223f      	movs	r2, #63	; 0x3f
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_DMA_Start_IT+0x26>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e040      	b.n	8001d4c <HAL_DMA_Start_IT+0xa8>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d12f      	bne.n	8001d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f89e 	bl	8001e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0216 	orr.w	r2, r2, #22
 8001d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0208 	orr.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e005      	b.n	8001d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
 8001d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d62:	f7ff fd53 	bl	800180c <HAL_GetTick>
 8001d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e052      	b.n	8001e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0216 	bic.w	r2, r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_DMA_Abort+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd6:	e013      	b.n	8001e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd8:	f7ff fd18 	bl	800180c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d90c      	bls.n	8001e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e015      	b.n	8001e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e4      	bne.n	8001dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	223f      	movs	r2, #63	; 0x3f
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	d108      	bne.n	8001e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e72:	e007      	b.n	8001e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	60da      	str	r2, [r3, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3b10      	subs	r3, #16
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d909      	bls.n	8001ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	1d1a      	adds	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed0:	e007      	b.n	8001ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eda:	f023 0303 	bic.w	r3, r3, #3
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	aaaaaaab 	.word	0xaaaaaaab
 8001ef8:	0800f024 	.word	0x0800f024

08001efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11f      	bne.n	8001f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d855      	bhi.n	8001fc8 <DMA_CheckFifoParam+0xcc>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <DMA_CheckFifoParam+0x28>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f47 	.word	0x08001f47
 8001f2c:	08001f35 	.word	0x08001f35
 8001f30:	08001fc9 	.word	0x08001fc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d045      	beq.n	8001fcc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f44:	e042      	b.n	8001fcc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f4e:	d13f      	bne.n	8001fd0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f54:	e03c      	b.n	8001fd0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f5e:	d121      	bne.n	8001fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d836      	bhi.n	8001fd4 <DMA_CheckFifoParam+0xd8>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <DMA_CheckFifoParam+0x70>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001f83 	.word	0x08001f83
 8001f74:	08001f7d 	.word	0x08001f7d
 8001f78:	08001f95 	.word	0x08001f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f80:	e02f      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d024      	beq.n	8001fd8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f92:	e021      	b.n	8001fd8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f9c:	d11e      	bne.n	8001fdc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fa2:	e01b      	b.n	8001fdc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d902      	bls.n	8001fb0 <DMA_CheckFifoParam+0xb4>
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d003      	beq.n	8001fb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fae:	e018      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb4:	e015      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00e      	beq.n	8001fe0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc6:	e00b      	b.n	8001fe0 <DMA_CheckFifoParam+0xe4>
      break;
 8001fc8:	bf00      	nop
 8001fca:	e00a      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fcc:	bf00      	nop
 8001fce:	e008      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fd0:	bf00      	nop
 8001fd2:	e006      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fd4:	bf00      	nop
 8001fd6:	e004      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fd8:	bf00      	nop
 8001fda:	e002      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001fdc:	bf00      	nop
 8001fde:	e000      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fe0:	bf00      	nop
    }
  } 
  
  return status; 
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e159      	b.n	80022c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8148 	bne.w	80022ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d00b      	beq.n	800204a <HAL_GPIO_Init+0x5a>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800203e:	2b11      	cmp	r3, #17
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b12      	cmp	r3, #18
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0xfc>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b12      	cmp	r3, #18
 80020ea:	d123      	bne.n	8002134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a2 	beq.w	80022ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_GPIO_Init+0x2e4>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a55      	ldr	r2, [pc, #340]	; (80022d4 <HAL_GPIO_Init+0x2e4>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_GPIO_Init+0x2e4>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002192:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <HAL_GPIO_Init+0x2e8>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a48      	ldr	r2, [pc, #288]	; (80022dc <HAL_GPIO_Init+0x2ec>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0x202>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a47      	ldr	r2, [pc, #284]	; (80022e0 <HAL_GPIO_Init+0x2f0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x1fe>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a46      	ldr	r2, [pc, #280]	; (80022e4 <HAL_GPIO_Init+0x2f4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_GPIO_Init+0x2f8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x1f6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a44      	ldr	r2, [pc, #272]	; (80022ec <HAL_GPIO_Init+0x2fc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x1f2>
 80021de:	2304      	movs	r3, #4
 80021e0:	e008      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021e6:	2303      	movs	r3, #3
 80021e8:	e004      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021f2:	2300      	movs	r3, #0
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f002 0203 	and.w	r2, r2, #3
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4093      	lsls	r3, r2
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002204:	4934      	ldr	r1, [pc, #208]	; (80022d8 <HAL_GPIO_Init+0x2e8>)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_GPIO_Init+0x300>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002236:	4a2e      	ldr	r2, [pc, #184]	; (80022f0 <HAL_GPIO_Init+0x300>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800223c:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_GPIO_Init+0x300>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_GPIO_Init+0x300>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_GPIO_Init+0x300>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_GPIO_Init+0x300>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_GPIO_Init+0x300>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_GPIO_Init+0x300>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3301      	adds	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	f67f aea2 	bls.w	800200c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	3724      	adds	r7, #36	; 0x24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002328:	b08f      	sub	sp, #60	; 0x3c
 800232a:	af0a      	add	r7, sp, #40	; 0x28
 800232c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e054      	b.n	80023e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f009 fdd4 	bl	800bf00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fc66 	bl	8005c48 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	687e      	ldr	r6, [r7, #4]
 8002384:	466d      	mov	r5, sp
 8002386:	f106 0410 	add.w	r4, r6, #16
 800238a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002396:	e885 0003 	stmia.w	r5, {r0, r1}
 800239a:	1d33      	adds	r3, r6, #4
 800239c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f003 fbe0 	bl	8005b64 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fc5d 	bl	8005c6a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	687e      	ldr	r6, [r7, #4]
 80023b8:	466d      	mov	r5, sp
 80023ba:	f106 0410 	add.w	r4, r6, #16
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ce:	1d33      	adds	r3, r6, #4
 80023d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f003 fd70 	bl	8005eb8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023ea:	b590      	push	{r4, r7, lr}
 80023ec:	b089      	sub	sp, #36	; 0x24
 80023ee:	af04      	add	r7, sp, #16
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	4608      	mov	r0, r1
 80023f4:	4611      	mov	r1, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	4603      	mov	r3, r0
 80023fa:	70fb      	strb	r3, [r7, #3]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70bb      	strb	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_HCD_HC_Init+0x28>
 800240e:	2302      	movs	r3, #2
 8002410:	e07f      	b.n	8002512 <HAL_HCD_HC_Init+0x128>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	333d      	adds	r3, #61	; 0x3d
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3338      	adds	r3, #56	; 0x38
 800243e:	787a      	ldrb	r2, [r7, #1]
 8002440:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3340      	adds	r3, #64	; 0x40
 8002452:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002454:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	3339      	adds	r3, #57	; 0x39
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	333f      	adds	r3, #63	; 0x3f
 800247a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800247e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	78bb      	ldrb	r3, [r7, #2]
 8002484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	333a      	adds	r3, #58	; 0x3a
 8002498:	4602      	mov	r2, r0
 800249a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800249c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0a      	bge.n	80024ba <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	333b      	adds	r3, #59	; 0x3b
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e009      	b.n	80024ce <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	333b      	adds	r3, #59	; 0x3b
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	333c      	adds	r3, #60	; 0x3c
 80024de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024e2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	787c      	ldrb	r4, [r7, #1]
 80024ea:	78ba      	ldrb	r2, [r7, #2]
 80024ec:	78f9      	ldrb	r1, [r7, #3]
 80024ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4623      	mov	r3, r4
 8002500:	f003 fe5c 	bl	80061bc <USB_HC_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}

0800251a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_HCD_HC_Halt+0x1e>
 8002534:	2302      	movs	r3, #2
 8002536:	e00f      	b.n	8002558 <HAL_HCD_HC_Halt+0x3e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f004 f898 	bl	800667e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4603      	mov	r3, r0
 8002570:	70fb      	strb	r3, [r7, #3]
 8002572:	460b      	mov	r3, r1
 8002574:	70bb      	strb	r3, [r7, #2]
 8002576:	4613      	mov	r3, r2
 8002578:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	333b      	adds	r3, #59	; 0x3b
 800258a:	78ba      	ldrb	r2, [r7, #2]
 800258c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	787a      	ldrb	r2, [r7, #1]
 80025a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80025a2:	7c3b      	ldrb	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d114      	bne.n	80025d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	3342      	adds	r3, #66	; 0x42
 80025b8:	2203      	movs	r2, #3
 80025ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	333d      	adds	r3, #61	; 0x3d
 80025cc:	7f3a      	ldrb	r2, [r7, #28]
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e009      	b.n	80025e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3342      	adds	r3, #66	; 0x42
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025e6:	787b      	ldrb	r3, [r7, #1]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	f200 80d6 	bhi.w	800279a <HAL_HCD_HC_SubmitRequest+0x23a>
 80025ee:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002605 	.word	0x08002605
 80025f8:	08002785 	.word	0x08002785
 80025fc:	08002671 	.word	0x08002671
 8002600:	080026fb 	.word	0x080026fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002604:	7c3b      	ldrb	r3, [r7, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 80c9 	bne.w	800279e <HAL_HCD_HC_SubmitRequest+0x23e>
 800260c:	78bb      	ldrb	r3, [r7, #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 80c5 	bne.w	800279e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002614:	8b3b      	ldrh	r3, [r7, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3351      	adds	r3, #81	; 0x51
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3351      	adds	r3, #81	; 0x51
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3342      	adds	r3, #66	; 0x42
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002658:	e0a1      	b.n	800279e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	3342      	adds	r3, #66	; 0x42
 800266a:	2202      	movs	r2, #2
 800266c:	701a      	strb	r2, [r3, #0]
      break;
 800266e:	e096      	b.n	800279e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002670:	78bb      	ldrb	r3, [r7, #2]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d120      	bne.n	80026b8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	3351      	adds	r3, #81	; 0x51
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	3342      	adds	r3, #66	; 0x42
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80026a0:	e07e      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	3342      	adds	r3, #66	; 0x42
 80026b2:	2202      	movs	r2, #2
 80026b4:	701a      	strb	r2, [r3, #0]
      break;
 80026b6:	e073      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	3350      	adds	r3, #80	; 0x50
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3342      	adds	r3, #66	; 0x42
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
      break;
 80026e2:	e05d      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	3342      	adds	r3, #66	; 0x42
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
      break;
 80026f8:	e052      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026fa:	78bb      	ldrb	r3, [r7, #2]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d120      	bne.n	8002742 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	3351      	adds	r3, #81	; 0x51
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	3342      	adds	r3, #66	; 0x42
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800272a:	e039      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	3342      	adds	r3, #66	; 0x42
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
      break;
 8002740:	e02e      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	3350      	adds	r3, #80	; 0x50
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3342      	adds	r3, #66	; 0x42
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
      break;
 800276c:	e018      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	3342      	adds	r3, #66	; 0x42
 800277e:	2202      	movs	r2, #2
 8002780:	701a      	strb	r2, [r3, #0]
      break;
 8002782:	e00d      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	3342      	adds	r3, #66	; 0x42
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
      break;
 8002798:	e002      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800279e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	3344      	adds	r3, #68	; 0x44
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	8b39      	ldrh	r1, [r7, #24]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4403      	add	r3, r0
 80027c4:	3348      	adds	r3, #72	; 0x48
 80027c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	335c      	adds	r3, #92	; 0x5c
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	334c      	adds	r3, #76	; 0x4c
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3339      	adds	r3, #57	; 0x39
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	335d      	adds	r3, #93	; 0x5d
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	3338      	adds	r3, #56	; 0x38
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	18d1      	adds	r1, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	f003 fdcc 	bl	80063d0 <USB_HC_StartXfer>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop

08002844 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fae9 	bl	8005e32 <USB_GetMode>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	f040 80ef 	bne.w	8002a46 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f003 facd 	bl	8005e0c <USB_ReadInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80e5 	beq.w	8002a44 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fac4 	bl	8005e0c <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800288e:	d104      	bne.n	800289a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fab4 	bl	8005e0c <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ae:	d104      	bne.n	80028ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 faa4 	bl	8005e0c <USB_ReadInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ce:	d104      	bne.n	80028da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fa94 	bl	8005e0c <USB_ReadInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d103      	bne.n	80028f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2202      	movs	r2, #2
 80028f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fa86 	bl	8005e0c <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290a:	d115      	bne.n	8002938 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002914:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f009 fb68 	bl	800bffc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fb7c 	bl	8006030 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 fa65 	bl	8005e0c <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800294c:	d102      	bne.n	8002954 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f001 f966 	bl	8003c20 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f003 fa57 	bl	8005e0c <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b08      	cmp	r3, #8
 8002966:	d106      	bne.n	8002976 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f009 fb2b 	bl	800bfc4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2208      	movs	r2, #8
 8002974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fa46 	bl	8005e0c <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800298a:	d138      	bne.n	80029fe <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f003 fe63 	bl	800665c <USB_HC_ReadInterrupt>
 8002996:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e025      	b.n	80029ea <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d018      	beq.n	80029e4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c8:	d106      	bne.n	80029d8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4619      	mov	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f8cf 	bl	8002b74 <HCD_HC_IN_IRQHandler>
 80029d6:	e005      	b.n	80029e4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fcfd 	bl	80033de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d3d4      	bcc.n	800299e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fa02 	bl	8005e0c <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d101      	bne.n	8002a16 <HAL_HCD_IRQHandler+0x1d2>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_HCD_IRQHandler+0x1d4>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d014      	beq.n	8002a46 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f001 f84b 	bl	8003ac8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0210 	orr.w	r2, r2, #16
 8002a40:	619a      	str	r2, [r3, #24]
 8002a42:	e000      	b.n	8002a46 <HAL_HCD_IRQHandler+0x202>
      return;
 8002a44:	bf00      	nop
    }
  }
}
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_HCD_Start+0x16>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e013      	b.n	8002a8a <HAL_HCD_Start+0x3e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 f8d9 	bl	8005c26 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 fb3c 	bl	80060f8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_HCD_Stop+0x16>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e00d      	b.n	8002ac4 <HAL_HCD_Stop+0x32>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 ff1d 	bl	80068f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fae3 	bl	80060a4 <USB_ResetPort>
 8002ade:	4603      	mov	r3, r0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	335c      	adds	r3, #92	; 0x5c
 8002b04:	781b      	ldrb	r3, [r3, #0]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	334c      	adds	r3, #76	; 0x4c
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fb25 	bl	8006198 <USB_GetCurrentFrame>
 8002b4e:	4603      	mov	r3, r0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fb00 	bl	800616a <USB_GetHostSpeed>
 8002b6a:	4603      	mov	r3, r0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d119      	bne.n	8002bd8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	0151      	lsls	r1, r2, #5
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	440a      	add	r2, r1
 8002bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	60d3      	str	r3, [r2, #12]
 8002bd6:	e0ce      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bee:	d12c      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	335d      	adds	r3, #93	; 0x5d
 8002c14:	2207      	movs	r2, #7
 8002c16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	0151      	lsls	r1, r2, #5
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	440a      	add	r2, r1
 8002c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c32:	f043 0302 	orr.w	r3, r3, #2
 8002c36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fd1b 	bl	800667e <USB_HC_Halt>
 8002c48:	e095      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d109      	bne.n	8002c74 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2320      	movs	r3, #32
 8002c70:	6093      	str	r3, [r2, #8]
 8002c72:	e080      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d134      	bne.n	8002cf4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	0151      	lsls	r1, r2, #5
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	440a      	add	r2, r1
 8002ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	335d      	adds	r3, #93	; 0x5d
 8002cba:	2205      	movs	r2, #5
 8002cbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2310      	movs	r3, #16
 8002cce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2308      	movs	r3, #8
 8002ce0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fcc6 	bl	800667e <USB_HC_Halt>
 8002cf2:	e040      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0a:	d134      	bne.n	8002d76 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fca1 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	335d      	adds	r3, #93	; 0x5d
 8002d5e:	2208      	movs	r2, #8
 8002d60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d74:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8c:	d122      	bne.n	8002dd4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	0151      	lsls	r1, r2, #5
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	440a      	add	r2, r1
 8002da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fc60 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002dd2:	e300      	b.n	80033d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	f040 80fd 	bne.w	8002fe6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3348      	adds	r3, #72	; 0x48
 8002e04:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	0159      	lsls	r1, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e18:	1ad1      	subs	r1, r2, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4403      	add	r3, r0
 8002e28:	334c      	adds	r3, #76	; 0x4c
 8002e2a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	335d      	adds	r3, #93	; 0x5d
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3358      	adds	r3, #88	; 0x58
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2301      	movs	r3, #1
 8002e64:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	333f      	adds	r3, #63	; 0x3f
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	333f      	adds	r3, #63	; 0x3f
 8002e8c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d121      	bne.n	8002ed6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	0151      	lsls	r1, r2, #5
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	440a      	add	r2, r1
 8002ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fbde 	bl	800667e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	6093      	str	r3, [r2, #8]
 8002ed4:	e070      	b.n	8002fb8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	333f      	adds	r3, #63	; 0x3f
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d12a      	bne.n	8002f42 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	0151      	lsls	r1, r2, #5
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	440a      	add	r2, r1
 8002f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	335c      	adds	r3, #92	; 0x5c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	b2d8      	uxtb	r0, r3
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4601      	mov	r1, r0
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f009 f86c 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f40:	e03a      	b.n	8002fb8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	333f      	adds	r3, #63	; 0x3f
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d12f      	bne.n	8002fb8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	335c      	adds	r3, #92	; 0x5c
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	3350      	adds	r3, #80	; 0x50
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	f083 0301 	eor.w	r3, r3, #1
 8002f82:	b2d8      	uxtb	r0, r3
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3350      	adds	r3, #80	; 0x50
 8002f94:	4602      	mov	r2, r0
 8002f96:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	b2d8      	uxtb	r0, r3
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	335c      	adds	r3, #92	; 0x5c
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4601      	mov	r1, r0
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f009 f830 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3350      	adds	r3, #80	; 0x50
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	f083 0301 	eor.w	r3, r3, #1
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	3350      	adds	r3, #80	; 0x50
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	701a      	strb	r2, [r3, #0]
}
 8002fe4:	e1f7      	b.n	80033d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 811a 	bne.w	8003232 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	0151      	lsls	r1, r2, #5
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	440a      	add	r2, r1
 8003014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003018:	f023 0302 	bic.w	r3, r3, #2
 800301c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	335d      	adds	r3, #93	; 0x5d
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10a      	bne.n	800304a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	335c      	adds	r3, #92	; 0x5c
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e0d9      	b.n	80031fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	335d      	adds	r3, #93	; 0x5d
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d10a      	bne.n	8003076 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	335c      	adds	r3, #92	; 0x5c
 8003070:	2205      	movs	r2, #5
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e0c3      	b.n	80031fe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	335d      	adds	r3, #93	; 0x5d
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b06      	cmp	r3, #6
 800308a:	d00a      	beq.n	80030a2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	335d      	adds	r3, #93	; 0x5d
 800309c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d156      	bne.n	8003150 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	3358      	adds	r3, #88	; 0x58
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1c59      	adds	r1, r3, #1
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4403      	add	r3, r0
 80030c4:	3358      	adds	r3, #88	; 0x58
 80030c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3358      	adds	r3, #88	; 0x58
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d914      	bls.n	8003108 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3358      	adds	r3, #88	; 0x58
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	335c      	adds	r3, #92	; 0x5c
 8003102:	2204      	movs	r2, #4
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e009      	b.n	800311c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	335c      	adds	r3, #92	; 0x5c
 8003118:	2202      	movs	r2, #2
 800311a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003132:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800313a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e056      	b.n	80031fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	335d      	adds	r3, #93	; 0x5d
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d123      	bne.n	80031ae <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	335c      	adds	r3, #92	; 0x5c
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003190:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003198:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e027      	b.n	80031fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	335d      	adds	r3, #93	; 0x5d
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b07      	cmp	r3, #7
 80031c2:	d11c      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	3358      	adds	r3, #88	; 0x58
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4403      	add	r3, r0
 80031e6:	3358      	adds	r3, #88	; 0x58
 80031e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	335c      	adds	r3, #92	; 0x5c
 80031fa:	2204      	movs	r2, #4
 80031fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	2302      	movs	r3, #2
 800320e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	b2d8      	uxtb	r0, r3
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	335c      	adds	r3, #92	; 0x5c
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4601      	mov	r1, r0
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f008 fef4 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003230:	e0d1      	b.n	80033d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d13e      	bne.n	80032c6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	440a      	add	r2, r1
 800325e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	3358      	adds	r3, #88	; 0x58
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1c59      	adds	r1, r3, #1
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4403      	add	r3, r0
 800328a:	3358      	adds	r3, #88	; 0x58
 800328c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	335d      	adds	r3, #93	; 0x5d
 800329e:	2206      	movs	r2, #6
 80032a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 f9e6 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	461a      	mov	r2, r3
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	6093      	str	r3, [r2, #8]
}
 80032c4:	e087      	b.n	80033d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d17c      	bne.n	80033d6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	440b      	add	r3, r1
 80032ea:	333f      	adds	r3, #63	; 0x3f
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d122      	bne.n	8003338 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	440b      	add	r3, r1
 8003300:	3358      	adds	r3, #88	; 0x58
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	0151      	lsls	r1, r2, #5
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	440a      	add	r2, r1
 800331c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f003 f9a4 	bl	800667e <USB_HC_Halt>
 8003336:	e045      	b.n	80033c4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	440b      	add	r3, r1
 8003346:	333f      	adds	r3, #63	; 0x3f
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	333f      	adds	r3, #63	; 0x3f
 800335e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003360:	2b02      	cmp	r3, #2
 8003362:	d12f      	bne.n	80033c4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3358      	adds	r3, #88	; 0x58
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d121      	bne.n	80033c4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	335d      	adds	r3, #93	; 0x5d
 8003390:	2203      	movs	r2, #3
 8003392:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 f95d 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	2310      	movs	r3, #16
 80033d4:	6093      	str	r3, [r2, #8]
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d119      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	461a      	mov	r2, r3
 800341c:	2304      	movs	r3, #4
 800341e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	440a      	add	r2, r1
 8003436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800343a:	f043 0302 	orr.w	r3, r3, #2
 800343e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003440:	e33e      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b20      	cmp	r3, #32
 8003456:	d141      	bne.n	80034dc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	461a      	mov	r2, r3
 8003466:	2320      	movs	r3, #32
 8003468:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	333d      	adds	r3, #61	; 0x3d
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	f040 831f 	bne.w	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	333d      	adds	r3, #61	; 0x3d
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	335c      	adds	r3, #92	; 0x5c
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	0151      	lsls	r1, r2, #5
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	440a      	add	r2, r1
 80034c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 f8d2 	bl	800667e <USB_HC_Halt>
}
 80034da:	e2f1      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d13f      	bne.n	8003572 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	335d      	adds	r3, #93	; 0x5d
 8003502:	2204      	movs	r2, #4
 8003504:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	333d      	adds	r3, #61	; 0x3d
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3358      	adds	r3, #88	; 0x58
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	440a      	add	r2, r1
 8003544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f003 f890 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	2340      	movs	r3, #64	; 0x40
 800356e:	6093      	str	r3, [r2, #8]
}
 8003570:	e2a6      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003588:	d122      	bne.n	80035d0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 f862 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035cc:	6093      	str	r3, [r2, #8]
}
 80035ce:	e277      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d135      	bne.n	8003652 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	3358      	adds	r3, #88	; 0x58
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	0151      	lsls	r1, r2, #5
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	440a      	add	r2, r1
 8003610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f003 f82a 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	2301      	movs	r3, #1
 800363a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	335d      	adds	r3, #93	; 0x5d
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
}
 8003650:	e236      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b08      	cmp	r3, #8
 8003666:	d12b      	bne.n	80036c0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	461a      	mov	r2, r3
 8003676:	2308      	movs	r3, #8
 8003678:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	440a      	add	r2, r1
 8003690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 ffea 	bl	800667e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	335d      	adds	r3, #93	; 0x5d
 80036ba:	2205      	movs	r2, #5
 80036bc:	701a      	strb	r2, [r3, #0]
}
 80036be:	e1ff      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d155      	bne.n	8003782 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	3358      	adds	r3, #88	; 0x58
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	335d      	adds	r3, #93	; 0x5d
 80036fa:	2203      	movs	r2, #3
 80036fc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	333d      	adds	r3, #61	; 0x3d
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d114      	bne.n	800373e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	333c      	adds	r3, #60	; 0x3c
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	333d      	adds	r3, #61	; 0x3d
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	0151      	lsls	r1, r2, #5
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	440a      	add	r2, r1
 8003754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	4611      	mov	r1, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f002 ff88 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	461a      	mov	r2, r3
 800377c:	2310      	movs	r3, #16
 800377e:	6093      	str	r3, [r2, #8]
}
 8003780:	e19e      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d12b      	bne.n	80037f0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b2:	f043 0302 	orr.w	r3, r3, #2
 80037b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 ff5b 	bl	800667e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	335d      	adds	r3, #93	; 0x5d
 80037d8:	2206      	movs	r2, #6
 80037da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	6093      	str	r3, [r2, #8]
}
 80037ee:	e167      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003806:	d135      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	0151      	lsls	r1, r2, #5
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	440a      	add	r2, r1
 800381e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f002 ff23 	bl	800667e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	461a      	mov	r2, r3
 8003846:	2310      	movs	r3, #16
 8003848:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	461a      	mov	r2, r3
 8003858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	335d      	adds	r3, #93	; 0x5d
 800386e:	2208      	movs	r2, #8
 8003870:	701a      	strb	r2, [r3, #0]
}
 8003872:	e125      	b.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	f040 811a 	bne.w	8003ac0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038a6:	f023 0302 	bic.w	r3, r3, #2
 80038aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	335d      	adds	r3, #93	; 0x5d
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d137      	bne.n	8003932 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	335c      	adds	r3, #92	; 0x5c
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	333f      	adds	r3, #63	; 0x3f
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d00b      	beq.n	8003904 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	440b      	add	r3, r1
 80038fa:	333f      	adds	r3, #63	; 0x3f
 80038fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038fe:	2b03      	cmp	r3, #3
 8003900:	f040 80c5 	bne.w	8003a8e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	3351      	adds	r3, #81	; 0x51
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2d8      	uxtb	r0, r3
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	3351      	adds	r3, #81	; 0x51
 800392c:	4602      	mov	r2, r0
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e0ad      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	335d      	adds	r3, #93	; 0x5d
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d10a      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	335c      	adds	r3, #92	; 0x5c
 8003958:	2202      	movs	r2, #2
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e097      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	440b      	add	r3, r1
 800396c:	335d      	adds	r3, #93	; 0x5d
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d10a      	bne.n	800398a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	335c      	adds	r3, #92	; 0x5c
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	e081      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	440b      	add	r3, r1
 8003998:	335d      	adds	r3, #93	; 0x5d
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b05      	cmp	r3, #5
 800399e:	d10a      	bne.n	80039b6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	335c      	adds	r3, #92	; 0x5c
 80039b0:	2205      	movs	r2, #5
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e06b      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	335d      	adds	r3, #93	; 0x5d
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d00a      	beq.n	80039e2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	335d      	adds	r3, #93	; 0x5d
 80039dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d155      	bne.n	8003a8e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	3358      	adds	r3, #88	; 0x58
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4403      	add	r3, r0
 8003a04:	3358      	adds	r3, #88	; 0x58
 8003a06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	3358      	adds	r3, #88	; 0x58
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d914      	bls.n	8003a48 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3358      	adds	r3, #88	; 0x58
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	335c      	adds	r3, #92	; 0x5c
 8003a42:	2204      	movs	r2, #4
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e009      	b.n	8003a5c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	335c      	adds	r3, #92	; 0x5c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b2d8      	uxtb	r0, r3
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	335c      	adds	r3, #92	; 0x5c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4601      	mov	r1, r0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f008 faac 	bl	800c018 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	0c5b      	lsrs	r3, r3, #17
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003afc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d003      	beq.n	8003b0c <HCD_RXQLVL_IRQHandler+0x44>
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	f000 8082 	beq.w	8003c0e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b0a:	e083      	b.n	8003c14 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d07f      	beq.n	8003c12 <HCD_RXQLVL_IRQHandler+0x14a>
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	3344      	adds	r3, #68	; 0x44
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d074      	beq.n	8003c12 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	440b      	add	r3, r1
 8003b3a:	3344      	adds	r3, #68	; 0x44
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	b292      	uxth	r2, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	f002 f939 	bl	8005dba <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	3344      	adds	r3, #68	; 0x44
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	18d1      	adds	r1, r2, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4403      	add	r3, r0
 8003b6c:	3344      	adds	r3, #68	; 0x44
 8003b6e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	334c      	adds	r3, #76	; 0x4c
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	18d1      	adds	r1, r2, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4403      	add	r3, r0
 8003b94:	334c      	adds	r3, #76	; 0x4c
 8003b96:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HCD_RXQLVL_IRQHandler+0x154>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d031      	beq.n	8003c12 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bc4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bcc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	3350      	adds	r3, #80	; 0x50
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	f083 0301 	eor.w	r3, r3, #1
 8003bf6:	b2d8      	uxtb	r0, r3
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	3350      	adds	r3, #80	; 0x50
 8003c08:	4602      	mov	r2, r0
 8003c0a:	701a      	strb	r2, [r3, #0]
      break;
 8003c0c:	e001      	b.n	8003c12 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003c12:	bf00      	nop
  }
}
 8003c14:	bf00      	nop
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	1ff80000 	.word	0x1ff80000

08003c20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c4c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d10b      	bne.n	8003c70 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f008 f9bc 	bl	800bfe0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f043 0302 	orr.w	r3, r3, #2
 8003c6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d132      	bne.n	8003ce0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f043 0308 	orr.w	r3, r3, #8
 8003c80:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d126      	bne.n	8003cda <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d113      	bne.n	8003cbc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c9e:	d106      	bne.n	8003cae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 f9c2 	bl	8006030 <USB_InitFSLSPClkSel>
 8003cac:	e011      	b.n	8003cd2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f002 f9bb 	bl	8006030 <USB_InitFSLSPClkSel>
 8003cba:	e00a      	b.n	8003cd2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d106      	bne.n	8003cd2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cd0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f008 f9ae 	bl	800c034 <HAL_HCD_PortEnabled_Callback>
 8003cd8:	e002      	b.n	8003ce0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f008 f9b8 	bl	800c050 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d103      	bne.n	8003cf2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f043 0320 	orr.w	r3, r3, #32
 8003cf0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6013      	str	r3, [r2, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e11f      	b.n	8003f5a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fee6 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f001 fcf2 	bl	8005754 <HAL_RCC_GetPCLK1Freq>
 8003d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a7b      	ldr	r2, [pc, #492]	; (8003f64 <HAL_I2C_Init+0x25c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d807      	bhi.n	8003d8c <HAL_I2C_Init+0x84>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a7a      	ldr	r2, [pc, #488]	; (8003f68 <HAL_I2C_Init+0x260>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e006      	b.n	8003d9a <HAL_I2C_Init+0x92>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <HAL_I2C_Init+0x264>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	bf94      	ite	ls
 8003d94:	2301      	movls	r3, #1
 8003d96:	2300      	movhi	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0db      	b.n	8003f5a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <HAL_I2C_Init+0x268>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0c9b      	lsrs	r3, r3, #18
 8003dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a64      	ldr	r2, [pc, #400]	; (8003f64 <HAL_I2C_Init+0x25c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d802      	bhi.n	8003ddc <HAL_I2C_Init+0xd4>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	e009      	b.n	8003df0 <HAL_I2C_Init+0xe8>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	4a63      	ldr	r2, [pc, #396]	; (8003f74 <HAL_I2C_Init+0x26c>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	3301      	adds	r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4956      	ldr	r1, [pc, #344]	; (8003f64 <HAL_I2C_Init+0x25c>)
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d80d      	bhi.n	8003e2c <HAL_I2C_Init+0x124>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1e59      	subs	r1, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	bf38      	it	cc
 8003e28:	2304      	movcc	r3, #4
 8003e2a:	e04f      	b.n	8003ecc <HAL_I2C_Init+0x1c4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d111      	bne.n	8003e58 <HAL_I2C_Init+0x150>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1e58      	subs	r0, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	440b      	add	r3, r1
 8003e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e012      	b.n	8003e7e <HAL_I2C_Init+0x176>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e58      	subs	r0, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	0099      	lsls	r1, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_Init+0x17e>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e022      	b.n	8003ecc <HAL_I2C_Init+0x1c4>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10e      	bne.n	8003eac <HAL_I2C_Init+0x1a4>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1e58      	subs	r0, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	440b      	add	r3, r1
 8003e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eaa:	e00f      	b.n	8003ecc <HAL_I2C_Init+0x1c4>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1e58      	subs	r0, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	0099      	lsls	r1, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	6809      	ldr	r1, [r1, #0]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6911      	ldr	r1, [r2, #16]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68d2      	ldr	r2, [r2, #12]
 8003f06:	4311      	orrs	r1, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	000186a0 	.word	0x000186a0
 8003f68:	001e847f 	.word	0x001e847f
 8003f6c:	003d08ff 	.word	0x003d08ff
 8003f70:	431bde83 	.word	0x431bde83
 8003f74:	10624dd3 	.word	0x10624dd3

08003f78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e128      	b.n	80041dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a90      	ldr	r2, [pc, #576]	; (80041e4 <HAL_I2S_Init+0x26c>)
 8003fa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fc fe51 	bl	8000c4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fc0:	f023 030f 	bic.w	r3, r3, #15
 8003fc4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d060      	beq.n	8004098 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003fde:	2310      	movs	r3, #16
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e001      	b.n	8003fe8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d802      	bhi.n	8003ff6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f001 fcf2 	bl	80059e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ffc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004006:	d125      	bne.n	8004054 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	fbb2 f2f3 	udiv	r2, r2, r3
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	3305      	adds	r3, #5
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e01f      	b.n	8004072 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	fbb2 f2f3 	udiv	r2, r2, r3
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	3305      	adds	r3, #5
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	e00e      	b.n	8004072 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	fbb2 f2f3 	udiv	r2, r2, r3
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	3305      	adds	r3, #5
 8004070:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4a5c      	ldr	r2, [pc, #368]	; (80041e8 <HAL_I2S_Init+0x270>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	e003      	b.n	80040a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004098:	2302      	movs	r3, #2
 800409a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d902      	bls.n	80040ac <HAL_I2S_Init+0x134>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2bff      	cmp	r3, #255	; 0xff
 80040aa:	d907      	bls.n	80040bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f043 0210 	orr.w	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e08f      	b.n	80041dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	ea42 0103 	orr.w	r1, r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040da:	f023 030f 	bic.w	r3, r3, #15
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6851      	ldr	r1, [r2, #4]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	4311      	orrs	r1, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68d2      	ldr	r2, [r2, #12]
 80040ec:	4311      	orrs	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6992      	ldr	r2, [r2, #24]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d161      	bne.n	80041cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a38      	ldr	r2, [pc, #224]	; (80041ec <HAL_I2S_Init+0x274>)
 800410c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a37      	ldr	r2, [pc, #220]	; (80041f0 <HAL_I2S_Init+0x278>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_I2S_Init+0x1a4>
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <HAL_I2S_Init+0x27c>)
 800411a:	e001      	b.n	8004120 <HAL_I2S_Init+0x1a8>
 800411c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	4932      	ldr	r1, [pc, #200]	; (80041f0 <HAL_I2S_Init+0x278>)
 8004128:	428a      	cmp	r2, r1
 800412a:	d101      	bne.n	8004130 <HAL_I2S_Init+0x1b8>
 800412c:	4a31      	ldr	r2, [pc, #196]	; (80041f4 <HAL_I2S_Init+0x27c>)
 800412e:	e001      	b.n	8004134 <HAL_I2S_Init+0x1bc>
 8004130:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004134:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004138:	f023 030f 	bic.w	r3, r3, #15
 800413c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_I2S_Init+0x278>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_I2S_Init+0x1d4>
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <HAL_I2S_Init+0x27c>)
 800414a:	e001      	b.n	8004150 <HAL_I2S_Init+0x1d8>
 800414c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004150:	2202      	movs	r2, #2
 8004152:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <HAL_I2S_Init+0x278>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_I2S_Init+0x1ea>
 800415e:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <HAL_I2S_Init+0x27c>)
 8004160:	e001      	b.n	8004166 <HAL_I2S_Init+0x1ee>
 8004162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004172:	d003      	beq.n	800417c <HAL_I2S_Init+0x204>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800417c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e001      	b.n	8004188 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	b299      	uxth	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800419e:	4303      	orrs	r3, r0
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	430b      	orrs	r3, r1
 80041a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80041a6:	4313      	orrs	r3, r2
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <HAL_I2S_Init+0x278>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_I2S_Init+0x24c>
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <HAL_I2S_Init+0x27c>)
 80041c2:	e001      	b.n	80041c8 <HAL_I2S_Init+0x250>
 80041c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c8:	897a      	ldrh	r2, [r7, #10]
 80041ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	080048a5 	.word	0x080048a5
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	08004a2d 	.word	0x08004a2d
 80041f0:	40003800 	.word	0x40003800
 80041f4:	40003400 	.word	0x40003400

080041f8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_I2S_Receive_DMA+0x1a>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0a1      	b.n	800435a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_I2S_Receive_DMA+0x2e>
 8004222:	2302      	movs	r3, #2
 8004224:	e099      	b.n	800435a <HAL_I2S_Receive_DMA+0x162>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d005      	beq.n	8004246 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	e089      	b.n	800435a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2204      	movs	r2, #4
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d002      	beq.n	8004272 <HAL_I2S_Receive_DMA+0x7a>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d10a      	bne.n	8004288 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	865a      	strh	r2, [r3, #50]	; 0x32
 8004286:	e005      	b.n	8004294 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	4a32      	ldr	r2, [pc, #200]	; (8004364 <HAL_I2S_Receive_DMA+0x16c>)
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	4a31      	ldr	r2, [pc, #196]	; (8004368 <HAL_I2S_Receive_DMA+0x170>)
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	4a30      	ldr	r2, [pc, #192]	; (800436c <HAL_I2S_Receive_DMA+0x174>)
 80042aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ba:	d10a      	bne.n	80042d2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	4619      	mov	r1, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80042e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80042ea:	f7fd fcdb 	bl	8001ca4 <HAL_DMA_Start_IT>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00f      	beq.n	8004314 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	f043 0208 	orr.w	r2, r3, #8
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e022      	b.n	800435a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004330:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	08004783 	.word	0x08004783
 8004368:	08004741 	.word	0x08004741
 800436c:	0800479f 	.word	0x0800479f

08004370 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004384:	d004      	beq.n	8004390 <HAL_I2S_DMAStop+0x20>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 80d1 	bne.w	8004532 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00f      	beq.n	80043b8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	4618      	mov	r0, r3
 800439e:	f7fd fcd9 	bl	8001d54 <HAL_DMA_Abort>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f043 0208 	orr.w	r2, r3, #8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80043b8:	2364      	movs	r3, #100	; 0x64
 80043ba:	2201      	movs	r2, #1
 80043bc:	2102      	movs	r1, #2
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fafa 	bl	80049b8 <I2S_WaitFlagStateUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80043e2:	2364      	movs	r3, #100	; 0x64
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fae5 	bl	80049b8 <I2S_WaitFlagStateUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0202 	bic.w	r2, r2, #2
 8004438:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b05      	cmp	r3, #5
 8004444:	f040 8165 	bne.w	8004712 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00f      	beq.n	8004470 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd fc7d 	bl	8001d54 <HAL_DMA_Abort>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f043 0208 	orr.w	r2, r3, #8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a8a      	ldr	r2, [pc, #552]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_I2S_DMAStop+0x10e>
 800447a:	4b8a      	ldr	r3, [pc, #552]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 800447c:	e001      	b.n	8004482 <HAL_I2S_DMAStop+0x112>
 800447e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4985      	ldr	r1, [pc, #532]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 800448a:	428b      	cmp	r3, r1
 800448c:	d101      	bne.n	8004492 <HAL_I2S_DMAStop+0x122>
 800448e:	4b85      	ldr	r3, [pc, #532]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 8004490:	e001      	b.n	8004496 <HAL_I2S_DMAStop+0x126>
 8004492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a7e      	ldr	r2, [pc, #504]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <HAL_I2S_DMAStop+0x13e>
 80044aa:	4b7e      	ldr	r3, [pc, #504]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 80044ac:	e001      	b.n	80044b2 <HAL_I2S_DMAStop+0x142>
 80044ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a79      	ldr	r2, [pc, #484]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_I2S_DMAStop+0x154>
 80044c0:	4b78      	ldr	r3, [pc, #480]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 80044c2:	e001      	b.n	80044c8 <HAL_I2S_DMAStop+0x158>
 80044c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a73      	ldr	r2, [pc, #460]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <HAL_I2S_DMAStop+0x16c>
 80044d8:	4b72      	ldr	r3, [pc, #456]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 80044da:	e001      	b.n	80044e0 <HAL_I2S_DMAStop+0x170>
 80044dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	496e      	ldr	r1, [pc, #440]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 80044e8:	428b      	cmp	r3, r1
 80044ea:	d101      	bne.n	80044f0 <HAL_I2S_DMAStop+0x180>
 80044ec:	4b6d      	ldr	r3, [pc, #436]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 80044ee:	e001      	b.n	80044f4 <HAL_I2S_DMAStop+0x184>
 80044f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10c      	bne.n	800451c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800451a:	e0fa      	b.n	8004712 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5f      	ldr	r2, [pc, #380]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_I2S_DMAStop+0x1ba>
 8004526:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 8004528:	e001      	b.n	800452e <HAL_I2S_DMAStop+0x1be>
 800452a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004530:	e0ef      	b.n	8004712 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453a:	d005      	beq.n	8004548 <HAL_I2S_DMAStop+0x1d8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004544:	f040 80e5 	bne.w	8004712 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00f      	beq.n	8004570 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	4618      	mov	r0, r3
 8004556:	f7fd fbfd 	bl	8001d54 <HAL_DMA_Abort>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f043 0208 	orr.w	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b05      	cmp	r3, #5
 800457a:	f040 809a 	bne.w	80046b2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00f      	beq.n	80045a6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fbe2 	bl	8001d54 <HAL_DMA_Abort>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f043 0208 	orr.w	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80045a6:	f7fd f931 	bl	800180c <HAL_GetTick>
 80045aa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80045ac:	e012      	b.n	80045d4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80045ae:	f7fd f92d 	bl	800180c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b64      	cmp	r3, #100	; 0x64
 80045ba:	d90b      	bls.n	80045d4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	f043 0201 	orr.w	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a31      	ldr	r2, [pc, #196]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_I2S_DMAStop+0x272>
 80045de:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 80045e0:	e001      	b.n	80045e6 <HAL_I2S_DMAStop+0x276>
 80045e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d1de      	bne.n	80045ae <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80045f0:	e012      	b.n	8004618 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80045f2:	f7fd f90b 	bl	800180c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b64      	cmp	r3, #100	; 0x64
 80045fe:	d90b      	bls.n	8004618 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_I2S_DMAStop+0x2b6>
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 8004624:	e001      	b.n	800462a <HAL_I2S_DMAStop+0x2ba>
 8004626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d0de      	beq.n	80045f2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_I2S_DMAStop+0x2d2>
 800463e:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 8004640:	e001      	b.n	8004646 <HAL_I2S_DMAStop+0x2d6>
 8004642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4914      	ldr	r1, [pc, #80]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 800464e:	428b      	cmp	r3, r1
 8004650:	d101      	bne.n	8004656 <HAL_I2S_DMAStop+0x2e6>
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 8004654:	e001      	b.n	800465a <HAL_I2S_DMAStop+0x2ea>
 8004656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_I2S_DMAStop+0x302>
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 8004670:	e001      	b.n	8004676 <HAL_I2S_DMAStop+0x306>
 8004672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_I2S_DMAStop+0x31a>
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 8004688:	e001      	b.n	800468e <HAL_I2S_DMAStop+0x31e>
 800468a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4902      	ldr	r1, [pc, #8]	; (80046a0 <HAL_I2S_DMAStop+0x330>)
 8004696:	428b      	cmp	r3, r1
 8004698:	d106      	bne.n	80046a8 <HAL_I2S_DMAStop+0x338>
 800469a:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <HAL_I2S_DMAStop+0x334>)
 800469c:	e006      	b.n	80046ac <HAL_I2S_DMAStop+0x33c>
 800469e:	bf00      	nop
 80046a0:	40003800 	.word	0x40003800
 80046a4:	40003400 	.word	0x40003400
 80046a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ac:	f022 0202 	bic.w	r2, r2, #2
 80046b0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f0:	d10c      	bne.n	800470c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e002      	b.n	8004712 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800471a:	7ffb      	ldrb	r3, [r7, #31]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004732:	b2db      	uxtb	r3, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10e      	bne.n	8004774 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7fc fdef 	bl	8001358 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7fc fdeb 	bl	800136c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0203 	bic.w	r2, r2, #3
 80047ba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f043 0208 	orr.w	r2, r3, #8
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7fc ff95 	bl	800170c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	881a      	ldrh	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10e      	bne.n	800483e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800482e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fc fd19 	bl	8001270 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	b292      	uxth	r2, r2
 800485a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	1c9a      	adds	r2, r3, #2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10e      	bne.n	800489c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800488c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fd5e 	bl	8001358 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d13a      	bne.n	8004936 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d109      	bne.n	80048de <I2S_IRQHandler+0x3a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d102      	bne.n	80048de <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ffb4 	bl	8004846 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d126      	bne.n	8004936 <I2S_IRQHandler+0x92>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d11f      	bne.n	8004936 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004904:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f043 0202 	orr.w	r2, r3, #2
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fc feeb 	bl	800170c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b03      	cmp	r3, #3
 8004940:	d136      	bne.n	80049b0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	d109      	bne.n	8004960 <I2S_IRQHandler+0xbc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d102      	bne.n	8004960 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ff45 	bl	80047ea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b08      	cmp	r3, #8
 8004968:	d122      	bne.n	80049b0 <I2S_IRQHandler+0x10c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b20      	cmp	r3, #32
 8004976:	d11b      	bne.n	80049b0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004986:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc feae 	bl	800170c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80049c8:	f7fc ff20 	bl	800180c <HAL_GetTick>
 80049cc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80049ce:	e018      	b.n	8004a02 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d014      	beq.n	8004a02 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80049d8:	f7fc ff18 	bl	800180c <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d902      	bls.n	80049ee <I2S_WaitFlagStateUntilTimeout+0x36>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1d7      	bne.n	80049d0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4aa2      	ldr	r2, [pc, #648]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d101      	bne.n	8004a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a46:	4ba2      	ldr	r3, [pc, #648]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a48:	e001      	b.n	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a9b      	ldr	r2, [pc, #620]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a64:	4b9a      	ldr	r3, [pc, #616]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a66:	e001      	b.n	8004a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a78:	d004      	beq.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f040 8099 	bne.w	8004bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d107      	bne.n	8004a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f925 	bl	8004ce8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9c8 	bl	8004e48 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d13a      	bne.n	8004b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d035      	beq.n	8004b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a7e      	ldr	r2, [pc, #504]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004ad6:	4b7e      	ldr	r3, [pc, #504]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ad8:	e001      	b.n	8004ade <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4979      	ldr	r1, [pc, #484]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ae6:	428b      	cmp	r3, r1
 8004ae8:	d101      	bne.n	8004aee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004aea:	4b79      	ldr	r3, [pc, #484]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004aec:	e001      	b.n	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004af6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f043 0202 	orr.w	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc fdea 	bl	800170c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	f040 80be 	bne.w	8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80b8 	beq.w	8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a59      	ldr	r2, [pc, #356]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b6a:	4b59      	ldr	r3, [pc, #356]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b6c:	e001      	b.n	8004b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4954      	ldr	r1, [pc, #336]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b7a:	428b      	cmp	r3, r1
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b7e:	4b54      	ldr	r3, [pc, #336]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b80:	e001      	b.n	8004b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f043 0204 	orr.w	r2, r3, #4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc fdac 	bl	800170c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bb4:	e084      	b.n	8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d107      	bne.n	8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8be 	bl	8004d4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8fd 	bl	8004de4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d12f      	bne.n	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d02a      	beq.n	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c0c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2e      	ldr	r2, [pc, #184]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c18:	4b2d      	ldr	r3, [pc, #180]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c1a:	e001      	b.n	8004c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4929      	ldr	r1, [pc, #164]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c2c:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c2e:	e001      	b.n	8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f043 0202 	orr.w	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fd5c 	bl	800170c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d131      	bne.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d02c      	beq.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c72:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c74:	e001      	b.n	8004c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4912      	ldr	r1, [pc, #72]	; (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c82:	428b      	cmp	r3, r1
 8004c84:	d101      	bne.n	8004c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c88:	e001      	b.n	8004c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ca2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f043 0204 	orr.w	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fc fd27 	bl	800170c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cbe:	e000      	b.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cc0:	bf00      	nop
}
 8004cc2:	bf00      	nop
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40003800 	.word	0x40003800
 8004cd0:	40003400 	.word	0x40003400

08004cd4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	1c99      	adds	r1, r3, #2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6251      	str	r1, [r2, #36]	; 0x24
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d113      	bne.n	8004d42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ffc9 	bl	8004cd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	1c99      	adds	r1, r3, #2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6251      	str	r1, [r2, #36]	; 0x24
 8004d5e:	8819      	ldrh	r1, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <I2SEx_TxISR_I2SExt+0x90>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <I2SEx_TxISR_I2SExt+0x22>
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <I2SEx_TxISR_I2SExt+0x94>)
 8004d6c:	e001      	b.n	8004d72 <I2SEx_TxISR_I2SExt+0x26>
 8004d6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d72:	460a      	mov	r2, r1
 8004d74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d121      	bne.n	8004dd2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <I2SEx_TxISR_I2SExt+0x90>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d101      	bne.n	8004d9c <I2SEx_TxISR_I2SExt+0x50>
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <I2SEx_TxISR_I2SExt+0x94>)
 8004d9a:	e001      	b.n	8004da0 <I2SEx_TxISR_I2SExt+0x54>
 8004d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	490d      	ldr	r1, [pc, #52]	; (8004ddc <I2SEx_TxISR_I2SExt+0x90>)
 8004da8:	428b      	cmp	r3, r1
 8004daa:	d101      	bne.n	8004db0 <I2SEx_TxISR_I2SExt+0x64>
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <I2SEx_TxISR_I2SExt+0x94>)
 8004dae:	e001      	b.n	8004db4 <I2SEx_TxISR_I2SExt+0x68>
 8004db0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004db8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff81 	bl	8004cd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40003800 	.word	0x40003800
 8004de0:	40003400 	.word	0x40003400

08004de4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68d8      	ldr	r0, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	1c99      	adds	r1, r3, #2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004dfc:	b282      	uxth	r2, r0
 8004dfe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d113      	bne.n	8004e40 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e26:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ff4a 	bl	8004cd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a20      	ldr	r2, [pc, #128]	; (8004ed8 <I2SEx_RxISR_I2SExt+0x90>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <I2SEx_RxISR_I2SExt+0x16>
 8004e5a:	4b20      	ldr	r3, [pc, #128]	; (8004edc <I2SEx_RxISR_I2SExt+0x94>)
 8004e5c:	e001      	b.n	8004e62 <I2SEx_RxISR_I2SExt+0x1a>
 8004e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e62:	68d8      	ldr	r0, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	1c99      	adds	r1, r3, #2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e6e:	b282      	uxth	r2, r0
 8004e70:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d121      	bne.n	8004ece <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <I2SEx_RxISR_I2SExt+0x90>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d101      	bne.n	8004e98 <I2SEx_RxISR_I2SExt+0x50>
 8004e94:	4b11      	ldr	r3, [pc, #68]	; (8004edc <I2SEx_RxISR_I2SExt+0x94>)
 8004e96:	e001      	b.n	8004e9c <I2SEx_RxISR_I2SExt+0x54>
 8004e98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	490d      	ldr	r1, [pc, #52]	; (8004ed8 <I2SEx_RxISR_I2SExt+0x90>)
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	d101      	bne.n	8004eac <I2SEx_RxISR_I2SExt+0x64>
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <I2SEx_RxISR_I2SExt+0x94>)
 8004eaa:	e001      	b.n	8004eb0 <I2SEx_RxISR_I2SExt+0x68>
 8004eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eb4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff03 	bl	8004cd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40003800 	.word	0x40003800
 8004edc:	40003400 	.word	0x40003400

08004ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e25b      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d075      	beq.n	8004fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004efe:	4ba3      	ldr	r3, [pc, #652]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d00c      	beq.n	8004f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f0a:	4ba0      	ldr	r3, [pc, #640]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d112      	bne.n	8004f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f16:	4b9d      	ldr	r3, [pc, #628]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	4b99      	ldr	r3, [pc, #612]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05b      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x108>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d157      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e236      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d106      	bne.n	8004f54 <HAL_RCC_OscConfig+0x74>
 8004f46:	4b91      	ldr	r3, [pc, #580]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a90      	ldr	r2, [pc, #576]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e01d      	b.n	8004f90 <HAL_RCC_OscConfig+0xb0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x98>
 8004f5e:	4b8b      	ldr	r3, [pc, #556]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a8a      	ldr	r2, [pc, #552]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4b88      	ldr	r3, [pc, #544]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a87      	ldr	r2, [pc, #540]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e00b      	b.n	8004f90 <HAL_RCC_OscConfig+0xb0>
 8004f78:	4b84      	ldr	r3, [pc, #528]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a83      	ldr	r2, [pc, #524]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	4b81      	ldr	r3, [pc, #516]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a80      	ldr	r2, [pc, #512]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d013      	beq.n	8004fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fc fc38 	bl	800180c <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa0:	f7fc fc34 	bl	800180c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e1fb      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	4b76      	ldr	r3, [pc, #472]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0xc0>
 8004fbe:	e014      	b.n	8004fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fc fc24 	bl	800180c <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7fc fc20 	bl	800180c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	; 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e1e7      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	4b6c      	ldr	r3, [pc, #432]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0xe8>
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d063      	beq.n	80050be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005002:	4b62      	ldr	r3, [pc, #392]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800500a:	2b08      	cmp	r3, #8
 800500c:	d11c      	bne.n	8005048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500e:	4b5f      	ldr	r3, [pc, #380]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d116      	bne.n	8005048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800501a:	4b5c      	ldr	r3, [pc, #368]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_RCC_OscConfig+0x152>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d001      	beq.n	8005032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e1bb      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005032:	4b56      	ldr	r3, [pc, #344]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4952      	ldr	r1, [pc, #328]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005046:	e03a      	b.n	80050be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005050:	4b4f      	ldr	r3, [pc, #316]	; (8005190 <HAL_RCC_OscConfig+0x2b0>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fc fbd9 	bl	800180c <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800505e:	f7fc fbd5 	bl	800180c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e19c      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005070:	4b46      	ldr	r3, [pc, #280]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507c:	4b43      	ldr	r3, [pc, #268]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4940      	ldr	r1, [pc, #256]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
 8005090:	e015      	b.n	80050be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005092:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <HAL_RCC_OscConfig+0x2b0>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fc fbb8 	bl	800180c <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a0:	f7fc fbb4 	bl	800180c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e17b      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b2:	4b36      	ldr	r3, [pc, #216]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d030      	beq.n	800512c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d016      	beq.n	8005100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050d2:	4b30      	ldr	r3, [pc, #192]	; (8005194 <HAL_RCC_OscConfig+0x2b4>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fc fb98 	bl	800180c <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e0:	f7fc fb94 	bl	800180c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e15b      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x200>
 80050fe:	e015      	b.n	800512c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005100:	4b24      	ldr	r3, [pc, #144]	; (8005194 <HAL_RCC_OscConfig+0x2b4>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005106:	f7fc fb81 	bl	800180c <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510e:	f7fc fb7d 	bl	800180c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e144      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f0      	bne.n	800510e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80a0 	beq.w	800527a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10f      	bne.n	800516a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 8005154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005158:	6413      	str	r3, [r2, #64]	; 0x40
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <HAL_RCC_OscConfig+0x2ac>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_OscConfig+0x2b8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	2b00      	cmp	r3, #0
 8005174:	d121      	bne.n	80051ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <HAL_RCC_OscConfig+0x2b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a07      	ldr	r2, [pc, #28]	; (8005198 <HAL_RCC_OscConfig+0x2b8>)
 800517c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005182:	f7fc fb43 	bl	800180c <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005188:	e011      	b.n	80051ae <HAL_RCC_OscConfig+0x2ce>
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	42470000 	.word	0x42470000
 8005194:	42470e80 	.word	0x42470e80
 8005198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519c:	f7fc fb36 	bl	800180c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0fd      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	4b81      	ldr	r3, [pc, #516]	; (80053b4 <HAL_RCC_OscConfig+0x4d4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d106      	bne.n	80051d0 <HAL_RCC_OscConfig+0x2f0>
 80051c2:	4b7d      	ldr	r3, [pc, #500]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	4a7c      	ldr	r2, [pc, #496]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6713      	str	r3, [r2, #112]	; 0x70
 80051ce:	e01c      	b.n	800520a <HAL_RCC_OscConfig+0x32a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCC_OscConfig+0x312>
 80051d8:	4b77      	ldr	r3, [pc, #476]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051dc:	4a76      	ldr	r2, [pc, #472]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051de:	f043 0304 	orr.w	r3, r3, #4
 80051e2:	6713      	str	r3, [r2, #112]	; 0x70
 80051e4:	4b74      	ldr	r3, [pc, #464]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	4a73      	ldr	r2, [pc, #460]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	6713      	str	r3, [r2, #112]	; 0x70
 80051f0:	e00b      	b.n	800520a <HAL_RCC_OscConfig+0x32a>
 80051f2:	4b71      	ldr	r3, [pc, #452]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	4a70      	ldr	r2, [pc, #448]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	6713      	str	r3, [r2, #112]	; 0x70
 80051fe:	4b6e      	ldr	r3, [pc, #440]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a6d      	ldr	r2, [pc, #436]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005204:	f023 0304 	bic.w	r3, r3, #4
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d015      	beq.n	800523e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005212:	f7fc fafb 	bl	800180c <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005218:	e00a      	b.n	8005230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fc faf7 	bl	800180c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	; 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e0bc      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005230:	4b61      	ldr	r3, [pc, #388]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ee      	beq.n	800521a <HAL_RCC_OscConfig+0x33a>
 800523c:	e014      	b.n	8005268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523e:	f7fc fae5 	bl	800180c <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005244:	e00a      	b.n	800525c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005246:	f7fc fae1 	bl	800180c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f241 3288 	movw	r2, #5000	; 0x1388
 8005254:	4293      	cmp	r3, r2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e0a6      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525c:	4b56      	ldr	r3, [pc, #344]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ee      	bne.n	8005246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d105      	bne.n	800527a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800526e:	4b52      	ldr	r3, [pc, #328]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	4a51      	ldr	r2, [pc, #324]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 8092 	beq.w	80053a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005284:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	2b08      	cmp	r3, #8
 800528e:	d05c      	beq.n	800534a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d141      	bne.n	800531c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005298:	4b48      	ldr	r3, [pc, #288]	; (80053bc <HAL_RCC_OscConfig+0x4dc>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fc fab5 	bl	800180c <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fc fab1 	bl	800180c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e078      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b8:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	019b      	lsls	r3, r3, #6
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	3b01      	subs	r3, #1
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	4933      	ldr	r1, [pc, #204]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ee:	4b33      	ldr	r3, [pc, #204]	; (80053bc <HAL_RCC_OscConfig+0x4dc>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fc fa8a 	bl	800180c <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fc fa86 	bl	800180c <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e04d      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530e:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x41c>
 800531a:	e045      	b.n	80053a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531c:	4b27      	ldr	r3, [pc, #156]	; (80053bc <HAL_RCC_OscConfig+0x4dc>)
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005322:	f7fc fa73 	bl	800180c <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532a:	f7fc fa6f 	bl	800180c <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e036      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533c:	4b1e      	ldr	r3, [pc, #120]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x44a>
 8005348:	e02e      	b.n	80053a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e029      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005356:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <HAL_RCC_OscConfig+0x4d8>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	429a      	cmp	r2, r3
 8005368:	d11c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d115      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800537e:	4013      	ands	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005384:	4293      	cmp	r3, r2
 8005386:	d10d      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d106      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40007000 	.word	0x40007000
 80053b8:	40023800 	.word	0x40023800
 80053bc:	42470060 	.word	0x42470060

080053c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0cc      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053d4:	4b68      	ldr	r3, [pc, #416]	; (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d90c      	bls.n	80053fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b65      	ldr	r3, [pc, #404]	; (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b63      	ldr	r3, [pc, #396]	; (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0b8      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d020      	beq.n	800544a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005414:	4b59      	ldr	r3, [pc, #356]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a58      	ldr	r2, [pc, #352]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800541e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800542c:	4b53      	ldr	r3, [pc, #332]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a52      	ldr	r2, [pc, #328]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005438:	4b50      	ldr	r3, [pc, #320]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	494d      	ldr	r1, [pc, #308]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d044      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b47      	ldr	r3, [pc, #284]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d119      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07f      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d003      	beq.n	800547e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800547a:	2b03      	cmp	r3, #3
 800547c:	d107      	bne.n	800548e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	4b3f      	ldr	r3, [pc, #252]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e06f      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548e:	4b3b      	ldr	r3, [pc, #236]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e067      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800549e:	4b37      	ldr	r3, [pc, #220]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 0203 	bic.w	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4934      	ldr	r1, [pc, #208]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054b0:	f7fc f9ac 	bl	800180c <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b8:	f7fc f9a8 	bl	800180c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e04f      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ce:	4b2b      	ldr	r3, [pc, #172]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 020c 	and.w	r2, r3, #12
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	429a      	cmp	r2, r3
 80054de:	d1eb      	bne.n	80054b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054e0:	4b25      	ldr	r3, [pc, #148]	; (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d20c      	bcs.n	8005508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	4b22      	ldr	r3, [pc, #136]	; (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b20      	ldr	r3, [pc, #128]	; (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e032      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005514:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4916      	ldr	r1, [pc, #88]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	490e      	ldr	r1, [pc, #56]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005546:	f000 f821 	bl	800558c <HAL_RCC_GetSysClockFreq>
 800554a:	4601      	mov	r1, r0
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 8005558:	5cd3      	ldrb	r3, [r2, r3]
 800555a:	fa21 f303 	lsr.w	r3, r1, r3
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <HAL_RCC_ClockConfig+0x1c8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc f90c 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023c00 	.word	0x40023c00
 800557c:	40023800 	.word	0x40023800
 8005580:	0800f00c 	.word	0x0800f00c
 8005584:	20000400 	.word	0x20000400
 8005588:	20000404 	.word	0x20000404

0800558c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	2300      	movs	r3, #0
 800559c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055a2:	4b63      	ldr	r3, [pc, #396]	; (8005730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d007      	beq.n	80055be <HAL_RCC_GetSysClockFreq+0x32>
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d008      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0x38>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 80b4 	bne.w	8005720 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055b8:	4b5e      	ldr	r3, [pc, #376]	; (8005734 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80055ba:	60bb      	str	r3, [r7, #8]
       break;
 80055bc:	e0b3      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055be:	4b5e      	ldr	r3, [pc, #376]	; (8005738 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80055c0:	60bb      	str	r3, [r7, #8]
      break;
 80055c2:	e0b0      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055c4:	4b5a      	ldr	r3, [pc, #360]	; (8005730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ce:	4b58      	ldr	r3, [pc, #352]	; (8005730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d04a      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055da:	4b55      	ldr	r3, [pc, #340]	; (8005730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	099b      	lsrs	r3, r3, #6
 80055e0:	f04f 0400 	mov.w	r4, #0
 80055e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	ea03 0501 	and.w	r5, r3, r1
 80055f0:	ea04 0602 	and.w	r6, r4, r2
 80055f4:	4629      	mov	r1, r5
 80055f6:	4632      	mov	r2, r6
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	f04f 0400 	mov.w	r4, #0
 8005600:	0154      	lsls	r4, r2, #5
 8005602:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005606:	014b      	lsls	r3, r1, #5
 8005608:	4619      	mov	r1, r3
 800560a:	4622      	mov	r2, r4
 800560c:	1b49      	subs	r1, r1, r5
 800560e:	eb62 0206 	sbc.w	r2, r2, r6
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	f04f 0400 	mov.w	r4, #0
 800561a:	0194      	lsls	r4, r2, #6
 800561c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005620:	018b      	lsls	r3, r1, #6
 8005622:	1a5b      	subs	r3, r3, r1
 8005624:	eb64 0402 	sbc.w	r4, r4, r2
 8005628:	f04f 0100 	mov.w	r1, #0
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	00e2      	lsls	r2, r4, #3
 8005632:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005636:	00d9      	lsls	r1, r3, #3
 8005638:	460b      	mov	r3, r1
 800563a:	4614      	mov	r4, r2
 800563c:	195b      	adds	r3, r3, r5
 800563e:	eb44 0406 	adc.w	r4, r4, r6
 8005642:	f04f 0100 	mov.w	r1, #0
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	0262      	lsls	r2, r4, #9
 800564c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005650:	0259      	lsls	r1, r3, #9
 8005652:	460b      	mov	r3, r1
 8005654:	4614      	mov	r4, r2
 8005656:	4618      	mov	r0, r3
 8005658:	4621      	mov	r1, r4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f04f 0400 	mov.w	r4, #0
 8005660:	461a      	mov	r2, r3
 8005662:	4623      	mov	r3, r4
 8005664:	f7fa ffc4 	bl	80005f0 <__aeabi_uldivmod>
 8005668:	4603      	mov	r3, r0
 800566a:	460c      	mov	r4, r1
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e049      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005670:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	099b      	lsrs	r3, r3, #6
 8005676:	f04f 0400 	mov.w	r4, #0
 800567a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	ea03 0501 	and.w	r5, r3, r1
 8005686:	ea04 0602 	and.w	r6, r4, r2
 800568a:	4629      	mov	r1, r5
 800568c:	4632      	mov	r2, r6
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	0154      	lsls	r4, r2, #5
 8005698:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800569c:	014b      	lsls	r3, r1, #5
 800569e:	4619      	mov	r1, r3
 80056a0:	4622      	mov	r2, r4
 80056a2:	1b49      	subs	r1, r1, r5
 80056a4:	eb62 0206 	sbc.w	r2, r2, r6
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	f04f 0400 	mov.w	r4, #0
 80056b0:	0194      	lsls	r4, r2, #6
 80056b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056b6:	018b      	lsls	r3, r1, #6
 80056b8:	1a5b      	subs	r3, r3, r1
 80056ba:	eb64 0402 	sbc.w	r4, r4, r2
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	00e2      	lsls	r2, r4, #3
 80056c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056cc:	00d9      	lsls	r1, r3, #3
 80056ce:	460b      	mov	r3, r1
 80056d0:	4614      	mov	r4, r2
 80056d2:	195b      	adds	r3, r3, r5
 80056d4:	eb44 0406 	adc.w	r4, r4, r6
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	02a2      	lsls	r2, r4, #10
 80056e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80056e6:	0299      	lsls	r1, r3, #10
 80056e8:	460b      	mov	r3, r1
 80056ea:	4614      	mov	r4, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	4621      	mov	r1, r4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f04f 0400 	mov.w	r4, #0
 80056f6:	461a      	mov	r2, r3
 80056f8:	4623      	mov	r3, r4
 80056fa:	f7fa ff79 	bl	80005f0 <__aeabi_uldivmod>
 80056fe:	4603      	mov	r3, r0
 8005700:	460c      	mov	r4, r1
 8005702:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	3301      	adds	r3, #1
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	60bb      	str	r3, [r7, #8]
      break;
 800571e:	e002      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005722:	60bb      	str	r3, [r7, #8]
      break;
 8005724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005726:	68bb      	ldr	r3, [r7, #8]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005730:	40023800 	.word	0x40023800
 8005734:	00f42400 	.word	0x00f42400
 8005738:	007a1200 	.word	0x007a1200

0800573c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005740:	4b03      	ldr	r3, [pc, #12]	; (8005750 <HAL_RCC_GetHCLKFreq+0x14>)
 8005742:	681b      	ldr	r3, [r3, #0]
}
 8005744:	4618      	mov	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000400 	.word	0x20000400

08005754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005758:	f7ff fff0 	bl	800573c <HAL_RCC_GetHCLKFreq>
 800575c:	4601      	mov	r1, r0
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	0a9b      	lsrs	r3, r3, #10
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	4a03      	ldr	r2, [pc, #12]	; (8005778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800576a:	5cd3      	ldrb	r3, [r2, r3]
 800576c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005770:	4618      	mov	r0, r3
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40023800 	.word	0x40023800
 8005778:	0800f01c 	.word	0x0800f01c

0800577c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d105      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d038      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057a4:	4b68      	ldr	r3, [pc, #416]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057aa:	f7fc f82f 	bl	800180c <HAL_GetTick>
 80057ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057b2:	f7fc f82b 	bl	800180c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0bd      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057c4:	4b61      	ldr	r3, [pc, #388]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	019b      	lsls	r3, r3, #6
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	071b      	lsls	r3, r3, #28
 80057e2:	495a      	ldr	r1, [pc, #360]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057ea:	4b57      	ldr	r3, [pc, #348]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057f0:	f7fc f80c 	bl	800180c <HAL_GetTick>
 80057f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057f8:	f7fc f808 	bl	800180c <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e09a      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800580a:	4b50      	ldr	r3, [pc, #320]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8083 	beq.w	800592a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	4b48      	ldr	r3, [pc, #288]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	4a47      	ldr	r2, [pc, #284]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005832:	6413      	str	r3, [r2, #64]	; 0x40
 8005834:	4b45      	ldr	r3, [pc, #276]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005840:	4b43      	ldr	r3, [pc, #268]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a42      	ldr	r2, [pc, #264]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800584c:	f7fb ffde 	bl	800180c <HAL_GetTick>
 8005850:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005854:	f7fb ffda 	bl	800180c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e06c      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005866:	4b3a      	ldr	r3, [pc, #232]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005872:	4b36      	ldr	r3, [pc, #216]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02f      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	d028      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005890:	4b2e      	ldr	r3, [pc, #184]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005898:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589a:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058a0:	4b2c      	ldr	r3, [pc, #176]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058a6:	4a29      	ldr	r2, [pc, #164]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058ac:	4b27      	ldr	r3, [pc, #156]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d114      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fb ffa8 	bl	800180c <HAL_GetTick>
 80058bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058be:	e00a      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c0:	f7fb ffa4 	bl	800180c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e034      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d6:	4b1d      	ldr	r3, [pc, #116]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ee      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ee:	d10d      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x190>
 80058f0:	4b16      	ldr	r3, [pc, #88]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005904:	4911      	ldr	r1, [pc, #68]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
 800590a:	e005      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	4a0e      	ldr	r2, [pc, #56]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005912:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005916:	6093      	str	r3, [r2, #8]
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	4909      	ldr	r1, [pc, #36]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005926:	4313      	orrs	r3, r2
 8005928:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	7d1a      	ldrb	r2, [r3, #20]
 800593a:	4b07      	ldr	r3, [pc, #28]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800593c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	42470068 	.word	0x42470068
 800594c:	40023800 	.word	0x40023800
 8005950:	40007000 	.word	0x40007000
 8005954:	42470e40 	.word	0x42470e40
 8005958:	424711e0 	.word	0x424711e0

0800595c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2203      	movs	r2, #3
 8005968:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800596a:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800596c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005970:	099b      	lsrs	r3, r3, #6
 8005972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800597a:	4b18      	ldr	r3, [pc, #96]	; (80059dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800597c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005980:	0f1b      	lsrs	r3, r3, #28
 8005982:	f003 0207 	and.w	r2, r3, #7
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005990:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005998:	4b10      	ldr	r3, [pc, #64]	; (80059dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80059a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80059a2:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80059b2:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80059c6:	e002      	b.n	80059ce <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	751a      	strb	r2, [r3, #20]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800

080059e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d13f      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059fe:	4b23      	ldr	r3, [pc, #140]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a06:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d131      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a14:	617b      	str	r3, [r7, #20]
          break;
 8005a16:	e031      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a18:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a24:	d109      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a26:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a30:	4a18      	ldr	r2, [pc, #96]	; (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a44:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a52:	099b      	lsrs	r3, r3, #6
 8005a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a66:	0f1b      	lsrs	r3, r3, #28
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	617b      	str	r3, [r7, #20]
          break;
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
          break;
 8005a7a:	bf00      	nop
        }
      }
      break;
 8005a7c:	bf00      	nop
    }
  }
  return frequency;
 8005a7e:	697b      	ldr	r3, [r7, #20]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	00bb8000 	.word	0x00bb8000
 8005a94:	007a1200 	.word	0x007a1200
 8005a98:	00f42400 	.word	0x00f42400

08005a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e056      	b.n	8005b5c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fb fab3 	bl	8001034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	ea42 0103 	orr.w	r1, r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	0c1b      	lsrs	r3, r3, #16
 8005b2c:	f003 0104 	and.w	r1, r3, #4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69da      	ldr	r2, [r3, #28]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b64:	b084      	sub	sp, #16
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	f107 001c 	add.w	r0, r7, #28
 8005b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d122      	bne.n	8005bc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d105      	bne.n	8005bb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f94a 	bl	8005e50 <USB_CoreReset>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
 8005bc0:	e01a      	b.n	8005bf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f93e 	bl	8005e50 <USB_CoreReset>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
 8005bea:	e005      	b.n	8005bf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d10b      	bne.n	8005c16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f043 0206 	orr.w	r2, r3, #6
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c22:	b004      	add	sp, #16
 8005c24:	4770      	bx	lr

08005c26 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 0201 	bic.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d106      	bne.n	8005c96 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	e00b      	b.n	8005cae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	e001      	b.n	8005cae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e003      	b.n	8005cb6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005cae:	2032      	movs	r0, #50	; 0x32
 8005cb0:	f7fb fdb8 	bl	8001824 <HAL_Delay>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	019b      	lsls	r3, r3, #6
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <USB_FlushTxFifo+0x48>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d0f0      	beq.n	8005cda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	00030d40 	.word	0x00030d40

08005d0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2210      	movs	r2, #16
 8005d1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a09      	ldr	r2, [pc, #36]	; (8005d4c <USB_FlushRxFifo+0x40>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d0f0      	beq.n	8005d1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	00030d40 	.word	0x00030d40

08005d50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b089      	sub	sp, #36	; 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	460b      	mov	r3, r1
 8005d60:	71fb      	strb	r3, [r7, #7]
 8005d62:	4613      	mov	r3, r2
 8005d64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d11a      	bne.n	8005dac <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d76:	88bb      	ldrh	r3, [r7, #4]
 8005d78:	3303      	adds	r3, #3
 8005d7a:	089b      	lsrs	r3, r3, #2
 8005d7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e00f      	b.n	8005da4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	031a      	lsls	r2, r3, #12
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d90:	461a      	mov	r2, r3
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	3301      	adds	r3, #1
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d3eb      	bcc.n	8005d84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3724      	adds	r7, #36	; 0x24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b089      	sub	sp, #36	; 0x24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005dd0:	88fb      	ldrh	r3, [r7, #6]
 8005dd2:	3303      	adds	r3, #3
 8005dd4:	089b      	lsrs	r3, r3, #2
 8005dd6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	e00b      	b.n	8005df6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3304      	adds	r3, #4
 8005dee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	3301      	adds	r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d3ef      	bcc.n	8005dde <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3724      	adds	r7, #36	; 0x24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4013      	ands	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a13      	ldr	r2, [pc, #76]	; (8005eb4 <USB_CoreReset+0x64>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e01b      	b.n	8005ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	daf2      	bge.n	8005e5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <USB_CoreReset+0x64>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d901      	bls.n	8005e98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e006      	b.n	8005ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d0f0      	beq.n	8005e86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	00030d40 	.word	0x00030d40

08005eb8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eb8:	b084      	sub	sp, #16
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	f107 001c 	add.w	r0, r7, #28
 8005ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d018      	beq.n	8005f3c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10a      	bne.n	8005f26 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e014      	b.n	8005f50 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f34:	f023 0304 	bic.w	r3, r3, #4
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e009      	b.n	8005f50 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f4a:	f023 0304 	bic.w	r3, r3, #4
 8005f4e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f50:	2110      	movs	r1, #16
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff feb4 	bl	8005cc0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fed7 	bl	8005d0c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e015      	b.n	8005f90 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f70:	461a      	mov	r2, r3
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	461a      	mov	r2, r3
 8005f86:	2300      	movs	r3, #0
 8005f88:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d3e5      	bcc.n	8005f64 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005f98:	2101      	movs	r1, #1
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8ac 	bl	80060f8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005fa0:	20c8      	movs	r0, #200	; 0xc8
 8005fa2:	f7fb fc3f 	bl	8001824 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a14      	ldr	r2, [pc, #80]	; (800601c <USB_HostInit+0x164>)
 8005fcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <USB_HostInit+0x168>)
 8005fd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005fd6:	e009      	b.n	8005fec <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2280      	movs	r2, #128	; 0x80
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a10      	ldr	r2, [pc, #64]	; (8006024 <USB_HostInit+0x16c>)
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a10      	ldr	r2, [pc, #64]	; (8006028 <USB_HostInit+0x170>)
 8005fe8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f043 0210 	orr.w	r2, r3, #16
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <USB_HostInit+0x174>)
 8006004:	4313      	orrs	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006016:	b004      	add	sp, #16
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	01000200 	.word	0x01000200
 8006020:	00e00300 	.word	0x00e00300
 8006024:	00600080 	.word	0x00600080
 8006028:	004000e0 	.word	0x004000e0
 800602c:	a3200008 	.word	0xa3200008

08006030 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d107      	bne.n	8006082 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006078:	461a      	mov	r2, r3
 800607a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800607e:	6053      	str	r3, [r2, #4]
 8006080:	e009      	b.n	8006096 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d106      	bne.n	8006096 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608e:	461a      	mov	r2, r3
 8006090:	f241 7370 	movw	r3, #6000	; 0x1770
 8006094:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060d4:	2064      	movs	r0, #100	; 0x64
 80060d6:	f7fb fba5 	bl	8001824 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060e8:	200a      	movs	r0, #10
 80060ea:	f7fb fb9b 	bl	8001824 <HAL_Delay>

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800611c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <USB_DriveVbus+0x44>
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d106      	bne.n	800613c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006136:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800613a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d109      	bne.n	800615c <USB_DriveVbus+0x64>
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800615a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	0c5b      	lsrs	r3, r3, #17
 8006188:	f003 0303 	and.w	r3, r3, #3
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	b29b      	uxth	r3, r3
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	70fb      	strb	r3, [r7, #3]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70bb      	strb	r3, [r7, #2]
 80061d2:	4613      	mov	r3, r2
 80061d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	461a      	mov	r2, r3
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295
 80061f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d87e      	bhi.n	80062f8 <USB_HC_Init+0x13c>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USB_HC_Init+0x44>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006211 	.word	0x08006211
 8006204:	080062bb 	.word	0x080062bb
 8006208:	08006211 	.word	0x08006211
 800620c:	0800627d 	.word	0x0800627d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	461a      	mov	r2, r3
 800621e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006222:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006224:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006228:	2b00      	cmp	r3, #0
 800622a:	da10      	bge.n	800624e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	440a      	add	r2, r1
 8006242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800624c:	e057      	b.n	80062fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d051      	beq.n	80062fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	440a      	add	r2, r1
 8006270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006274:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006278:	60d3      	str	r3, [r2, #12]
      break;
 800627a:	e040      	b.n	80062fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006288:	461a      	mov	r2, r3
 800628a:	f240 639d 	movw	r3, #1693	; 0x69d
 800628e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006290:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006294:	2b00      	cmp	r3, #0
 8006296:	da34      	bge.n	8006302 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	0151      	lsls	r1, r2, #5
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	440a      	add	r2, r1
 80062ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062b8:	e023      	b.n	8006302 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	461a      	mov	r2, r3
 80062c8:	f240 2325 	movw	r3, #549	; 0x225
 80062cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da17      	bge.n	8006306 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062f6:	e006      	b.n	8006306 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	e004      	b.n	8006308 <USB_HC_Init+0x14c>
      break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <USB_HC_Init+0x14c>
      break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <USB_HC_Init+0x14c>
      break;
 8006306:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630e:	699a      	ldr	r2, [r3, #24]
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	2101      	movs	r1, #1
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006322:	4313      	orrs	r3, r2
 8006324:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006332:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006336:	2b00      	cmp	r3, #0
 8006338:	da03      	bge.n	8006342 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800633a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	e001      	b.n	8006346 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006346:	f897 3020 	ldrb.w	r3, [r7, #32]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d103      	bne.n	8006356 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800634e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e001      	b.n	800635a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800635a:	787b      	ldrb	r3, [r7, #1]
 800635c:	059b      	lsls	r3, r3, #22
 800635e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006362:	78bb      	ldrb	r3, [r7, #2]
 8006364:	02db      	lsls	r3, r3, #11
 8006366:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800636a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800636c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006370:	049b      	lsls	r3, r3, #18
 8006372:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006376:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006378:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800637a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800637e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	0159      	lsls	r1, r3, #5
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	440b      	add	r3, r1
 800638c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006390:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006396:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006398:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800639c:	2b03      	cmp	r3, #3
 800639e:	d10f      	bne.n	80063c0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	78fa      	ldrb	r2, [r7, #3]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063be:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	; 0x30
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80063e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d028      	beq.n	800644c <USB_HC_StartXfer+0x7c>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d124      	bne.n	800644c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <USB_HC_StartXfer+0x50>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	795b      	ldrb	r3, [r3, #5]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d107      	bne.n	8006420 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	4619      	mov	r1, r3
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fa30 	bl	800687c <USB_DoPing>
      return HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	e114      	b.n	800664a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d112      	bne.n	800644c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	6a3a      	ldr	r2, [r7, #32]
 800643a:	440a      	add	r2, r1
 800643c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006440:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006444:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d018      	beq.n	8006486 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	8912      	ldrh	r2, [r2, #8]
 800645c:	4413      	add	r3, r2
 800645e:	3b01      	subs	r3, #1
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	8912      	ldrh	r2, [r2, #8]
 8006464:	fbb3 f3f2 	udiv	r3, r3, r2
 8006468:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800646a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800646c:	8b7b      	ldrh	r3, [r7, #26]
 800646e:	429a      	cmp	r2, r3
 8006470:	d90b      	bls.n	800648a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006472:	8b7b      	ldrh	r3, [r7, #26]
 8006474:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006476:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	8912      	ldrh	r2, [r2, #8]
 800647c:	fb02 f203 	mul.w	r2, r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	611a      	str	r2, [r3, #16]
 8006484:	e001      	b.n	800648a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006486:	2301      	movs	r3, #1
 8006488:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	78db      	ldrb	r3, [r3, #3]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	8912      	ldrh	r2, [r2, #8]
 8006498:	fb02 f203 	mul.w	r2, r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064aa:	04d9      	lsls	r1, r3, #19
 80064ac:	4b69      	ldr	r3, [pc, #420]	; (8006654 <USB_HC_StartXfer+0x284>)
 80064ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	7a9b      	ldrb	r3, [r3, #10]
 80064b6:	075b      	lsls	r3, r3, #29
 80064b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	0148      	lsls	r0, r1, #5
 80064c0:	6a39      	ldr	r1, [r7, #32]
 80064c2:	4401      	add	r1, r0
 80064c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	68d9      	ldr	r1, [r3, #12]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	460a      	mov	r2, r1
 80064e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	440a      	add	r2, r1
 8006514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006518:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800651c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	7e7b      	ldrb	r3, [r7, #25]
 800652e:	075b      	lsls	r3, r3, #29
 8006530:	69f9      	ldr	r1, [r7, #28]
 8006532:	0148      	lsls	r0, r1, #5
 8006534:	6a39      	ldr	r1, [r7, #32]
 8006536:	4401      	add	r1, r0
 8006538:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800653c:	4313      	orrs	r3, r2
 800653e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a42      	ldr	r2, [pc, #264]	; (8006658 <USB_HC_StartXfer+0x288>)
 8006550:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <USB_HC_StartXfer+0x288>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800655a:	4a3f      	ldr	r2, [pc, #252]	; (8006658 <USB_HC_StartXfer+0x288>)
 800655c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006566:	4b3c      	ldr	r3, [pc, #240]	; (8006658 <USB_HC_StartXfer+0x288>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656e:	4a3a      	ldr	r2, [pc, #232]	; (8006658 <USB_HC_StartXfer+0x288>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e005      	b.n	8006580 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006574:	4b38      	ldr	r3, [pc, #224]	; (8006658 <USB_HC_StartXfer+0x288>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800657c:	4a36      	ldr	r2, [pc, #216]	; (8006658 <USB_HC_StartXfer+0x288>)
 800657e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006580:	4b35      	ldr	r3, [pc, #212]	; (8006658 <USB_HC_StartXfer+0x288>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006588:	4a33      	ldr	r2, [pc, #204]	; (8006658 <USB_HC_StartXfer+0x288>)
 800658a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	461a      	mov	r2, r3
 800659a:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <USB_HC_StartXfer+0x288>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	e04f      	b.n	800664a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	78db      	ldrb	r3, [r3, #3]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d14a      	bne.n	8006648 <USB_HC_StartXfer+0x278>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d046      	beq.n	8006648 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	79db      	ldrb	r3, [r3, #7]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d830      	bhi.n	8006624 <USB_HC_StartXfer+0x254>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <USB_HC_StartXfer+0x1f8>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065d9 	.word	0x080065d9
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	080065d9 	.word	0x080065d9
 80065d4:	080065fd 	.word	0x080065fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	3303      	adds	r3, #3
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065e2:	8afa      	ldrh	r2, [r7, #22]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d91c      	bls.n	8006628 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80065fa:	e015      	b.n	8006628 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	3303      	adds	r3, #3
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006606:	8afa      	ldrh	r2, [r7, #22]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	b29b      	uxth	r3, r3
 8006612:	429a      	cmp	r2, r3
 8006614:	d90a      	bls.n	800662c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	619a      	str	r2, [r3, #24]
        }
        break;
 8006622:	e003      	b.n	800662c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <USB_HC_StartXfer+0x25e>
        break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <USB_HC_StartXfer+0x25e>
        break;
 800662c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	68d9      	ldr	r1, [r3, #12]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	785a      	ldrb	r2, [r3, #1]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	b298      	uxth	r0, r3
 800663c:	2300      	movs	r3, #0
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4603      	mov	r3, r0
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff fb84 	bl	8005d50 <USB_WritePacket>
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3728      	adds	r7, #40	; 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	1ff80000 	.word	0x1ff80000
 8006658:	20000518 	.word	0x20000518

0800665c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	b29b      	uxth	r3, r3
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800667e:	b480      	push	{r7}
 8006680:	b087      	sub	sp, #28
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	0c9b      	lsrs	r3, r3, #18
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <USB_HC_Halt+0x3a>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d16c      	bne.n	8006792 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d143      	bne.n	800676c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006702:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	440a      	add	r2, r1
 800671a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006722:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	440a      	add	r2, r1
 800673a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006742:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	3301      	adds	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006750:	d81d      	bhi.n	800678e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006768:	d0ec      	beq.n	8006744 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800676a:	e080      	b.n	800686e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	440a      	add	r2, r1
 8006782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800678a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800678c:	e06f      	b.n	800686e <USB_HC_Halt+0x1f0>
          break;
 800678e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006790:	e06d      	b.n	800686e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d143      	bne.n	800684a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006800:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4413      	add	r3, r2
 800680a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	440a      	add	r2, r1
 8006818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006820:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800682e:	d81d      	bhi.n	800686c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006846:	d0ec      	beq.n	8006822 <USB_HC_Halt+0x1a4>
 8006848:	e011      	b.n	800686e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e000      	b.n	800686e <USB_HC_Halt+0x1f0>
          break;
 800686c:	bf00      	nop
    }
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006890:	2301      	movs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	04da      	lsls	r2, r3, #19
 8006898:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <USB_DoPing+0x74>)
 800689a:	4013      	ands	r3, r2
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	461a      	mov	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	1ff80000 	.word	0x1ff80000

080068f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff f99f 	bl	8005c48 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800690a:	2110      	movs	r1, #16
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff f9d7 	bl	8005cc0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff f9fa 	bl	8005d0c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	e01f      	b.n	800695e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006934:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800693c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006944:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3301      	adds	r3, #1
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d9dc      	bls.n	800691e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	e034      	b.n	80069d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006980:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006988:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006990:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3301      	adds	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b0:	d80c      	bhi.n	80069cc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c8:	d0ec      	beq.n	80069a4 <USB_StopHost+0xb0>
 80069ca:	e000      	b.n	80069ce <USB_StopHost+0xda>
        break;
 80069cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d9c7      	bls.n	800696a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069e0:	461a      	mov	r2, r3
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295
 80069ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f918 	bl	8005c26 <USB_EnableGlobalInt>

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006a04:	4904      	ldr	r1, [pc, #16]	; (8006a18 <MX_FATFS_Init+0x18>)
 8006a06:	4805      	ldr	r0, [pc, #20]	; (8006a1c <MX_FATFS_Init+0x1c>)
 8006a08:	f005 f9a8 	bl	800bd5c <FATFS_LinkDriver>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <MX_FATFS_Init+0x20>)
 8006a12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a14:	bf00      	nop
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200007d4 	.word	0x200007d4
 8006a1c:	0800f02c 	.word	0x0800f02c
 8006a20:	20000c38 	.word	0x20000c38

08006a24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4808      	ldr	r0, [pc, #32]	; (8006a80 <USBH_status+0x34>)
 8006a60:	f000 fe11 	bl	8007686 <USBH_MSC_UnitIsReady>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <USBH_status+0x24>
  {
    res = RES_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]
 8006a6e:	e001      	b.n	8006a74 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000c3c 	.word	0x20000c3c

08006a84 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b094      	sub	sp, #80	; 0x50
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006a9a:	7bf9      	ldrb	r1, [r7, #15]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4812      	ldr	r0, [pc, #72]	; (8006af0 <USBH_read+0x6c>)
 8006aa6:	f000 fe38 	bl	800771a <USBH_MSC_Read>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <USBH_read+0x34>
  {
    res = RES_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006ab6:	e015      	b.n	8006ae4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006ab8:	f107 0210 	add.w	r2, r7, #16
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	480b      	ldr	r0, [pc, #44]	; (8006af0 <USBH_read+0x6c>)
 8006ac2:	f000 fe06 	bl	80076d2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006ac6:	7f7b      	ldrb	r3, [r7, #29]
 8006ac8:	2b28      	cmp	r3, #40	; 0x28
 8006aca:	d003      	beq.n	8006ad4 <USBH_read+0x50>
 8006acc:	2b3a      	cmp	r3, #58	; 0x3a
 8006ace:	d001      	beq.n	8006ad4 <USBH_read+0x50>
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d103      	bne.n	8006adc <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006ada:	e003      	b.n	8006ae4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006ae2:	bf00      	nop
    }
  }

  return res;
 8006ae4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3748      	adds	r7, #72	; 0x48
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000c3c 	.word	0x20000c3c

08006af4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b094      	sub	sp, #80	; 0x50
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006b0a:	7bf9      	ldrb	r1, [r7, #15]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	4817      	ldr	r0, [pc, #92]	; (8006b74 <USBH_write+0x80>)
 8006b16:	f000 fe69 	bl	80077ec <USBH_MSC_Write>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d103      	bne.n	8006b28 <USBH_write+0x34>
  {
    res = RES_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b26:	e01f      	b.n	8006b68 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006b28:	f107 0210 	add.w	r2, r7, #16
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4810      	ldr	r0, [pc, #64]	; (8006b74 <USBH_write+0x80>)
 8006b32:	f000 fdce 	bl	80076d2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006b36:	7f7b      	ldrb	r3, [r7, #29]
 8006b38:	2b27      	cmp	r3, #39	; 0x27
 8006b3a:	d009      	beq.n	8006b50 <USBH_write+0x5c>
 8006b3c:	2b27      	cmp	r3, #39	; 0x27
 8006b3e:	dc02      	bgt.n	8006b46 <USBH_write+0x52>
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d009      	beq.n	8006b58 <USBH_write+0x64>
 8006b44:	e00c      	b.n	8006b60 <USBH_write+0x6c>
 8006b46:	2b28      	cmp	r3, #40	; 0x28
 8006b48:	d006      	beq.n	8006b58 <USBH_write+0x64>
 8006b4a:	2b3a      	cmp	r3, #58	; 0x3a
 8006b4c:	d004      	beq.n	8006b58 <USBH_write+0x64>
 8006b4e:	e007      	b.n	8006b60 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006b56:	e007      	b.n	8006b68 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006b5e:	e003      	b.n	8006b68 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006b66:	bf00      	nop
    }
  }

  return res;
 8006b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3748      	adds	r7, #72	; 0x48
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000c3c 	.word	0x20000c3c

08006b78 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b090      	sub	sp, #64	; 0x40
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	603a      	str	r2, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
 8006b84:	460b      	mov	r3, r1
 8006b86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006b8e:	79bb      	ldrb	r3, [r7, #6]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d852      	bhi.n	8006c3a <USBH_ioctl+0xc2>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <USBH_ioctl+0x24>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bb5 	.word	0x08006bb5
 8006ba4:	08006bdf 	.word	0x08006bdf
 8006ba8:	08006c0b 	.word	0x08006c0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006bb2:	e045      	b.n	8006c40 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006bb4:	f107 0208 	add.w	r2, r7, #8
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4823      	ldr	r0, [pc, #140]	; (8006c4c <USBH_ioctl+0xd4>)
 8006bbe:	f000 fd88 	bl	80076d2 <USBH_MSC_GetLUNInfo>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d106      	bne.n	8006bd6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006bd4:	e034      	b.n	8006c40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006bdc:	e030      	b.n	8006c40 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006bde:	f107 0208 	add.w	r2, r7, #8
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	4619      	mov	r1, r3
 8006be6:	4819      	ldr	r0, [pc, #100]	; (8006c4c <USBH_ioctl+0xd4>)
 8006be8:	f000 fd73 	bl	80076d2 <USBH_MSC_GetLUNInfo>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006bf2:	8a3b      	ldrh	r3, [r7, #16]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006c00:	e01e      	b.n	8006c40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c08:	e01a      	b.n	8006c40 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006c0a:	f107 0208 	add.w	r2, r7, #8
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	4619      	mov	r1, r3
 8006c12:	480e      	ldr	r0, [pc, #56]	; (8006c4c <USBH_ioctl+0xd4>)
 8006c14:	f000 fd5d 	bl	80076d2 <USBH_MSC_GetLUNInfo>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006c1e:	8a3b      	ldrh	r3, [r7, #16]
 8006c20:	0a5b      	lsrs	r3, r3, #9
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006c30:	e006      	b.n	8006c40 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c38:	e002      	b.n	8006c40 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006c40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3740      	adds	r7, #64	; 0x40
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20000c3c 	.word	0x20000c3c

08006c50 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af04      	add	r7, sp, #16
 8006c56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c5e:	7919      	ldrb	r1, [r3, #4]
 8006c60:	2350      	movs	r3, #80	; 0x50
 8006c62:	2206      	movs	r2, #6
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fc4f 	bl	8008508 <USBH_FindInterface>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2bff      	cmp	r3, #255	; 0xff
 8006c72:	d002      	beq.n	8006c7a <USBH_MSC_InterfaceInit+0x2a>
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d901      	bls.n	8006c7e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e0ef      	b.n	8006e5e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fc24 	bl	80084d0 <USBH_SelectInterface>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006c92:	2302      	movs	r3, #2
 8006c94:	e0e3      	b.n	8006e5e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006c9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006ca0:	f007 fb40 	bl	800e324 <malloc>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e0d0      	b.n	8006e5e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	68b8      	ldr	r0, [r7, #8]
 8006cc4:	f007 fb49 	bl	800e35a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	211a      	movs	r1, #26
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	b25b      	sxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	da16      	bge.n	8006d0e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	211a      	movs	r1, #26
 8006ce6:	fb01 f303 	mul.w	r3, r1, r3
 8006cea:	4413      	add	r3, r2
 8006cec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	211a      	movs	r1, #26
 8006cfc:	fb01 f303 	mul.w	r3, r1, r3
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d06:	881a      	ldrh	r2, [r3, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	815a      	strh	r2, [r3, #10]
 8006d0c:	e015      	b.n	8006d3a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	211a      	movs	r1, #26
 8006d14:	fb01 f303 	mul.w	r3, r1, r3
 8006d18:	4413      	add	r3, r2
 8006d1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	211a      	movs	r1, #26
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	211a      	movs	r1, #26
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	4413      	add	r3, r2
 8006d46:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b25b      	sxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	da16      	bge.n	8006d80 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	211a      	movs	r1, #26
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	211a      	movs	r1, #26
 8006d6e:	fb01 f303 	mul.w	r3, r1, r3
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	815a      	strh	r2, [r3, #10]
 8006d7e:	e015      	b.n	8006dac <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	211a      	movs	r1, #26
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d90:	781a      	ldrb	r2, [r3, #0]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	211a      	movs	r1, #26
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006da6:	881a      	ldrh	r2, [r3, #0]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	799b      	ldrb	r3, [r3, #6]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f002 fdc2 	bl	800994e <USBH_AllocPipe>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	461a      	mov	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	79db      	ldrb	r3, [r3, #7]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f002 fdb8 	bl	800994e <USBH_AllocPipe>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fda4 	bl	8007934 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	7959      	ldrb	r1, [r3, #5]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	7998      	ldrb	r0, [r3, #6]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	8912      	ldrh	r2, [r2, #8]
 8006e04:	9202      	str	r2, [sp, #8]
 8006e06:	2202      	movs	r2, #2
 8006e08:	9201      	str	r2, [sp, #4]
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f002 fd6d 	bl	80098f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	7919      	ldrb	r1, [r3, #4]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	79d8      	ldrb	r0, [r3, #7]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	8952      	ldrh	r2, [r2, #10]
 8006e2e:	9202      	str	r2, [sp, #8]
 8006e30:	2202      	movs	r2, #2
 8006e32:	9201      	str	r2, [sp, #4]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4623      	mov	r3, r4
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f002 fd58 	bl	80098f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	791b      	ldrb	r3, [r3, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f005 fa7d 	bl	800c348 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	795b      	ldrb	r3, [r3, #5]
 8006e52:	2200      	movs	r2, #0
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f005 fa76 	bl	800c348 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd90      	pop	{r4, r7, pc}

08006e66 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	795b      	ldrb	r3, [r3, #5]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00e      	beq.n	8006e9e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	795b      	ldrb	r3, [r3, #5]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f002 fd51 	bl	800992e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	795b      	ldrb	r3, [r3, #5]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f002 fd7c 	bl	8009990 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	791b      	ldrb	r3, [r3, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00e      	beq.n	8006ec4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f002 fd3e 	bl	800992e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	791b      	ldrb	r3, [r3, #4]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f002 fd69 	bl	8009990 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f007 fa2b 	bl	800e334 <free>
    phost->pActiveClass->pData = 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	7b9b      	ldrb	r3, [r3, #14]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d004      	beq.n	8006f1a <USBH_MSC_ClassRequest+0x28>
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d03e      	beq.n	8006f92 <USBH_MSC_ClassRequest+0xa0>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d000      	beq.n	8006f1a <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8006f18:	e04a      	b.n	8006fb0 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fcea 	bl	80078f8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d104      	bne.n	8006f38 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d135      	bne.n	8006faa <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d804      	bhi.n	8006f50 <USBH_MSC_ClassRequest+0x5e>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	e000      	b.n	8006f52 <USBH_MSC_ClassRequest+0x60>
 8006f50:	2202      	movs	r2, #2
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006f56:	2300      	movs	r3, #0
 8006f58:	73bb      	strb	r3, [r7, #14]
 8006f5a:	e014      	b.n	8006f86 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	2134      	movs	r1, #52	; 0x34
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	3392      	adds	r3, #146	; 0x92
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	2134      	movs	r1, #52	; 0x34
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	4413      	add	r3, r2
 8006f7a:	33c1      	adds	r3, #193	; 0xc1
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	3301      	adds	r3, #1
 8006f84:	73bb      	strb	r3, [r7, #14]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	7bba      	ldrb	r2, [r7, #14]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d3e5      	bcc.n	8006f5c <USBH_MSC_ClassRequest+0x6a>
      break;
 8006f90:	e00b      	b.n	8006faa <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006f92:	2100      	movs	r1, #0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f002 f878 	bl	800908a <USBH_ClrFeature>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	7bda      	ldrb	r2, [r3, #15]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	739a      	strb	r2, [r3, #14]
      break;
 8006fa8:	e001      	b.n	8006fae <USBH_MSC_ClassRequest+0xbc>
      break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <USBH_MSC_ClassRequest+0xbe>
      break;
 8006fae:	bf00      	nop
  }

  return status;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	7b1b      	ldrb	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <USBH_MSC_Process+0x2e>
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	f000 8271 	beq.w	80074ca <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006fe8:	e272      	b.n	80074d0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	f080 824f 	bcs.w	800749a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007002:	4619      	mov	r1, r3
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	2334      	movs	r3, #52	; 0x34
 8007008:	fb03 f301 	mul.w	r3, r3, r1
 800700c:	4413      	add	r3, r2
 800700e:	3391      	adds	r3, #145	; 0x91
 8007010:	2201      	movs	r2, #1
 8007012:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800701a:	4619      	mov	r1, r3
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	2334      	movs	r3, #52	; 0x34
 8007020:	fb03 f301 	mul.w	r3, r3, r1
 8007024:	4413      	add	r3, r2
 8007026:	3390      	adds	r3, #144	; 0x90
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b08      	cmp	r3, #8
 800702c:	f200 8243 	bhi.w	80074b6 <USBH_MSC_Process+0x4fa>
 8007030:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <USBH_MSC_Process+0x7c>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	0800705d 	.word	0x0800705d
 800703c:	080074b7 	.word	0x080074b7
 8007040:	08007125 	.word	0x08007125
 8007044:	080072a9 	.word	0x080072a9
 8007048:	08007083 	.word	0x08007083
 800704c:	08007375 	.word	0x08007375
 8007050:	080074b7 	.word	0x080074b7
 8007054:	080074b7 	.word	0x080074b7
 8007058:	08007489 	.word	0x08007489
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007062:	4619      	mov	r1, r3
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	2334      	movs	r3, #52	; 0x34
 8007068:	fb03 f301 	mul.w	r3, r3, r1
 800706c:	4413      	add	r3, r2
 800706e:	3390      	adds	r3, #144	; 0x90
 8007070:	2204      	movs	r2, #4
 8007072:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007080:	e222      	b.n	80074c8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007088:	b2d9      	uxtb	r1, r3
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007090:	461a      	mov	r2, r3
 8007092:	2334      	movs	r3, #52	; 0x34
 8007094:	fb03 f302 	mul.w	r3, r3, r2
 8007098:	3398      	adds	r3, #152	; 0x98
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4413      	add	r3, r2
 800709e:	3307      	adds	r3, #7
 80070a0:	461a      	mov	r2, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ff68 	bl	8007f78 <USBH_MSC_SCSI_Inquiry>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070b8:	4619      	mov	r1, r3
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	2334      	movs	r3, #52	; 0x34
 80070be:	fb03 f301 	mul.w	r3, r3, r1
 80070c2:	4413      	add	r3, r2
 80070c4:	3390      	adds	r3, #144	; 0x90
 80070c6:	2202      	movs	r2, #2
 80070c8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d10c      	bne.n	80070ea <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070d6:	4619      	mov	r1, r3
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	2334      	movs	r3, #52	; 0x34
 80070dc:	fb03 f301 	mul.w	r3, r3, r1
 80070e0:	4413      	add	r3, r2
 80070e2:	3390      	adds	r3, #144	; 0x90
 80070e4:	2205      	movs	r2, #5
 80070e6:	701a      	strb	r2, [r3, #0]
            break;
 80070e8:	e1e7      	b.n	80074ba <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	f040 81e4 	bne.w	80074ba <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070f8:	4619      	mov	r1, r3
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	2334      	movs	r3, #52	; 0x34
 80070fe:	fb03 f301 	mul.w	r3, r3, r1
 8007102:	4413      	add	r3, r2
 8007104:	3390      	adds	r3, #144	; 0x90
 8007106:	2201      	movs	r2, #1
 8007108:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007110:	4619      	mov	r1, r3
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	2334      	movs	r3, #52	; 0x34
 8007116:	fb03 f301 	mul.w	r3, r3, r1
 800711a:	4413      	add	r3, r2
 800711c:	3391      	adds	r3, #145	; 0x91
 800711e:	2202      	movs	r2, #2
 8007120:	701a      	strb	r2, [r3, #0]
            break;
 8007122:	e1ca      	b.n	80074ba <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fe64 	bl	8007dfc <USBH_MSC_SCSI_TestUnitReady>
 8007134:	4603      	mov	r3, r0
 8007136:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d149      	bne.n	80071d2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007144:	4619      	mov	r1, r3
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	2334      	movs	r3, #52	; 0x34
 800714a:	fb03 f301 	mul.w	r3, r3, r1
 800714e:	4413      	add	r3, r2
 8007150:	3392      	adds	r3, #146	; 0x92
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00c      	beq.n	8007172 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800715e:	4619      	mov	r1, r3
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	2334      	movs	r3, #52	; 0x34
 8007164:	fb03 f301 	mul.w	r3, r3, r1
 8007168:	4413      	add	r3, r2
 800716a:	33c1      	adds	r3, #193	; 0xc1
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e00b      	b.n	800718a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007178:	4619      	mov	r1, r3
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	2334      	movs	r3, #52	; 0x34
 800717e:	fb03 f301 	mul.w	r3, r3, r1
 8007182:	4413      	add	r3, r2
 8007184:	33c1      	adds	r3, #193	; 0xc1
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007190:	4619      	mov	r1, r3
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	2334      	movs	r3, #52	; 0x34
 8007196:	fb03 f301 	mul.w	r3, r3, r1
 800719a:	4413      	add	r3, r2
 800719c:	3390      	adds	r3, #144	; 0x90
 800719e:	2203      	movs	r2, #3
 80071a0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071a8:	4619      	mov	r1, r3
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	2334      	movs	r3, #52	; 0x34
 80071ae:	fb03 f301 	mul.w	r3, r3, r1
 80071b2:	4413      	add	r3, r2
 80071b4:	3391      	adds	r3, #145	; 0x91
 80071b6:	2200      	movs	r2, #0
 80071b8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071c0:	4619      	mov	r1, r3
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	2334      	movs	r3, #52	; 0x34
 80071c6:	fb03 f301 	mul.w	r3, r3, r1
 80071ca:	4413      	add	r3, r2
 80071cc:	3392      	adds	r3, #146	; 0x92
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d14a      	bne.n	800726e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071de:	4619      	mov	r1, r3
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	2334      	movs	r3, #52	; 0x34
 80071e4:	fb03 f301 	mul.w	r3, r3, r1
 80071e8:	4413      	add	r3, r2
 80071ea:	3392      	adds	r3, #146	; 0x92
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d00c      	beq.n	800720c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071f8:	4619      	mov	r1, r3
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	2334      	movs	r3, #52	; 0x34
 80071fe:	fb03 f301 	mul.w	r3, r3, r1
 8007202:	4413      	add	r3, r2
 8007204:	33c1      	adds	r3, #193	; 0xc1
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e00b      	b.n	8007224 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007212:	4619      	mov	r1, r3
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	2334      	movs	r3, #52	; 0x34
 8007218:	fb03 f301 	mul.w	r3, r3, r1
 800721c:	4413      	add	r3, r2
 800721e:	33c1      	adds	r3, #193	; 0xc1
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800722a:	4619      	mov	r1, r3
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	2334      	movs	r3, #52	; 0x34
 8007230:	fb03 f301 	mul.w	r3, r3, r1
 8007234:	4413      	add	r3, r2
 8007236:	3390      	adds	r3, #144	; 0x90
 8007238:	2205      	movs	r2, #5
 800723a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007242:	4619      	mov	r1, r3
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	2334      	movs	r3, #52	; 0x34
 8007248:	fb03 f301 	mul.w	r3, r3, r1
 800724c:	4413      	add	r3, r2
 800724e:	3391      	adds	r3, #145	; 0x91
 8007250:	2201      	movs	r2, #1
 8007252:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800725a:	4619      	mov	r1, r3
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	2334      	movs	r3, #52	; 0x34
 8007260:	fb03 f301 	mul.w	r3, r3, r1
 8007264:	4413      	add	r3, r2
 8007266:	3392      	adds	r3, #146	; 0x92
 8007268:	2202      	movs	r2, #2
 800726a:	701a      	strb	r2, [r3, #0]
            break;
 800726c:	e127      	b.n	80074be <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b04      	cmp	r3, #4
 8007272:	f040 8124 	bne.w	80074be <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800727c:	4619      	mov	r1, r3
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	2334      	movs	r3, #52	; 0x34
 8007282:	fb03 f301 	mul.w	r3, r3, r1
 8007286:	4413      	add	r3, r2
 8007288:	3390      	adds	r3, #144	; 0x90
 800728a:	2201      	movs	r2, #1
 800728c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007294:	4619      	mov	r1, r3
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	2334      	movs	r3, #52	; 0x34
 800729a:	fb03 f301 	mul.w	r3, r3, r1
 800729e:	4413      	add	r3, r2
 80072a0:	3391      	adds	r3, #145	; 0x91
 80072a2:	2202      	movs	r2, #2
 80072a4:	701a      	strb	r2, [r3, #0]
            break;
 80072a6:	e10a      	b.n	80074be <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072ae:	b2d9      	uxtb	r1, r3
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072b6:	461a      	mov	r2, r3
 80072b8:	2334      	movs	r3, #52	; 0x34
 80072ba:	fb03 f302 	mul.w	r3, r3, r2
 80072be:	3390      	adds	r3, #144	; 0x90
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	3304      	adds	r3, #4
 80072c6:	461a      	mov	r2, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fdda 	bl	8007e82 <USBH_MSC_SCSI_ReadCapacity>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d120      	bne.n	800731a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072de:	4619      	mov	r1, r3
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	2334      	movs	r3, #52	; 0x34
 80072e4:	fb03 f301 	mul.w	r3, r3, r1
 80072e8:	4413      	add	r3, r2
 80072ea:	3390      	adds	r3, #144	; 0x90
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072f6:	4619      	mov	r1, r3
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	2334      	movs	r3, #52	; 0x34
 80072fc:	fb03 f301 	mul.w	r3, r3, r1
 8007300:	4413      	add	r3, r2
 8007302:	3391      	adds	r3, #145	; 0x91
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800730e:	3301      	adds	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007318:	e0d3      	b.n	80074c2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d10c      	bne.n	800733a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007326:	4619      	mov	r1, r3
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	2334      	movs	r3, #52	; 0x34
 800732c:	fb03 f301 	mul.w	r3, r3, r1
 8007330:	4413      	add	r3, r2
 8007332:	3390      	adds	r3, #144	; 0x90
 8007334:	2205      	movs	r2, #5
 8007336:	701a      	strb	r2, [r3, #0]
            break;
 8007338:	e0c3      	b.n	80074c2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	2b04      	cmp	r3, #4
 800733e:	f040 80c0 	bne.w	80074c2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007348:	4619      	mov	r1, r3
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	2334      	movs	r3, #52	; 0x34
 800734e:	fb03 f301 	mul.w	r3, r3, r1
 8007352:	4413      	add	r3, r2
 8007354:	3390      	adds	r3, #144	; 0x90
 8007356:	2201      	movs	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007360:	4619      	mov	r1, r3
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	2334      	movs	r3, #52	; 0x34
 8007366:	fb03 f301 	mul.w	r3, r3, r1
 800736a:	4413      	add	r3, r2
 800736c:	3391      	adds	r3, #145	; 0x91
 800736e:	2202      	movs	r2, #2
 8007370:	701a      	strb	r2, [r3, #0]
            break;
 8007372:	e0a6      	b.n	80074c2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800737a:	b2d9      	uxtb	r1, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007382:	461a      	mov	r2, r3
 8007384:	2334      	movs	r3, #52	; 0x34
 8007386:	fb03 f302 	mul.w	r3, r3, r2
 800738a:	3398      	adds	r3, #152	; 0x98
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4413      	add	r3, r2
 8007390:	3304      	adds	r3, #4
 8007392:	461a      	mov	r2, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fe94 	bl	80080c2 <USBH_MSC_SCSI_RequestSense>
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d145      	bne.n	8007430 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073aa:	4619      	mov	r1, r3
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	2334      	movs	r3, #52	; 0x34
 80073b0:	fb03 f301 	mul.w	r3, r3, r1
 80073b4:	4413      	add	r3, r2
 80073b6:	339c      	adds	r3, #156	; 0x9c
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d00c      	beq.n	80073d8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073c4:	4619      	mov	r1, r3
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	2334      	movs	r3, #52	; 0x34
 80073ca:	fb03 f301 	mul.w	r3, r3, r1
 80073ce:	4413      	add	r3, r2
 80073d0:	339c      	adds	r3, #156	; 0x9c
 80073d2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d117      	bne.n	8007408 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d80c      	bhi.n	8007408 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073f4:	4619      	mov	r1, r3
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	2334      	movs	r3, #52	; 0x34
 80073fa:	fb03 f301 	mul.w	r3, r3, r1
 80073fe:	4413      	add	r3, r2
 8007400:	3390      	adds	r3, #144	; 0x90
 8007402:	2202      	movs	r2, #2
 8007404:	701a      	strb	r2, [r3, #0]
                  break;
 8007406:	e05f      	b.n	80074c8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800740e:	4619      	mov	r1, r3
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	2334      	movs	r3, #52	; 0x34
 8007414:	fb03 f301 	mul.w	r3, r3, r1
 8007418:	4413      	add	r3, r2
 800741a:	3390      	adds	r3, #144	; 0x90
 800741c:	2201      	movs	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007426:	3301      	adds	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d10c      	bne.n	8007450 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800743c:	4619      	mov	r1, r3
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	2334      	movs	r3, #52	; 0x34
 8007442:	fb03 f301 	mul.w	r3, r3, r1
 8007446:	4413      	add	r3, r2
 8007448:	3390      	adds	r3, #144	; 0x90
 800744a:	2208      	movs	r2, #8
 800744c:	701a      	strb	r2, [r3, #0]
            break;
 800744e:	e03a      	b.n	80074c6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b04      	cmp	r3, #4
 8007454:	d137      	bne.n	80074c6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800745c:	4619      	mov	r1, r3
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	2334      	movs	r3, #52	; 0x34
 8007462:	fb03 f301 	mul.w	r3, r3, r1
 8007466:	4413      	add	r3, r2
 8007468:	3390      	adds	r3, #144	; 0x90
 800746a:	2201      	movs	r2, #1
 800746c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007474:	4619      	mov	r1, r3
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	2334      	movs	r3, #52	; 0x34
 800747a:	fb03 f301 	mul.w	r3, r3, r1
 800747e:	4413      	add	r3, r2
 8007480:	3391      	adds	r3, #145	; 0x91
 8007482:	2202      	movs	r2, #2
 8007484:	701a      	strb	r2, [r3, #0]
            break;
 8007486:	e01e      	b.n	80074c6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800748e:	3301      	adds	r3, #1
 8007490:	b29a      	uxth	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007498:	e016      	b.n	80074c8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2200      	movs	r2, #0
 800749e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2201      	movs	r2, #1
 80074a6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ae:	2102      	movs	r1, #2
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
      break;
 80074b4:	e00c      	b.n	80074d0 <USBH_MSC_Process+0x514>
            break;
 80074b6:	bf00      	nop
 80074b8:	e00a      	b.n	80074d0 <USBH_MSC_Process+0x514>
            break;
 80074ba:	bf00      	nop
 80074bc:	e008      	b.n	80074d0 <USBH_MSC_Process+0x514>
            break;
 80074be:	bf00      	nop
 80074c0:	e006      	b.n	80074d0 <USBH_MSC_Process+0x514>
            break;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <USBH_MSC_Process+0x514>
            break;
 80074c6:	bf00      	nop
      break;
 80074c8:	e002      	b.n	80074d0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	75fb      	strb	r3, [r7, #23]
      break;
 80074ce:	bf00      	nop
  }
  return error;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop

080074dc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b088      	sub	sp, #32
 80074f6:	af02      	add	r7, sp, #8
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007508:	2301      	movs	r3, #1
 800750a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	2134      	movs	r1, #52	; 0x34
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	3390      	adds	r3, #144	; 0x90
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b06      	cmp	r3, #6
 8007522:	d004      	beq.n	800752e <USBH_MSC_RdWrProcess+0x3c>
 8007524:	2b07      	cmp	r3, #7
 8007526:	d037      	beq.n	8007598 <USBH_MSC_RdWrProcess+0xa6>
 8007528:	2b05      	cmp	r3, #5
 800752a:	d06a      	beq.n	8007602 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800752c:	e0a6      	b.n	800767c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800752e:	78f9      	ldrb	r1, [r7, #3]
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	2200      	movs	r2, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fea6 	bl	800828a <USBH_MSC_SCSI_Read>
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	2134      	movs	r1, #52	; 0x34
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	3390      	adds	r3, #144	; 0x90
 8007556:	2201      	movs	r2, #1
 8007558:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	75fb      	strb	r3, [r7, #23]
      break;
 800755e:	e088      	b.n	8007672 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d109      	bne.n	800757a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	2134      	movs	r1, #52	; 0x34
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	4413      	add	r3, r2
 8007572:	3390      	adds	r3, #144	; 0x90
 8007574:	2205      	movs	r2, #5
 8007576:	701a      	strb	r2, [r3, #0]
      break;
 8007578:	e07b      	b.n	8007672 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	2b04      	cmp	r3, #4
 800757e:	d178      	bne.n	8007672 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	2134      	movs	r1, #52	; 0x34
 8007586:	fb01 f303 	mul.w	r3, r1, r3
 800758a:	4413      	add	r3, r2
 800758c:	3390      	adds	r3, #144	; 0x90
 800758e:	2208      	movs	r2, #8
 8007590:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007592:	2302      	movs	r3, #2
 8007594:	75fb      	strb	r3, [r7, #23]
      break;
 8007596:	e06c      	b.n	8007672 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007598:	78f9      	ldrb	r1, [r7, #3]
 800759a:	2300      	movs	r3, #0
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	2300      	movs	r3, #0
 80075a0:	2200      	movs	r2, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fe06 	bl	80081b4 <USBH_MSC_SCSI_Write>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	2134      	movs	r1, #52	; 0x34
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	4413      	add	r3, r2
 80075be:	3390      	adds	r3, #144	; 0x90
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	75fb      	strb	r3, [r7, #23]
      break;
 80075c8:	e055      	b.n	8007676 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d109      	bne.n	80075e4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	2134      	movs	r1, #52	; 0x34
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
 80075da:	4413      	add	r3, r2
 80075dc:	3390      	adds	r3, #144	; 0x90
 80075de:	2205      	movs	r2, #5
 80075e0:	701a      	strb	r2, [r3, #0]
      break;
 80075e2:	e048      	b.n	8007676 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d145      	bne.n	8007676 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	2134      	movs	r1, #52	; 0x34
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	4413      	add	r3, r2
 80075f6:	3390      	adds	r3, #144	; 0x90
 80075f8:	2208      	movs	r2, #8
 80075fa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80075fc:	2302      	movs	r3, #2
 80075fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007600:	e039      	b.n	8007676 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	2234      	movs	r2, #52	; 0x34
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	3398      	adds	r3, #152	; 0x98
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4413      	add	r3, r2
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fd53 	bl	80080c2 <USBH_MSC_SCSI_RequestSense>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d113      	bne.n	800764e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	2134      	movs	r1, #52	; 0x34
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	4413      	add	r3, r2
 8007632:	3390      	adds	r3, #144	; 0x90
 8007634:	2201      	movs	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	2134      	movs	r1, #52	; 0x34
 800763e:	fb01 f303 	mul.w	r3, r1, r3
 8007642:	4413      	add	r3, r2
 8007644:	3391      	adds	r3, #145	; 0x91
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800764a:	2302      	movs	r3, #2
 800764c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d012      	beq.n	800767a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b04      	cmp	r3, #4
 8007658:	d10f      	bne.n	800767a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	2134      	movs	r1, #52	; 0x34
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	4413      	add	r3, r2
 8007666:	3390      	adds	r3, #144	; 0x90
 8007668:	2208      	movs	r2, #8
 800766a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	75fb      	strb	r3, [r7, #23]
      break;
 8007670:	e003      	b.n	800767a <USBH_MSC_RdWrProcess+0x188>
      break;
 8007672:	bf00      	nop
 8007674:	e002      	b.n	800767c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007676:	bf00      	nop
 8007678:	e000      	b.n	800767c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800767a:	bf00      	nop

  }
  return error;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b0b      	cmp	r3, #11
 80076a4:	d10c      	bne.n	80076c0 <USBH_MSC_UnitIsReady+0x3a>
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	2134      	movs	r1, #52	; 0x34
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	3391      	adds	r3, #145	; 0x91
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d102      	bne.n	80076c0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
 80076be:	e001      	b.n	80076c4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b086      	sub	sp, #24
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	460b      	mov	r3, r1
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b0b      	cmp	r3, #11
 80076f2:	d10d      	bne.n	8007710 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	2234      	movs	r2, #52	; 0x34
 80076f8:	fb02 f303 	mul.w	r3, r2, r3
 80076fc:	3390      	adds	r3, #144	; 0x90
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4413      	add	r3, r2
 8007702:	2234      	movs	r2, #52	; 0x34
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f006 fe1c 	bl	800e344 <memcpy>
    return USBH_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	e000      	b.n	8007712 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007710:	2302      	movs	r3, #2
  }
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b088      	sub	sp, #32
 800771e:	af02      	add	r7, sp, #8
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	460b      	mov	r3, r1
 8007728:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00e      	beq.n	800775e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007746:	2b0b      	cmp	r3, #11
 8007748:	d109      	bne.n	800775e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800774a:	7afb      	ldrb	r3, [r7, #11]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	2134      	movs	r1, #52	; 0x34
 8007750:	fb01 f303 	mul.w	r3, r1, r3
 8007754:	4413      	add	r3, r2
 8007756:	3390      	adds	r3, #144	; 0x90
 8007758:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800775a:	2b01      	cmp	r3, #1
 800775c:	d001      	beq.n	8007762 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800775e:	2302      	movs	r3, #2
 8007760:	e040      	b.n	80077e4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2206      	movs	r2, #6
 8007766:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	2134      	movs	r1, #52	; 0x34
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	4413      	add	r3, r2
 8007774:	3390      	adds	r3, #144	; 0x90
 8007776:	2206      	movs	r2, #6
 8007778:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	b29a      	uxth	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007784:	7af9      	ldrb	r1, [r7, #11]
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fd7b 	bl	800828a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800779a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800779c:	e016      	b.n	80077cc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80077ae:	fb01 f303 	mul.w	r3, r1, r3
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d805      	bhi.n	80077c2 <USBH_MSC_Read+0xa8>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2201      	movs	r2, #1
 80077c6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80077c8:	2302      	movs	r3, #2
 80077ca:	e00b      	b.n	80077e4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	4619      	mov	r1, r3
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff fe8e 	bl	80074f2 <USBH_MSC_RdWrProcess>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d0e0      	beq.n	800779e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2201      	movs	r2, #1
 80077e0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	460b      	mov	r3, r1
 80077fa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00e      	beq.n	8007830 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007818:	2b0b      	cmp	r3, #11
 800781a:	d109      	bne.n	8007830 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	2134      	movs	r1, #52	; 0x34
 8007822:	fb01 f303 	mul.w	r3, r1, r3
 8007826:	4413      	add	r3, r2
 8007828:	3390      	adds	r3, #144	; 0x90
 800782a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800782c:	2b01      	cmp	r3, #1
 800782e:	d001      	beq.n	8007834 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	e040      	b.n	80078b6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2207      	movs	r2, #7
 8007838:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	2134      	movs	r1, #52	; 0x34
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	4413      	add	r3, r2
 8007846:	3390      	adds	r3, #144	; 0x90
 8007848:	2207      	movs	r2, #7
 800784a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	b29a      	uxth	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007856:	7af9      	ldrb	r1, [r7, #11]
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fca7 	bl	80081b4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800786c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800786e:	e016      	b.n	800789e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad2      	subs	r2, r2, r3
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	f242 7110 	movw	r1, #10000	; 0x2710
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	429a      	cmp	r2, r3
 8007886:	d805      	bhi.n	8007894 <USBH_MSC_Write+0xa8>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2201      	movs	r2, #1
 8007898:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800789a:	2302      	movs	r3, #2
 800789c:	e00b      	b.n	80078b6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800789e:	7afb      	ldrb	r3, [r7, #11]
 80078a0:	4619      	mov	r1, r3
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff fe25 	bl	80074f2 <USBH_MSC_RdWrProcess>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d0e0      	beq.n	8007870 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2201      	movs	r2, #1
 80078b2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2221      	movs	r2, #33	; 0x21
 80078ca:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	22ff      	movs	r2, #255	; 0xff
 80078d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80078e4:	2200      	movs	r2, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fdae 	bl	800944a <USBH_CtlReq>
 80078ee:	4603      	mov	r3, r0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	22a1      	movs	r2, #161	; 0xa1
 8007906:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	22fe      	movs	r2, #254	; 0xfe
 800790c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007920:	2201      	movs	r2, #1
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 fd90 	bl	800944a <USBH_CtlReq>
 800792a:	4603      	mov	r3, r0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <USBH_MSC_BOT_Init+0x3c>)
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <USBH_MSC_BOT_Init+0x40>)
 8007950:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	43425355 	.word	0x43425355
 8007974:	20304050 	.word	0x20304050

08007978 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af02      	add	r7, sp, #8
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007988:	2301      	movs	r3, #1
 800798a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800798c:	2301      	movs	r3, #1
 800798e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007990:	2300      	movs	r3, #0
 8007992:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079a8:	3b01      	subs	r3, #1
 80079aa:	2b0a      	cmp	r3, #10
 80079ac:	f200 81a1 	bhi.w	8007cf2 <USBH_MSC_BOT_Process+0x37a>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <USBH_MSC_BOT_Process+0x40>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	08007a0f 	.word	0x08007a0f
 80079c0:	08007a79 	.word	0x08007a79
 80079c4:	08007a97 	.word	0x08007a97
 80079c8:	08007b1b 	.word	0x08007b1b
 80079cc:	08007b3f 	.word	0x08007b3f
 80079d0:	08007bd9 	.word	0x08007bd9
 80079d4:	08007bf5 	.word	0x08007bf5
 80079d8:	08007c47 	.word	0x08007c47
 80079dc:	08007c77 	.word	0x08007c77
 80079e0:	08007cd9 	.word	0x08007cd9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	78fa      	ldrb	r2, [r7, #3]
 80079e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	795a      	ldrb	r2, [r3, #5]
 80079fe:	2301      	movs	r3, #1
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	4613      	mov	r3, r2
 8007a04:	221f      	movs	r2, #31
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 ff2f 	bl	800986a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007a0c:	e180      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	795b      	ldrb	r3, [r3, #5]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f004 fc6d 	bl	800c2f4 <USBH_LL_GetURBState>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007a1e:	7d3b      	ldrb	r3, [r7, #20]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d118      	bne.n	8007a56 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00f      	beq.n	8007a4c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007a32:	b25b      	sxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da04      	bge.n	8007a42 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2203      	movs	r2, #3
 8007a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a40:	e159      	b.n	8007cf6 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2205      	movs	r2, #5
 8007a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a4a:	e154      	b.n	8007cf6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2207      	movs	r2, #7
 8007a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a54:	e14f      	b.n	8007cf6 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a56:	7d3b      	ldrb	r3, [r7, #20]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d104      	bne.n	8007a66 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a64:	e147      	b.n	8007cf6 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8007a66:	7d3b      	ldrb	r3, [r7, #20]
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	f040 8144 	bne.w	8007cf6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	220a      	movs	r2, #10
 8007a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a76:	e13e      	b.n	8007cf6 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	895a      	ldrh	r2, [r3, #10]
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	791b      	ldrb	r3, [r3, #4]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 ff14 	bl	80098b4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2204      	movs	r2, #4
 8007a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007a94:	e13c      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f004 fc29 	bl	800c2f4 <USBH_LL_GetURBState>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007aa6:	7d3b      	ldrb	r3, [r7, #20]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d12d      	bne.n	8007b08 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	8952      	ldrh	r2, [r2, #10]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d910      	bls.n	8007ada <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	8952      	ldrh	r2, [r2, #10]
 8007ac2:	441a      	add	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	8952      	ldrh	r2, [r2, #10]
 8007ad2:	1a9a      	subs	r2, r3, r2
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ad8:	e002      	b.n	8007ae0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2200      	movs	r2, #0
 8007ade:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	895a      	ldrh	r2, [r3, #10]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	791b      	ldrb	r3, [r3, #4]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fedc 	bl	80098b4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007afc:	e0fd      	b.n	8007cfa <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2207      	movs	r2, #7
 8007b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b06:	e0f8      	b.n	8007cfa <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8007b08:	7d3b      	ldrb	r3, [r7, #20]
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	f040 80f5 	bne.w	8007cfa <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	2209      	movs	r2, #9
 8007b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b18:	e0ef      	b.n	8007cfa <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	891a      	ldrh	r2, [r3, #8]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	7958      	ldrb	r0, [r3, #5]
 8007b28:	2301      	movs	r3, #1
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fe9b 	bl	800986a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2206      	movs	r2, #6
 8007b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b3c:	e0e8      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	795b      	ldrb	r3, [r3, #5]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f004 fbd5 	bl	800c2f4 <USBH_LL_GetURBState>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007b4e:	7d3b      	ldrb	r3, [r7, #20]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d130      	bne.n	8007bb6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	8912      	ldrh	r2, [r2, #8]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d910      	bls.n	8007b82 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	8912      	ldrh	r2, [r2, #8]
 8007b6a:	441a      	add	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	8912      	ldrh	r2, [r2, #8]
 8007b7a:	1a9a      	subs	r2, r3, r2
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b80:	e002      	b.n	8007b88 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2200      	movs	r2, #0
 8007b86:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00d      	beq.n	8007bac <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	891a      	ldrh	r2, [r3, #8]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	7958      	ldrb	r0, [r3, #5]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fe60 	bl	800986a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007baa:	e0a8      	b.n	8007cfe <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2207      	movs	r2, #7
 8007bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bb4:	e0a3      	b.n	8007cfe <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007bb6:	7d3b      	ldrb	r3, [r7, #20]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d104      	bne.n	8007bc6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2205      	movs	r2, #5
 8007bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bc4:	e09b      	b.n	8007cfe <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8007bc6:	7d3b      	ldrb	r3, [r7, #20]
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	f040 8098 	bne.w	8007cfe <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bd6:	e092      	b.n	8007cfe <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	791b      	ldrb	r3, [r3, #4]
 8007be2:	220d      	movs	r2, #13
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fe65 	bl	80098b4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2208      	movs	r2, #8
 8007bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bf2:	e08d      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	791b      	ldrb	r3, [r3, #4]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f004 fb7a 	bl	800c2f4 <USBH_LL_GetURBState>
 8007c00:	4603      	mov	r3, r0
 8007c02:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007c04:	7d3b      	ldrb	r3, [r7, #20]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d115      	bne.n	8007c36 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8aa 	bl	8007d74 <USBH_MSC_DecodeCSW>
 8007c20:	4603      	mov	r3, r0
 8007c22:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007c24:	7d7b      	ldrb	r3, [r7, #21]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d102      	bne.n	8007c30 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007c2e:	e068      	b.n	8007d02 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	75fb      	strb	r3, [r7, #23]
      break;
 8007c34:	e065      	b.n	8007d02 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8007c36:	7d3b      	ldrb	r3, [r7, #20]
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	d162      	bne.n	8007d02 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2209      	movs	r2, #9
 8007c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007c44:	e05d      	b.n	8007d02 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f865 	bl	8007d1c <USBH_MSC_BOT_Abort>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007c56:	7dbb      	ldrb	r3, [r7, #22]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2207      	movs	r2, #7
 8007c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007c64:	e04f      	b.n	8007d06 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007c66:	7dbb      	ldrb	r3, [r7, #22]
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d14c      	bne.n	8007d06 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	220b      	movs	r2, #11
 8007c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007c74:	e047      	b.n	8007d06 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f84d 	bl	8007d1c <USBH_MSC_BOT_Abort>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007c86:	7dbb      	ldrb	r3, [r7, #22]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11d      	bne.n	8007cc8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	795b      	ldrb	r3, [r3, #5]
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f004 fb8b 	bl	800c3ae <USBH_LL_GetToggle>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	7959      	ldrb	r1, [r3, #5]
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	f1c3 0301 	rsb	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f004 fb4c 	bl	800c348 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	791b      	ldrb	r3, [r3, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f004 fb45 	bl	800c348 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2209      	movs	r2, #9
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007cc6:	e020      	b.n	8007d0a <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d11d      	bne.n	8007d0a <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	220b      	movs	r2, #11
 8007cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007cd6:	e018      	b.n	8007d0a <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fdf0 	bl	80078be <USBH_MSC_BOT_REQ_Reset>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d112      	bne.n	8007d0e <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007cf0:	e00d      	b.n	8007d0e <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8007cf2:	bf00      	nop
 8007cf4:	e00c      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e00a      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e008      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e006      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>
      break;
 8007d02:	bf00      	nop
 8007d04:	e004      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>
      break;
 8007d06:	bf00      	nop
 8007d08:	e002      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>
      break;
 8007d0a:	bf00      	nop
 8007d0c:	e000      	b.n	8007d10 <USBH_MSC_BOT_Process+0x398>
      break;
 8007d0e:	bf00      	nop
  }
  return status;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007d3a:	78bb      	ldrb	r3, [r7, #2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <USBH_MSC_BOT_Abort+0x2a>
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d009      	beq.n	8007d58 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007d44:	e011      	b.n	8007d6a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	79db      	ldrb	r3, [r3, #7]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f99c 	bl	800908a <USBH_ClrFeature>
 8007d52:	4603      	mov	r3, r0
 8007d54:	73fb      	strb	r3, [r7, #15]
      break;
 8007d56:	e008      	b.n	8007d6a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	799b      	ldrb	r3, [r3, #6]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f993 	bl	800908a <USBH_ClrFeature>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]
      break;
 8007d68:	bf00      	nop
  }
  return status;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007d86:	2301      	movs	r3, #1
 8007d88:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	791b      	ldrb	r3, [r3, #4]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f004 fa1d 	bl	800c1d0 <USBH_LL_GetLastXferSize>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b0d      	cmp	r3, #13
 8007d9a:	d002      	beq.n	8007da2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	73fb      	strb	r3, [r7, #15]
 8007da0:	e024      	b.n	8007dec <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da6:	4a14      	ldr	r2, [pc, #80]	; (8007df8 <USBH_MSC_DecodeCSW+0x84>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d11d      	bne.n	8007de8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d119      	bne.n	8007dec <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
 8007dc6:	e011      	b.n	8007dec <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d102      	bne.n	8007dd8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
 8007dd6:	e009      	b.n	8007dec <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d104      	bne.n	8007dec <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007de2:	2302      	movs	r3, #2
 8007de4:	73fb      	strb	r3, [r7, #15]
 8007de6:	e001      	b.n	8007dec <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007de8:	2302      	movs	r3, #2
 8007dea:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	53425355 	.word	0x53425355

08007dfc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d002      	beq.n	8007e26 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d021      	beq.n	8007e68 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007e24:	e028      	b.n	8007e78 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	220a      	movs	r2, #10
 8007e38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	3363      	adds	r3, #99	; 0x63
 8007e40:	2210      	movs	r2, #16
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f006 fa88 	bl	800e35a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007e62:	2301      	movs	r3, #1
 8007e64:	73fb      	strb	r3, [r7, #15]
      break;
 8007e66:	e007      	b.n	8007e78 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff fd83 	bl	8007978 <USBH_MSC_BOT_Process>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]
      break;
 8007e76:	bf00      	nop
  }

  return error;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b086      	sub	sp, #24
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	607a      	str	r2, [r7, #4]
 8007e8e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d002      	beq.n	8007eae <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d027      	beq.n	8007efc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007eac:	e05f      	b.n	8007f6e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2280      	movs	r2, #128	; 0x80
 8007eb8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	3363      	adds	r3, #99	; 0x63
 8007ec8:	2210      	movs	r2, #16
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f006 fa44 	bl	800e35a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2225      	movs	r2, #37	; 0x25
 8007ed6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f103 0210 	add.w	r2, r3, #16
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8007efa:	e038      	b.n	8007f6e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	4619      	mov	r1, r3
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff fd39 	bl	8007978 <USBH_MSC_BOT_Process>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d12d      	bne.n	8007f6c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f16:	3303      	adds	r3, #3
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f22:	3302      	adds	r3, #2
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f30:	3301      	adds	r3, #1
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007f36:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	061b      	lsls	r3, r3, #24
 8007f42:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f4e:	3307      	adds	r3, #7
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5a:	3306      	adds	r3, #6
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	4313      	orrs	r3, r2
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	809a      	strh	r2, [r3, #4]
      break;
 8007f6c:	bf00      	nop
  }

  return error;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	460b      	mov	r3, r1
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007f86:	2302      	movs	r3, #2
 8007f88:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d002      	beq.n	8007fa4 <USBH_MSC_SCSI_Inquiry+0x2c>
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d03d      	beq.n	800801e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007fa2:	e089      	b.n	80080b8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2224      	movs	r2, #36	; 0x24
 8007fa8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	2280      	movs	r2, #128	; 0x80
 8007fae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	3363      	adds	r3, #99	; 0x63
 8007fbe:	220a      	movs	r2, #10
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f006 f9c9 	bl	800e35a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2212      	movs	r2, #18
 8007fcc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007fd0:	7afb      	ldrb	r3, [r7, #11]
 8007fd2:	015b      	lsls	r3, r3, #5
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2224      	movs	r2, #36	; 0x24
 8007ff0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f103 0210 	add.w	r2, r3, #16
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008018:	2301      	movs	r3, #1
 800801a:	75fb      	strb	r3, [r7, #23]
      break;
 800801c:	e04c      	b.n	80080b8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	4619      	mov	r1, r3
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fca8 	bl	8007978 <USBH_MSC_BOT_Process>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d141      	bne.n	80080b6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008032:	2222      	movs	r2, #34	; 0x22
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f006 f98f 	bl	800e35a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	b2da      	uxtb	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	095b      	lsrs	r3, r3, #5
 8008058:	b2da      	uxtb	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008064:	3301      	adds	r3, #1
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b25b      	sxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	da03      	bge.n	8008076 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	709a      	strb	r2, [r3, #2]
 8008074:	e002      	b.n	800807c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1cd8      	adds	r0, r3, #3
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008086:	3308      	adds	r3, #8
 8008088:	2208      	movs	r2, #8
 800808a:	4619      	mov	r1, r3
 800808c:	f006 f95a 	bl	800e344 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f103 000c 	add.w	r0, r3, #12
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809c:	3310      	adds	r3, #16
 800809e:	2210      	movs	r2, #16
 80080a0:	4619      	mov	r1, r3
 80080a2:	f006 f94f 	bl	800e344 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	331d      	adds	r3, #29
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80080b0:	3220      	adds	r2, #32
 80080b2:	6812      	ldr	r2, [r2, #0]
 80080b4:	601a      	str	r2, [r3, #0]
      break;
 80080b6:	bf00      	nop
  }

  return error;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	460b      	mov	r3, r1
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80080d0:	2302      	movs	r3, #2
 80080d2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d002      	beq.n	80080ee <USBH_MSC_SCSI_RequestSense+0x2c>
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d03d      	beq.n	8008168 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80080ec:	e05d      	b.n	80081aa <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	220e      	movs	r2, #14
 80080f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2280      	movs	r2, #128	; 0x80
 80080f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	220a      	movs	r2, #10
 8008100:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	3363      	adds	r3, #99	; 0x63
 8008108:	2210      	movs	r2, #16
 800810a:	2100      	movs	r1, #0
 800810c:	4618      	mov	r0, r3
 800810e:	f006 f924 	bl	800e35a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2203      	movs	r2, #3
 8008116:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800811a:	7afb      	ldrb	r3, [r7, #11]
 800811c:	015b      	lsls	r3, r3, #5
 800811e:	b2da      	uxtb	r2, r3
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	220e      	movs	r2, #14
 800813a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f103 0210 	add.w	r2, r3, #16
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008162:	2301      	movs	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
      break;
 8008166:	e020      	b.n	80081aa <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	4619      	mov	r1, r3
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fc03 	bl	8007978 <USBH_MSC_BOT_Process>
 8008172:	4603      	mov	r3, r0
 8008174:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d115      	bne.n	80081a8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008182:	3302      	adds	r3, #2
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	b2da      	uxtb	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008196:	7b1a      	ldrb	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a2:	7b5a      	ldrb	r2, [r3, #13]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	709a      	strb	r2, [r3, #2]
      break;
 80081a8:	bf00      	nop
  }

  return error;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	460b      	mov	r3, r1
 80081c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80081c4:	2302      	movs	r3, #2
 80081c6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d002      	beq.n	80081e2 <USBH_MSC_SCSI_Write+0x2e>
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d047      	beq.n	8008270 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80081e0:	e04e      	b.n	8008280 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80081e8:	461a      	mov	r2, r3
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	fb03 f202 	mul.w	r2, r3, r2
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	220a      	movs	r2, #10
 8008200:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	3363      	adds	r3, #99	; 0x63
 8008208:	2210      	movs	r2, #16
 800820a:	2100      	movs	r1, #0
 800820c:	4618      	mov	r0, r3
 800820e:	f006 f8a4 	bl	800e35a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	222a      	movs	r2, #42	; 0x2a
 8008216:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800821a:	79fa      	ldrb	r2, [r7, #7]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008222:	79ba      	ldrb	r2, [r7, #6]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800822a:	797a      	ldrb	r2, [r7, #5]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008232:	1d3b      	adds	r3, r7, #4
 8008234:	781a      	ldrb	r2, [r3, #0]
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800823c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008246:	f107 0320 	add.w	r3, r7, #32
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800826a:	2301      	movs	r3, #1
 800826c:	75fb      	strb	r3, [r7, #23]
      break;
 800826e:	e007      	b.n	8008280 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	4619      	mov	r1, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff fb7f 	bl	8007978 <USBH_MSC_BOT_Process>
 800827a:	4603      	mov	r3, r0
 800827c:	75fb      	strb	r3, [r7, #23]
      break;
 800827e:	bf00      	nop
  }

  return error;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b086      	sub	sp, #24
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	460b      	mov	r3, r1
 8008298:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800829a:	2302      	movs	r3, #2
 800829c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d002      	beq.n	80082b8 <USBH_MSC_SCSI_Read+0x2e>
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d047      	beq.n	8008346 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80082b6:	e04e      	b.n	8008356 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80082be:	461a      	mov	r2, r3
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	fb03 f202 	mul.w	r2, r3, r2
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2280      	movs	r2, #128	; 0x80
 80082ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	220a      	movs	r2, #10
 80082d6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	3363      	adds	r3, #99	; 0x63
 80082de:	2210      	movs	r2, #16
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f006 f839 	bl	800e35a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2228      	movs	r2, #40	; 0x28
 80082ec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80082f0:	79fa      	ldrb	r2, [r7, #7]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80082f8:	79ba      	ldrb	r2, [r7, #6]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008300:	797a      	ldrb	r2, [r7, #5]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008308:	1d3b      	adds	r3, r7, #4
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008312:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800831c:	f107 0320 	add.w	r3, r7, #32
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008340:	2301      	movs	r3, #1
 8008342:	75fb      	strb	r3, [r7, #23]
      break;
 8008344:	e007      	b.n	8008356 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	4619      	mov	r1, r3
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff fb14 	bl	8007978 <USBH_MSC_BOT_Process>
 8008350:	4603      	mov	r3, r0
 8008352:	75fb      	strb	r3, [r7, #23]
      break;
 8008354:	bf00      	nop
  }

  return error;
 8008356:	7dfb      	ldrb	r3, [r7, #23]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008374:	2302      	movs	r3, #2
 8008376:	e029      	b.n	80083cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	79fa      	ldrb	r2, [r7, #7]
 800837c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f81f 	bl	80083d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f003 fe51 	bl	800c06c <USBH_LL_Init>

  return USBH_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e009      	b.n	80083fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	33e0      	adds	r3, #224	; 0xe0
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	2200      	movs	r2, #0
 80083f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b0e      	cmp	r3, #14
 80083fe:	d9f2      	bls.n	80083e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e009      	b.n	800841a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4413      	add	r3, r2
 800840c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008420:	d3f1      	bcc.n	8008406 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2240      	movs	r2, #64	; 0x40
 8008446:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d016      	beq.n	80084be <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10e      	bne.n	80084b8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084a0:	1c59      	adds	r1, r3, #1
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	33de      	adds	r3, #222	; 0xde
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
 80084b6:	e004      	b.n	80084c2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80084b8:	2302      	movs	r3, #2
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	e001      	b.n	80084c2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80084be:	2302      	movs	r3, #2
 80084c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d204      	bcs.n	80084f6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80084f4:	e001      	b.n	80084fa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80084f6:	2302      	movs	r3, #2
 80084f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	4608      	mov	r0, r1
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	4603      	mov	r3, r0
 8008518:	70fb      	strb	r3, [r7, #3]
 800851a:	460b      	mov	r3, r1
 800851c:	70bb      	strb	r3, [r7, #2]
 800851e:	4613      	mov	r3, r2
 8008520:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008530:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008532:	e025      	b.n	8008580 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	221a      	movs	r2, #26
 8008538:	fb02 f303 	mul.w	r3, r2, r3
 800853c:	3308      	adds	r3, #8
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	4413      	add	r3, r2
 8008542:	3302      	adds	r3, #2
 8008544:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	795b      	ldrb	r3, [r3, #5]
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	429a      	cmp	r2, r3
 800854e:	d002      	beq.n	8008556 <USBH_FindInterface+0x4e>
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	2bff      	cmp	r3, #255	; 0xff
 8008554:	d111      	bne.n	800857a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800855a:	78ba      	ldrb	r2, [r7, #2]
 800855c:	429a      	cmp	r2, r3
 800855e:	d002      	beq.n	8008566 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008560:	78bb      	ldrb	r3, [r7, #2]
 8008562:	2bff      	cmp	r3, #255	; 0xff
 8008564:	d109      	bne.n	800857a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800856a:	787a      	ldrb	r2, [r7, #1]
 800856c:	429a      	cmp	r2, r3
 800856e:	d002      	beq.n	8008576 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008570:	787b      	ldrb	r3, [r7, #1]
 8008572:	2bff      	cmp	r3, #255	; 0xff
 8008574:	d101      	bne.n	800857a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008576:	7dfb      	ldrb	r3, [r7, #23]
 8008578:	e006      	b.n	8008588 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	3301      	adds	r3, #1
 800857e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d9d6      	bls.n	8008534 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008586:	23ff      	movs	r3, #255	; 0xff
}
 8008588:	4618      	mov	r0, r3
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f003 fda1 	bl	800c0e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80085a2:	2101      	movs	r1, #1
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f003 feb8 	bl	800c31a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af04      	add	r7, sp, #16
 80085ba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80085bc:	2302      	movs	r3, #2
 80085be:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d102      	bne.n	80085d6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2203      	movs	r2, #3
 80085d4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b0b      	cmp	r3, #11
 80085de:	f200 81b3 	bhi.w	8008948 <USBH_Process+0x394>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <USBH_Process+0x34>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	08008619 	.word	0x08008619
 80085ec:	0800864b 	.word	0x0800864b
 80085f0:	080086b3 	.word	0x080086b3
 80085f4:	080088e3 	.word	0x080088e3
 80085f8:	08008949 	.word	0x08008949
 80085fc:	08008757 	.word	0x08008757
 8008600:	08008889 	.word	0x08008889
 8008604:	0800878d 	.word	0x0800878d
 8008608:	080087ad 	.word	0x080087ad
 800860c:	080087cd 	.word	0x080087cd
 8008610:	080087fb 	.word	0x080087fb
 8008614:	080088cb 	.word	0x080088cb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8193 	beq.w	800894c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800862c:	20c8      	movs	r0, #200	; 0xc8
 800862e:	f003 fef1 	bl	800c414 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f003 fdb1 	bl	800c19a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008648:	e180      	b.n	800894c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008650:	2b01      	cmp	r3, #1
 8008652:	d107      	bne.n	8008664 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008662:	e182      	b.n	800896a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800866a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866e:	d914      	bls.n	800869a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008676:	3301      	adds	r3, #1
 8008678:	b2da      	uxtb	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008686:	2b03      	cmp	r3, #3
 8008688:	d903      	bls.n	8008692 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	220d      	movs	r2, #13
 800868e:	701a      	strb	r2, [r3, #0]
      break;
 8008690:	e16b      	b.n	800896a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]
      break;
 8008698:	e167      	b.n	800896a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80086a0:	f103 020a 	add.w	r2, r3, #10
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80086aa:	200a      	movs	r0, #10
 80086ac:	f003 feb2 	bl	800c414 <USBH_Delay>
      break;
 80086b0:	e15b      	b.n	800896a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086c2:	2104      	movs	r1, #4
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80086c8:	2064      	movs	r0, #100	; 0x64
 80086ca:	f003 fea3 	bl	800c414 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f003 fd3e 	bl	800c150 <USBH_LL_GetSpeed>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2205      	movs	r2, #5
 80086e2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80086e4:	2100      	movs	r1, #0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 f931 	bl	800994e <USBH_AllocPipe>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80086f4:	2180      	movs	r1, #128	; 0x80
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f001 f929 	bl	800994e <USBH_AllocPipe>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7919      	ldrb	r1, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008718:	b292      	uxth	r2, r2
 800871a:	9202      	str	r2, [sp, #8]
 800871c:	2200      	movs	r2, #0
 800871e:	9201      	str	r2, [sp, #4]
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	4603      	mov	r3, r0
 8008724:	2280      	movs	r2, #128	; 0x80
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 f8e2 	bl	80098f0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7959      	ldrb	r1, [r3, #5]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008740:	b292      	uxth	r2, r2
 8008742:	9202      	str	r2, [sp, #8]
 8008744:	2200      	movs	r2, #0
 8008746:	9201      	str	r2, [sp, #4]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	4603      	mov	r3, r0
 800874c:	2200      	movs	r2, #0
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 f8ce 	bl	80098f0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008754:	e109      	b.n	800896a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f90c 	bl	8008974 <USBH_HandleEnum>
 800875c:	4603      	mov	r3, r0
 800875e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	f040 80f3 	bne.w	8008950 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008778:	2b01      	cmp	r3, #1
 800877a:	d103      	bne.n	8008784 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2208      	movs	r2, #8
 8008780:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008782:	e0e5      	b.n	8008950 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2207      	movs	r2, #7
 8008788:	701a      	strb	r2, [r3, #0]
      break;
 800878a:	e0e1      	b.n	8008950 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 80de 	beq.w	8008954 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800879e:	2101      	movs	r1, #1
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2208      	movs	r2, #8
 80087a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80087aa:	e0d3      	b.n	8008954 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fc20 	bl	8008ffc <USBH_SetCfg>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 80ca 	bne.w	8008958 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2209      	movs	r2, #9
 80087c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087ca:	e0c5      	b.n	8008958 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80087da:	2101      	movs	r1, #1
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fc30 	bl	8009042 <USBH_SetFeature>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f040 80b9 	bne.w	800895c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	220a      	movs	r2, #10
 80087ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087f0:	e0b4      	b.n	800895c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	220a      	movs	r2, #10
 80087f6:	701a      	strb	r2, [r3, #0]
      break;
 80087f8:	e0b0      	b.n	800895c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80ad 	beq.w	8008960 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
 8008812:	e016      	b.n	8008842 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008814:	7bfa      	ldrb	r2, [r7, #15]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32de      	adds	r2, #222	; 0xde
 800881a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881e:	791a      	ldrb	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008826:	429a      	cmp	r2, r3
 8008828:	d108      	bne.n	800883c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800882a:	7bfa      	ldrb	r2, [r7, #15]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	32de      	adds	r2, #222	; 0xde
 8008830:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800883a:	e005      	b.n	8008848 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	3301      	adds	r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0e5      	beq.n	8008814 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d016      	beq.n	8008880 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d109      	bne.n	8008878 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2206      	movs	r2, #6
 8008868:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008870:	2103      	movs	r1, #3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008876:	e073      	b.n	8008960 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	220d      	movs	r2, #13
 800887c:	701a      	strb	r2, [r3, #0]
      break;
 800887e:	e06f      	b.n	8008960 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	220d      	movs	r2, #13
 8008884:	701a      	strb	r2, [r3, #0]
      break;
 8008886:	e06b      	b.n	8008960 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d017      	beq.n	80088c2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
 800889e:	4603      	mov	r3, r0
 80088a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d103      	bne.n	80088b2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	220b      	movs	r2, #11
 80088ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80088b0:	e058      	b.n	8008964 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d154      	bne.n	8008964 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	220d      	movs	r2, #13
 80088be:	701a      	strb	r2, [r3, #0]
      break;
 80088c0:	e050      	b.n	8008964 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220d      	movs	r2, #13
 80088c6:	701a      	strb	r2, [r3, #0]
      break;
 80088c8:	e04c      	b.n	8008964 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d049      	beq.n	8008968 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
      }
      break;
 80088e0:	e042      	b.n	8008968 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff fd72 	bl	80083d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d009      	beq.n	800890e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800891e:	2105      	movs	r1, #5
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	d107      	bne.n	8008940 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff fe2b 	bl	8008594 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800893e:	e014      	b.n	800896a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f003 fbcf 	bl	800c0e4 <USBH_LL_Start>
      break;
 8008946:	e010      	b.n	800896a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008948:	bf00      	nop
 800894a:	e00e      	b.n	800896a <USBH_Process+0x3b6>
      break;
 800894c:	bf00      	nop
 800894e:	e00c      	b.n	800896a <USBH_Process+0x3b6>
      break;
 8008950:	bf00      	nop
 8008952:	e00a      	b.n	800896a <USBH_Process+0x3b6>
    break;
 8008954:	bf00      	nop
 8008956:	e008      	b.n	800896a <USBH_Process+0x3b6>
      break;
 8008958:	bf00      	nop
 800895a:	e006      	b.n	800896a <USBH_Process+0x3b6>
      break;
 800895c:	bf00      	nop
 800895e:	e004      	b.n	800896a <USBH_Process+0x3b6>
      break;
 8008960:	bf00      	nop
 8008962:	e002      	b.n	800896a <USBH_Process+0x3b6>
      break;
 8008964:	bf00      	nop
 8008966:	e000      	b.n	800896a <USBH_Process+0x3b6>
      break;
 8008968:	bf00      	nop
  }
  return USBH_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af04      	add	r7, sp, #16
 800897a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800897c:	2301      	movs	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008980:	2301      	movs	r3, #1
 8008982:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b07      	cmp	r3, #7
 800898a:	f200 81c1 	bhi.w	8008d10 <USBH_HandleEnum+0x39c>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <USBH_HandleEnum+0x20>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	080089b5 	.word	0x080089b5
 8008998:	08008a73 	.word	0x08008a73
 800899c:	08008add 	.word	0x08008add
 80089a0:	08008b6b 	.word	0x08008b6b
 80089a4:	08008bd5 	.word	0x08008bd5
 80089a8:	08008c45 	.word	0x08008c45
 80089ac:	08008c8b 	.word	0x08008c8b
 80089b0:	08008cd1 	.word	0x08008cd1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80089b4:	2108      	movs	r1, #8
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa50 	bl	8008e5c <USBH_Get_DevDesc>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d130      	bne.n	8008a28 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7919      	ldrb	r1, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80089ea:	b292      	uxth	r2, r2
 80089ec:	9202      	str	r2, [sp, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	9201      	str	r2, [sp, #4]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4603      	mov	r3, r0
 80089f6:	2280      	movs	r2, #128	; 0x80
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 ff79 	bl	80098f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7959      	ldrb	r1, [r3, #5]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a12:	b292      	uxth	r2, r2
 8008a14:	9202      	str	r2, [sp, #8]
 8008a16:	2200      	movs	r2, #0
 8008a18:	9201      	str	r2, [sp, #4]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 ff65 	bl	80098f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a26:	e175      	b.n	8008d14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	f040 8172 	bne.w	8008d14 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a36:	3301      	adds	r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d903      	bls.n	8008a52 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	220d      	movs	r2, #13
 8008a4e:	701a      	strb	r2, [r3, #0]
      break;
 8008a50:	e160      	b.n	8008d14 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	795b      	ldrb	r3, [r3, #5]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 ff99 	bl	8009990 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	791b      	ldrb	r3, [r3, #4]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 ff93 	bl	8009990 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
      break;
 8008a70:	e150      	b.n	8008d14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008a72:	2112      	movs	r1, #18
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f9f1 	bl	8008e5c <USBH_Get_DevDesc>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d103      	bne.n	8008a8c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a8a:	e145      	b.n	8008d18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	f040 8142 	bne.w	8008d18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d903      	bls.n	8008ab6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	220d      	movs	r2, #13
 8008ab2:	701a      	strb	r2, [r3, #0]
      break;
 8008ab4:	e130      	b.n	8008d18 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	795b      	ldrb	r3, [r3, #5]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 ff67 	bl	8009990 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	791b      	ldrb	r3, [r3, #4]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 ff61 	bl	8009990 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
      break;
 8008ada:	e11d      	b.n	8008d18 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008adc:	2101      	movs	r1, #1
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa68 	bl	8008fb4 <USBH_SetAddress>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d132      	bne.n	8008b54 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008aee:	2002      	movs	r0, #2
 8008af0:	f003 fc90 	bl	800c414 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2203      	movs	r2, #3
 8008b00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	7919      	ldrb	r1, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b16:	b292      	uxth	r2, r2
 8008b18:	9202      	str	r2, [sp, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	9201      	str	r2, [sp, #4]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	4603      	mov	r3, r0
 8008b22:	2280      	movs	r2, #128	; 0x80
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fee3 	bl	80098f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	7959      	ldrb	r1, [r3, #5]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b3e:	b292      	uxth	r2, r2
 8008b40:	9202      	str	r2, [sp, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	9201      	str	r2, [sp, #4]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fecf 	bl	80098f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b52:	e0e3      	b.n	8008d1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	f040 80e0 	bne.w	8008d1c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	220d      	movs	r2, #13
 8008b60:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	705a      	strb	r2, [r3, #1]
      break;
 8008b68:	e0d8      	b.n	8008d1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008b6a:	2109      	movs	r1, #9
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f99d 	bl	8008eac <USBH_Get_CfgDesc>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d103      	bne.n	8008b84 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b82:	e0cd      	b.n	8008d20 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	f040 80ca 	bne.w	8008d20 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b92:	3301      	adds	r3, #1
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d903      	bls.n	8008bae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	220d      	movs	r2, #13
 8008baa:	701a      	strb	r2, [r3, #0]
      break;
 8008bac:	e0b8      	b.n	8008d20 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	795b      	ldrb	r3, [r3, #5]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 feeb 	bl	8009990 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	791b      	ldrb	r3, [r3, #4]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fee5 	bl	8009990 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
      break;
 8008bd2:	e0a5      	b.n	8008d20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f965 	bl	8008eac <USBH_Get_CfgDesc>
 8008be2:	4603      	mov	r3, r0
 8008be4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d103      	bne.n	8008bf4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2205      	movs	r2, #5
 8008bf0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bf2:	e097      	b.n	8008d24 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	f040 8094 	bne.w	8008d24 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c02:	3301      	adds	r3, #1
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d903      	bls.n	8008c1e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	220d      	movs	r2, #13
 8008c1a:	701a      	strb	r2, [r3, #0]
      break;
 8008c1c:	e082      	b.n	8008d24 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	795b      	ldrb	r3, [r3, #5]
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 feb3 	bl	8009990 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	791b      	ldrb	r3, [r3, #4]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fead 	bl	8009990 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	701a      	strb	r2, [r3, #0]
      break;
 8008c42:	e06f      	b.n	8008d24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d019      	beq.n	8008c82 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c5a:	23ff      	movs	r3, #255	; 0xff
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f949 	bl	8008ef4 <USBH_Get_StringDesc>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d103      	bne.n	8008c74 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2206      	movs	r2, #6
 8008c70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008c72:	e059      	b.n	8008d28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d156      	bne.n	8008d28 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2206      	movs	r2, #6
 8008c7e:	705a      	strb	r2, [r3, #1]
      break;
 8008c80:	e052      	b.n	8008d28 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2206      	movs	r2, #6
 8008c86:	705a      	strb	r2, [r3, #1]
      break;
 8008c88:	e04e      	b.n	8008d28 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d019      	beq.n	8008cc8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ca0:	23ff      	movs	r3, #255	; 0xff
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f926 	bl	8008ef4 <USBH_Get_StringDesc>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d103      	bne.n	8008cba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2207      	movs	r2, #7
 8008cb6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008cb8:	e038      	b.n	8008d2c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d135      	bne.n	8008d2c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2207      	movs	r2, #7
 8008cc4:	705a      	strb	r2, [r3, #1]
      break;
 8008cc6:	e031      	b.n	8008d2c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2207      	movs	r2, #7
 8008ccc:	705a      	strb	r2, [r3, #1]
      break;
 8008cce:	e02d      	b.n	8008d2c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d017      	beq.n	8008d0a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ce6:	23ff      	movs	r3, #255	; 0xff
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f903 	bl	8008ef4 <USBH_Get_StringDesc>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008cfc:	e018      	b.n	8008d30 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d115      	bne.n	8008d30 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
      break;
 8008d08:	e012      	b.n	8008d30 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0e:	e00f      	b.n	8008d30 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008d10:	bf00      	nop
 8008d12:	e00e      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d14:	bf00      	nop
 8008d16:	e00c      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d18:	bf00      	nop
 8008d1a:	e00a      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d1c:	bf00      	nop
 8008d1e:	e008      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d20:	bf00      	nop
 8008d22:	e006      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d24:	bf00      	nop
 8008d26:	e004      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d28:	bf00      	nop
 8008d2a:	e002      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d2c:	bf00      	nop
 8008d2e:	e000      	b.n	8008d32 <USBH_HandleEnum+0x3be>
      break;
 8008d30:	bf00      	nop
  }
  return Status;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f804 	bl	8008d7e <USBH_HandleSof>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b0b      	cmp	r3, #11
 8008d8e:	d10a      	bne.n	8008da6 <USBH_HandleSof+0x28>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4798      	blx	r3
  }
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008dbe:	bf00      	nop
}
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008dda:	bf00      	nop
}
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f003 f970 	bl	800c11a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	791b      	ldrb	r3, [r3, #4]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fda5 	bl	8009990 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	795b      	ldrb	r3, [r3, #5]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fd9f 	bl	8009990 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	4613      	mov	r3, r2
 8008e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f864 	bl	8008f4a <USBH_GetDescriptor>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73fb      	strb	r3, [r7, #15]
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	b292      	uxth	r2, r2
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f000 f918 	bl	80090d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	331c      	adds	r3, #28
 8008ebc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ebe:	887b      	ldrh	r3, [r7, #2]
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ec8:	2100      	movs	r1, #0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f83d 	bl	8008f4a <USBH_GetDescriptor>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	72fb      	strb	r3, [r7, #11]
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d107      	bne.n	8008eea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ee0:	887a      	ldrh	r2, [r7, #2]
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f964 	bl	80091b2 <USBH_ParseCfgDesc>
  }

  return status;
 8008eea:	7afb      	ldrb	r3, [r7, #11]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	607a      	str	r2, [r7, #4]
 8008efe:	461a      	mov	r2, r3
 8008f00:	460b      	mov	r3, r1
 8008f02:	72fb      	strb	r3, [r7, #11]
 8008f04:	4613      	mov	r3, r2
 8008f06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f10:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f18:	893b      	ldrh	r3, [r7, #8]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	2100      	movs	r1, #0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f812 	bl	8008f4a <USBH_GetDescriptor>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f36:	893a      	ldrh	r2, [r7, #8]
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fa37 	bl	80093ae <USBH_ParseStringDesc>
  }

  return status;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	607b      	str	r3, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	72fb      	strb	r3, [r7, #11]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	789b      	ldrb	r3, [r3, #2]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d11c      	bne.n	8008f9e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2206      	movs	r2, #6
 8008f74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	893a      	ldrh	r2, [r7, #8]
 8008f7a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f7c:	893b      	ldrh	r3, [r7, #8]
 8008f7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f86:	d104      	bne.n	8008f92 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f240 4209 	movw	r2, #1033	; 0x409
 8008f8e:	829a      	strh	r2, [r3, #20]
 8008f90:	e002      	b.n	8008f98 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8b3a      	ldrh	r2, [r7, #24]
 8008f9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008f9e:	8b3b      	ldrh	r3, [r7, #24]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fa50 	bl	800944a <USBH_CtlReq>
 8008faa:	4603      	mov	r3, r0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	789b      	ldrb	r3, [r3, #2]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d10f      	bne.n	8008fe8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2205      	movs	r2, #5
 8008fd2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa2c 	bl	800944a <USBH_CtlReq>
 8008ff2:	4603      	mov	r3, r0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	789b      	ldrb	r3, [r3, #2]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d10e      	bne.n	800902e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2209      	movs	r2, #9
 800901a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	887a      	ldrh	r2, [r7, #2]
 8009020:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa09 	bl	800944a <USBH_CtlReq>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	460b      	mov	r3, r1
 800904c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	789b      	ldrb	r3, [r3, #2]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d10f      	bne.n	8009076 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2203      	movs	r2, #3
 8009060:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009076:	2200      	movs	r2, #0
 8009078:	2100      	movs	r1, #0
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f9e5 	bl	800944a <USBH_CtlReq>
 8009080:	4603      	mov	r3, r0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	789b      	ldrb	r3, [r3, #2]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d10f      	bne.n	80090be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80090be:	2200      	movs	r2, #0
 80090c0:	2100      	movs	r1, #0
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f9c1 	bl	800944a <USBH_CtlReq>
 80090c8:	4603      	mov	r3, r0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	4613      	mov	r3, r2
 80090de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	785a      	ldrb	r2, [r3, #1]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3302      	adds	r3, #2
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	3303      	adds	r3, #3
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	b29b      	uxth	r3, r3
 8009104:	4313      	orrs	r3, r2
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	791a      	ldrb	r2, [r3, #4]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	795a      	ldrb	r2, [r3, #5]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	799a      	ldrb	r2, [r3, #6]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	79da      	ldrb	r2, [r3, #7]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	2b08      	cmp	r3, #8
 8009130:	d939      	bls.n	80091a6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	3308      	adds	r3, #8
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	b29a      	uxth	r2, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3309      	adds	r3, #9
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	b29b      	uxth	r3, r3
 8009142:	021b      	lsls	r3, r3, #8
 8009144:	b29b      	uxth	r3, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	330a      	adds	r3, #10
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	b29a      	uxth	r2, r3
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	330b      	adds	r3, #11
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	b29b      	uxth	r3, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	b29a      	uxth	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	330c      	adds	r3, #12
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	b29a      	uxth	r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	330d      	adds	r3, #13
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	b29b      	uxth	r3, r3
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	b29b      	uxth	r3, r3
 800917e:	4313      	orrs	r3, r2
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	7b9a      	ldrb	r2, [r3, #14]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	7bda      	ldrb	r2, [r3, #15]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	7c1a      	ldrb	r2, [r3, #16]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	7c5a      	ldrb	r2, [r3, #17]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	745a      	strb	r2, [r3, #17]
  }
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b08a      	sub	sp, #40	; 0x28
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	4613      	mov	r3, r2
 80091be:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	785a      	ldrb	r2, [r3, #1]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3302      	adds	r3, #2
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	3303      	adds	r3, #3
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4313      	orrs	r3, r2
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	791a      	ldrb	r2, [r3, #4]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	795a      	ldrb	r2, [r3, #5]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	799a      	ldrb	r2, [r3, #6]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	79da      	ldrb	r2, [r3, #7]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	7a1a      	ldrb	r2, [r3, #8]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	2b09      	cmp	r3, #9
 800922c:	d95f      	bls.n	80092ee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800922e:	2309      	movs	r3, #9
 8009230:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009232:	2300      	movs	r3, #0
 8009234:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009236:	e051      	b.n	80092dc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009238:	f107 0316 	add.w	r3, r7, #22
 800923c:	4619      	mov	r1, r3
 800923e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009240:	f000 f8e8 	bl	8009414 <USBH_GetNextDesc>
 8009244:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	2b04      	cmp	r3, #4
 800924c:	d146      	bne.n	80092dc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800924e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009252:	221a      	movs	r2, #26
 8009254:	fb02 f303 	mul.w	r3, r2, r3
 8009258:	3308      	adds	r3, #8
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	3302      	adds	r3, #2
 8009260:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009264:	69f8      	ldr	r0, [r7, #28]
 8009266:	f000 f846 	bl	80092f6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009270:	2300      	movs	r3, #0
 8009272:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009274:	e022      	b.n	80092bc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009276:	f107 0316 	add.w	r3, r7, #22
 800927a:	4619      	mov	r1, r3
 800927c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800927e:	f000 f8c9 	bl	8009414 <USBH_GetNextDesc>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	785b      	ldrb	r3, [r3, #1]
 8009288:	2b05      	cmp	r3, #5
 800928a:	d117      	bne.n	80092bc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800928c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009290:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009294:	3201      	adds	r2, #1
 8009296:	00d2      	lsls	r2, r2, #3
 8009298:	211a      	movs	r1, #26
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	4413      	add	r3, r2
 80092a0:	3308      	adds	r3, #8
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	3304      	adds	r3, #4
 80092a8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80092aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092ac:	69b8      	ldr	r0, [r7, #24]
 80092ae:	f000 f851 	bl	8009354 <USBH_ParseEPDesc>
            ep_ix++;
 80092b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80092b6:	3301      	adds	r3, #1
 80092b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	791b      	ldrb	r3, [r3, #4]
 80092c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d204      	bcs.n	80092d2 <USBH_ParseCfgDesc+0x120>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	885a      	ldrh	r2, [r3, #2]
 80092cc:	8afb      	ldrh	r3, [r7, #22]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d8d1      	bhi.n	8009276 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80092d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092d6:	3301      	adds	r3, #1
 80092d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d804      	bhi.n	80092ee <USBH_ParseCfgDesc+0x13c>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	885a      	ldrh	r2, [r3, #2]
 80092e8:	8afb      	ldrh	r3, [r7, #22]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d8a4      	bhi.n	8009238 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80092ee:	bf00      	nop
 80092f0:	3728      	adds	r7, #40	; 0x28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	785a      	ldrb	r2, [r3, #1]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	789a      	ldrb	r2, [r3, #2]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	78da      	ldrb	r2, [r3, #3]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	791a      	ldrb	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	795a      	ldrb	r2, [r3, #5]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	799a      	ldrb	r2, [r3, #6]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	79da      	ldrb	r2, [r3, #7]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	7a1a      	ldrb	r2, [r3, #8]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	721a      	strb	r2, [r3, #8]
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781a      	ldrb	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	785a      	ldrb	r2, [r3, #1]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	789a      	ldrb	r2, [r3, #2]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	78da      	ldrb	r2, [r3, #3]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	3304      	adds	r3, #4
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	b29a      	uxth	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	3305      	adds	r3, #5
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b29b      	uxth	r3, r3
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	b29b      	uxth	r3, r3
 8009392:	4313      	orrs	r3, r2
 8009394:	b29a      	uxth	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	799a      	ldrb	r2, [r3, #6]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	719a      	strb	r2, [r3, #6]
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b087      	sub	sp, #28
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	4613      	mov	r3, r2
 80093ba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3301      	adds	r3, #1
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d120      	bne.n	8009408 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	1e9a      	subs	r2, r3, #2
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	4293      	cmp	r3, r2
 80093d0:	bf28      	it	cs
 80093d2:	4613      	movcs	r3, r2
 80093d4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3302      	adds	r3, #2
 80093da:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80093dc:	2300      	movs	r3, #0
 80093de:	82fb      	strh	r3, [r7, #22]
 80093e0:	e00b      	b.n	80093fa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80093e2:	8afb      	ldrh	r3, [r7, #22]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	781a      	ldrb	r2, [r3, #0]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	701a      	strb	r2, [r3, #0]
      pdest++;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80093f4:	8afb      	ldrh	r3, [r7, #22]
 80093f6:	3302      	adds	r3, #2
 80093f8:	82fb      	strh	r3, [r7, #22]
 80093fa:	8afa      	ldrh	r2, [r7, #22]
 80093fc:	8abb      	ldrh	r3, [r7, #20]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d3ef      	bcc.n	80093e2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]
  }
}
 8009408:	bf00      	nop
 800940a:	371c      	adds	r7, #28
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	881a      	ldrh	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	4413      	add	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800943c:	68fb      	ldr	r3, [r7, #12]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	4613      	mov	r3, r2
 8009456:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009458:	2301      	movs	r3, #1
 800945a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	789b      	ldrb	r3, [r3, #2]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d002      	beq.n	800946a <USBH_CtlReq+0x20>
 8009464:	2b02      	cmp	r3, #2
 8009466:	d00f      	beq.n	8009488 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009468:	e027      	b.n	80094ba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2202      	movs	r2, #2
 8009480:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
      break;
 8009486:	e018      	b.n	80094ba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 f81b 	bl	80094c4 <USBH_HandleControl>
 800948e:	4603      	mov	r3, r0
 8009490:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <USBH_CtlReq+0x54>
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b03      	cmp	r3, #3
 800949c:	d106      	bne.n	80094ac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2201      	movs	r2, #1
 80094a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	761a      	strb	r2, [r3, #24]
      break;
 80094aa:	e005      	b.n	80094b8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d102      	bne.n	80094b8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	709a      	strb	r2, [r3, #2]
      break;
 80094b8:	bf00      	nop
  }
  return status;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80094cc:	2301      	movs	r3, #1
 80094ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7e1b      	ldrb	r3, [r3, #24]
 80094d8:	3b01      	subs	r3, #1
 80094da:	2b0a      	cmp	r3, #10
 80094dc:	f200 8158 	bhi.w	8009790 <USBH_HandleControl+0x2cc>
 80094e0:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <USBH_HandleControl+0x24>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	08009515 	.word	0x08009515
 80094ec:	0800952f 	.word	0x0800952f
 80094f0:	08009599 	.word	0x08009599
 80094f4:	080095bf 	.word	0x080095bf
 80094f8:	080095f7 	.word	0x080095f7
 80094fc:	08009623 	.word	0x08009623
 8009500:	08009675 	.word	0x08009675
 8009504:	08009697 	.word	0x08009697
 8009508:	080096d3 	.word	0x080096d3
 800950c:	080096fb 	.word	0x080096fb
 8009510:	08009739 	.word	0x08009739
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f103 0110 	add.w	r1, r3, #16
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	795b      	ldrb	r3, [r3, #5]
 800951e:	461a      	mov	r2, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f945 	bl	80097b0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2202      	movs	r2, #2
 800952a:	761a      	strb	r2, [r3, #24]
      break;
 800952c:	e13b      	b.n	80097a6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	795b      	ldrb	r3, [r3, #5]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f002 fedd 	bl	800c2f4 <USBH_LL_GetURBState>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d11e      	bne.n	8009582 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7c1b      	ldrb	r3, [r3, #16]
 8009548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800954c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8adb      	ldrh	r3, [r3, #22]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009556:	7b7b      	ldrb	r3, [r7, #13]
 8009558:	2b80      	cmp	r3, #128	; 0x80
 800955a:	d103      	bne.n	8009564 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2203      	movs	r2, #3
 8009560:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009562:	e117      	b.n	8009794 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2205      	movs	r2, #5
 8009568:	761a      	strb	r2, [r3, #24]
      break;
 800956a:	e113      	b.n	8009794 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800956c:	7b7b      	ldrb	r3, [r7, #13]
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d103      	bne.n	800957a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2209      	movs	r2, #9
 8009576:	761a      	strb	r2, [r3, #24]
      break;
 8009578:	e10c      	b.n	8009794 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2207      	movs	r2, #7
 800957e:	761a      	strb	r2, [r3, #24]
      break;
 8009580:	e108      	b.n	8009794 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b04      	cmp	r3, #4
 8009586:	d003      	beq.n	8009590 <USBH_HandleControl+0xcc>
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b02      	cmp	r3, #2
 800958c:	f040 8102 	bne.w	8009794 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	220b      	movs	r2, #11
 8009594:	761a      	strb	r2, [r3, #24]
      break;
 8009596:	e0fd      	b.n	8009794 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6899      	ldr	r1, [r3, #8]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	899a      	ldrh	r2, [r3, #12]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	791b      	ldrb	r3, [r3, #4]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f93c 	bl	800982e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2204      	movs	r2, #4
 80095ba:	761a      	strb	r2, [r3, #24]
      break;
 80095bc:	e0f3      	b.n	80097a6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	791b      	ldrb	r3, [r3, #4]
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f002 fe95 	bl	800c2f4 <USBH_LL_GetURBState>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d102      	bne.n	80095da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2209      	movs	r2, #9
 80095d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	2b05      	cmp	r3, #5
 80095de:	d102      	bne.n	80095e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80095e0:	2303      	movs	r3, #3
 80095e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80095e4:	e0d8      	b.n	8009798 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	f040 80d5 	bne.w	8009798 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	220b      	movs	r2, #11
 80095f2:	761a      	strb	r2, [r3, #24]
      break;
 80095f4:	e0d0      	b.n	8009798 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6899      	ldr	r1, [r3, #8]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	899a      	ldrh	r2, [r3, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7958      	ldrb	r0, [r3, #5]
 8009602:	2301      	movs	r3, #1
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4603      	mov	r3, r0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f8eb 	bl	80097e4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009614:	b29a      	uxth	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2206      	movs	r2, #6
 800961e:	761a      	strb	r2, [r3, #24]
      break;
 8009620:	e0c1      	b.n	80097a6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	795b      	ldrb	r3, [r3, #5]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f002 fe63 	bl	800c2f4 <USBH_LL_GetURBState>
 800962e:	4603      	mov	r3, r0
 8009630:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d103      	bne.n	8009640 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2207      	movs	r2, #7
 800963c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800963e:	e0ad      	b.n	800979c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	2b05      	cmp	r3, #5
 8009644:	d105      	bne.n	8009652 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	220c      	movs	r2, #12
 800964a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800964c:	2303      	movs	r3, #3
 800964e:	73fb      	strb	r3, [r7, #15]
      break;
 8009650:	e0a4      	b.n	800979c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d103      	bne.n	8009660 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2205      	movs	r2, #5
 800965c:	761a      	strb	r2, [r3, #24]
      break;
 800965e:	e09d      	b.n	800979c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	2b04      	cmp	r3, #4
 8009664:	f040 809a 	bne.w	800979c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	220b      	movs	r2, #11
 800966c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800966e:	2302      	movs	r3, #2
 8009670:	73fb      	strb	r3, [r7, #15]
      break;
 8009672:	e093      	b.n	800979c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	791b      	ldrb	r3, [r3, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f8d6 	bl	800982e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009688:	b29a      	uxth	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2208      	movs	r2, #8
 8009692:	761a      	strb	r2, [r3, #24]

      break;
 8009694:	e087      	b.n	80097a6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	791b      	ldrb	r3, [r3, #4]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 fe29 	bl	800c2f4 <USBH_LL_GetURBState>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d105      	bne.n	80096b8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	220d      	movs	r2, #13
 80096b0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096b6:	e073      	b.n	80097a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d103      	bne.n	80096c6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	220b      	movs	r2, #11
 80096c2:	761a      	strb	r2, [r3, #24]
      break;
 80096c4:	e06c      	b.n	80097a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b05      	cmp	r3, #5
 80096ca:	d169      	bne.n	80097a0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80096cc:	2303      	movs	r3, #3
 80096ce:	73fb      	strb	r3, [r7, #15]
      break;
 80096d0:	e066      	b.n	80097a0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	795a      	ldrb	r2, [r3, #5]
 80096d6:	2301      	movs	r3, #1
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	4613      	mov	r3, r2
 80096dc:	2200      	movs	r2, #0
 80096de:	2100      	movs	r1, #0
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f87f 	bl	80097e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	220a      	movs	r2, #10
 80096f6:	761a      	strb	r2, [r3, #24]
      break;
 80096f8:	e055      	b.n	80097a6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	795b      	ldrb	r3, [r3, #5]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f002 fdf7 	bl	800c2f4 <USBH_LL_GetURBState>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d105      	bne.n	800971c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	220d      	movs	r2, #13
 8009718:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800971a:	e043      	b.n	80097a4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	2b02      	cmp	r3, #2
 8009720:	d103      	bne.n	800972a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2209      	movs	r2, #9
 8009726:	761a      	strb	r2, [r3, #24]
      break;
 8009728:	e03c      	b.n	80097a4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b04      	cmp	r3, #4
 800972e:	d139      	bne.n	80097a4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	220b      	movs	r2, #11
 8009734:	761a      	strb	r2, [r3, #24]
      break;
 8009736:	e035      	b.n	80097a4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7e5b      	ldrb	r3, [r3, #25]
 800973c:	3301      	adds	r3, #1
 800973e:	b2da      	uxtb	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	765a      	strb	r2, [r3, #25]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	7e5b      	ldrb	r3, [r3, #25]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d806      	bhi.n	800975a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009758:	e025      	b.n	80097a6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009760:	2106      	movs	r1, #6
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	795b      	ldrb	r3, [r3, #5]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f90c 	bl	8009990 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	791b      	ldrb	r3, [r3, #4]
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f906 	bl	8009990 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	73fb      	strb	r3, [r7, #15]
      break;
 800978e:	e00a      	b.n	80097a6 <USBH_HandleControl+0x2e2>

    default:
      break;
 8009790:	bf00      	nop
 8009792:	e008      	b.n	80097a6 <USBH_HandleControl+0x2e2>
      break;
 8009794:	bf00      	nop
 8009796:	e006      	b.n	80097a6 <USBH_HandleControl+0x2e2>
      break;
 8009798:	bf00      	nop
 800979a:	e004      	b.n	80097a6 <USBH_HandleControl+0x2e2>
      break;
 800979c:	bf00      	nop
 800979e:	e002      	b.n	80097a6 <USBH_HandleControl+0x2e2>
      break;
 80097a0:	bf00      	nop
 80097a2:	e000      	b.n	80097a6 <USBH_HandleControl+0x2e2>
      break;
 80097a4:	bf00      	nop
  }

  return status;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af04      	add	r7, sp, #16
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4613      	mov	r3, r2
 80097bc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80097be:	79f9      	ldrb	r1, [r7, #7]
 80097c0:	2300      	movs	r3, #0
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	2308      	movs	r3, #8
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	2300      	movs	r3, #0
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	2300      	movs	r3, #0
 80097d2:	2200      	movs	r2, #0
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f002 fd5c 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	4611      	mov	r1, r2
 80097f0:	461a      	mov	r2, r3
 80097f2:	460b      	mov	r3, r1
 80097f4:	80fb      	strh	r3, [r7, #6]
 80097f6:	4613      	mov	r3, r2
 80097f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009808:	7979      	ldrb	r1, [r7, #5]
 800980a:	7e3b      	ldrb	r3, [r7, #24]
 800980c:	9303      	str	r3, [sp, #12]
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	9302      	str	r3, [sp, #8]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	2301      	movs	r3, #1
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	2300      	movs	r3, #0
 800981c:	2200      	movs	r2, #0
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f002 fd37 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b088      	sub	sp, #32
 8009832:	af04      	add	r7, sp, #16
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	4611      	mov	r1, r2
 800983a:	461a      	mov	r2, r3
 800983c:	460b      	mov	r3, r1
 800983e:	80fb      	strh	r3, [r7, #6]
 8009840:	4613      	mov	r3, r2
 8009842:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009844:	7979      	ldrb	r1, [r7, #5]
 8009846:	2300      	movs	r3, #0
 8009848:	9303      	str	r3, [sp, #12]
 800984a:	88fb      	ldrh	r3, [r7, #6]
 800984c:	9302      	str	r3, [sp, #8]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	2301      	movs	r3, #1
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	2300      	movs	r3, #0
 8009858:	2201      	movs	r2, #1
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f002 fd19 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009860:	2300      	movs	r3, #0

}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b088      	sub	sp, #32
 800986e:	af04      	add	r7, sp, #16
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	4611      	mov	r1, r2
 8009876:	461a      	mov	r2, r3
 8009878:	460b      	mov	r3, r1
 800987a:	80fb      	strh	r3, [r7, #6]
 800987c:	4613      	mov	r3, r2
 800987e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800988e:	7979      	ldrb	r1, [r7, #5]
 8009890:	7e3b      	ldrb	r3, [r7, #24]
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	88fb      	ldrh	r3, [r7, #6]
 8009896:	9302      	str	r3, [sp, #8]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	2301      	movs	r3, #1
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2302      	movs	r3, #2
 80098a2:	2200      	movs	r2, #0
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f002 fcf4 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af04      	add	r7, sp, #16
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	4611      	mov	r1, r2
 80098c0:	461a      	mov	r2, r3
 80098c2:	460b      	mov	r3, r1
 80098c4:	80fb      	strh	r3, [r7, #6]
 80098c6:	4613      	mov	r3, r2
 80098c8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098ca:	7979      	ldrb	r1, [r7, #5]
 80098cc:	2300      	movs	r3, #0
 80098ce:	9303      	str	r3, [sp, #12]
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	9302      	str	r3, [sp, #8]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	2301      	movs	r3, #1
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	2302      	movs	r3, #2
 80098de:	2201      	movs	r2, #1
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f002 fcd6 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af04      	add	r7, sp, #16
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	4608      	mov	r0, r1
 80098fa:	4611      	mov	r1, r2
 80098fc:	461a      	mov	r2, r3
 80098fe:	4603      	mov	r3, r0
 8009900:	70fb      	strb	r3, [r7, #3]
 8009902:	460b      	mov	r3, r1
 8009904:	70bb      	strb	r3, [r7, #2]
 8009906:	4613      	mov	r3, r2
 8009908:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800990a:	7878      	ldrb	r0, [r7, #1]
 800990c:	78ba      	ldrb	r2, [r7, #2]
 800990e:	78f9      	ldrb	r1, [r7, #3]
 8009910:	8b3b      	ldrh	r3, [r7, #24]
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	7d3b      	ldrb	r3, [r7, #20]
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	7c3b      	ldrb	r3, [r7, #16]
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	4603      	mov	r3, r0
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f002 fc69 	bl	800c1f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f002 fc88 	bl	800c254 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	460b      	mov	r3, r1
 8009958:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f836 	bl	80099cc <USBH_GetFreePipe>
 8009960:	4603      	mov	r3, r0
 8009962:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009964:	89fb      	ldrh	r3, [r7, #14]
 8009966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800996a:	4293      	cmp	r3, r2
 800996c:	d00a      	beq.n	8009984 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	89fb      	ldrh	r3, [r7, #14]
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	33e0      	adds	r3, #224	; 0xe0
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	440b      	add	r3, r1
 8009982:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009984:	89fb      	ldrh	r3, [r7, #14]
 8009986:	b2db      	uxtb	r3, r3
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	2b0a      	cmp	r3, #10
 80099a0:	d80d      	bhi.n	80099be <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	33e0      	adds	r3, #224	; 0xe0
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	78fb      	ldrb	r3, [r7, #3]
 80099b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	33e0      	adds	r3, #224	; 0xe0
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	440b      	add	r3, r1
 80099bc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
 80099dc:	e00f      	b.n	80099fe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	33e0      	adds	r3, #224	; 0xe0
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	e007      	b.n	8009a08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	3301      	adds	r3, #1
 80099fc:	73fb      	strb	r3, [r7, #15]
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	2b0a      	cmp	r3, #10
 8009a02:	d9ec      	bls.n	80099de <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	4a08      	ldr	r2, [pc, #32]	; (8009a44 <disk_status+0x30>)
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	79fa      	ldrb	r2, [r7, #7]
 8009a2c:	4905      	ldr	r1, [pc, #20]	; (8009a44 <disk_status+0x30>)
 8009a2e:	440a      	add	r2, r1
 8009a30:	7a12      	ldrb	r2, [r2, #8]
 8009a32:	4610      	mov	r0, r2
 8009a34:	4798      	blx	r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000544 	.word	0x20000544

08009a48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	4a0d      	ldr	r2, [pc, #52]	; (8009a90 <disk_initialize+0x48>)
 8009a5a:	5cd3      	ldrb	r3, [r2, r3]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d111      	bne.n	8009a84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	4a0b      	ldr	r2, [pc, #44]	; (8009a90 <disk_initialize+0x48>)
 8009a64:	2101      	movs	r1, #1
 8009a66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <disk_initialize+0x48>)
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	79fa      	ldrb	r2, [r7, #7]
 8009a76:	4906      	ldr	r1, [pc, #24]	; (8009a90 <disk_initialize+0x48>)
 8009a78:	440a      	add	r2, r1
 8009a7a:	7a12      	ldrb	r2, [r2, #8]
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4798      	blx	r3
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000544 	.word	0x20000544

08009a94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <disk_read+0x3c>)
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	689c      	ldr	r4, [r3, #8]
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	4a07      	ldr	r2, [pc, #28]	; (8009ad0 <disk_read+0x3c>)
 8009ab4:	4413      	add	r3, r2
 8009ab6:	7a18      	ldrb	r0, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	68b9      	ldr	r1, [r7, #8]
 8009abe:	47a0      	blx	r4
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd90      	pop	{r4, r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000544 	.word	0x20000544

08009ad4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	603b      	str	r3, [r7, #0]
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	4a0a      	ldr	r2, [pc, #40]	; (8009b10 <disk_write+0x3c>)
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68dc      	ldr	r4, [r3, #12]
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	4a07      	ldr	r2, [pc, #28]	; (8009b10 <disk_write+0x3c>)
 8009af4:	4413      	add	r3, r2
 8009af6:	7a18      	ldrb	r0, [r3, #8]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	47a0      	blx	r4
 8009b00:	4603      	mov	r3, r0
 8009b02:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd90      	pop	{r4, r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000544 	.word	0x20000544

08009b14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	603a      	str	r2, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
 8009b20:	460b      	mov	r3, r1
 8009b22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	4a09      	ldr	r2, [pc, #36]	; (8009b4c <disk_ioctl+0x38>)
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	79fa      	ldrb	r2, [r7, #7]
 8009b32:	4906      	ldr	r1, [pc, #24]	; (8009b4c <disk_ioctl+0x38>)
 8009b34:	440a      	add	r2, r1
 8009b36:	7a10      	ldrb	r0, [r2, #8]
 8009b38:	79b9      	ldrb	r1, [r7, #6]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	4798      	blx	r3
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
  return res;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000544 	.word	0x20000544

08009b50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009b60:	89fb      	ldrh	r3, [r7, #14]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	b21a      	sxth	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b21b      	sxth	r3, r3
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	b21b      	sxth	r3, r3
 8009b70:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009b72:	89fb      	ldrh	r3, [r7, #14]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3303      	adds	r3, #3
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	3202      	adds	r2, #2
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	3201      	adds	r2, #1
 8009ba6:	7812      	ldrb	r2, [r2, #0]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7812      	ldrb	r2, [r2, #0]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]
	return rv;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	887a      	ldrh	r2, [r7, #2]
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	701a      	strb	r2, [r3, #0]
 8009bde:	887b      	ldrh	r3, [r7, #2]
 8009be0:	0a1b      	lsrs	r3, r3, #8
 8009be2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	887a      	ldrh	r2, [r7, #2]
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	701a      	strb	r2, [r3, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	0a1b      	lsrs	r3, r3, #8
 8009c16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	b2d2      	uxtb	r2, r2
 8009c22:	701a      	strb	r2, [r3, #0]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	0a1b      	lsrs	r3, r3, #8
 8009c28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	b2d2      	uxtb	r2, r2
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	0a1b      	lsrs	r3, r3, #8
 8009c3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	607a      	str	r2, [r7, #4]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	b2d2      	uxtb	r2, r2
 8009c46:	701a      	strb	r2, [r3, #0]
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00d      	beq.n	8009c8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	1c53      	adds	r3, r2, #1
 8009c72:	613b      	str	r3, [r7, #16]
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	1c59      	adds	r1, r3, #1
 8009c78:	6179      	str	r1, [r7, #20]
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3b01      	subs	r3, #1
 8009c82:	607b      	str	r3, [r7, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f1      	bne.n	8009c6e <mem_cpy+0x1a>
	}
}
 8009c8a:	bf00      	nop
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c96:	b480      	push	{r7}
 8009c98:	b087      	sub	sp, #28
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	617a      	str	r2, [r7, #20]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	607b      	str	r3, [r7, #4]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f3      	bne.n	8009ca6 <mem_set+0x10>
}
 8009cbe:	bf00      	nop
 8009cc0:	371c      	adds	r7, #28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009cca:	b480      	push	{r7}
 8009ccc:	b089      	sub	sp, #36	; 0x24
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	61fb      	str	r3, [r7, #28]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	61fa      	str	r2, [r7, #28]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	4619      	mov	r1, r3
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	61ba      	str	r2, [r7, #24]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	1acb      	subs	r3, r1, r3
 8009cf6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	607b      	str	r3, [r7, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <mem_cmp+0x40>
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0eb      	beq.n	8009ce2 <mem_cmp+0x18>

	return r;
 8009d0a:	697b      	ldr	r3, [r7, #20]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3724      	adds	r7, #36	; 0x24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d22:	e002      	b.n	8009d2a <chk_chr+0x12>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3301      	adds	r3, #1
 8009d28:	607b      	str	r3, [r7, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d005      	beq.n	8009d3e <chk_chr+0x26>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d1f2      	bne.n	8009d24 <chk_chr+0xc>
	return *str;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	781b      	ldrb	r3, [r3, #0]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
	...

08009d50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60bb      	str	r3, [r7, #8]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	e029      	b.n	8009db8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009d64:	4a27      	ldr	r2, [pc, #156]	; (8009e04 <chk_lock+0xb4>)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	4413      	add	r3, r2
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01d      	beq.n	8009dae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d72:	4a24      	ldr	r2, [pc, #144]	; (8009e04 <chk_lock+0xb4>)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	4413      	add	r3, r2
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d116      	bne.n	8009db2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009d84:	4a1f      	ldr	r2, [pc, #124]	; (8009e04 <chk_lock+0xb4>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d10c      	bne.n	8009db2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d98:	4a1a      	ldr	r2, [pc, #104]	; (8009e04 <chk_lock+0xb4>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	4413      	add	r3, r2
 8009da0:	3308      	adds	r3, #8
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d102      	bne.n	8009db2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009dac:	e007      	b.n	8009dbe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009dae:	2301      	movs	r3, #1
 8009db0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d9d2      	bls.n	8009d64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d109      	bne.n	8009dd8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <chk_lock+0x80>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d101      	bne.n	8009dd4 <chk_lock+0x84>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	e010      	b.n	8009df6 <chk_lock+0xa6>
 8009dd4:	2312      	movs	r3, #18
 8009dd6:	e00e      	b.n	8009df6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d108      	bne.n	8009df0 <chk_lock+0xa0>
 8009dde:	4a09      	ldr	r2, [pc, #36]	; (8009e04 <chk_lock+0xb4>)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	4413      	add	r3, r2
 8009de6:	330c      	adds	r3, #12
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dee:	d101      	bne.n	8009df4 <chk_lock+0xa4>
 8009df0:	2310      	movs	r3, #16
 8009df2:	e000      	b.n	8009df6 <chk_lock+0xa6>
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	20000524 	.word	0x20000524

08009e08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	e002      	b.n	8009e1a <enq_lock+0x12>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3301      	adds	r3, #1
 8009e18:	607b      	str	r3, [r7, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d806      	bhi.n	8009e2e <enq_lock+0x26>
 8009e20:	4a09      	ldr	r2, [pc, #36]	; (8009e48 <enq_lock+0x40>)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	4413      	add	r3, r2
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1f2      	bne.n	8009e14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	bf14      	ite	ne
 8009e34:	2301      	movne	r3, #1
 8009e36:	2300      	moveq	r3, #0
 8009e38:	b2db      	uxtb	r3, r3
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000524 	.word	0x20000524

08009e4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	e01f      	b.n	8009e9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009e5c:	4a41      	ldr	r2, [pc, #260]	; (8009f64 <inc_lock+0x118>)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	011b      	lsls	r3, r3, #4
 8009e62:	4413      	add	r3, r2
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d113      	bne.n	8009e96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009e6e:	4a3d      	ldr	r2, [pc, #244]	; (8009f64 <inc_lock+0x118>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	4413      	add	r3, r2
 8009e76:	3304      	adds	r3, #4
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d109      	bne.n	8009e96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009e82:	4a38      	ldr	r2, [pc, #224]	; (8009f64 <inc_lock+0x118>)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	4413      	add	r3, r2
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d006      	beq.n	8009ea4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d9dc      	bls.n	8009e5c <inc_lock+0x10>
 8009ea2:	e000      	b.n	8009ea6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009ea4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d132      	bne.n	8009f12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e002      	b.n	8009eb8 <inc_lock+0x6c>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d806      	bhi.n	8009ecc <inc_lock+0x80>
 8009ebe:	4a29      	ldr	r2, [pc, #164]	; (8009f64 <inc_lock+0x118>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	4413      	add	r3, r2
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f2      	bne.n	8009eb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d101      	bne.n	8009ed6 <inc_lock+0x8a>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e040      	b.n	8009f58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	4922      	ldr	r1, [pc, #136]	; (8009f64 <inc_lock+0x118>)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	440b      	add	r3, r1
 8009ee2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	491e      	ldr	r1, [pc, #120]	; (8009f64 <inc_lock+0x118>)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	440b      	add	r3, r1
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	695a      	ldr	r2, [r3, #20]
 8009ef8:	491a      	ldr	r1, [pc, #104]	; (8009f64 <inc_lock+0x118>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	440b      	add	r3, r1
 8009f00:	3308      	adds	r3, #8
 8009f02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009f04:	4a17      	ldr	r2, [pc, #92]	; (8009f64 <inc_lock+0x118>)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	4413      	add	r3, r2
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	2200      	movs	r2, #0
 8009f10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <inc_lock+0xe0>
 8009f18:	4a12      	ldr	r2, [pc, #72]	; (8009f64 <inc_lock+0x118>)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	4413      	add	r3, r2
 8009f20:	330c      	adds	r3, #12
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <inc_lock+0xe0>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	e015      	b.n	8009f58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d108      	bne.n	8009f44 <inc_lock+0xf8>
 8009f32:	4a0c      	ldr	r2, [pc, #48]	; (8009f64 <inc_lock+0x118>)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	4413      	add	r3, r2
 8009f3a:	330c      	adds	r3, #12
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	e001      	b.n	8009f48 <inc_lock+0xfc>
 8009f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f48:	4906      	ldr	r1, [pc, #24]	; (8009f64 <inc_lock+0x118>)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	011b      	lsls	r3, r3, #4
 8009f4e:	440b      	add	r3, r1
 8009f50:	330c      	adds	r3, #12
 8009f52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	20000524 	.word	0x20000524

08009f68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	607b      	str	r3, [r7, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d825      	bhi.n	8009fc8 <dec_lock+0x60>
		n = Files[i].ctr;
 8009f7c:	4a17      	ldr	r2, [pc, #92]	; (8009fdc <dec_lock+0x74>)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	011b      	lsls	r3, r3, #4
 8009f82:	4413      	add	r3, r2
 8009f84:	330c      	adds	r3, #12
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009f8a:	89fb      	ldrh	r3, [r7, #14]
 8009f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f90:	d101      	bne.n	8009f96 <dec_lock+0x2e>
 8009f92:	2300      	movs	r3, #0
 8009f94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009f96:	89fb      	ldrh	r3, [r7, #14]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <dec_lock+0x3a>
 8009f9c:	89fb      	ldrh	r3, [r7, #14]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009fa2:	4a0e      	ldr	r2, [pc, #56]	; (8009fdc <dec_lock+0x74>)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	4413      	add	r3, r2
 8009faa:	330c      	adds	r3, #12
 8009fac:	89fa      	ldrh	r2, [r7, #14]
 8009fae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009fb0:	89fb      	ldrh	r3, [r7, #14]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d105      	bne.n	8009fc2 <dec_lock+0x5a>
 8009fb6:	4a09      	ldr	r2, [pc, #36]	; (8009fdc <dec_lock+0x74>)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	4413      	add	r3, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	737b      	strb	r3, [r7, #13]
 8009fc6:	e001      	b.n	8009fcc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009fc8:	2302      	movs	r3, #2
 8009fca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009fcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	20000524 	.word	0x20000524

08009fe0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	e010      	b.n	800a010 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009fee:	4a0d      	ldr	r2, [pc, #52]	; (800a024 <clear_lock+0x44>)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	011b      	lsls	r3, r3, #4
 8009ff4:	4413      	add	r3, r2
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d105      	bne.n	800a00a <clear_lock+0x2a>
 8009ffe:	4a09      	ldr	r2, [pc, #36]	; (800a024 <clear_lock+0x44>)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	4413      	add	r3, r2
 800a006:	2200      	movs	r2, #0
 800a008:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d9eb      	bls.n	8009fee <clear_lock+0xe>
	}
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20000524 	.word	0x20000524

0800a028 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	78db      	ldrb	r3, [r3, #3]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d034      	beq.n	800a0a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	7858      	ldrb	r0, [r3, #1]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a04c:	2301      	movs	r3, #1
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	f7ff fd40 	bl	8009ad4 <disk_write>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	73fb      	strb	r3, [r7, #15]
 800a05e:	e022      	b.n	800a0a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	1ad2      	subs	r2, r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	429a      	cmp	r2, r3
 800a074:	d217      	bcs.n	800a0a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	789b      	ldrb	r3, [r3, #2]
 800a07a:	613b      	str	r3, [r7, #16]
 800a07c:	e010      	b.n	800a0a0 <sync_window+0x78>
					wsect += fs->fsize;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4413      	add	r3, r2
 800a086:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	7858      	ldrb	r0, [r3, #1]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a092:	2301      	movs	r3, #1
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	f7ff fd1d 	bl	8009ad4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d8eb      	bhi.n	800a07e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d01b      	beq.n	800a100 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff ffad 	bl	800a028 <sync_window>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d113      	bne.n	800a100 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7858      	ldrb	r0, [r3, #1]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	f7ff fcd5 	bl	8009a94 <disk_read>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff ff87 	bl	800a028 <sync_window>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d158      	bne.n	800a1d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d148      	bne.n	800a1be <sync_fs+0xb2>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	791b      	ldrb	r3, [r3, #4]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d144      	bne.n	800a1be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3330      	adds	r3, #48	; 0x30
 800a138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a13c:	2100      	movs	r1, #0
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff fda9 	bl	8009c96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3330      	adds	r3, #48	; 0x30
 800a148:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a14c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff fd38 	bl	8009bc6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3330      	adds	r3, #48	; 0x30
 800a15a:	4921      	ldr	r1, [pc, #132]	; (800a1e0 <sync_fs+0xd4>)
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff fd4d 	bl	8009bfc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3330      	adds	r3, #48	; 0x30
 800a166:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a16a:	491e      	ldr	r1, [pc, #120]	; (800a1e4 <sync_fs+0xd8>)
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff fd45 	bl	8009bfc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3330      	adds	r3, #48	; 0x30
 800a176:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f7ff fd3b 	bl	8009bfc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3330      	adds	r3, #48	; 0x30
 800a18a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7ff fd31 	bl	8009bfc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7858      	ldrb	r0, [r3, #1]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f7ff fc8e 	bl	8009ad4 <disk_write>
			fs->fsi_flag = 0;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	785b      	ldrb	r3, [r3, #1]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fca4 	bl	8009b14 <disk_ioctl>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <sync_fs+0xca>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	41615252 	.word	0x41615252
 800a1e4:	61417272 	.word	0x61417272

0800a1e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	3b02      	subs	r3, #2
 800a1f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	3b02      	subs	r3, #2
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d301      	bcc.n	800a208 <clust2sect+0x20>
 800a204:	2300      	movs	r3, #0
 800a206:	e008      	b.n	800a21a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	895b      	ldrh	r3, [r3, #10]
 800a20c:	461a      	mov	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	fb03 f202 	mul.w	r2, r3, r2
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	4413      	add	r3, r2
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b086      	sub	sp, #24
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d904      	bls.n	800a246 <get_fat+0x20>
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	429a      	cmp	r2, r3
 800a244:	d302      	bcc.n	800a24c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a246:	2301      	movs	r3, #1
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e08c      	b.n	800a366 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a24c:	f04f 33ff 	mov.w	r3, #4294967295
 800a250:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d045      	beq.n	800a2e6 <get_fat+0xc0>
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d05d      	beq.n	800a31a <get_fat+0xf4>
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d177      	bne.n	800a352 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	085b      	lsrs	r3, r3, #1
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4413      	add	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6a1a      	ldr	r2, [r3, #32]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	0a5b      	lsrs	r3, r3, #9
 800a278:	4413      	add	r3, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	6938      	ldr	r0, [r7, #16]
 800a27e:	f7ff ff17 	bl	800a0b0 <move_window>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d167      	bne.n	800a358 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	60fa      	str	r2, [r7, #12]
 800a28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	4413      	add	r3, r2
 800a296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a29a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	6a1a      	ldr	r2, [r3, #32]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	0a5b      	lsrs	r3, r3, #9
 800a2a4:	4413      	add	r3, r2
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6938      	ldr	r0, [r7, #16]
 800a2aa:	f7ff ff01 	bl	800a0b0 <move_window>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d153      	bne.n	800a35c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d002      	beq.n	800a2dc <get_fat+0xb6>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	091b      	lsrs	r3, r3, #4
 800a2da:	e002      	b.n	800a2e2 <get_fat+0xbc>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2e2:	617b      	str	r3, [r7, #20]
			break;
 800a2e4:	e03f      	b.n	800a366 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	6a1a      	ldr	r2, [r3, #32]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	4413      	add	r3, r2
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6938      	ldr	r0, [r7, #16]
 800a2f4:	f7ff fedc 	bl	800a0b0 <move_window>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d130      	bne.n	800a360 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a30c:	4413      	add	r3, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff fc1e 	bl	8009b50 <ld_word>
 800a314:	4603      	mov	r3, r0
 800a316:	617b      	str	r3, [r7, #20]
			break;
 800a318:	e025      	b.n	800a366 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6a1a      	ldr	r2, [r3, #32]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	09db      	lsrs	r3, r3, #7
 800a322:	4413      	add	r3, r2
 800a324:	4619      	mov	r1, r3
 800a326:	6938      	ldr	r0, [r7, #16]
 800a328:	f7ff fec2 	bl	800a0b0 <move_window>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d118      	bne.n	800a364 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a340:	4413      	add	r3, r2
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fc1c 	bl	8009b80 <ld_dword>
 800a348:	4603      	mov	r3, r0
 800a34a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a34e:	617b      	str	r3, [r7, #20]
			break;
 800a350:	e009      	b.n	800a366 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a352:	2301      	movs	r3, #1
 800a354:	617b      	str	r3, [r7, #20]
 800a356:	e006      	b.n	800a366 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a358:	bf00      	nop
 800a35a:	e004      	b.n	800a366 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a35c:	bf00      	nop
 800a35e:	e002      	b.n	800a366 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a360:	bf00      	nop
 800a362:	e000      	b.n	800a366 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a364:	bf00      	nop
		}
	}

	return val;
 800a366:	697b      	ldr	r3, [r7, #20]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b089      	sub	sp, #36	; 0x24
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a37c:	2302      	movs	r3, #2
 800a37e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b01      	cmp	r3, #1
 800a384:	f240 80d6 	bls.w	800a534 <put_fat+0x1c4>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	429a      	cmp	r2, r3
 800a390:	f080 80d0 	bcs.w	800a534 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d073      	beq.n	800a484 <put_fat+0x114>
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	f000 8091 	beq.w	800a4c4 <put_fat+0x154>
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	f040 80c6 	bne.w	800a534 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	61bb      	str	r3, [r7, #24]
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	085b      	lsrs	r3, r3, #1
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6a1a      	ldr	r2, [r3, #32]
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	0a5b      	lsrs	r3, r3, #9
 800a3be:	4413      	add	r3, r2
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7ff fe74 	bl	800a0b0 <move_window>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3cc:	7ffb      	ldrb	r3, [r7, #31]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f040 80a9 	bne.w	800a526 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	1c59      	adds	r1, r3, #1
 800a3de:	61b9      	str	r1, [r7, #24]
 800a3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e4:	4413      	add	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00d      	beq.n	800a40e <put_fat+0x9e>
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b25b      	sxtb	r3, r3
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	b25a      	sxtb	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	b25b      	sxtb	r3, r3
 800a406:	4313      	orrs	r3, r2
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	e001      	b.n	800a412 <put_fat+0xa2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6a1a      	ldr	r2, [r3, #32]
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	0a5b      	lsrs	r3, r3, #9
 800a424:	4413      	add	r3, r2
 800a426:	4619      	mov	r1, r3
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7ff fe41 	bl	800a0b0 <move_window>
 800a42e:	4603      	mov	r3, r0
 800a430:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a432:	7ffb      	ldrb	r3, [r7, #31]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d178      	bne.n	800a52a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a444:	4413      	add	r3, r2
 800a446:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <put_fat+0xea>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	091b      	lsrs	r3, r3, #4
 800a456:	b2db      	uxtb	r3, r3
 800a458:	e00e      	b.n	800a478 <put_fat+0x108>
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	b25b      	sxtb	r3, r3
 800a460:	f023 030f 	bic.w	r3, r3, #15
 800a464:	b25a      	sxtb	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	0a1b      	lsrs	r3, r3, #8
 800a46a:	b25b      	sxtb	r3, r3
 800a46c:	f003 030f 	and.w	r3, r3, #15
 800a470:	b25b      	sxtb	r3, r3
 800a472:	4313      	orrs	r3, r2
 800a474:	b25b      	sxtb	r3, r3
 800a476:	b2db      	uxtb	r3, r3
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	70da      	strb	r2, [r3, #3]
			break;
 800a482:	e057      	b.n	800a534 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a1a      	ldr	r2, [r3, #32]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	0a1b      	lsrs	r3, r3, #8
 800a48c:	4413      	add	r3, r2
 800a48e:	4619      	mov	r1, r3
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7ff fe0d 	bl	800a0b0 <move_window>
 800a496:	4603      	mov	r3, r0
 800a498:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a49a:	7ffb      	ldrb	r3, [r7, #31]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d146      	bne.n	800a52e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a4ae:	4413      	add	r3, r2
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	b292      	uxth	r2, r2
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fb85 	bl	8009bc6 <st_word>
			fs->wflag = 1;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	70da      	strb	r2, [r3, #3]
			break;
 800a4c2:	e037      	b.n	800a534 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	09db      	lsrs	r3, r3, #7
 800a4cc:	4413      	add	r3, r2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fded 	bl	800a0b0 <move_window>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4da:	7ffb      	ldrb	r3, [r7, #31]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d128      	bne.n	800a532 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a4f4:	4413      	add	r3, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fb42 	bl	8009b80 <ld_dword>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a502:	4323      	orrs	r3, r4
 800a504:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a514:	4413      	add	r3, r2
 800a516:	6879      	ldr	r1, [r7, #4]
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff fb6f 	bl	8009bfc <st_dword>
			fs->wflag = 1;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2201      	movs	r2, #1
 800a522:	70da      	strb	r2, [r3, #3]
			break;
 800a524:	e006      	b.n	800a534 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a526:	bf00      	nop
 800a528:	e004      	b.n	800a534 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a52a:	bf00      	nop
 800a52c:	e002      	b.n	800a534 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a52e:	bf00      	nop
 800a530:	e000      	b.n	800a534 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a532:	bf00      	nop
		}
	}
	return res;
 800a534:	7ffb      	ldrb	r3, [r7, #31]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3724      	adds	r7, #36	; 0x24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd90      	pop	{r4, r7, pc}

0800a53e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b088      	sub	sp, #32
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d904      	bls.n	800a564 <remove_chain+0x26>
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	429a      	cmp	r2, r3
 800a562:	d301      	bcc.n	800a568 <remove_chain+0x2a>
 800a564:	2302      	movs	r3, #2
 800a566:	e04b      	b.n	800a600 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00c      	beq.n	800a588 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	69b8      	ldr	r0, [r7, #24]
 800a576:	f7ff fefb 	bl	800a370 <put_fat>
 800a57a:	4603      	mov	r3, r0
 800a57c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a57e:	7ffb      	ldrb	r3, [r7, #31]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <remove_chain+0x4a>
 800a584:	7ffb      	ldrb	r3, [r7, #31]
 800a586:	e03b      	b.n	800a600 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a588:	68b9      	ldr	r1, [r7, #8]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f7ff fe4b 	bl	800a226 <get_fat>
 800a590:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d031      	beq.n	800a5fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d101      	bne.n	800a5a2 <remove_chain+0x64>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	e02e      	b.n	800a600 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a8:	d101      	bne.n	800a5ae <remove_chain+0x70>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e028      	b.n	800a600 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	69b8      	ldr	r0, [r7, #24]
 800a5b4:	f7ff fedc 	bl	800a370 <put_fat>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a5bc:	7ffb      	ldrb	r3, [r7, #31]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <remove_chain+0x88>
 800a5c2:	7ffb      	ldrb	r3, [r7, #31]
 800a5c4:	e01c      	b.n	800a600 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	691a      	ldr	r2, [r3, #16]
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	3b02      	subs	r3, #2
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d20b      	bcs.n	800a5ec <remove_chain+0xae>
			fs->free_clst++;
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	791b      	ldrb	r3, [r3, #4]
 800a5e2:	f043 0301 	orr.w	r3, r3, #1
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d3c6      	bcc.n	800a588 <remove_chain+0x4a>
 800a5fa:	e000      	b.n	800a5fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a5fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3720      	adds	r7, #32
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10d      	bne.n	800a63a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d004      	beq.n	800a634 <create_chain+0x2c>
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	429a      	cmp	r2, r3
 800a632:	d31b      	bcc.n	800a66c <create_chain+0x64>
 800a634:	2301      	movs	r3, #1
 800a636:	61bb      	str	r3, [r7, #24]
 800a638:	e018      	b.n	800a66c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff fdf2 	bl	800a226 <get_fat>
 800a642:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d801      	bhi.n	800a64e <create_chain+0x46>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e070      	b.n	800a730 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a654:	d101      	bne.n	800a65a <create_chain+0x52>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	e06a      	b.n	800a730 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	429a      	cmp	r2, r3
 800a662:	d201      	bcs.n	800a668 <create_chain+0x60>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	e063      	b.n	800a730 <create_chain+0x128>
		scl = clst;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	3301      	adds	r3, #1
 800a674:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	69fa      	ldr	r2, [r7, #28]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d307      	bcc.n	800a690 <create_chain+0x88>
				ncl = 2;
 800a680:	2302      	movs	r3, #2
 800a682:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d901      	bls.n	800a690 <create_chain+0x88>
 800a68c:	2300      	movs	r3, #0
 800a68e:	e04f      	b.n	800a730 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a690:	69f9      	ldr	r1, [r7, #28]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff fdc7 	bl	800a226 <get_fat>
 800a698:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00e      	beq.n	800a6be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d003      	beq.n	800a6ae <create_chain+0xa6>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d101      	bne.n	800a6b2 <create_chain+0xaa>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	e03e      	b.n	800a730 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d1da      	bne.n	800a670 <create_chain+0x68>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e038      	b.n	800a730 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a6be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c4:	69f9      	ldr	r1, [r7, #28]
 800a6c6:	6938      	ldr	r0, [r7, #16]
 800a6c8:	f7ff fe52 	bl	800a370 <put_fat>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d109      	bne.n	800a6ea <create_chain+0xe2>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d006      	beq.n	800a6ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6938      	ldr	r0, [r7, #16]
 800a6e2:	f7ff fe45 	bl	800a370 <put_fat>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d116      	bne.n	800a71e <create_chain+0x116>
		fs->last_clst = ncl;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	69fa      	ldr	r2, [r7, #28]
 800a6f4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	691a      	ldr	r2, [r3, #16]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	3b02      	subs	r3, #2
 800a700:	429a      	cmp	r2, r3
 800a702:	d804      	bhi.n	800a70e <create_chain+0x106>
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	1e5a      	subs	r2, r3, #1
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	791b      	ldrb	r3, [r3, #4]
 800a712:	f043 0301 	orr.w	r3, r3, #1
 800a716:	b2da      	uxtb	r2, r3
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	711a      	strb	r2, [r3, #4]
 800a71c:	e007      	b.n	800a72e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d102      	bne.n	800a72a <create_chain+0x122>
 800a724:	f04f 33ff 	mov.w	r3, #4294967295
 800a728:	e000      	b.n	800a72c <create_chain+0x124>
 800a72a:	2301      	movs	r3, #1
 800a72c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a72e:	69fb      	ldr	r3, [r7, #28]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3720      	adds	r7, #32
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	3304      	adds	r3, #4
 800a74e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	0a5b      	lsrs	r3, r3, #9
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	8952      	ldrh	r2, [r2, #10]
 800a758:	fbb3 f3f2 	udiv	r3, r3, r2
 800a75c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	1d1a      	adds	r2, r3, #4
 800a762:	613a      	str	r2, [r7, #16]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <clmt_clust+0x3a>
 800a76e:	2300      	movs	r3, #0
 800a770:	e010      	b.n	800a794 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	429a      	cmp	r2, r3
 800a778:	d307      	bcc.n	800a78a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	3304      	adds	r3, #4
 800a786:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a788:	e7e9      	b.n	800a75e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a78a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	4413      	add	r3, r2
}
 800a794:	4618      	mov	r0, r3
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7b6:	d204      	bcs.n	800a7c2 <dir_sdi+0x22>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f003 031f 	and.w	r3, r3, #31
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e063      	b.n	800a88e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d106      	bne.n	800a7e6 <dir_sdi+0x46>
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d902      	bls.n	800a7e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10c      	bne.n	800a806 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	095b      	lsrs	r3, r3, #5
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	8912      	ldrh	r2, [r2, #8]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d301      	bcc.n	800a7fc <dir_sdi+0x5c>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e048      	b.n	800a88e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	61da      	str	r2, [r3, #28]
 800a804:	e029      	b.n	800a85a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	895b      	ldrh	r3, [r3, #10]
 800a80a:	025b      	lsls	r3, r3, #9
 800a80c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a80e:	e019      	b.n	800a844 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6979      	ldr	r1, [r7, #20]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fd06 	bl	800a226 <get_fat>
 800a81a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a822:	d101      	bne.n	800a828 <dir_sdi+0x88>
 800a824:	2301      	movs	r3, #1
 800a826:	e032      	b.n	800a88e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d904      	bls.n	800a838 <dir_sdi+0x98>
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	429a      	cmp	r2, r3
 800a836:	d301      	bcc.n	800a83c <dir_sdi+0x9c>
 800a838:	2302      	movs	r3, #2
 800a83a:	e028      	b.n	800a88e <dir_sdi+0xee>
			ofs -= csz;
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d2e1      	bcs.n	800a810 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a84c:	6979      	ldr	r1, [r7, #20]
 800a84e:	6938      	ldr	r0, [r7, #16]
 800a850:	f7ff fcca 	bl	800a1e8 <clust2sect>
 800a854:	4602      	mov	r2, r0
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d101      	bne.n	800a86c <dir_sdi+0xcc>
 800a868:	2302      	movs	r3, #2
 800a86a:	e010      	b.n	800a88e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	69da      	ldr	r2, [r3, #28]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	0a5b      	lsrs	r3, r3, #9
 800a874:	441a      	add	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a886:	441a      	add	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b086      	sub	sp, #24
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	3320      	adds	r3, #32
 800a8ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <dir_next+0x28>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8bc:	d301      	bcc.n	800a8c2 <dir_next+0x2c>
 800a8be:	2304      	movs	r3, #4
 800a8c0:	e0aa      	b.n	800aa18 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f040 8098 	bne.w	800a9fe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10b      	bne.n	800a8f8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	095b      	lsrs	r3, r3, #5
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	8912      	ldrh	r2, [r2, #8]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	f0c0 8088 	bcc.w	800a9fe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	61da      	str	r2, [r3, #28]
 800a8f4:	2304      	movs	r3, #4
 800a8f6:	e08f      	b.n	800aa18 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	0a5b      	lsrs	r3, r3, #9
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	8952      	ldrh	r2, [r2, #10]
 800a900:	3a01      	subs	r2, #1
 800a902:	4013      	ands	r3, r2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d17a      	bne.n	800a9fe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	4619      	mov	r1, r3
 800a910:	4610      	mov	r0, r2
 800a912:	f7ff fc88 	bl	800a226 <get_fat>
 800a916:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d801      	bhi.n	800a922 <dir_next+0x8c>
 800a91e:	2302      	movs	r3, #2
 800a920:	e07a      	b.n	800aa18 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d101      	bne.n	800a92e <dir_next+0x98>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e074      	b.n	800aa18 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	429a      	cmp	r2, r3
 800a936:	d358      	bcc.n	800a9ea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d104      	bne.n	800a948 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	61da      	str	r2, [r3, #28]
 800a944:	2304      	movs	r3, #4
 800a946:	e067      	b.n	800aa18 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f7ff fe59 	bl	800a608 <create_chain>
 800a956:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <dir_next+0xcc>
 800a95e:	2307      	movs	r3, #7
 800a960:	e05a      	b.n	800aa18 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d101      	bne.n	800a96c <dir_next+0xd6>
 800a968:	2302      	movs	r3, #2
 800a96a:	e055      	b.n	800aa18 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a972:	d101      	bne.n	800a978 <dir_next+0xe2>
 800a974:	2301      	movs	r3, #1
 800a976:	e04f      	b.n	800aa18 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff fb55 	bl	800a028 <sync_window>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <dir_next+0xf2>
 800a984:	2301      	movs	r3, #1
 800a986:	e047      	b.n	800aa18 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	3330      	adds	r3, #48	; 0x30
 800a98c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff f97f 	bl	8009c96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a998:	2300      	movs	r3, #0
 800a99a:	613b      	str	r3, [r7, #16]
 800a99c:	6979      	ldr	r1, [r7, #20]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7ff fc22 	bl	800a1e8 <clust2sect>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a9aa:	e012      	b.n	800a9d2 <dir_next+0x13c>
						fs->wflag = 1;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff fb38 	bl	800a028 <sync_window>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <dir_next+0x12c>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e02a      	b.n	800aa18 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	613b      	str	r3, [r7, #16]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	895b      	ldrh	r3, [r3, #10]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d3e6      	bcc.n	800a9ac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	1ad2      	subs	r2, r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a9f0:	6979      	ldr	r1, [r7, #20]
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff fbf8 	bl	800a1e8 <clust2sect>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa10:	441a      	add	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa30:	2100      	movs	r1, #0
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff feb4 	bl	800a7a0 <dir_sdi>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d12b      	bne.n	800aa9a <dir_alloc+0x7a>
		n = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f7ff fb2f 	bl	800a0b0 <move_window>
 800aa52:	4603      	mov	r3, r0
 800aa54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d11d      	bne.n	800aa98 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	2be5      	cmp	r3, #229	; 0xe5
 800aa64:	d004      	beq.n	800aa70 <dir_alloc+0x50>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d107      	bne.n	800aa80 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	3301      	adds	r3, #1
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d102      	bne.n	800aa84 <dir_alloc+0x64>
 800aa7e:	e00c      	b.n	800aa9a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa80:	2300      	movs	r3, #0
 800aa82:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa84:	2101      	movs	r1, #1
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ff05 	bl	800a896 <dir_next>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0d7      	beq.n	800aa46 <dir_alloc+0x26>
 800aa96:	e000      	b.n	800aa9a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aa98:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d101      	bne.n	800aaa4 <dir_alloc+0x84>
 800aaa0:	2307      	movs	r3, #7
 800aaa2:	75fb      	strb	r3, [r7, #23]
	return res;
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	331a      	adds	r3, #26
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff f847 	bl	8009b50 <ld_word>
 800aac2:	4603      	mov	r3, r0
 800aac4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d109      	bne.n	800aae2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	3314      	adds	r3, #20
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff f83c 	bl	8009b50 <ld_word>
 800aad8:	4603      	mov	r3, r0
 800aada:	041b      	lsls	r3, r3, #16
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4313      	orrs	r3, r2
 800aae0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aae2:	68fb      	ldr	r3, [r7, #12]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	331a      	adds	r3, #26
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	b292      	uxth	r2, r2
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7ff f85f 	bl	8009bc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d109      	bne.n	800ab24 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	f103 0214 	add.w	r2, r3, #20
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	f7ff f851 	bl	8009bc6 <st_word>
	}
}
 800ab24:	bf00      	nop
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff fe2f 	bl	800a7a0 <dir_sdi>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <dir_find+0x24>
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	e03e      	b.n	800abce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	4619      	mov	r1, r3
 800ab56:	6938      	ldr	r0, [r7, #16]
 800ab58:	f7ff faaa 	bl	800a0b0 <move_window>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d12f      	bne.n	800abc6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d102      	bne.n	800ab7a <dir_find+0x4e>
 800ab74:	2304      	movs	r3, #4
 800ab76:	75fb      	strb	r3, [r7, #23]
 800ab78:	e028      	b.n	800abcc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	330b      	adds	r3, #11
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	330b      	adds	r3, #11
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <dir_find+0x86>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a18      	ldr	r0, [r3, #32]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3324      	adds	r3, #36	; 0x24
 800aba4:	220b      	movs	r2, #11
 800aba6:	4619      	mov	r1, r3
 800aba8:	f7ff f88f 	bl	8009cca <mem_cmp>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00b      	beq.n	800abca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800abb2:	2100      	movs	r1, #0
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff fe6e 	bl	800a896 <dir_next>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800abbe:	7dfb      	ldrb	r3, [r7, #23]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d0c5      	beq.n	800ab50 <dir_find+0x24>
 800abc4:	e002      	b.n	800abcc <dir_find+0xa0>
		if (res != FR_OK) break;
 800abc6:	bf00      	nop
 800abc8:	e000      	b.n	800abcc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800abca:	bf00      	nop

	return res;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800abe4:	2101      	movs	r1, #1
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff ff1a 	bl	800aa20 <dir_alloc>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d11c      	bne.n	800ac30 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	4619      	mov	r1, r3
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f7ff fa57 	bl	800a0b0 <move_window>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d111      	bne.n	800ac30 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	2220      	movs	r2, #32
 800ac12:	2100      	movs	r1, #0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff f83e 	bl	8009c96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a18      	ldr	r0, [r3, #32]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3324      	adds	r3, #36	; 0x24
 800ac22:	220b      	movs	r2, #11
 800ac24:	4619      	mov	r1, r3
 800ac26:	f7ff f815 	bl	8009c54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3324      	adds	r3, #36	; 0x24
 800ac50:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ac52:	220b      	movs	r2, #11
 800ac54:	2120      	movs	r1, #32
 800ac56:	68b8      	ldr	r0, [r7, #8]
 800ac58:	f7ff f81d 	bl	8009c96 <mem_set>
	si = i = 0; ni = 8;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	613b      	str	r3, [r7, #16]
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	2308      	movs	r3, #8
 800ac66:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	617a      	str	r2, [r7, #20]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	4413      	add	r3, r2
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac76:	7ffb      	ldrb	r3, [r7, #31]
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d94e      	bls.n	800ad1a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ac7c:	7ffb      	ldrb	r3, [r7, #31]
 800ac7e:	2b2f      	cmp	r3, #47	; 0x2f
 800ac80:	d006      	beq.n	800ac90 <create_name+0x54>
 800ac82:	7ffb      	ldrb	r3, [r7, #31]
 800ac84:	2b5c      	cmp	r3, #92	; 0x5c
 800ac86:	d110      	bne.n	800acaa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ac88:	e002      	b.n	800ac90 <create_name+0x54>
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	4413      	add	r3, r2
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b2f      	cmp	r3, #47	; 0x2f
 800ac9a:	d0f6      	beq.n	800ac8a <create_name+0x4e>
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	4413      	add	r3, r2
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b5c      	cmp	r3, #92	; 0x5c
 800aca6:	d0f0      	beq.n	800ac8a <create_name+0x4e>
			break;
 800aca8:	e038      	b.n	800ad1c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800acaa:	7ffb      	ldrb	r3, [r7, #31]
 800acac:	2b2e      	cmp	r3, #46	; 0x2e
 800acae:	d003      	beq.n	800acb8 <create_name+0x7c>
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d30c      	bcc.n	800acd2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	2b0b      	cmp	r3, #11
 800acbc:	d002      	beq.n	800acc4 <create_name+0x88>
 800acbe:	7ffb      	ldrb	r3, [r7, #31]
 800acc0:	2b2e      	cmp	r3, #46	; 0x2e
 800acc2:	d001      	beq.n	800acc8 <create_name+0x8c>
 800acc4:	2306      	movs	r3, #6
 800acc6:	e044      	b.n	800ad52 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800acc8:	2308      	movs	r3, #8
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	230b      	movs	r3, #11
 800acce:	61bb      	str	r3, [r7, #24]
			continue;
 800acd0:	e022      	b.n	800ad18 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800acd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	da04      	bge.n	800ace4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800acda:	7ffb      	ldrb	r3, [r7, #31]
 800acdc:	3b80      	subs	r3, #128	; 0x80
 800acde:	4a1f      	ldr	r2, [pc, #124]	; (800ad5c <create_name+0x120>)
 800ace0:	5cd3      	ldrb	r3, [r2, r3]
 800ace2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ace4:	7ffb      	ldrb	r3, [r7, #31]
 800ace6:	4619      	mov	r1, r3
 800ace8:	481d      	ldr	r0, [pc, #116]	; (800ad60 <create_name+0x124>)
 800acea:	f7ff f815 	bl	8009d18 <chk_chr>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <create_name+0xbc>
 800acf4:	2306      	movs	r3, #6
 800acf6:	e02c      	b.n	800ad52 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800acf8:	7ffb      	ldrb	r3, [r7, #31]
 800acfa:	2b60      	cmp	r3, #96	; 0x60
 800acfc:	d905      	bls.n	800ad0a <create_name+0xce>
 800acfe:	7ffb      	ldrb	r3, [r7, #31]
 800ad00:	2b7a      	cmp	r3, #122	; 0x7a
 800ad02:	d802      	bhi.n	800ad0a <create_name+0xce>
 800ad04:	7ffb      	ldrb	r3, [r7, #31]
 800ad06:	3b20      	subs	r3, #32
 800ad08:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	613a      	str	r2, [r7, #16]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	4413      	add	r3, r2
 800ad14:	7ffa      	ldrb	r2, [r7, #31]
 800ad16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ad18:	e7a6      	b.n	800ac68 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad1a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	441a      	add	r2, r3
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <create_name+0xf4>
 800ad2c:	2306      	movs	r3, #6
 800ad2e:	e010      	b.n	800ad52 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2be5      	cmp	r3, #229	; 0xe5
 800ad36:	d102      	bne.n	800ad3e <create_name+0x102>
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2205      	movs	r2, #5
 800ad3c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ad3e:	7ffb      	ldrb	r3, [r7, #31]
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d801      	bhi.n	800ad48 <create_name+0x10c>
 800ad44:	2204      	movs	r2, #4
 800ad46:	e000      	b.n	800ad4a <create_name+0x10e>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	330b      	adds	r3, #11
 800ad4e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ad50:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0800f040 	.word	0x0800f040
 800ad60:	0800ef78 	.word	0x0800ef78

0800ad64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad78:	e002      	b.n	800ad80 <follow_path+0x1c>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	603b      	str	r3, [r7, #0]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b2f      	cmp	r3, #47	; 0x2f
 800ad86:	d0f8      	beq.n	800ad7a <follow_path+0x16>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	2b5c      	cmp	r3, #92	; 0x5c
 800ad8e:	d0f4      	beq.n	800ad7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	2200      	movs	r2, #0
 800ad94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b1f      	cmp	r3, #31
 800ad9c:	d80a      	bhi.n	800adb4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2280      	movs	r2, #128	; 0x80
 800ada2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ada6:	2100      	movs	r1, #0
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff fcf9 	bl	800a7a0 <dir_sdi>
 800adae:	4603      	mov	r3, r0
 800adb0:	75fb      	strb	r3, [r7, #23]
 800adb2:	e043      	b.n	800ae3c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800adb4:	463b      	mov	r3, r7
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff ff3f 	bl	800ac3c <create_name>
 800adbe:	4603      	mov	r3, r0
 800adc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d134      	bne.n	800ae32 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff feaf 	bl	800ab2c <dir_find>
 800adce:	4603      	mov	r3, r0
 800add0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800add8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00a      	beq.n	800adf6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	2b04      	cmp	r3, #4
 800ade4:	d127      	bne.n	800ae36 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ade6:	7afb      	ldrb	r3, [r7, #11]
 800ade8:	f003 0304 	and.w	r3, r3, #4
 800adec:	2b00      	cmp	r3, #0
 800adee:	d122      	bne.n	800ae36 <follow_path+0xd2>
 800adf0:	2305      	movs	r3, #5
 800adf2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800adf4:	e01f      	b.n	800ae36 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adf6:	7afb      	ldrb	r3, [r7, #11]
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d11c      	bne.n	800ae3a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	799b      	ldrb	r3, [r3, #6]
 800ae04:	f003 0310 	and.w	r3, r3, #16
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ae0c:	2305      	movs	r3, #5
 800ae0e:	75fb      	strb	r3, [r7, #23]
 800ae10:	e014      	b.n	800ae3c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae20:	4413      	add	r3, r2
 800ae22:	4619      	mov	r1, r3
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7ff fe42 	bl	800aaae <ld_clust>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae30:	e7c0      	b.n	800adb4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ae32:	bf00      	nop
 800ae34:	e002      	b.n	800ae3c <follow_path+0xd8>
				break;
 800ae36:	bf00      	nop
 800ae38:	e000      	b.n	800ae3c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae3a:	bf00      	nop
			}
		}
	}

	return res;
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b087      	sub	sp, #28
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae52:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d031      	beq.n	800aec0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	617b      	str	r3, [r7, #20]
 800ae62:	e002      	b.n	800ae6a <get_ldnumber+0x24>
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	3301      	adds	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2b20      	cmp	r3, #32
 800ae70:	d903      	bls.n	800ae7a <get_ldnumber+0x34>
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	2b3a      	cmp	r3, #58	; 0x3a
 800ae78:	d1f4      	bne.n	800ae64 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b3a      	cmp	r3, #58	; 0x3a
 800ae80:	d11c      	bne.n	800aebc <get_ldnumber+0x76>
			tp = *path;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	60fa      	str	r2, [r7, #12]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	3b30      	subs	r3, #48	; 0x30
 800ae92:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	2b09      	cmp	r3, #9
 800ae98:	d80e      	bhi.n	800aeb8 <get_ldnumber+0x72>
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d10a      	bne.n	800aeb8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d107      	bne.n	800aeb8 <get_ldnumber+0x72>
					vol = (int)i;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	e002      	b.n	800aec2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aebc:	2300      	movs	r3, #0
 800aebe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aec0:	693b      	ldr	r3, [r7, #16]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
	...

0800aed0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	70da      	strb	r2, [r3, #3]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f04f 32ff 	mov.w	r2, #4294967295
 800aee6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff f8e0 	bl	800a0b0 <move_window>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <check_fs+0x2a>
 800aef6:	2304      	movs	r3, #4
 800aef8:	e038      	b.n	800af6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	3330      	adds	r3, #48	; 0x30
 800aefe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af02:	4618      	mov	r0, r3
 800af04:	f7fe fe24 	bl	8009b50 <ld_word>
 800af08:	4603      	mov	r3, r0
 800af0a:	461a      	mov	r2, r3
 800af0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af10:	429a      	cmp	r2, r3
 800af12:	d001      	beq.n	800af18 <check_fs+0x48>
 800af14:	2303      	movs	r3, #3
 800af16:	e029      	b.n	800af6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af1e:	2be9      	cmp	r3, #233	; 0xe9
 800af20:	d009      	beq.n	800af36 <check_fs+0x66>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af28:	2beb      	cmp	r3, #235	; 0xeb
 800af2a:	d11e      	bne.n	800af6a <check_fs+0x9a>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800af32:	2b90      	cmp	r3, #144	; 0x90
 800af34:	d119      	bne.n	800af6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3330      	adds	r3, #48	; 0x30
 800af3a:	3336      	adds	r3, #54	; 0x36
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fe fe1f 	bl	8009b80 <ld_dword>
 800af42:	4603      	mov	r3, r0
 800af44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af48:	4a0a      	ldr	r2, [pc, #40]	; (800af74 <check_fs+0xa4>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d101      	bne.n	800af52 <check_fs+0x82>
 800af4e:	2300      	movs	r3, #0
 800af50:	e00c      	b.n	800af6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3330      	adds	r3, #48	; 0x30
 800af56:	3352      	adds	r3, #82	; 0x52
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fe11 	bl	8009b80 <ld_dword>
 800af5e:	4602      	mov	r2, r0
 800af60:	4b05      	ldr	r3, [pc, #20]	; (800af78 <check_fs+0xa8>)
 800af62:	429a      	cmp	r2, r3
 800af64:	d101      	bne.n	800af6a <check_fs+0x9a>
 800af66:	2300      	movs	r3, #0
 800af68:	e000      	b.n	800af6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800af6a:	2302      	movs	r3, #2
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	00544146 	.word	0x00544146
 800af78:	33544146 	.word	0x33544146

0800af7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b096      	sub	sp, #88	; 0x58
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	4613      	mov	r3, r2
 800af88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f7ff ff58 	bl	800ae46 <get_ldnumber>
 800af96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	da01      	bge.n	800afa2 <find_volume+0x26>
 800af9e:	230b      	movs	r3, #11
 800afa0:	e22e      	b.n	800b400 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800afa2:	4aa8      	ldr	r2, [pc, #672]	; (800b244 <find_volume+0x2c8>)
 800afa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afaa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <find_volume+0x3a>
 800afb2:	230c      	movs	r3, #12
 800afb4:	e224      	b.n	800b400 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	f023 0301 	bic.w	r3, r3, #1
 800afc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d01a      	beq.n	800b002 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	785b      	ldrb	r3, [r3, #1]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fe fd1f 	bl	8009a14 <disk_status>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10c      	bne.n	800b002 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d007      	beq.n	800affe <find_volume+0x82>
 800afee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800affa:	230a      	movs	r3, #10
 800affc:	e200      	b.n	800b400 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800affe:	2300      	movs	r3, #0
 800b000:	e1fe      	b.n	800b400 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe fd17 	bl	8009a48 <disk_initialize>
 800b01a:	4603      	mov	r3, r0
 800b01c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b02c:	2303      	movs	r3, #3
 800b02e:	e1e7      	b.n	800b400 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <find_volume+0xca>
 800b036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b042:	230a      	movs	r3, #10
 800b044:	e1dc      	b.n	800b400 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b04a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b04c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b04e:	f7ff ff3f 	bl	800aed0 <check_fs>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d14b      	bne.n	800b0f8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b060:	2300      	movs	r3, #0
 800b062:	643b      	str	r3, [r7, #64]	; 0x40
 800b064:	e01f      	b.n	800b0a6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b06e:	011b      	lsls	r3, r3, #4
 800b070:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b074:	4413      	add	r3, r2
 800b076:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	3304      	adds	r3, #4
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d006      	beq.n	800b090 <find_volume+0x114>
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	3308      	adds	r3, #8
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fd7a 	bl	8009b80 <ld_dword>
 800b08c:	4602      	mov	r2, r0
 800b08e:	e000      	b.n	800b092 <find_volume+0x116>
 800b090:	2200      	movs	r2, #0
 800b092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b09a:	440b      	add	r3, r1
 800b09c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d9dc      	bls.n	800b066 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <find_volume+0x140>
 800b0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d005      	beq.n	800b0de <find_volume+0x162>
 800b0d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0d6:	f7ff fefb 	bl	800aed0 <check_fs>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	e000      	b.n	800b0e0 <find_volume+0x164>
 800b0de:	2303      	movs	r3, #3
 800b0e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d905      	bls.n	800b0f8 <find_volume+0x17c>
 800b0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	643b      	str	r3, [r7, #64]	; 0x40
 800b0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d9e1      	bls.n	800b0bc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b0f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d101      	bne.n	800b104 <find_volume+0x188>
 800b100:	2301      	movs	r3, #1
 800b102:	e17d      	b.n	800b400 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d901      	bls.n	800b110 <find_volume+0x194>
 800b10c:	230d      	movs	r3, #13
 800b10e:	e177      	b.n	800b400 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	3330      	adds	r3, #48	; 0x30
 800b114:	330b      	adds	r3, #11
 800b116:	4618      	mov	r0, r3
 800b118:	f7fe fd1a 	bl	8009b50 <ld_word>
 800b11c:	4603      	mov	r3, r0
 800b11e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b122:	d001      	beq.n	800b128 <find_volume+0x1ac>
 800b124:	230d      	movs	r3, #13
 800b126:	e16b      	b.n	800b400 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	3330      	adds	r3, #48	; 0x30
 800b12c:	3316      	adds	r3, #22
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe fd0e 	bl	8009b50 <ld_word>
 800b134:	4603      	mov	r3, r0
 800b136:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <find_volume+0x1d0>
 800b13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b140:	3330      	adds	r3, #48	; 0x30
 800b142:	3324      	adds	r3, #36	; 0x24
 800b144:	4618      	mov	r0, r3
 800b146:	f7fe fd1b 	bl	8009b80 <ld_dword>
 800b14a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b150:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b154:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15e:	789b      	ldrb	r3, [r3, #2]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d005      	beq.n	800b170 <find_volume+0x1f4>
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	789b      	ldrb	r3, [r3, #2]
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d001      	beq.n	800b170 <find_volume+0x1f4>
 800b16c:	230d      	movs	r3, #13
 800b16e:	e147      	b.n	800b400 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	789b      	ldrb	r3, [r3, #2]
 800b174:	461a      	mov	r2, r3
 800b176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b178:	fb02 f303 	mul.w	r3, r2, r3
 800b17c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b184:	b29a      	uxth	r2, r3
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	895b      	ldrh	r3, [r3, #10]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d008      	beq.n	800b1a4 <find_volume+0x228>
 800b192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b194:	895b      	ldrh	r3, [r3, #10]
 800b196:	461a      	mov	r2, r3
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	895b      	ldrh	r3, [r3, #10]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	4013      	ands	r3, r2
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d001      	beq.n	800b1a8 <find_volume+0x22c>
 800b1a4:	230d      	movs	r3, #13
 800b1a6:	e12b      	b.n	800b400 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	3330      	adds	r3, #48	; 0x30
 800b1ac:	3311      	adds	r3, #17
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fcce 	bl	8009b50 <ld_word>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	891b      	ldrh	r3, [r3, #8]
 800b1c0:	f003 030f 	and.w	r3, r3, #15
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <find_volume+0x252>
 800b1ca:	230d      	movs	r3, #13
 800b1cc:	e118      	b.n	800b400 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	3330      	adds	r3, #48	; 0x30
 800b1d2:	3313      	adds	r3, #19
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fcbb 	bl	8009b50 <ld_word>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d106      	bne.n	800b1f2 <find_volume+0x276>
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	3330      	adds	r3, #48	; 0x30
 800b1e8:	3320      	adds	r3, #32
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fcc8 	bl	8009b80 <ld_dword>
 800b1f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	3330      	adds	r3, #48	; 0x30
 800b1f6:	330e      	adds	r3, #14
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe fca9 	bl	8009b50 <ld_word>
 800b1fe:	4603      	mov	r3, r0
 800b200:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <find_volume+0x290>
 800b208:	230d      	movs	r3, #13
 800b20a:	e0f9      	b.n	800b400 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b20c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b210:	4413      	add	r3, r2
 800b212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b214:	8912      	ldrh	r2, [r2, #8]
 800b216:	0912      	lsrs	r2, r2, #4
 800b218:	b292      	uxth	r2, r2
 800b21a:	4413      	add	r3, r2
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	429a      	cmp	r2, r3
 800b224:	d201      	bcs.n	800b22a <find_volume+0x2ae>
 800b226:	230d      	movs	r3, #13
 800b228:	e0ea      	b.n	800b400 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b22a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b232:	8952      	ldrh	r2, [r2, #10]
 800b234:	fbb3 f3f2 	udiv	r3, r3, r2
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d103      	bne.n	800b248 <find_volume+0x2cc>
 800b240:	230d      	movs	r3, #13
 800b242:	e0dd      	b.n	800b400 <find_volume+0x484>
 800b244:	2000051c 	.word	0x2000051c
		fmt = FS_FAT32;
 800b248:	2303      	movs	r3, #3
 800b24a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b254:	4293      	cmp	r3, r2
 800b256:	d802      	bhi.n	800b25e <find_volume+0x2e2>
 800b258:	2302      	movs	r3, #2
 800b25a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b264:	4293      	cmp	r3, r2
 800b266:	d802      	bhi.n	800b26e <find_volume+0x2f2>
 800b268:	2301      	movs	r3, #1
 800b26a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	1c9a      	adds	r2, r3, #2
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b27a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b27c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b280:	441a      	add	r2, r3
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b286:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	441a      	add	r2, r3
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b294:	2b03      	cmp	r3, #3
 800b296:	d11e      	bne.n	800b2d6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	3330      	adds	r3, #48	; 0x30
 800b29c:	332a      	adds	r3, #42	; 0x2a
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe fc56 	bl	8009b50 <ld_word>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <find_volume+0x332>
 800b2aa:	230d      	movs	r3, #13
 800b2ac:	e0a8      	b.n	800b400 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b0:	891b      	ldrh	r3, [r3, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <find_volume+0x33e>
 800b2b6:	230d      	movs	r3, #13
 800b2b8:	e0a2      	b.n	800b400 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2bc:	3330      	adds	r3, #48	; 0x30
 800b2be:	332c      	adds	r3, #44	; 0x2c
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fc5d 	bl	8009b80 <ld_dword>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800b2d4:	e01f      	b.n	800b316 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	891b      	ldrh	r3, [r3, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <find_volume+0x366>
 800b2de:	230d      	movs	r3, #13
 800b2e0:	e08e      	b.n	800b400 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e4:	6a1a      	ldr	r2, [r3, #32]
 800b2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e8:	441a      	add	r2, r3
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b2ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d103      	bne.n	800b2fe <find_volume+0x382>
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	e00a      	b.n	800b314 <find_volume+0x398>
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	695a      	ldr	r2, [r3, #20]
 800b302:	4613      	mov	r3, r2
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	4413      	add	r3, r2
 800b308:	085a      	lsrs	r2, r3, #1
 800b30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b314:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b318:	699a      	ldr	r2, [r3, #24]
 800b31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b31c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b320:	0a5b      	lsrs	r3, r3, #9
 800b322:	429a      	cmp	r2, r3
 800b324:	d201      	bcs.n	800b32a <find_volume+0x3ae>
 800b326:	230d      	movs	r3, #13
 800b328:	e06a      	b.n	800b400 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32c:	f04f 32ff 	mov.w	r2, #4294967295
 800b330:	611a      	str	r2, [r3, #16]
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	691a      	ldr	r2, [r3, #16]
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	2280      	movs	r2, #128	; 0x80
 800b33e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b344:	2b03      	cmp	r3, #3
 800b346:	d149      	bne.n	800b3dc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	3330      	adds	r3, #48	; 0x30
 800b34c:	3330      	adds	r3, #48	; 0x30
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fe fbfe 	bl	8009b50 <ld_word>
 800b354:	4603      	mov	r3, r0
 800b356:	2b01      	cmp	r3, #1
 800b358:	d140      	bne.n	800b3dc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b35c:	3301      	adds	r3, #1
 800b35e:	4619      	mov	r1, r3
 800b360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b362:	f7fe fea5 	bl	800a0b0 <move_window>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d137      	bne.n	800b3dc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	2200      	movs	r2, #0
 800b370:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	3330      	adds	r3, #48	; 0x30
 800b376:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fbe8 	bl	8009b50 <ld_word>
 800b380:	4603      	mov	r3, r0
 800b382:	461a      	mov	r2, r3
 800b384:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b388:	429a      	cmp	r2, r3
 800b38a:	d127      	bne.n	800b3dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	3330      	adds	r3, #48	; 0x30
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe fbf5 	bl	8009b80 <ld_dword>
 800b396:	4602      	mov	r2, r0
 800b398:	4b1b      	ldr	r3, [pc, #108]	; (800b408 <find_volume+0x48c>)
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d11e      	bne.n	800b3dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	3330      	adds	r3, #48	; 0x30
 800b3a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fbea 	bl	8009b80 <ld_dword>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4b17      	ldr	r3, [pc, #92]	; (800b40c <find_volume+0x490>)
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d113      	bne.n	800b3dc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	3330      	adds	r3, #48	; 0x30
 800b3b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fbdf 	bl	8009b80 <ld_dword>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	3330      	adds	r3, #48	; 0x30
 800b3cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fe fbd5 	bl	8009b80 <ld_dword>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3da:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b3e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	; (800b410 <find_volume+0x494>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	4b08      	ldr	r3, [pc, #32]	; (800b410 <find_volume+0x494>)
 800b3ee:	801a      	strh	r2, [r3, #0]
 800b3f0:	4b07      	ldr	r3, [pc, #28]	; (800b410 <find_volume+0x494>)
 800b3f2:	881a      	ldrh	r2, [r3, #0]
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b3f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3fa:	f7fe fdf1 	bl	8009fe0 <clear_lock>
#endif
	return FR_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3758      	adds	r7, #88	; 0x58
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	41615252 	.word	0x41615252
 800b40c:	61417272 	.word	0x61417272
 800b410:	20000520 	.word	0x20000520

0800b414 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b41e:	2309      	movs	r3, #9
 800b420:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d01c      	beq.n	800b462 <validate+0x4e>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d018      	beq.n	800b462 <validate+0x4e>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d013      	beq.n	800b462 <validate+0x4e>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	889a      	ldrh	r2, [r3, #4]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	88db      	ldrh	r3, [r3, #6]
 800b444:	429a      	cmp	r2, r3
 800b446:	d10c      	bne.n	800b462 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	785b      	ldrb	r3, [r3, #1]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe fae0 	bl	8009a14 <disk_status>
 800b454:	4603      	mov	r3, r0
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <validate+0x4e>
			res = FR_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d102      	bne.n	800b46e <validate+0x5a>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	e000      	b.n	800b470 <validate+0x5c>
 800b46e:	2300      	movs	r3, #0
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	6013      	str	r3, [r2, #0]
	return res;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
	...

0800b480 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	4613      	mov	r3, r2
 800b48c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b492:	f107 0310 	add.w	r3, r7, #16
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff fcd5 	bl	800ae46 <get_ldnumber>
 800b49c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	da01      	bge.n	800b4a8 <f_mount+0x28>
 800b4a4:	230b      	movs	r3, #11
 800b4a6:	e02b      	b.n	800b500 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b4a8:	4a17      	ldr	r2, [pc, #92]	; (800b508 <f_mount+0x88>)
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d005      	beq.n	800b4c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b4b8:	69b8      	ldr	r0, [r7, #24]
 800b4ba:	f7fe fd91 	bl	8009fe0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d002      	beq.n	800b4d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	490d      	ldr	r1, [pc, #52]	; (800b508 <f_mount+0x88>)
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <f_mount+0x66>
 800b4e0:	79fb      	ldrb	r3, [r7, #7]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d001      	beq.n	800b4ea <f_mount+0x6a>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e00a      	b.n	800b500 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b4ea:	f107 010c 	add.w	r1, r7, #12
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fd41 	bl	800af7c <find_volume>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	2000051c 	.word	0x2000051c

0800b50c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b098      	sub	sp, #96	; 0x60
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	4613      	mov	r3, r2
 800b518:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <f_open+0x18>
 800b520:	2309      	movs	r3, #9
 800b522:	e1ad      	b.n	800b880 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b52a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b52c:	79fa      	ldrb	r2, [r7, #7]
 800b52e:	f107 0110 	add.w	r1, r7, #16
 800b532:	f107 0308 	add.w	r3, r7, #8
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fd20 	bl	800af7c <find_volume>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b546:	2b00      	cmp	r3, #0
 800b548:	f040 8191 	bne.w	800b86e <f_open+0x362>
		dj.obj.fs = fs;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	f107 0314 	add.w	r3, r7, #20
 800b556:	4611      	mov	r1, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff fc03 	bl	800ad64 <follow_path>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d11a      	bne.n	800b5a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b56c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b570:	b25b      	sxtb	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	da03      	bge.n	800b57e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b576:	2306      	movs	r3, #6
 800b578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b57c:	e011      	b.n	800b5a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	f023 0301 	bic.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	bf14      	ite	ne
 800b588:	2301      	movne	r3, #1
 800b58a:	2300      	moveq	r3, #0
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	461a      	mov	r2, r3
 800b590:	f107 0314 	add.w	r3, r7, #20
 800b594:	4611      	mov	r1, r2
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe fbda 	bl	8009d50 <chk_lock>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	f003 031c 	and.w	r3, r3, #28
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d07f      	beq.n	800b6ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b5ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d017      	beq.n	800b5e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b5b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d10e      	bne.n	800b5da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b5bc:	f7fe fc24 	bl	8009e08 <enq_lock>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d006      	beq.n	800b5d4 <f_open+0xc8>
 800b5c6:	f107 0314 	add.w	r3, r7, #20
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff fb03 	bl	800abd6 <dir_register>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	e000      	b.n	800b5d6 <f_open+0xca>
 800b5d4:	2312      	movs	r3, #18
 800b5d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	f043 0308 	orr.w	r3, r3, #8
 800b5e0:	71fb      	strb	r3, [r7, #7]
 800b5e2:	e010      	b.n	800b606 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b5e4:	7ebb      	ldrb	r3, [r7, #26]
 800b5e6:	f003 0311 	and.w	r3, r3, #17
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d003      	beq.n	800b5f6 <f_open+0xea>
					res = FR_DENIED;
 800b5ee:	2307      	movs	r3, #7
 800b5f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5f4:	e007      	b.n	800b606 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <f_open+0xfa>
 800b600:	2308      	movs	r3, #8
 800b602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d168      	bne.n	800b6e0 <f_open+0x1d4>
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b00      	cmp	r3, #0
 800b616:	d063      	beq.n	800b6e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b618:	f7fb fa04 	bl	8006a24 <get_fattime>
 800b61c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b620:	330e      	adds	r3, #14
 800b622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fae9 	bl	8009bfc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62c:	3316      	adds	r3, #22
 800b62e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b630:	4618      	mov	r0, r3
 800b632:	f7fe fae3 	bl	8009bfc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b638:	330b      	adds	r3, #11
 800b63a:	2220      	movs	r2, #32
 800b63c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b642:	4611      	mov	r1, r2
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff fa32 	bl	800aaae <ld_clust>
 800b64a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b650:	2200      	movs	r2, #0
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff fa4a 	bl	800aaec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65a:	331c      	adds	r3, #28
 800b65c:	2100      	movs	r1, #0
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe facc 	bl	8009bfc <st_dword>
					fs->wflag = 1;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2201      	movs	r2, #1
 800b668:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d037      	beq.n	800b6e0 <f_open+0x1d4>
						dw = fs->winsect;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b674:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b676:	f107 0314 	add.w	r3, r7, #20
 800b67a:	2200      	movs	r2, #0
 800b67c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe ff5d 	bl	800a53e <remove_chain>
 800b684:	4603      	mov	r3, r0
 800b686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b68a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d126      	bne.n	800b6e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe fd0a 	bl	800a0b0 <move_window>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6a6:	3a01      	subs	r2, #1
 800b6a8:	60da      	str	r2, [r3, #12]
 800b6aa:	e019      	b.n	800b6e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d115      	bne.n	800b6e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b6b4:	7ebb      	ldrb	r3, [r7, #26]
 800b6b6:	f003 0310 	and.w	r3, r3, #16
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b6be:	2304      	movs	r3, #4
 800b6c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b6c4:	e00c      	b.n	800b6e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b6c6:	79fb      	ldrb	r3, [r7, #7]
 800b6c8:	f003 0302 	and.w	r3, r3, #2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d007      	beq.n	800b6e0 <f_open+0x1d4>
 800b6d0:	7ebb      	ldrb	r3, [r7, #26]
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <f_open+0x1d4>
						res = FR_DENIED;
 800b6da:	2307      	movs	r3, #7
 800b6dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b6e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d128      	bne.n	800b73a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	f003 0308 	and.w	r3, r3, #8
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b708:	79fb      	ldrb	r3, [r7, #7]
 800b70a:	f023 0301 	bic.w	r3, r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bf14      	ite	ne
 800b712:	2301      	movne	r3, #1
 800b714:	2300      	moveq	r3, #0
 800b716:	b2db      	uxtb	r3, r3
 800b718:	461a      	mov	r2, r3
 800b71a:	f107 0314 	add.w	r3, r7, #20
 800b71e:	4611      	mov	r1, r2
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe fb93 	bl	8009e4c <inc_lock>
 800b726:	4602      	mov	r2, r0
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <f_open+0x22e>
 800b734:	2302      	movs	r3, #2
 800b736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b73a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f040 8095 	bne.w	800b86e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b748:	4611      	mov	r1, r2
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff f9af 	bl	800aaae <ld_clust>
 800b750:	4602      	mov	r2, r0
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b758:	331c      	adds	r3, #28
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fe fa10 	bl	8009b80 <ld_dword>
 800b760:	4602      	mov	r2, r0
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	88da      	ldrh	r2, [r3, #6]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	79fa      	ldrb	r2, [r7, #7]
 800b77e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3330      	adds	r3, #48	; 0x30
 800b796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b79a:	2100      	movs	r1, #0
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe fa7a 	bl	8009c96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	f003 0320 	and.w	r3, r3, #32
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d060      	beq.n	800b86e <f_open+0x362>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d05c      	beq.n	800b86e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	68da      	ldr	r2, [r3, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	895b      	ldrh	r3, [r3, #10]
 800b7c0:	025b      	lsls	r3, r3, #9
 800b7c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	657b      	str	r3, [r7, #84]	; 0x54
 800b7d0:	e016      	b.n	800b800 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fd25 	bl	800a226 <get_fat>
 800b7dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b7de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d802      	bhi.n	800b7ea <f_open+0x2de>
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b7ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d102      	bne.n	800b7f8 <f_open+0x2ec>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b7f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	657b      	str	r3, [r7, #84]	; 0x54
 800b800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b804:	2b00      	cmp	r3, #0
 800b806:	d103      	bne.n	800b810 <f_open+0x304>
 800b808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d8e0      	bhi.n	800b7d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b814:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d127      	bne.n	800b86e <f_open+0x362>
 800b81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b824:	2b00      	cmp	r3, #0
 800b826:	d022      	beq.n	800b86e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fe fcdb 	bl	800a1e8 <clust2sect>
 800b832:	6478      	str	r0, [r7, #68]	; 0x44
 800b834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b836:	2b00      	cmp	r3, #0
 800b838:	d103      	bne.n	800b842 <f_open+0x336>
						res = FR_INT_ERR;
 800b83a:	2302      	movs	r3, #2
 800b83c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b840:	e015      	b.n	800b86e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b844:	0a5a      	lsrs	r2, r3, #9
 800b846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b848:	441a      	add	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	7858      	ldrb	r0, [r3, #1]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6a1a      	ldr	r2, [r3, #32]
 800b85c:	2301      	movs	r3, #1
 800b85e:	f7fe f919 	bl	8009a94 <disk_read>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <f_open+0x362>
 800b868:	2301      	movs	r3, #1
 800b86a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b86e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <f_open+0x370>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b87c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b880:	4618      	mov	r0, r3
 800b882:	3760      	adds	r7, #96	; 0x60
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08c      	sub	sp, #48	; 0x30
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2200      	movs	r2, #0
 800b89e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f107 0210 	add.w	r2, r7, #16
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff fdb3 	bl	800b414 <validate>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b8b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d107      	bne.n	800b8cc <f_write+0x44>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	7d5b      	ldrb	r3, [r3, #21]
 800b8c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b8c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <f_write+0x4a>
 800b8cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8d0:	e14b      	b.n	800bb6a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	7d1b      	ldrb	r3, [r3, #20]
 800b8d6:	f003 0302 	and.w	r3, r3, #2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <f_write+0x5a>
 800b8de:	2307      	movs	r3, #7
 800b8e0:	e143      	b.n	800bb6a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	699a      	ldr	r2, [r3, #24]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	441a      	add	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	f080 812d 	bcs.w	800bb4e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	43db      	mvns	r3, r3
 800b8fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b8fc:	e127      	b.n	800bb4e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b906:	2b00      	cmp	r3, #0
 800b908:	f040 80e3 	bne.w	800bad2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	0a5b      	lsrs	r3, r3, #9
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	8952      	ldrh	r2, [r2, #10]
 800b916:	3a01      	subs	r2, #1
 800b918:	4013      	ands	r3, r2
 800b91a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d143      	bne.n	800b9aa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10c      	bne.n	800b944 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	2b00      	cmp	r3, #0
 800b934:	d11a      	bne.n	800b96c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2100      	movs	r1, #0
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe fe64 	bl	800a608 <create_chain>
 800b940:	62b8      	str	r0, [r7, #40]	; 0x28
 800b942:	e013      	b.n	800b96c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d007      	beq.n	800b95c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	4619      	mov	r1, r3
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f7fe fef0 	bl	800a738 <clmt_clust>
 800b958:	62b8      	str	r0, [r7, #40]	; 0x28
 800b95a:	e007      	b.n	800b96c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	4619      	mov	r1, r3
 800b964:	4610      	mov	r0, r2
 800b966:	f7fe fe4f 	bl	800a608 <create_chain>
 800b96a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 80f2 	beq.w	800bb58 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	2b01      	cmp	r3, #1
 800b978:	d104      	bne.n	800b984 <f_write+0xfc>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2202      	movs	r2, #2
 800b97e:	755a      	strb	r2, [r3, #21]
 800b980:	2302      	movs	r3, #2
 800b982:	e0f2      	b.n	800bb6a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98a:	d104      	bne.n	800b996 <f_write+0x10e>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2201      	movs	r2, #1
 800b990:	755a      	strb	r2, [r3, #21]
 800b992:	2301      	movs	r3, #1
 800b994:	e0e9      	b.n	800bb6a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b99a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d102      	bne.n	800b9aa <f_write+0x122>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	7d1b      	ldrb	r3, [r3, #20]
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	da18      	bge.n	800b9e6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	7858      	ldrb	r0, [r3, #1]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6a1a      	ldr	r2, [r3, #32]
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	f7fe f886 	bl	8009ad4 <disk_write>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d004      	beq.n	800b9d8 <f_write+0x150>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	755a      	strb	r2, [r3, #21]
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e0c8      	b.n	800bb6a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	7d1b      	ldrb	r3, [r3, #20]
 800b9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	f7fe fbfa 	bl	800a1e8 <clust2sect>
 800b9f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d104      	bne.n	800ba06 <f_write+0x17e>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2202      	movs	r2, #2
 800ba00:	755a      	strb	r2, [r3, #21]
 800ba02:	2302      	movs	r3, #2
 800ba04:	e0b1      	b.n	800bb6a <f_write+0x2e2>
			sect += csect;
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	0a5b      	lsrs	r3, r3, #9
 800ba12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d03c      	beq.n	800ba94 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba1a:	69ba      	ldr	r2, [r7, #24]
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	4413      	add	r3, r2
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	8952      	ldrh	r2, [r2, #10]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d905      	bls.n	800ba34 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	895b      	ldrh	r3, [r3, #10]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	7858      	ldrb	r0, [r3, #1]
 800ba38:	6a3b      	ldr	r3, [r7, #32]
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	69f9      	ldr	r1, [r7, #28]
 800ba3e:	f7fe f849 	bl	8009ad4 <disk_write>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <f_write+0x1ca>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	755a      	strb	r2, [r3, #21]
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e08b      	b.n	800bb6a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	6a3a      	ldr	r2, [r7, #32]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d915      	bls.n	800ba8c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a1a      	ldr	r2, [r3, #32]
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	025b      	lsls	r3, r3, #9
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	4413      	add	r3, r2
 800ba74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba78:	4619      	mov	r1, r3
 800ba7a:	f7fe f8eb 	bl	8009c54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	7d1b      	ldrb	r3, [r3, #20]
 800ba82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	025b      	lsls	r3, r3, #9
 800ba90:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ba92:	e03f      	b.n	800bb14 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d016      	beq.n	800bacc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d210      	bcs.n	800bacc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	7858      	ldrb	r0, [r3, #1]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bab4:	2301      	movs	r3, #1
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	f7fd ffec 	bl	8009a94 <disk_read>
 800babc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d004      	beq.n	800bacc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	755a      	strb	r2, [r3, #21]
 800bac8:	2301      	movs	r3, #1
 800baca:	e04e      	b.n	800bb6a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bada:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bade:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d901      	bls.n	800baec <f_write+0x264>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafa:	4413      	add	r3, r2
 800bafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafe:	69f9      	ldr	r1, [r7, #28]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe f8a7 	bl	8009c54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	7d1b      	ldrb	r3, [r3, #20]
 800bb0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	4413      	add	r3, r2
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	699a      	ldr	r2, [r3, #24]
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb22:	441a      	add	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	619a      	str	r2, [r3, #24]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	68da      	ldr	r2, [r3, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	bf38      	it	cc
 800bb34:	461a      	movcc	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	60da      	str	r2, [r3, #12]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	441a      	add	r2, r3
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f47f aed4 	bne.w	800b8fe <f_write+0x76>
 800bb56:	e000      	b.n	800bb5a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb58:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3730      	adds	r7, #48	; 0x30
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b086      	sub	sp, #24
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f107 0208 	add.w	r2, r7, #8
 800bb80:	4611      	mov	r1, r2
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff fc46 	bl	800b414 <validate>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d168      	bne.n	800bc64 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	7d1b      	ldrb	r3, [r3, #20]
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d062      	beq.n	800bc64 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7d1b      	ldrb	r3, [r3, #20]
 800bba2:	b25b      	sxtb	r3, r3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	da15      	bge.n	800bbd4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	7858      	ldrb	r0, [r3, #1]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1a      	ldr	r2, [r3, #32]
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	f7fd ff8c 	bl	8009ad4 <disk_write>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <f_sync+0x54>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e04f      	b.n	800bc66 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	7d1b      	ldrb	r3, [r3, #20]
 800bbca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bbd4:	f7fa ff26 	bl	8006a24 <get_fattime>
 800bbd8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	f7fe fa64 	bl	800a0b0 <move_window>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d138      	bne.n	800bc64 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	330b      	adds	r3, #11
 800bbfc:	781a      	ldrb	r2, [r3, #0]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	330b      	adds	r3, #11
 800bc02:	f042 0220 	orr.w	r2, r2, #32
 800bc06:	b2d2      	uxtb	r2, r2
 800bc08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6818      	ldr	r0, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	461a      	mov	r2, r3
 800bc14:	68f9      	ldr	r1, [r7, #12]
 800bc16:	f7fe ff69 	bl	800aaec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f103 021c 	add.w	r2, r3, #28
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	4619      	mov	r1, r3
 800bc26:	4610      	mov	r0, r2
 800bc28:	f7fd ffe8 	bl	8009bfc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3316      	adds	r3, #22
 800bc30:	6939      	ldr	r1, [r7, #16]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fd ffe2 	bl	8009bfc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3312      	adds	r3, #18
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fd ffc1 	bl	8009bc6 <st_word>
					fs->wflag = 1;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2201      	movs	r2, #1
 800bc48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fe fa5d 	bl	800a10c <sync_fs>
 800bc52:	4603      	mov	r3, r0
 800bc54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	7d1b      	ldrb	r3, [r3, #20]
 800bc5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b084      	sub	sp, #16
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff ff7b 	bl	800bb72 <f_sync>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d118      	bne.n	800bcb8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f107 0208 	add.w	r2, r7, #8
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fbc0 	bl	800b414 <validate>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10c      	bne.n	800bcb8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe f960 	bl	8009f68 <dec_lock>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d102      	bne.n	800bcb8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
	...

0800bcc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bcda:	4b1f      	ldr	r3, [pc, #124]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bcdc:	7a5b      	ldrb	r3, [r3, #9]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d131      	bne.n	800bd48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bce4:	4b1c      	ldr	r3, [pc, #112]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bce6:	7a5b      	ldrb	r3, [r3, #9]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	461a      	mov	r2, r3
 800bcec:	4b1a      	ldr	r3, [pc, #104]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bcee:	2100      	movs	r1, #0
 800bcf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bcf2:	4b19      	ldr	r3, [pc, #100]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bcf4:	7a5b      	ldrb	r3, [r3, #9]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	4a17      	ldr	r2, [pc, #92]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bd02:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bd04:	7a5b      	ldrb	r3, [r3, #9]
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4b13      	ldr	r3, [pc, #76]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bd0c:	4413      	add	r3, r2
 800bd0e:	79fa      	ldrb	r2, [r7, #7]
 800bd10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bd12:	4b11      	ldr	r3, [pc, #68]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bd14:	7a5b      	ldrb	r3, [r3, #9]
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	b2d1      	uxtb	r1, r2
 800bd1c:	4a0e      	ldr	r2, [pc, #56]	; (800bd58 <FATFS_LinkDriverEx+0x94>)
 800bd1e:	7251      	strb	r1, [r2, #9]
 800bd20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd22:	7dbb      	ldrb	r3, [r7, #22]
 800bd24:	3330      	adds	r3, #48	; 0x30
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	223a      	movs	r2, #58	; 0x3a
 800bd32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	3302      	adds	r3, #2
 800bd38:	222f      	movs	r2, #47	; 0x2f
 800bd3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	3303      	adds	r3, #3
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	20000544 	.word	0x20000544

0800bd5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd66:	2200      	movs	r2, #0
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff ffaa 	bl	800bcc4 <FATFS_LinkDriverEx>
 800bd70:	4603      	mov	r3, r0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
	...

0800bd7c <USB_Error_Handler>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USB_Error_Handler(void)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
 HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 800bd80:	2201      	movs	r2, #1
 800bd82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bd86:	4802      	ldr	r0, [pc, #8]	; (800bd90 <USB_Error_Handler+0x14>)
 800bd88:	f7f6 fab4 	bl	80022f4 <HAL_GPIO_WritePin>
  while(1)
 800bd8c:	e7fe      	b.n	800bd8c <USB_Error_Handler+0x10>
 800bd8e:	bf00      	nop
 800bd90:	40020c00 	.word	0x40020c00

0800bd94 <open_to_write>:
  {
  }
  /* USER CODE END USB_Error_Handler */
}

int open_to_write(){
 800bd94:	b580      	push	{r7, lr}
 800bd96:	af00      	add	r7, sp, #0
	if (flag_usb == 1){
 800bd98:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <open_to_write+0x44>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d117      	bne.n	800bdd0 <open_to_write+0x3c>
		if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 800bda0:	2200      	movs	r2, #0
 800bda2:	490e      	ldr	r1, [pc, #56]	; (800bddc <open_to_write+0x48>)
 800bda4:	480e      	ldr	r0, [pc, #56]	; (800bde0 <open_to_write+0x4c>)
 800bda6:	f7ff fb6b 	bl	800b480 <f_mount>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <open_to_write+0x22>
		{
			/* FatFs Initialization Error */
			USB_Error_Handler();
 800bdb0:	f7ff ffe4 	bl	800bd7c <USB_Error_Handler>
 800bdb4:	e00c      	b.n	800bdd0 <open_to_write+0x3c>
		}
		else
		{
			/* Create and Open a new text file object with write access */
			if(f_open(&MyFile, "Nag.wav", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800bdb6:	220a      	movs	r2, #10
 800bdb8:	490a      	ldr	r1, [pc, #40]	; (800bde4 <open_to_write+0x50>)
 800bdba:	480b      	ldr	r0, [pc, #44]	; (800bde8 <open_to_write+0x54>)
 800bdbc:	f7ff fba6 	bl	800b50c <f_open>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <open_to_write+0x38>
			{
				/* 'STM32.TXT' file Open for write Error */
				USB_Error_Handler();
 800bdc6:	f7ff ffd9 	bl	800bd7c <USB_Error_Handler>
 800bdca:	e001      	b.n	800bdd0 <open_to_write+0x3c>
			}
			else
			{
				return 1;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e000      	b.n	800bdd2 <open_to_write+0x3e>
			}
		}
	}
	return 0;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000554 	.word	0x20000554
 800bddc:	20001014 	.word	0x20001014
 800bde0:	200012b0 	.word	0x200012b0
 800bde4:	0800efbc 	.word	0x0800efbc
 800bde8:	20001080 	.word	0x20001080

0800bdec <Write_with_open>:


void Write_with_open(uint8_t* write, int size){
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
	FRESULT res;                                          /* FatFs function common result code */
	uint32_t byteswritten;

	/* Write data to the text file */
	res = f_write(&MyFile, write, size, (void *)&byteswritten);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	f107 0308 	add.w	r3, r7, #8
 800bdfc:	6879      	ldr	r1, [r7, #4]
 800bdfe:	480d      	ldr	r0, [pc, #52]	; (800be34 <Write_with_open+0x48>)
 800be00:	f7ff fd42 	bl	800b888 <f_write>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]

	if((byteswritten == 0) || (res != FR_OK))
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <Write_with_open+0x28>
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <Write_with_open+0x2e>
	{
		/* 'STM32.TXT' file Write or EOF Error */
		USB_Error_Handler();
 800be14:	f7ff ffb2 	bl	800bd7c <USB_Error_Handler>
 800be18:	e008      	b.n	800be2c <Write_with_open+0x40>
	}
	else
	{
		/* Close the open text file */
		f_close(&MyFile);
 800be1a:	4806      	ldr	r0, [pc, #24]	; (800be34 <Write_with_open+0x48>)
 800be1c:	f7ff ff27 	bl	800bc6e <f_close>
		HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 800be20:	2201      	movs	r2, #1
 800be22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800be26:	4804      	ldr	r0, [pc, #16]	; (800be38 <Write_with_open+0x4c>)
 800be28:	f7f6 fa64 	bl	80022f4 <HAL_GPIO_WritePin>
	}
}
 800be2c:	bf00      	nop
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20001080 	.word	0x20001080
 800be38:	40020c00 	.word	0x40020c00

0800be3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800be40:	2201      	movs	r2, #1
 800be42:	490e      	ldr	r1, [pc, #56]	; (800be7c <MX_USB_HOST_Init+0x40>)
 800be44:	480e      	ldr	r0, [pc, #56]	; (800be80 <MX_USB_HOST_Init+0x44>)
 800be46:	f7fc fa8b 	bl	8008360 <USBH_Init>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800be50:	f7f5 f8b2 	bl	8000fb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800be54:	490b      	ldr	r1, [pc, #44]	; (800be84 <MX_USB_HOST_Init+0x48>)
 800be56:	480a      	ldr	r0, [pc, #40]	; (800be80 <MX_USB_HOST_Init+0x44>)
 800be58:	f7fc fb10 	bl	800847c <USBH_RegisterClass>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800be62:	f7f5 f8a9 	bl	8000fb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800be66:	4806      	ldr	r0, [pc, #24]	; (800be80 <MX_USB_HOST_Init+0x44>)
 800be68:	f7fc fb94 	bl	8008594 <USBH_Start>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800be72:	f7f5 f8a1 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800be76:	bf00      	nop
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	0800be9d 	.word	0x0800be9d
 800be80:	20000c3c 	.word	0x20000c3c
 800be84:	2000040c 	.word	0x2000040c

0800be88 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800be8c:	4802      	ldr	r0, [pc, #8]	; (800be98 <MX_USB_HOST_Process+0x10>)
 800be8e:	f7fc fb91 	bl	80085b4 <USBH_Process>
}
 800be92:	bf00      	nop
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000c3c 	.word	0x20000c3c

0800be9c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	3b01      	subs	r3, #1
 800beac:	2b04      	cmp	r3, #4
 800beae:	d81c      	bhi.n	800beea <USBH_UserProcess+0x4e>
 800beb0:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <USBH_UserProcess+0x1c>)
 800beb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb6:	bf00      	nop
 800beb8:	0800beeb 	.word	0x0800beeb
 800bebc:	0800bed5 	.word	0x0800bed5
 800bec0:	0800beeb 	.word	0x0800beeb
 800bec4:	0800bee3 	.word	0x0800bee3
 800bec8:	0800becd 	.word	0x0800becd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <USBH_UserProcess+0x5c>)
 800bece:	2203      	movs	r2, #3
 800bed0:	701a      	strb	r2, [r3, #0]
  break;
 800bed2:	e00b      	b.n	800beec <USBH_UserProcess+0x50>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bed4:	4b08      	ldr	r3, [pc, #32]	; (800bef8 <USBH_UserProcess+0x5c>)
 800bed6:	2202      	movs	r2, #2
 800bed8:	701a      	strb	r2, [r3, #0]
  flag_usb = 1;
 800beda:	4b08      	ldr	r3, [pc, #32]	; (800befc <USBH_UserProcess+0x60>)
 800bedc:	2201      	movs	r2, #1
 800bede:	601a      	str	r2, [r3, #0]
  break;
 800bee0:	e004      	b.n	800beec <USBH_UserProcess+0x50>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bee2:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <USBH_UserProcess+0x5c>)
 800bee4:	2201      	movs	r2, #1
 800bee6:	701a      	strb	r2, [r3, #0]
  break;
 800bee8:	e000      	b.n	800beec <USBH_UserProcess+0x50>

  default:
  break;
 800beea:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	20000550 	.word	0x20000550
 800befc:	20000554 	.word	0x20000554

0800bf00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf08:	f107 0314 	add.w	r3, r7, #20
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	605a      	str	r2, [r3, #4]
 800bf12:	609a      	str	r2, [r3, #8]
 800bf14:	60da      	str	r2, [r3, #12]
 800bf16:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf20:	d147      	bne.n	800bfb2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf22:	2300      	movs	r3, #0
 800bf24:	613b      	str	r3, [r7, #16]
 800bf26:	4b25      	ldr	r3, [pc, #148]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2a:	4a24      	ldr	r2, [pc, #144]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf2c:	f043 0301 	orr.w	r3, r3, #1
 800bf30:	6313      	str	r3, [r2, #48]	; 0x30
 800bf32:	4b22      	ldr	r3, [pc, #136]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bf3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf44:	2300      	movs	r3, #0
 800bf46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bf4c:	f107 0314 	add.w	r3, r7, #20
 800bf50:	4619      	mov	r1, r3
 800bf52:	481b      	ldr	r0, [pc, #108]	; (800bfc0 <HAL_HCD_MspInit+0xc0>)
 800bf54:	f7f6 f84c 	bl	8001ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bf58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bf5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf66:	2303      	movs	r3, #3
 800bf68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf6a:	230a      	movs	r3, #10
 800bf6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf6e:	f107 0314 	add.w	r3, r7, #20
 800bf72:	4619      	mov	r1, r3
 800bf74:	4812      	ldr	r0, [pc, #72]	; (800bfc0 <HAL_HCD_MspInit+0xc0>)
 800bf76:	f7f6 f83b 	bl	8001ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf7a:	4b10      	ldr	r3, [pc, #64]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf7e:	4a0f      	ldr	r2, [pc, #60]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf84:	6353      	str	r3, [r2, #52]	; 0x34
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	4b0c      	ldr	r3, [pc, #48]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8e:	4a0b      	ldr	r2, [pc, #44]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf94:	6453      	str	r3, [r2, #68]	; 0x44
 800bf96:	4b09      	ldr	r3, [pc, #36]	; (800bfbc <HAL_HCD_MspInit+0xbc>)
 800bf98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	2043      	movs	r0, #67	; 0x43
 800bfa8:	f7f5 fd39 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfac:	2043      	movs	r0, #67	; 0x43
 800bfae:	f7f5 fd52 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfb2:	bf00      	nop
 800bfb4:	3728      	adds	r7, #40	; 0x28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	40023800 	.word	0x40023800
 800bfc0:	40020000 	.word	0x40020000

0800bfc4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fc fec1 	bl	8008d5a <USBH_LL_IncTimer>
}
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fc fef9 	bl	8008de6 <USBH_LL_Connect>
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fc ff02 	bl	8008e14 <USBH_LL_Disconnect>
}
 800c010:	bf00      	nop
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
 800c024:	4613      	mov	r3, r2
 800c026:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c042:	4618      	mov	r0, r3
 800c044:	f7fc feb3 	bl	8008dae <USBH_LL_PortEnabled>
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fc feb3 	bl	8008dca <USBH_LL_PortDisabled>
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d12a      	bne.n	800c0d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c07e:	4a18      	ldr	r2, [pc, #96]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a15      	ldr	r2, [pc, #84]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c08a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c08e:	4b14      	ldr	r3, [pc, #80]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c090:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c094:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c096:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c098:	2208      	movs	r2, #8
 800c09a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c09c:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c09e:	2201      	movs	r2, #1
 800c0a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c0a2:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c0a8:	4b0d      	ldr	r3, [pc, #52]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0ae:	4b0c      	ldr	r3, [pc, #48]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c0b4:	480a      	ldr	r0, [pc, #40]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c0b6:	f7f6 f936 	bl	8002326 <HAL_HCD_Init>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c0c0:	f7f4 ff7a 	bl	8000fb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c0c4:	4806      	ldr	r0, [pc, #24]	; (800c0e0 <USBH_LL_Init+0x74>)
 800c0c6:	f7f6 fd39 	bl	8002b3c <HAL_HCD_GetCurrentFrame>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7fc fe34 	bl	8008d3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	200014e0 	.word	0x200014e0

0800c0e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7f6 fca6 	bl	8002a4c <HAL_HCD_Start>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	4618      	mov	r0, r3
 800c108:	f000 f990 	bl	800c42c <USBH_Get_USB_Status>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c110:	7bbb      	ldrb	r3, [r7, #14]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c130:	4618      	mov	r0, r3
 800c132:	f7f6 fcae 	bl	8002a92 <HAL_HCD_Stop>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 f975 	bl	800c42c <USBH_Get_USB_Status>
 800c142:	4603      	mov	r3, r0
 800c144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c146:	7bbb      	ldrb	r3, [r7, #14]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c158:	2301      	movs	r3, #1
 800c15a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c162:	4618      	mov	r0, r3
 800c164:	f7f6 fcf8 	bl	8002b58 <HAL_HCD_GetCurrentSpeed>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d007      	beq.n	800c17e <USBH_LL_GetSpeed+0x2e>
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d302      	bcc.n	800c178 <USBH_LL_GetSpeed+0x28>
 800c172:	2b02      	cmp	r3, #2
 800c174:	d006      	beq.n	800c184 <USBH_LL_GetSpeed+0x34>
 800c176:	e008      	b.n	800c18a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
    break;
 800c17c:	e008      	b.n	800c190 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c17e:	2301      	movs	r3, #1
 800c180:	73fb      	strb	r3, [r7, #15]
    break;
 800c182:	e005      	b.n	800c190 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c184:	2302      	movs	r3, #2
 800c186:	73fb      	strb	r3, [r7, #15]
    break;
 800c188:	e002      	b.n	800c190 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c18a:	2301      	movs	r3, #1
 800c18c:	73fb      	strb	r3, [r7, #15]
    break;
 800c18e:	bf00      	nop
  }
  return  speed;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f6 fc8b 	bl	8002acc <HAL_HCD_ResetPort>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 f935 	bl	800c42c <USBH_Get_USB_Status>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1e2:	78fa      	ldrb	r2, [r7, #3]
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7f6 fc93 	bl	8002b12 <HAL_HCD_HC_GetXferCount>
 800c1ec:	4603      	mov	r3, r0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c1f6:	b590      	push	{r4, r7, lr}
 800c1f8:	b089      	sub	sp, #36	; 0x24
 800c1fa:	af04      	add	r7, sp, #16
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	4608      	mov	r0, r1
 800c200:	4611      	mov	r1, r2
 800c202:	461a      	mov	r2, r3
 800c204:	4603      	mov	r3, r0
 800c206:	70fb      	strb	r3, [r7, #3]
 800c208:	460b      	mov	r3, r1
 800c20a:	70bb      	strb	r3, [r7, #2]
 800c20c:	4613      	mov	r3, r2
 800c20e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c21e:	787c      	ldrb	r4, [r7, #1]
 800c220:	78ba      	ldrb	r2, [r7, #2]
 800c222:	78f9      	ldrb	r1, [r7, #3]
 800c224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c226:	9302      	str	r3, [sp, #8]
 800c228:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4623      	mov	r3, r4
 800c236:	f7f6 f8d8 	bl	80023ea <HAL_HCD_HC_Init>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 f8f3 	bl	800c42c <USBH_Get_USB_Status>
 800c246:	4603      	mov	r3, r0
 800c248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	bd90      	pop	{r4, r7, pc}

0800c254 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c26e:	78fa      	ldrb	r2, [r7, #3]
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f7f6 f951 	bl	800251a <HAL_HCD_HC_Halt>
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f8d4 	bl	800c42c <USBH_Get_USB_Status>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c288:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c292:	b590      	push	{r4, r7, lr}
 800c294:	b089      	sub	sp, #36	; 0x24
 800c296:	af04      	add	r7, sp, #16
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	4608      	mov	r0, r1
 800c29c:	4611      	mov	r1, r2
 800c29e:	461a      	mov	r2, r3
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	70fb      	strb	r3, [r7, #3]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70bb      	strb	r3, [r7, #2]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c2ba:	787c      	ldrb	r4, [r7, #1]
 800c2bc:	78ba      	ldrb	r2, [r7, #2]
 800c2be:	78f9      	ldrb	r1, [r7, #3]
 800c2c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2c4:	9303      	str	r3, [sp, #12]
 800c2c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c2c8:	9302      	str	r3, [sp, #8]
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	4623      	mov	r3, r4
 800c2d6:	f7f6 f943 	bl	8002560 <HAL_HCD_HC_SubmitRequest>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 f8a3 	bl	800c42c <USBH_Get_USB_Status>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd90      	pop	{r4, r7, pc}

0800c2f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c306:	78fa      	ldrb	r2, [r7, #3]
 800c308:	4611      	mov	r1, r2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7f6 fbec 	bl	8002ae8 <HAL_HCD_HC_GetURBState>
 800c310:	4603      	mov	r3, r0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	460b      	mov	r3, r1
 800c324:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d103      	bne.n	800c338 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 f8a6 	bl	800c484 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c338:	20c8      	movs	r0, #200	; 0xc8
 800c33a:	f7f5 fa73 	bl	8001824 <HAL_Delay>
  return USBH_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	460b      	mov	r3, r1
 800c352:	70fb      	strb	r3, [r7, #3]
 800c354:	4613      	mov	r3, r2
 800c356:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c35e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c360:	78fa      	ldrb	r2, [r7, #3]
 800c362:	68f9      	ldr	r1, [r7, #12]
 800c364:	4613      	mov	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	440b      	add	r3, r1
 800c36e:	333b      	adds	r3, #59	; 0x3b
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00a      	beq.n	800c38c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c376:	78fa      	ldrb	r2, [r7, #3]
 800c378:	68f9      	ldr	r1, [r7, #12]
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	440b      	add	r3, r1
 800c384:	3350      	adds	r3, #80	; 0x50
 800c386:	78ba      	ldrb	r2, [r7, #2]
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	e009      	b.n	800c3a0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c38c:	78fa      	ldrb	r2, [r7, #3]
 800c38e:	68f9      	ldr	r1, [r7, #12]
 800c390:	4613      	mov	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	440b      	add	r3, r1
 800c39a:	3351      	adds	r3, #81	; 0x51
 800c39c:	78ba      	ldrb	r2, [r7, #2]
 800c39e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b085      	sub	sp, #20
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3c4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c3c6:	78fa      	ldrb	r2, [r7, #3]
 800c3c8:	68b9      	ldr	r1, [r7, #8]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	440b      	add	r3, r1
 800c3d4:	333b      	adds	r3, #59	; 0x3b
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00a      	beq.n	800c3f2 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c3dc:	78fa      	ldrb	r2, [r7, #3]
 800c3de:	68b9      	ldr	r1, [r7, #8]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	440b      	add	r3, r1
 800c3ea:	3350      	adds	r3, #80	; 0x50
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	73fb      	strb	r3, [r7, #15]
 800c3f0:	e009      	b.n	800c406 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c3f2:	78fa      	ldrb	r2, [r7, #3]
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	440b      	add	r3, r1
 800c400:	3351      	adds	r3, #81	; 0x51
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c406:	7bfb      	ldrb	r3, [r7, #15]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7f5 fa01 	bl	8001824 <HAL_Delay>
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
	...

0800c42c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	2b03      	cmp	r3, #3
 800c43e:	d817      	bhi.n	800c470 <USBH_Get_USB_Status+0x44>
 800c440:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <USBH_Get_USB_Status+0x1c>)
 800c442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c446:	bf00      	nop
 800c448:	0800c459 	.word	0x0800c459
 800c44c:	0800c45f 	.word	0x0800c45f
 800c450:	0800c465 	.word	0x0800c465
 800c454:	0800c46b 	.word	0x0800c46b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c458:	2300      	movs	r3, #0
 800c45a:	73fb      	strb	r3, [r7, #15]
    break;
 800c45c:	e00b      	b.n	800c476 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c45e:	2302      	movs	r3, #2
 800c460:	73fb      	strb	r3, [r7, #15]
    break;
 800c462:	e008      	b.n	800c476 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c464:	2301      	movs	r3, #1
 800c466:	73fb      	strb	r3, [r7, #15]
    break;
 800c468:	e005      	b.n	800c476 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c46a:	2302      	movs	r3, #2
 800c46c:	73fb      	strb	r3, [r7, #15]
    break;
 800c46e:	e002      	b.n	800c476 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c470:	2302      	movs	r3, #2
 800c472:	73fb      	strb	r3, [r7, #15]
    break;
 800c474:	bf00      	nop
  }
  return usb_status;
 800c476:	7bfb      	ldrb	r3, [r7, #15]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	4603      	mov	r3, r0
 800c48c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c492:	79fb      	ldrb	r3, [r7, #7]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d102      	bne.n	800c49e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c498:	2301      	movs	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
 800c49c:	e001      	b.n	800c4a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c4a2:	7bfb      	ldrb	r3, [r7, #15]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	4803      	ldr	r0, [pc, #12]	; (800c4b8 <MX_DriverVbusFS+0x34>)
 800c4aa:	f7f5 ff23 	bl	80022f4 <HAL_GPIO_WritePin>
}
 800c4ae:	bf00      	nop
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40020800 	.word	0x40020800

0800c4bc <D16_GENERIC>:
 800c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	b089      	sub	sp, #36	; 0x24
 800c4c2:	68d4      	ldr	r4, [r2, #12]
 800c4c4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c4c6:	6993      	ldr	r3, [r2, #24]
 800c4c8:	9407      	str	r4, [sp, #28]
 800c4ca:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c4cc:	9306      	str	r3, [sp, #24]
 800c4ce:	9402      	str	r4, [sp, #8]
 800c4d0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c4d4:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800c4d8:	69d3      	ldr	r3, [r2, #28]
 800c4da:	6896      	ldr	r6, [r2, #8]
 800c4dc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c4de:	9103      	str	r1, [sp, #12]
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	d066      	beq.n	800c5b2 <D16_GENERIC+0xf6>
 800c4e4:	f004 0510 	and.w	r5, r4, #16
 800c4e8:	f004 0420 	and.w	r4, r4, #32
 800c4ec:	9504      	str	r5, [sp, #16]
 800c4ee:	4938      	ldr	r1, [pc, #224]	; (800c5d0 <D16_GENERIC+0x114>)
 800c4f0:	9405      	str	r4, [sp, #20]
 800c4f2:	f04f 0e00 	mov.w	lr, #0
 800c4f6:	4635      	mov	r5, r6
 800c4f8:	e04f      	b.n	800c59a <D16_GENERIC+0xde>
 800c4fa:	5d87      	ldrb	r7, [r0, r6]
 800c4fc:	7804      	ldrb	r4, [r0, #0]
 800c4fe:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c502:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800c506:	b2e6      	uxtb	r6, r4
 800c508:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c50c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c510:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c514:	4433      	add	r3, r6
 800c516:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800c51a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800c51e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c522:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800c526:	0aa3      	lsrs	r3, r4, #10
 800c528:	4c2a      	ldr	r4, [pc, #168]	; (800c5d4 <D16_GENERIC+0x118>)
 800c52a:	fb26 5404 	smlad	r4, r6, r4, r5
 800c52e:	4d2a      	ldr	r5, [pc, #168]	; (800c5d8 <D16_GENERIC+0x11c>)
 800c530:	fb26 f505 	smuad	r5, r6, r5
 800c534:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800c538:	eb04 080a 	add.w	r8, r4, sl
 800c53c:	eba8 080b 	sub.w	r8, r8, fp
 800c540:	4646      	mov	r6, r8
 800c542:	17f7      	asrs	r7, r6, #31
 800c544:	e9cd 6700 	strd	r6, r7, [sp]
 800c548:	9e04      	ldr	r6, [sp, #16]
 800c54a:	f10e 0c01 	add.w	ip, lr, #1
 800c54e:	b16e      	cbz	r6, 800c56c <D16_GENERIC+0xb0>
 800c550:	6a16      	ldr	r6, [r2, #32]
 800c552:	9f01      	ldr	r7, [sp, #4]
 800c554:	fba8 8906 	umull	r8, r9, r8, r6
 800c558:	fb06 9907 	mla	r9, r6, r7, r9
 800c55c:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800c560:	f149 0900 	adc.w	r9, r9, #0
 800c564:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800c568:	46a3      	mov	fp, r4
 800c56a:	4654      	mov	r4, sl
 800c56c:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800c56e:	9f02      	ldr	r7, [sp, #8]
 800c570:	0424      	lsls	r4, r4, #16
 800c572:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c576:	f04f 0900 	mov.w	r9, #0
 800c57a:	fb0e fe06 	mul.w	lr, lr, r6
 800c57e:	fbc7 8904 	smlal	r8, r9, r7, r4
 800c582:	9e03      	ldr	r6, [sp, #12]
 800c584:	464f      	mov	r7, r9
 800c586:	10bc      	asrs	r4, r7, #2
 800c588:	f304 040f 	ssat	r4, #16, r4
 800c58c:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800c590:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c592:	fa1f fe8c 	uxth.w	lr, ip
 800c596:	4574      	cmp	r4, lr
 800c598:	d90a      	bls.n	800c5b0 <D16_GENERIC+0xf4>
 800c59a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800c59c:	2c01      	cmp	r4, #1
 800c59e:	b2e6      	uxtb	r6, r4
 800c5a0:	d1ab      	bne.n	800c4fa <D16_GENERIC+0x3e>
 800c5a2:	9e05      	ldr	r6, [sp, #20]
 800c5a4:	f850 4b02 	ldr.w	r4, [r0], #2
 800c5a8:	2e00      	cmp	r6, #0
 800c5aa:	d0ac      	beq.n	800c506 <D16_GENERIC+0x4a>
 800c5ac:	ba64      	rev16	r4, r4
 800c5ae:	e7aa      	b.n	800c506 <D16_GENERIC+0x4a>
 800c5b0:	462e      	mov	r6, r5
 800c5b2:	9907      	ldr	r1, [sp, #28]
 800c5b4:	61d3      	str	r3, [r2, #28]
 800c5b6:	9b06      	ldr	r3, [sp, #24]
 800c5b8:	6096      	str	r6, [r2, #8]
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	60d1      	str	r1, [r2, #12]
 800c5be:	f8c2 a010 	str.w	sl, [r2, #16]
 800c5c2:	f8c2 b014 	str.w	fp, [r2, #20]
 800c5c6:	6193      	str	r3, [r2, #24]
 800c5c8:	b009      	add	sp, #36	; 0x24
 800c5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ce:	bf00      	nop
 800c5d0:	20000000 	.word	0x20000000
 800c5d4:	00030001 	.word	0x00030001
 800c5d8:	00010003 	.word	0x00010003

0800c5dc <D24_GENERIC>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800c5e2:	6993      	ldr	r3, [r2, #24]
 800c5e4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c5e6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c5ea:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c5ee:	6894      	ldr	r4, [r2, #8]
 800c5f0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800c5f4:	b089      	sub	sp, #36	; 0x24
 800c5f6:	9307      	str	r3, [sp, #28]
 800c5f8:	9503      	str	r5, [sp, #12]
 800c5fa:	69d3      	ldr	r3, [r2, #28]
 800c5fc:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c5fe:	9104      	str	r1, [sp, #16]
 800c600:	2e00      	cmp	r6, #0
 800c602:	f000 8096 	beq.w	800c732 <D24_GENERIC+0x156>
 800c606:	f005 0610 	and.w	r6, r5, #16
 800c60a:	f005 0520 	and.w	r5, r5, #32
 800c60e:	4954      	ldr	r1, [pc, #336]	; (800c760 <D24_GENERIC+0x184>)
 800c610:	9605      	str	r6, [sp, #20]
 800c612:	9506      	str	r5, [sp, #24]
 800c614:	f04f 0e00 	mov.w	lr, #0
 800c618:	f8cd 9008 	str.w	r9, [sp, #8]
 800c61c:	e06a      	b.n	800c6f4 <D24_GENERIC+0x118>
 800c61e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800c622:	f810 8007 	ldrb.w	r8, [r0, r7]
 800c626:	f890 c000 	ldrb.w	ip, [r0]
 800c62a:	042d      	lsls	r5, r5, #16
 800c62c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c630:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800c634:	44ac      	add	ip, r5
 800c636:	4438      	add	r0, r7
 800c638:	fa5f f68c 	uxtb.w	r6, ip
 800c63c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800c640:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c644:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800c648:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c64c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800c650:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800c654:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800c658:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800c65c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c660:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800c664:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800c668:	4d3e      	ldr	r5, [pc, #248]	; (800c764 <D24_GENERIC+0x188>)
 800c66a:	fb26 b705 	smlad	r7, r6, r5, fp
 800c66e:	4d3e      	ldr	r5, [pc, #248]	; (800c768 <D24_GENERIC+0x18c>)
 800c670:	fb26 4b05 	smlad	fp, r6, r5, r4
 800c674:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800c678:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800c67c:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800c680:	2401      	movs	r4, #1
 800c682:	fb26 f604 	smuad	r6, r6, r4
 800c686:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800c68a:	9f02      	ldr	r7, [sp, #8]
 800c68c:	eb0e 0c04 	add.w	ip, lr, r4
 800c690:	eb08 0406 	add.w	r4, r8, r6
 800c694:	eb05 060a 	add.w	r6, r5, sl
 800c698:	1bf6      	subs	r6, r6, r7
 800c69a:	4637      	mov	r7, r6
 800c69c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800c6a0:	e9cd 7800 	strd	r7, r8, [sp]
 800c6a4:	9f05      	ldr	r7, [sp, #20]
 800c6a6:	b177      	cbz	r7, 800c6c6 <D24_GENERIC+0xea>
 800c6a8:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800c6ac:	9502      	str	r5, [sp, #8]
 800c6ae:	fba6 9a08 	umull	r9, sl, r6, r8
 800c6b2:	9e01      	ldr	r6, [sp, #4]
 800c6b4:	fb08 aa06 	mla	sl, r8, r6, sl
 800c6b8:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800c6bc:	f14a 0700 	adc.w	r7, sl, #0
 800c6c0:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800c6c4:	4655      	mov	r5, sl
 800c6c6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800c6c8:	9f03      	ldr	r7, [sp, #12]
 800c6ca:	03ad      	lsls	r5, r5, #14
 800c6cc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c6d0:	f04f 0900 	mov.w	r9, #0
 800c6d4:	fb0e fe06 	mul.w	lr, lr, r6
 800c6d8:	fbc7 8905 	smlal	r8, r9, r7, r5
 800c6dc:	9e04      	ldr	r6, [sp, #16]
 800c6de:	464f      	mov	r7, r9
 800c6e0:	10bd      	asrs	r5, r7, #2
 800c6e2:	f305 050f 	ssat	r5, #16, r5
 800c6e6:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800c6ea:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c6ec:	fa1f fe8c 	uxth.w	lr, ip
 800c6f0:	4575      	cmp	r5, lr
 800c6f2:	d91c      	bls.n	800c72e <D24_GENERIC+0x152>
 800c6f4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800c6f6:	b2ef      	uxtb	r7, r5
 800c6f8:	2d01      	cmp	r5, #1
 800c6fa:	b23e      	sxth	r6, r7
 800c6fc:	d18f      	bne.n	800c61e <D24_GENERIC+0x42>
 800c6fe:	9d06      	ldr	r5, [sp, #24]
 800c700:	b15d      	cbz	r5, 800c71a <D24_GENERIC+0x13e>
 800c702:	f01e 0f01 	tst.w	lr, #1
 800c706:	d122      	bne.n	800c74e <D24_GENERIC+0x172>
 800c708:	7805      	ldrb	r5, [r0, #0]
 800c70a:	78c7      	ldrb	r7, [r0, #3]
 800c70c:	7846      	ldrb	r6, [r0, #1]
 800c70e:	022d      	lsls	r5, r5, #8
 800c710:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800c714:	44b4      	add	ip, r6
 800c716:	3002      	adds	r0, #2
 800c718:	e78e      	b.n	800c638 <D24_GENERIC+0x5c>
 800c71a:	7846      	ldrb	r6, [r0, #1]
 800c71c:	f890 c002 	ldrb.w	ip, [r0, #2]
 800c720:	f810 5b03 	ldrb.w	r5, [r0], #3
 800c724:	0236      	lsls	r6, r6, #8
 800c726:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800c72a:	44ac      	add	ip, r5
 800c72c:	e784      	b.n	800c638 <D24_GENERIC+0x5c>
 800c72e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c732:	61d3      	str	r3, [r2, #28]
 800c734:	9b07      	ldr	r3, [sp, #28]
 800c736:	6094      	str	r4, [r2, #8]
 800c738:	2000      	movs	r0, #0
 800c73a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800c73e:	f8c2 a010 	str.w	sl, [r2, #16]
 800c742:	f8c2 9014 	str.w	r9, [r2, #20]
 800c746:	6193      	str	r3, [r2, #24]
 800c748:	b009      	add	sp, #36	; 0x24
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	78c5      	ldrb	r5, [r0, #3]
 800c750:	7887      	ldrb	r7, [r0, #2]
 800c752:	f810 6b04 	ldrb.w	r6, [r0], #4
 800c756:	022d      	lsls	r5, r5, #8
 800c758:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800c75c:	44b4      	add	ip, r6
 800c75e:	e76b      	b.n	800c638 <D24_GENERIC+0x5c>
 800c760:	20000000 	.word	0x20000000
 800c764:	00030001 	.word	0x00030001
 800c768:	00060007 	.word	0x00060007

0800c76c <D32_GENERIC>:
 800c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c772:	6993      	ldr	r3, [r2, #24]
 800c774:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c776:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c77a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c77e:	69d6      	ldr	r6, [r2, #28]
 800c780:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800c784:	b089      	sub	sp, #36	; 0x24
 800c786:	9307      	str	r3, [sp, #28]
 800c788:	9403      	str	r4, [sp, #12]
 800c78a:	6893      	ldr	r3, [r2, #8]
 800c78c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c78e:	9104      	str	r1, [sp, #16]
 800c790:	2d00      	cmp	r5, #0
 800c792:	f000 809f 	beq.w	800c8d4 <D32_GENERIC+0x168>
 800c796:	f004 0510 	and.w	r5, r4, #16
 800c79a:	f004 0420 	and.w	r4, r4, #32
 800c79e:	9505      	str	r5, [sp, #20]
 800c7a0:	4953      	ldr	r1, [pc, #332]	; (800c8f0 <D32_GENERIC+0x184>)
 800c7a2:	9406      	str	r4, [sp, #24]
 800c7a4:	f04f 0c00 	mov.w	ip, #0
 800c7a8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c7ac:	461d      	mov	r5, r3
 800c7ae:	4617      	mov	r7, r2
 800c7b0:	e077      	b.n	800c8a2 <D32_GENERIC+0x136>
 800c7b2:	f818 3003 	ldrb.w	r3, [r8, r3]
 800c7b6:	f810 800e 	ldrb.w	r8, [r0, lr]
 800c7ba:	f810 e002 	ldrb.w	lr, [r0, r2]
 800c7be:	7800      	ldrb	r0, [r0, #0]
 800c7c0:	041b      	lsls	r3, r3, #16
 800c7c2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800c7c6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800c7ca:	4403      	add	r3, r0
 800c7cc:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800c7d0:	b2dc      	uxtb	r4, r3
 800c7d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c7d6:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800c7da:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c7de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c7e2:	0e1b      	lsrs	r3, r3, #24
 800c7e4:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800c7e8:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800c7ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7f0:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c7f4:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800c7f8:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800c7fc:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800c800:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c804:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c808:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c80c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800c810:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c814:	4b37      	ldr	r3, [pc, #220]	; (800c8f4 <D32_GENERIC+0x188>)
 800c816:	fb22 b403 	smlad	r4, r2, r3, fp
 800c81a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c81e:	fb2e 4803 	smlad	r8, lr, r3, r4
 800c822:	4b35      	ldr	r3, [pc, #212]	; (800c8f8 <D32_GENERIC+0x18c>)
 800c824:	fb22 5503 	smlad	r5, r2, r3, r5
 800c828:	4b34      	ldr	r3, [pc, #208]	; (800c8fc <D32_GENERIC+0x190>)
 800c82a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800c82e:	2301      	movs	r3, #1
 800c830:	fb22 f203 	smuad	r2, r2, r3
 800c834:	4b32      	ldr	r3, [pc, #200]	; (800c900 <D32_GENERIC+0x194>)
 800c836:	fb2e 2503 	smlad	r5, lr, r3, r2
 800c83a:	9b02      	ldr	r3, [sp, #8]
 800c83c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800c840:	eb04 080a 	add.w	r8, r4, sl
 800c844:	eba8 0803 	sub.w	r8, r8, r3
 800c848:	4642      	mov	r2, r8
 800c84a:	17d3      	asrs	r3, r2, #31
 800c84c:	e9cd 2300 	strd	r2, r3, [sp]
 800c850:	9b05      	ldr	r3, [sp, #20]
 800c852:	f10c 0e01 	add.w	lr, ip, #1
 800c856:	b16b      	cbz	r3, 800c874 <D32_GENERIC+0x108>
 800c858:	6a3a      	ldr	r2, [r7, #32]
 800c85a:	9b01      	ldr	r3, [sp, #4]
 800c85c:	9402      	str	r4, [sp, #8]
 800c85e:	fba8 8902 	umull	r8, r9, r8, r2
 800c862:	fb02 9903 	mla	r9, r2, r3, r9
 800c866:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800c86a:	f149 0900 	adc.w	r9, r9, #0
 800c86e:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800c872:	4654      	mov	r4, sl
 800c874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c876:	9a04      	ldr	r2, [sp, #16]
 800c878:	fb0c fc03 	mul.w	ip, ip, r3
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	0364      	lsls	r4, r4, #13
 800c880:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c884:	f04f 0900 	mov.w	r9, #0
 800c888:	fbc3 8904 	smlal	r8, r9, r3, r4
 800c88c:	464b      	mov	r3, r9
 800c88e:	109b      	asrs	r3, r3, #2
 800c890:	f303 030f 	ssat	r3, #16, r3
 800c894:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800c898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c89a:	fa1f fc8e 	uxth.w	ip, lr
 800c89e:	4563      	cmp	r3, ip
 800c8a0:	d914      	bls.n	800c8cc <D32_GENERIC+0x160>
 800c8a2:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800c8a4:	b2e2      	uxtb	r2, r4
 800c8a6:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800c8aa:	eb00 080e 	add.w	r8, r0, lr
 800c8ae:	4253      	negs	r3, r2
 800c8b0:	2c01      	cmp	r4, #1
 800c8b2:	eb08 0403 	add.w	r4, r8, r3
 800c8b6:	f47f af7c 	bne.w	800c7b2 <D32_GENERIC+0x46>
 800c8ba:	1d02      	adds	r2, r0, #4
 800c8bc:	6803      	ldr	r3, [r0, #0]
 800c8be:	9806      	ldr	r0, [sp, #24]
 800c8c0:	b110      	cbz	r0, 800c8c8 <D32_GENERIC+0x15c>
 800c8c2:	ba5b      	rev16	r3, r3
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	e783      	b.n	800c7d0 <D32_GENERIC+0x64>
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	e781      	b.n	800c7d0 <D32_GENERIC+0x64>
 800c8cc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	463a      	mov	r2, r7
 800c8d4:	6093      	str	r3, [r2, #8]
 800c8d6:	9b07      	ldr	r3, [sp, #28]
 800c8d8:	f8c2 b00c 	str.w	fp, [r2, #12]
 800c8dc:	2000      	movs	r0, #0
 800c8de:	61d6      	str	r6, [r2, #28]
 800c8e0:	f8c2 a010 	str.w	sl, [r2, #16]
 800c8e4:	f8c2 9014 	str.w	r9, [r2, #20]
 800c8e8:	6193      	str	r3, [r2, #24]
 800c8ea:	b009      	add	sp, #36	; 0x24
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	20000000 	.word	0x20000000
 800c8f4:	00060003 	.word	0x00060003
 800c8f8:	000a000c 	.word	0x000a000c
 800c8fc:	000c000a 	.word	0x000c000a
 800c900:	00030006 	.word	0x00030006

0800c904 <D48_GENERIC>:
 800c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c908:	b089      	sub	sp, #36	; 0x24
 800c90a:	6953      	ldr	r3, [r2, #20]
 800c90c:	68d4      	ldr	r4, [r2, #12]
 800c90e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c910:	9302      	str	r3, [sp, #8]
 800c912:	9400      	str	r4, [sp, #0]
 800c914:	6993      	ldr	r3, [r2, #24]
 800c916:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c918:	9307      	str	r3, [sp, #28]
 800c91a:	9403      	str	r4, [sp, #12]
 800c91c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c920:	69d6      	ldr	r6, [r2, #28]
 800c922:	6893      	ldr	r3, [r2, #8]
 800c924:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c926:	9104      	str	r1, [sp, #16]
 800c928:	2d00      	cmp	r5, #0
 800c92a:	f000 80c5 	beq.w	800cab8 <D48_GENERIC+0x1b4>
 800c92e:	f004 0510 	and.w	r5, r4, #16
 800c932:	f004 0420 	and.w	r4, r4, #32
 800c936:	4967      	ldr	r1, [pc, #412]	; (800cad4 <D48_GENERIC+0x1d0>)
 800c938:	9505      	str	r5, [sp, #20]
 800c93a:	9406      	str	r4, [sp, #24]
 800c93c:	f04f 0c00 	mov.w	ip, #0
 800c940:	4657      	mov	r7, sl
 800c942:	9301      	str	r3, [sp, #4]
 800c944:	e09c      	b.n	800ca80 <D48_GENERIC+0x17c>
 800c946:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800c94a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800c94e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800c952:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800c956:	7800      	ldrb	r0, [r0, #0]
 800c958:	0424      	lsls	r4, r4, #16
 800c95a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800c95e:	f818 4005 	ldrb.w	r4, [r8, r5]
 800c962:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800c966:	44a8      	add	r8, r5
 800c968:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800c96c:	eb0b 0500 	add.w	r5, fp, r0
 800c970:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800c974:	fa5f f885 	uxtb.w	r8, r5
 800c978:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800c97c:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800c980:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800c984:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800c988:	0e2d      	lsrs	r5, r5, #24
 800c98a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800c98e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800c992:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800c996:	b2e6      	uxtb	r6, r4
 800c998:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800c99c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c9a0:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800c9a4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c9a8:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800c9ac:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800c9b0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800c9b4:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800c9b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c9bc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c9c0:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800c9c4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c9c8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c9cc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c9d0:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800c9d4:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800c9d8:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800c9dc:	4c3e      	ldr	r4, [pc, #248]	; (800cad8 <D48_GENERIC+0x1d4>)
 800c9de:	9d00      	ldr	r5, [sp, #0]
 800c9e0:	fb2a 5404 	smlad	r4, sl, r4, r5
 800c9e4:	4d3d      	ldr	r5, [pc, #244]	; (800cadc <D48_GENERIC+0x1d8>)
 800c9e6:	fb28 4405 	smlad	r4, r8, r5, r4
 800c9ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c9ee:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800c9f2:	4c3b      	ldr	r4, [pc, #236]	; (800cae0 <D48_GENERIC+0x1dc>)
 800c9f4:	9b01      	ldr	r3, [sp, #4]
 800c9f6:	fb2a 3304 	smlad	r3, sl, r4, r3
 800c9fa:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800c9fe:	fb28 3304 	smlad	r3, r8, r4, r3
 800ca02:	4c38      	ldr	r4, [pc, #224]	; (800cae4 <D48_GENERIC+0x1e0>)
 800ca04:	fb2e 3304 	smlad	r3, lr, r4, r3
 800ca08:	2501      	movs	r5, #1
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	fb2a fa05 	smuad	sl, sl, r5
 800ca10:	4b35      	ldr	r3, [pc, #212]	; (800cae8 <D48_GENERIC+0x1e4>)
 800ca12:	fb28 a803 	smlad	r8, r8, r3, sl
 800ca16:	4b35      	ldr	r3, [pc, #212]	; (800caec <D48_GENERIC+0x1e8>)
 800ca18:	fb2e 8303 	smlad	r3, lr, r3, r8
 800ca1c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	9b02      	ldr	r3, [sp, #8]
 800ca24:	eb04 0807 	add.w	r8, r4, r7
 800ca28:	eba8 0803 	sub.w	r8, r8, r3
 800ca2c:	9b05      	ldr	r3, [sp, #20]
 800ca2e:	4465      	add	r5, ip
 800ca30:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800ca34:	b163      	cbz	r3, 800ca50 <D48_GENERIC+0x14c>
 800ca36:	6a17      	ldr	r7, [r2, #32]
 800ca38:	9402      	str	r4, [sp, #8]
 800ca3a:	fba8 8907 	umull	r8, r9, r8, r7
 800ca3e:	fb07 990b 	mla	r9, r7, fp, r9
 800ca42:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800ca46:	f149 0900 	adc.w	r9, r9, #0
 800ca4a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800ca4e:	463c      	mov	r4, r7
 800ca50:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	02e4      	lsls	r4, r4, #11
 800ca58:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ca5c:	f04f 0900 	mov.w	r9, #0
 800ca60:	fb0c fc0e 	mul.w	ip, ip, lr
 800ca64:	fbc3 8904 	smlal	r8, r9, r3, r4
 800ca68:	9b04      	ldr	r3, [sp, #16]
 800ca6a:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800ca6e:	f304 040f 	ssat	r4, #16, r4
 800ca72:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800ca76:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800ca78:	fa1f fc85 	uxth.w	ip, r5
 800ca7c:	4564      	cmp	r4, ip
 800ca7e:	d919      	bls.n	800cab4 <D48_GENERIC+0x1b0>
 800ca80:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800ca82:	fa5f fe84 	uxtb.w	lr, r4
 800ca86:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800ca8a:	f1ce 0500 	rsb	r5, lr, #0
 800ca8e:	eb00 0b09 	add.w	fp, r0, r9
 800ca92:	eb0b 0a05 	add.w	sl, fp, r5
 800ca96:	2c01      	cmp	r4, #1
 800ca98:	eb0a 0809 	add.w	r8, sl, r9
 800ca9c:	f47f af53 	bne.w	800c946 <D48_GENERIC+0x42>
 800caa0:	9b06      	ldr	r3, [sp, #24]
 800caa2:	6805      	ldr	r5, [r0, #0]
 800caa4:	6844      	ldr	r4, [r0, #4]
 800caa6:	3006      	adds	r0, #6
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f43f af63 	beq.w	800c974 <D48_GENERIC+0x70>
 800caae:	ba6d      	rev16	r5, r5
 800cab0:	ba64      	rev16	r4, r4
 800cab2:	e75f      	b.n	800c974 <D48_GENERIC+0x70>
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	46ba      	mov	sl, r7
 800cab8:	6093      	str	r3, [r2, #8]
 800caba:	9b00      	ldr	r3, [sp, #0]
 800cabc:	60d3      	str	r3, [r2, #12]
 800cabe:	9b02      	ldr	r3, [sp, #8]
 800cac0:	6153      	str	r3, [r2, #20]
 800cac2:	9b07      	ldr	r3, [sp, #28]
 800cac4:	61d6      	str	r6, [r2, #28]
 800cac6:	2000      	movs	r0, #0
 800cac8:	f8c2 a010 	str.w	sl, [r2, #16]
 800cacc:	6193      	str	r3, [r2, #24]
 800cace:	b009      	add	sp, #36	; 0x24
 800cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad4:	20000000 	.word	0x20000000
 800cad8:	000f000a 	.word	0x000f000a
 800cadc:	00060003 	.word	0x00060003
 800cae0:	00150019 	.word	0x00150019
 800cae4:	00190015 	.word	0x00190015
 800cae8:	00030006 	.word	0x00030006
 800caec:	000a000f 	.word	0x000a000f

0800caf0 <D64_GENERIC>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	b089      	sub	sp, #36	; 0x24
 800caf6:	6913      	ldr	r3, [r2, #16]
 800caf8:	6895      	ldr	r5, [r2, #8]
 800cafa:	9303      	str	r3, [sp, #12]
 800cafc:	9501      	str	r5, [sp, #4]
 800cafe:	6953      	ldr	r3, [r2, #20]
 800cb00:	68d5      	ldr	r5, [r2, #12]
 800cb02:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cb04:	9304      	str	r3, [sp, #16]
 800cb06:	9500      	str	r5, [sp, #0]
 800cb08:	6993      	ldr	r3, [r2, #24]
 800cb0a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cb0c:	9307      	str	r3, [sp, #28]
 800cb0e:	9505      	str	r5, [sp, #20]
 800cb10:	69d3      	ldr	r3, [r2, #28]
 800cb12:	9106      	str	r1, [sp, #24]
 800cb14:	2c00      	cmp	r4, #0
 800cb16:	f000 80d9 	beq.w	800cccc <D64_GENERIC+0x1dc>
 800cb1a:	6a11      	ldr	r1, [r2, #32]
 800cb1c:	9102      	str	r1, [sp, #8]
 800cb1e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800cd0c <D64_GENERIC+0x21c>
 800cb22:	f04f 0c00 	mov.w	ip, #0
 800cb26:	4681      	mov	r9, r0
 800cb28:	e0c1      	b.n	800ccae <D64_GENERIC+0x1be>
 800cb2a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800cb2e:	4274      	negs	r4, r6
 800cb30:	eb09 0708 	add.w	r7, r9, r8
 800cb34:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800cb38:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800cb3c:	5d38      	ldrb	r0, [r7, r4]
 800cb3e:	5d29      	ldrb	r1, [r5, r4]
 800cb40:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800cb44:	f819 a008 	ldrb.w	sl, [r9, r8]
 800cb48:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800cb4c:	f899 7000 	ldrb.w	r7, [r9]
 800cb50:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800cb54:	4425      	add	r5, r4
 800cb56:	0409      	lsls	r1, r1, #16
 800cb58:	0400      	lsls	r0, r0, #16
 800cb5a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800cb5e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800cb62:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800cb66:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800cb6a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800cb6e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800cb72:	4459      	add	r1, fp
 800cb74:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800cb78:	4438      	add	r0, r7
 800cb7a:	b2c5      	uxtb	r5, r0
 800cb7c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cb80:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800cb84:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800cb88:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800cb8c:	0e00      	lsrs	r0, r0, #24
 800cb8e:	eb03 0806 	add.w	r8, r3, r6
 800cb92:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800cb96:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800cb9a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cb9e:	b2c8      	uxtb	r0, r1
 800cba0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800cba4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800cba8:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800cbac:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800cbb0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800cbb4:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800cbb8:	0e09      	lsrs	r1, r1, #24
 800cbba:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800cbbe:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800cbc2:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800cbc6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800cbca:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800cbce:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800cbd2:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800cbd6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cbda:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cbde:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cbe2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800cbe6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cbea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cbee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800cbf2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800cbf6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800cbfa:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800cbfe:	0a8b      	lsrs	r3, r1, #10
 800cc00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800cc04:	4939      	ldr	r1, [pc, #228]	; (800ccec <D64_GENERIC+0x1fc>)
 800cc06:	9c00      	ldr	r4, [sp, #0]
 800cc08:	fb28 4101 	smlad	r1, r8, r1, r4
 800cc0c:	4c38      	ldr	r4, [pc, #224]	; (800ccf0 <D64_GENERIC+0x200>)
 800cc0e:	fb27 1104 	smlad	r1, r7, r4, r1
 800cc12:	4c38      	ldr	r4, [pc, #224]	; (800ccf4 <D64_GENERIC+0x204>)
 800cc14:	fb20 1104 	smlad	r1, r0, r4, r1
 800cc18:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800cc1c:	fb2a 1106 	smlad	r1, sl, r6, r1
 800cc20:	4c35      	ldr	r4, [pc, #212]	; (800ccf8 <D64_GENERIC+0x208>)
 800cc22:	9d01      	ldr	r5, [sp, #4]
 800cc24:	fb28 5404 	smlad	r4, r8, r4, r5
 800cc28:	4d33      	ldr	r5, [pc, #204]	; (800ccf8 <D64_GENERIC+0x208>)
 800cc2a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800cc2e:	4d33      	ldr	r5, [pc, #204]	; (800ccfc <D64_GENERIC+0x20c>)
 800cc30:	fb27 4405 	smlad	r4, r7, r5, r4
 800cc34:	fb20 4415 	smladx	r4, r0, r5, r4
 800cc38:	2501      	movs	r5, #1
 800cc3a:	9400      	str	r4, [sp, #0]
 800cc3c:	fb28 f805 	smuad	r8, r8, r5
 800cc40:	4c2f      	ldr	r4, [pc, #188]	; (800cd00 <D64_GENERIC+0x210>)
 800cc42:	fb27 8704 	smlad	r7, r7, r4, r8
 800cc46:	4c2f      	ldr	r4, [pc, #188]	; (800cd04 <D64_GENERIC+0x214>)
 800cc48:	fb20 7004 	smlad	r0, r0, r4, r7
 800cc4c:	4c2e      	ldr	r4, [pc, #184]	; (800cd08 <D64_GENERIC+0x218>)
 800cc4e:	fb2a 0004 	smlad	r0, sl, r4, r0
 800cc52:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800cc56:	9902      	ldr	r1, [sp, #8]
 800cc58:	9001      	str	r0, [sp, #4]
 800cc5a:	b189      	cbz	r1, 800cc80 <D64_GENERIC+0x190>
 800cc5c:	9803      	ldr	r0, [sp, #12]
 800cc5e:	9c04      	ldr	r4, [sp, #16]
 800cc60:	9604      	str	r6, [sp, #16]
 800cc62:	4430      	add	r0, r6
 800cc64:	1b00      	subs	r0, r0, r4
 800cc66:	17c5      	asrs	r5, r0, #31
 800cc68:	460f      	mov	r7, r1
 800cc6a:	fba0 0101 	umull	r0, r1, r0, r1
 800cc6e:	fb07 1105 	mla	r1, r7, r5, r1
 800cc72:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800cc76:	f141 0100 	adc.w	r1, r1, #0
 800cc7a:	0049      	lsls	r1, r1, #1
 800cc7c:	9103      	str	r1, [sp, #12]
 800cc7e:	460e      	mov	r6, r1
 800cc80:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800cc82:	9905      	ldr	r1, [sp, #20]
 800cc84:	9806      	ldr	r0, [sp, #24]
 800cc86:	02b6      	lsls	r6, r6, #10
 800cc88:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	fb0c f404 	mul.w	r4, ip, r4
 800cc94:	fbc1 7806 	smlal	r7, r8, r1, r6
 800cc98:	4641      	mov	r1, r8
 800cc9a:	1089      	asrs	r1, r1, #2
 800cc9c:	f301 010f 	ssat	r1, #16, r1
 800cca0:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800cca4:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800cca6:	f10c 0c01 	add.w	ip, ip, #1
 800ccaa:	4561      	cmp	r1, ip
 800ccac:	dd0e      	ble.n	800cccc <D64_GENERIC+0x1dc>
 800ccae:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800ccb0:	2e01      	cmp	r6, #1
 800ccb2:	f47f af3a 	bne.w	800cb2a <D64_GENERIC+0x3a>
 800ccb6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800ccb8:	06b4      	lsls	r4, r6, #26
 800ccba:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ccbe:	f109 0908 	add.w	r9, r9, #8
 800ccc2:	f57f af5a 	bpl.w	800cb7a <D64_GENERIC+0x8a>
 800ccc6:	ba40      	rev16	r0, r0
 800ccc8:	ba49      	rev16	r1, r1
 800ccca:	e756      	b.n	800cb7a <D64_GENERIC+0x8a>
 800cccc:	61d3      	str	r3, [r2, #28]
 800ccce:	9b03      	ldr	r3, [sp, #12]
 800ccd0:	9901      	ldr	r1, [sp, #4]
 800ccd2:	6113      	str	r3, [r2, #16]
 800ccd4:	9b04      	ldr	r3, [sp, #16]
 800ccd6:	6091      	str	r1, [r2, #8]
 800ccd8:	6153      	str	r3, [r2, #20]
 800ccda:	9900      	ldr	r1, [sp, #0]
 800ccdc:	9b07      	ldr	r3, [sp, #28]
 800ccde:	60d1      	str	r1, [r2, #12]
 800cce0:	2000      	movs	r0, #0
 800cce2:	6193      	str	r3, [r2, #24]
 800cce4:	b009      	add	sp, #36	; 0x24
 800cce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccea:	bf00      	nop
 800ccec:	001c0015 	.word	0x001c0015
 800ccf0:	000f000a 	.word	0x000f000a
 800ccf4:	00060003 	.word	0x00060003
 800ccf8:	0024002a 	.word	0x0024002a
 800ccfc:	002e0030 	.word	0x002e0030
 800cd00:	00030006 	.word	0x00030006
 800cd04:	000a000f 	.word	0x000a000f
 800cd08:	0015001c 	.word	0x0015001c
 800cd0c:	20000000 	.word	0x20000000

0800cd10 <D80_GENERIC>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	b08b      	sub	sp, #44	; 0x2c
 800cd16:	6914      	ldr	r4, [r2, #16]
 800cd18:	9404      	str	r4, [sp, #16]
 800cd1a:	6954      	ldr	r4, [r2, #20]
 800cd1c:	9405      	str	r4, [sp, #20]
 800cd1e:	6994      	ldr	r4, [r2, #24]
 800cd20:	9409      	str	r4, [sp, #36]	; 0x24
 800cd22:	6894      	ldr	r4, [r2, #8]
 800cd24:	9402      	str	r4, [sp, #8]
 800cd26:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800cd28:	68d4      	ldr	r4, [r2, #12]
 800cd2a:	9401      	str	r4, [sp, #4]
 800cd2c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cd2e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800cd32:	9406      	str	r4, [sp, #24]
 800cd34:	9107      	str	r1, [sp, #28]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 810f 	beq.w	800cf5a <D80_GENERIC+0x24a>
 800cd3c:	6a13      	ldr	r3, [r2, #32]
 800cd3e:	9308      	str	r3, [sp, #32]
 800cd40:	2300      	movs	r3, #0
 800cd42:	9200      	str	r2, [sp, #0]
 800cd44:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800cfac <D80_GENERIC+0x29c>
 800cd48:	f8cd b00c 	str.w	fp, [sp, #12]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	e0ed      	b.n	800cf2c <D80_GENERIC+0x21c>
 800cd50:	fa5f fc8c 	uxtb.w	ip, ip
 800cd54:	fa0f f48c 	sxth.w	r4, ip
 800cd58:	0066      	lsls	r6, r4, #1
 800cd5a:	eb06 0804 	add.w	r8, r6, r4
 800cd5e:	f1cc 0500 	rsb	r5, ip, #0
 800cd62:	eb00 0108 	add.w	r1, r0, r8
 800cd66:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800cd6a:	194b      	adds	r3, r1, r5
 800cd6c:	5d49      	ldrb	r1, [r1, r5]
 800cd6e:	f810 a008 	ldrb.w	sl, [r0, r8]
 800cd72:	f813 b004 	ldrb.w	fp, [r3, r4]
 800cd76:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800cd7a:	f890 8000 	ldrb.w	r8, [r0]
 800cd7e:	eb03 0e04 	add.w	lr, r3, r4
 800cd82:	eb0e 0705 	add.w	r7, lr, r5
 800cd86:	0409      	lsls	r1, r1, #16
 800cd88:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800cd8c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800cd90:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800cd94:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800cd98:	eb0a 0004 	add.w	r0, sl, r4
 800cd9c:	041b      	lsls	r3, r3, #16
 800cd9e:	f81a a004 	ldrb.w	sl, [sl, r4]
 800cda2:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800cda6:	5d44      	ldrb	r4, [r0, r5]
 800cda8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800cdac:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800cdb0:	4428      	add	r0, r5
 800cdb2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800cdb6:	4441      	add	r1, r8
 800cdb8:	4430      	add	r0, r6
 800cdba:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800cdbe:	441f      	add	r7, r3
 800cdc0:	b2cd      	uxtb	r5, r1
 800cdc2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cdc6:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800cdca:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800cdce:	9b03      	ldr	r3, [sp, #12]
 800cdd0:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800cdd4:	0e09      	lsrs	r1, r1, #24
 800cdd6:	4433      	add	r3, r6
 800cdd8:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800cddc:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800cde0:	b2fd      	uxtb	r5, r7
 800cde2:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800cde6:	469b      	mov	fp, r3
 800cde8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800cdec:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800cdf0:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800cdf4:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800cdf8:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800cdfc:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800ce00:	0e3b      	lsrs	r3, r7, #24
 800ce02:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800ce06:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800ce0a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ce0e:	fa5f fe84 	uxtb.w	lr, r4
 800ce12:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800ce16:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ce1a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800ce1e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800ce22:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800ce26:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ce2a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800ce2e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800ce32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ce36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce3a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ce3e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ce42:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ce46:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ce4a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800ce4e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800ce52:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800ce56:	0aa3      	lsrs	r3, r4, #10
 800ce58:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800ce5c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ce60:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ce64:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800ce68:	9303      	str	r3, [sp, #12]
 800ce6a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800ce6e:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800ce72:	4b42      	ldr	r3, [pc, #264]	; (800cf7c <D80_GENERIC+0x26c>)
 800ce74:	9901      	ldr	r1, [sp, #4]
 800ce76:	fb2b 1303 	smlad	r3, fp, r3, r1
 800ce7a:	4941      	ldr	r1, [pc, #260]	; (800cf80 <D80_GENERIC+0x270>)
 800ce7c:	fb28 3301 	smlad	r3, r8, r1, r3
 800ce80:	4940      	ldr	r1, [pc, #256]	; (800cf84 <D80_GENERIC+0x274>)
 800ce82:	fb2c 3301 	smlad	r3, ip, r1, r3
 800ce86:	4940      	ldr	r1, [pc, #256]	; (800cf88 <D80_GENERIC+0x278>)
 800ce88:	fb27 3301 	smlad	r3, r7, r1, r3
 800ce8c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ce90:	fb2e 3301 	smlad	r3, lr, r1, r3
 800ce94:	493d      	ldr	r1, [pc, #244]	; (800cf8c <D80_GENERIC+0x27c>)
 800ce96:	9c02      	ldr	r4, [sp, #8]
 800ce98:	fb2b 4401 	smlad	r4, fp, r1, r4
 800ce9c:	493c      	ldr	r1, [pc, #240]	; (800cf90 <D80_GENERIC+0x280>)
 800ce9e:	fb28 4401 	smlad	r4, r8, r1, r4
 800cea2:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800cea6:	fb2c 4101 	smlad	r1, ip, r1, r4
 800ceaa:	4c3a      	ldr	r4, [pc, #232]	; (800cf94 <D80_GENERIC+0x284>)
 800ceac:	fb27 1104 	smlad	r1, r7, r4, r1
 800ceb0:	4c39      	ldr	r4, [pc, #228]	; (800cf98 <D80_GENERIC+0x288>)
 800ceb2:	fb2e 1104 	smlad	r1, lr, r4, r1
 800ceb6:	9101      	str	r1, [sp, #4]
 800ceb8:	2101      	movs	r1, #1
 800ceba:	fb2b fb01 	smuad	fp, fp, r1
 800cebe:	4937      	ldr	r1, [pc, #220]	; (800cf9c <D80_GENERIC+0x28c>)
 800cec0:	fb28 b801 	smlad	r8, r8, r1, fp
 800cec4:	4d36      	ldr	r5, [pc, #216]	; (800cfa0 <D80_GENERIC+0x290>)
 800cec6:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800ceca:	4d36      	ldr	r5, [pc, #216]	; (800cfa4 <D80_GENERIC+0x294>)
 800cecc:	fb27 c705 	smlad	r7, r7, r5, ip
 800ced0:	4d35      	ldr	r5, [pc, #212]	; (800cfa8 <D80_GENERIC+0x298>)
 800ced2:	fb2e 7105 	smlad	r1, lr, r5, r7
 800ced6:	9102      	str	r1, [sp, #8]
 800ced8:	9908      	ldr	r1, [sp, #32]
 800ceda:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800cede:	b181      	cbz	r1, 800cf02 <D80_GENERIC+0x1f2>
 800cee0:	9c04      	ldr	r4, [sp, #16]
 800cee2:	9d05      	ldr	r5, [sp, #20]
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	441c      	add	r4, r3
 800cee8:	1b64      	subs	r4, r4, r5
 800ceea:	17e7      	asrs	r7, r4, #31
 800ceec:	fba4 4501 	umull	r4, r5, r4, r1
 800cef0:	fb01 5507 	mla	r5, r1, r7, r5
 800cef4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cef8:	f145 0500 	adc.w	r5, r5, #0
 800cefc:	0069      	lsls	r1, r5, #1
 800cefe:	9104      	str	r1, [sp, #16]
 800cf00:	460b      	mov	r3, r1
 800cf02:	9e00      	ldr	r6, [sp, #0]
 800cf04:	9f06      	ldr	r7, [sp, #24]
 800cf06:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800cf08:	025b      	lsls	r3, r3, #9
 800cf0a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cf0e:	2500      	movs	r5, #0
 800cf10:	fb02 f101 	mul.w	r1, r2, r1
 800cf14:	fbc7 4503 	smlal	r4, r5, r7, r3
 800cf18:	9c07      	ldr	r4, [sp, #28]
 800cf1a:	10ab      	asrs	r3, r5, #2
 800cf1c:	f303 030f 	ssat	r3, #16, r3
 800cf20:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800cf24:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800cf26:	3201      	adds	r2, #1
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	dd13      	ble.n	800cf54 <D80_GENERIC+0x244>
 800cf2c:	9b00      	ldr	r3, [sp, #0]
 800cf2e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800cf32:	f1bc 0f01 	cmp.w	ip, #1
 800cf36:	f47f af0b 	bne.w	800cd50 <D80_GENERIC+0x40>
 800cf3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3c:	6884      	ldr	r4, [r0, #8]
 800cf3e:	069b      	lsls	r3, r3, #26
 800cf40:	e890 0082 	ldmia.w	r0, {r1, r7}
 800cf44:	f100 000a 	add.w	r0, r0, #10
 800cf48:	f57f af3a 	bpl.w	800cdc0 <D80_GENERIC+0xb0>
 800cf4c:	ba49      	rev16	r1, r1
 800cf4e:	ba7f      	rev16	r7, r7
 800cf50:	ba64      	rev16	r4, r4
 800cf52:	e735      	b.n	800cdc0 <D80_GENERIC+0xb0>
 800cf54:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cf58:	4632      	mov	r2, r6
 800cf5a:	9b02      	ldr	r3, [sp, #8]
 800cf5c:	6093      	str	r3, [r2, #8]
 800cf5e:	9b01      	ldr	r3, [sp, #4]
 800cf60:	60d3      	str	r3, [r2, #12]
 800cf62:	9b04      	ldr	r3, [sp, #16]
 800cf64:	6113      	str	r3, [r2, #16]
 800cf66:	9b05      	ldr	r3, [sp, #20]
 800cf68:	6153      	str	r3, [r2, #20]
 800cf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6c:	f8c2 b01c 	str.w	fp, [r2, #28]
 800cf70:	2000      	movs	r0, #0
 800cf72:	6193      	str	r3, [r2, #24]
 800cf74:	b00b      	add	sp, #44	; 0x2c
 800cf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7a:	bf00      	nop
 800cf7c:	002d0024 	.word	0x002d0024
 800cf80:	001c0015 	.word	0x001c0015
 800cf84:	000f000a 	.word	0x000f000a
 800cf88:	00060003 	.word	0x00060003
 800cf8c:	0037003f 	.word	0x0037003f
 800cf90:	00450049 	.word	0x00450049
 800cf94:	00490045 	.word	0x00490045
 800cf98:	003f0037 	.word	0x003f0037
 800cf9c:	00030006 	.word	0x00030006
 800cfa0:	000a000f 	.word	0x000a000f
 800cfa4:	0015001c 	.word	0x0015001c
 800cfa8:	0024002d 	.word	0x0024002d
 800cfac:	20000000 	.word	0x20000000

0800cfb0 <D128_GENERIC>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	b093      	sub	sp, #76	; 0x4c
 800cfb6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800cfb8:	9005      	str	r0, [sp, #20]
 800cfba:	4610      	mov	r0, r2
 800cfbc:	9201      	str	r2, [sp, #4]
 800cfbe:	6912      	ldr	r2, [r2, #16]
 800cfc0:	920c      	str	r2, [sp, #48]	; 0x30
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	6940      	ldr	r0, [r0, #20]
 800cfc6:	900d      	str	r0, [sp, #52]	; 0x34
 800cfc8:	4610      	mov	r0, r2
 800cfca:	4614      	mov	r4, r2
 800cfcc:	6992      	ldr	r2, [r2, #24]
 800cfce:	9211      	str	r2, [sp, #68]	; 0x44
 800cfd0:	69c2      	ldr	r2, [r0, #28]
 800cfd2:	9202      	str	r2, [sp, #8]
 800cfd4:	68e2      	ldr	r2, [r4, #12]
 800cfd6:	6880      	ldr	r0, [r0, #8]
 800cfd8:	9203      	str	r2, [sp, #12]
 800cfda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cfdc:	9004      	str	r0, [sp, #16]
 800cfde:	920e      	str	r2, [sp, #56]	; 0x38
 800cfe0:	910f      	str	r1, [sp, #60]	; 0x3c
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f000 819b 	beq.w	800d31e <D128_GENERIC+0x36e>
 800cfe8:	6a23      	ldr	r3, [r4, #32]
 800cfea:	9310      	str	r3, [sp, #64]	; 0x40
 800cfec:	2300      	movs	r3, #0
 800cfee:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800d398 <D128_GENERIC+0x3e8>
 800cff2:	9306      	str	r3, [sp, #24]
 800cff4:	e17a      	b.n	800d2ec <D128_GENERIC+0x33c>
 800cff6:	b2d2      	uxtb	r2, r2
 800cff8:	9d05      	ldr	r5, [sp, #20]
 800cffa:	b214      	sxth	r4, r2
 800cffc:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800d000:	4250      	negs	r0, r2
 800d002:	eb05 010a 	add.w	r1, r5, sl
 800d006:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d00a:	eb01 0800 	add.w	r8, r1, r0
 800d00e:	eb0b 0c04 	add.w	ip, fp, r4
 800d012:	eb08 070c 	add.w	r7, r8, ip
 800d016:	183b      	adds	r3, r7, r0
 800d018:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d01c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800d020:	eb0e 0604 	add.w	r6, lr, r4
 800d024:	9307      	str	r3, [sp, #28]
 800d026:	1833      	adds	r3, r6, r0
 800d028:	9305      	str	r3, [sp, #20]
 800d02a:	462b      	mov	r3, r5
 800d02c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800d030:	f8cd a020 	str.w	sl, [sp, #32]
 800d034:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800d038:	f813 c002 	ldrb.w	ip, [r3, r2]
 800d03c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800d040:	5c3a      	ldrb	r2, [r7, r0]
 800d042:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800d046:	781f      	ldrb	r7, [r3, #0]
 800d048:	9b07      	ldr	r3, [sp, #28]
 800d04a:	9d05      	ldr	r5, [sp, #20]
 800d04c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800d050:	5c09      	ldrb	r1, [r1, r0]
 800d052:	9709      	str	r7, [sp, #36]	; 0x24
 800d054:	9307      	str	r3, [sp, #28]
 800d056:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800d05a:	5c33      	ldrb	r3, [r6, r0]
 800d05c:	0412      	lsls	r2, r2, #16
 800d05e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800d062:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800d066:	9d08      	ldr	r5, [sp, #32]
 800d068:	eb06 0a04 	add.w	sl, r6, r4
 800d06c:	0409      	lsls	r1, r1, #16
 800d06e:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800d072:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800d076:	5d36      	ldrb	r6, [r6, r4]
 800d078:	9c05      	ldr	r4, [sp, #20]
 800d07a:	042d      	lsls	r5, r5, #16
 800d07c:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800d080:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d084:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800d088:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800d08c:	eb0a 0c00 	add.w	ip, sl, r0
 800d090:	041b      	lsls	r3, r3, #16
 800d092:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800d096:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800d09a:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800d09e:	9d07      	ldr	r5, [sp, #28]
 800d0a0:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800d0a4:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800d0a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d0aa:	4458      	add	r0, fp
 800d0ac:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800d0b0:	9005      	str	r0, [sp, #20]
 800d0b2:	4439      	add	r1, r7
 800d0b4:	442a      	add	r2, r5
 800d0b6:	44b2      	add	sl, r6
 800d0b8:	1918      	adds	r0, r3, r4
 800d0ba:	b2cb      	uxtb	r3, r1
 800d0bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d0c0:	9e02      	ldr	r6, [sp, #8]
 800d0c2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d0c6:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800d0ca:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800d0ce:	441e      	add	r6, r3
 800d0d0:	0e09      	lsrs	r1, r1, #24
 800d0d2:	4633      	mov	r3, r6
 800d0d4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d0d8:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800d0dc:	b2d4      	uxtb	r4, r2
 800d0de:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d0e2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d0e6:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800d0ea:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d0ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d0f2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d0f6:	0e12      	lsrs	r2, r2, #24
 800d0f8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800d0fc:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800d100:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d104:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800d108:	9702      	str	r7, [sp, #8]
 800d10a:	b2c2      	uxtb	r2, r0
 800d10c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800d110:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800d114:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800d118:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800d11c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d120:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d124:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d128:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d12c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800d130:	0e00      	lsrs	r0, r0, #24
 800d132:	fa5f f68a 	uxtb.w	r6, sl
 800d136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d13a:	9309      	str	r3, [sp, #36]	; 0x24
 800d13c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d140:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800d144:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800d148:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800d14c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d150:	950a      	str	r5, [sp, #40]	; 0x28
 800d152:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800d156:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800d15a:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800d15e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d162:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800d166:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d16a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d16c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800d170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d172:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800d176:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d17a:	9307      	str	r3, [sp, #28]
 800d17c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d180:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d184:	9b02      	ldr	r3, [sp, #8]
 800d186:	f8cd c008 	str.w	ip, [sp, #8]
 800d18a:	4694      	mov	ip, r2
 800d18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d18e:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800d192:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800d196:	9a02      	ldr	r2, [sp, #8]
 800d198:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d19c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d1a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d1a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1a6:	f8cd a020 	str.w	sl, [sp, #32]
 800d1aa:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d1ae:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800d1b2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d1b6:	9b07      	ldr	r3, [sp, #28]
 800d1b8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d1bc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d1c0:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800d1c4:	9a08      	ldr	r2, [sp, #32]
 800d1c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1ce:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d1d2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d1d6:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800d1da:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800d1de:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d1e2:	0a96      	lsrs	r6, r2, #10
 800d1e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d1e8:	9602      	str	r6, [sp, #8]
 800d1ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d1ee:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800d1f2:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800d1f6:	4e53      	ldr	r6, [pc, #332]	; (800d344 <D128_GENERIC+0x394>)
 800d1f8:	9f03      	ldr	r7, [sp, #12]
 800d1fa:	fb2c 7606 	smlad	r6, ip, r6, r7
 800d1fe:	4f52      	ldr	r7, [pc, #328]	; (800d348 <D128_GENERIC+0x398>)
 800d200:	fb2a 6607 	smlad	r6, sl, r7, r6
 800d204:	4f51      	ldr	r7, [pc, #324]	; (800d34c <D128_GENERIC+0x39c>)
 800d206:	fb21 6607 	smlad	r6, r1, r7, r6
 800d20a:	4f51      	ldr	r7, [pc, #324]	; (800d350 <D128_GENERIC+0x3a0>)
 800d20c:	fb24 6607 	smlad	r6, r4, r7, r6
 800d210:	4f50      	ldr	r7, [pc, #320]	; (800d354 <D128_GENERIC+0x3a4>)
 800d212:	fb28 6607 	smlad	r6, r8, r7, r6
 800d216:	4f50      	ldr	r7, [pc, #320]	; (800d358 <D128_GENERIC+0x3a8>)
 800d218:	fb20 6607 	smlad	r6, r0, r7, r6
 800d21c:	4f4f      	ldr	r7, [pc, #316]	; (800d35c <D128_GENERIC+0x3ac>)
 800d21e:	fb23 6607 	smlad	r6, r3, r7, r6
 800d222:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800d226:	fb25 6607 	smlad	r6, r5, r7, r6
 800d22a:	4f4d      	ldr	r7, [pc, #308]	; (800d360 <D128_GENERIC+0x3b0>)
 800d22c:	9a04      	ldr	r2, [sp, #16]
 800d22e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800d232:	4a4c      	ldr	r2, [pc, #304]	; (800d364 <D128_GENERIC+0x3b4>)
 800d234:	fb2a ee02 	smlad	lr, sl, r2, lr
 800d238:	4f4b      	ldr	r7, [pc, #300]	; (800d368 <D128_GENERIC+0x3b8>)
 800d23a:	fb21 ee07 	smlad	lr, r1, r7, lr
 800d23e:	4f4b      	ldr	r7, [pc, #300]	; (800d36c <D128_GENERIC+0x3bc>)
 800d240:	fb24 ee07 	smlad	lr, r4, r7, lr
 800d244:	4f4a      	ldr	r7, [pc, #296]	; (800d370 <D128_GENERIC+0x3c0>)
 800d246:	fb28 ee07 	smlad	lr, r8, r7, lr
 800d24a:	4f4a      	ldr	r7, [pc, #296]	; (800d374 <D128_GENERIC+0x3c4>)
 800d24c:	fb20 ee07 	smlad	lr, r0, r7, lr
 800d250:	4f49      	ldr	r7, [pc, #292]	; (800d378 <D128_GENERIC+0x3c8>)
 800d252:	fb23 e707 	smlad	r7, r3, r7, lr
 800d256:	f8df e144 	ldr.w	lr, [pc, #324]	; 800d39c <D128_GENERIC+0x3ec>
 800d25a:	fb25 720e 	smlad	r2, r5, lr, r7
 800d25e:	f04f 0b01 	mov.w	fp, #1
 800d262:	9203      	str	r2, [sp, #12]
 800d264:	fb2c fb0b 	smuad	fp, ip, fp
 800d268:	4f44      	ldr	r7, [pc, #272]	; (800d37c <D128_GENERIC+0x3cc>)
 800d26a:	fb2a ba07 	smlad	sl, sl, r7, fp
 800d26e:	4f44      	ldr	r7, [pc, #272]	; (800d380 <D128_GENERIC+0x3d0>)
 800d270:	fb21 aa07 	smlad	sl, r1, r7, sl
 800d274:	4f43      	ldr	r7, [pc, #268]	; (800d384 <D128_GENERIC+0x3d4>)
 800d276:	fb24 aa07 	smlad	sl, r4, r7, sl
 800d27a:	4f43      	ldr	r7, [pc, #268]	; (800d388 <D128_GENERIC+0x3d8>)
 800d27c:	fb28 a707 	smlad	r7, r8, r7, sl
 800d280:	4a42      	ldr	r2, [pc, #264]	; (800d38c <D128_GENERIC+0x3dc>)
 800d282:	fb20 7702 	smlad	r7, r0, r2, r7
 800d286:	4a42      	ldr	r2, [pc, #264]	; (800d390 <D128_GENERIC+0x3e0>)
 800d288:	fb23 7702 	smlad	r7, r3, r2, r7
 800d28c:	4b41      	ldr	r3, [pc, #260]	; (800d394 <D128_GENERIC+0x3e4>)
 800d28e:	fb25 7303 	smlad	r3, r5, r3, r7
 800d292:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800d29a:	b185      	cbz	r5, 800d2be <D128_GENERIC+0x30e>
 800d29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d29e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d2a0:	960d      	str	r6, [sp, #52]	; 0x34
 800d2a2:	4432      	add	r2, r6
 800d2a4:	1a52      	subs	r2, r2, r1
 800d2a6:	17d1      	asrs	r1, r2, #31
 800d2a8:	fba2 2305 	umull	r2, r3, r2, r5
 800d2ac:	fb05 3301 	mla	r3, r5, r1, r3
 800d2b0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d2b4:	f143 0300 	adc.w	r3, r3, #0
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	930c      	str	r3, [sp, #48]	; 0x30
 800d2bc:	461e      	mov	r6, r3
 800d2be:	9801      	ldr	r0, [sp, #4]
 800d2c0:	9c06      	ldr	r4, [sp, #24]
 800d2c2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800d2c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d2c6:	01f6      	lsls	r6, r6, #7
 800d2c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	fbc5 2306 	smlal	r2, r3, r5, r6
 800d2d2:	fb04 f101 	mul.w	r1, r4, r1
 800d2d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d2d8:	109b      	asrs	r3, r3, #2
 800d2da:	f303 030f 	ssat	r3, #16, r3
 800d2de:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800d2e2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800d2e4:	1c62      	adds	r2, r4, #1
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	9206      	str	r2, [sp, #24]
 800d2ea:	dd18      	ble.n	800d31e <D128_GENERIC+0x36e>
 800d2ec:	9b01      	ldr	r3, [sp, #4]
 800d2ee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d2f0:	2a01      	cmp	r2, #1
 800d2f2:	f47f ae80 	bne.w	800cff6 <D128_GENERIC+0x46>
 800d2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f8:	9d05      	ldr	r5, [sp, #20]
 800d2fa:	069b      	lsls	r3, r3, #26
 800d2fc:	6829      	ldr	r1, [r5, #0]
 800d2fe:	686a      	ldr	r2, [r5, #4]
 800d300:	68a8      	ldr	r0, [r5, #8]
 800d302:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d306:	f105 0410 	add.w	r4, r5, #16
 800d30a:	d506      	bpl.n	800d31a <D128_GENERIC+0x36a>
 800d30c:	ba49      	rev16	r1, r1
 800d30e:	ba52      	rev16	r2, r2
 800d310:	ba40      	rev16	r0, r0
 800d312:	fa9a fa9a 	rev16.w	sl, sl
 800d316:	9405      	str	r4, [sp, #20]
 800d318:	e6cf      	b.n	800d0ba <D128_GENERIC+0x10a>
 800d31a:	9405      	str	r4, [sp, #20]
 800d31c:	e6cd      	b.n	800d0ba <D128_GENERIC+0x10a>
 800d31e:	9a01      	ldr	r2, [sp, #4]
 800d320:	9904      	ldr	r1, [sp, #16]
 800d322:	6091      	str	r1, [r2, #8]
 800d324:	9903      	ldr	r1, [sp, #12]
 800d326:	60d1      	str	r1, [r2, #12]
 800d328:	9b02      	ldr	r3, [sp, #8]
 800d32a:	61d3      	str	r3, [r2, #28]
 800d32c:	4611      	mov	r1, r2
 800d32e:	4613      	mov	r3, r2
 800d330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d332:	610a      	str	r2, [r1, #16]
 800d334:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d336:	6159      	str	r1, [r3, #20]
 800d338:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d33a:	6199      	str	r1, [r3, #24]
 800d33c:	2000      	movs	r0, #0
 800d33e:	b013      	add	sp, #76	; 0x4c
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d344:	00780069 	.word	0x00780069
 800d348:	005b004e 	.word	0x005b004e
 800d34c:	00420037 	.word	0x00420037
 800d350:	002d0024 	.word	0x002d0024
 800d354:	001c0015 	.word	0x001c0015
 800d358:	000f000a 	.word	0x000f000a
 800d35c:	00060003 	.word	0x00060003
 800d360:	00880096 	.word	0x00880096
 800d364:	00a200ac 	.word	0x00a200ac
 800d368:	00b400ba 	.word	0x00b400ba
 800d36c:	00be00c0 	.word	0x00be00c0
 800d370:	00c000be 	.word	0x00c000be
 800d374:	00ba00b4 	.word	0x00ba00b4
 800d378:	00ac00a2 	.word	0x00ac00a2
 800d37c:	00030006 	.word	0x00030006
 800d380:	000a000f 	.word	0x000a000f
 800d384:	0015001c 	.word	0x0015001c
 800d388:	0024002d 	.word	0x0024002d
 800d38c:	00370042 	.word	0x00370042
 800d390:	004e005b 	.word	0x004e005b
 800d394:	00690078 	.word	0x00690078
 800d398:	20000000 	.word	0x20000000
 800d39c:	00960088 	.word	0x00960088

0800d3a0 <D16_1CH_HTONS_VOL_HP>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	4691      	mov	r9, r2
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d3aa:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800d3ae:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	4680      	mov	r8, r0
 800d3b6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800d3ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d3be:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d3c2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800d3c6:	9401      	str	r4, [sp, #4]
 800d3c8:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800d3cc:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800d3d0:	2a00      	cmp	r2, #0
 800d3d2:	d04e      	beq.n	800d472 <D16_1CH_HTONS_VOL_HP+0xd2>
 800d3d4:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800d480 <D16_1CH_HTONS_VOL_HP+0xe0>
 800d3d8:	1e8c      	subs	r4, r1, #2
 800d3da:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800d3de:	f858 2b02 	ldr.w	r2, [r8], #2
 800d3e2:	ba52      	rev16	r2, r2
 800d3e4:	b2d6      	uxtb	r6, r2
 800d3e6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d3ea:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800d3ee:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800d3f8:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800d3fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d400:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d404:	0a93      	lsrs	r3, r2, #10
 800d406:	4a1c      	ldr	r2, [pc, #112]	; (800d478 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800d408:	fb21 5202 	smlad	r2, r1, r2, r5
 800d40c:	4d1b      	ldr	r5, [pc, #108]	; (800d47c <D16_1CH_HTONS_VOL_HP+0xdc>)
 800d40e:	fb21 f505 	smuad	r5, r1, r5
 800d412:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800d416:	4410      	add	r0, r2
 800d418:	1bc0      	subs	r0, r0, r7
 800d41a:	17c7      	asrs	r7, r0, #31
 800d41c:	fba0 010e 	umull	r0, r1, r0, lr
 800d420:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d424:	fb0e 1107 	mla	r1, lr, r7, r1
 800d428:	f141 0100 	adc.w	r1, r1, #0
 800d42c:	0448      	lsls	r0, r1, #17
 800d42e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d432:	2700      	movs	r7, #0
 800d434:	fbc0 670a 	smlal	r6, r7, r0, sl
 800d438:	45d8      	cmp	r8, fp
 800d43a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800d43e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800d442:	4617      	mov	r7, r2
 800d444:	f301 010f 	ssat	r1, #16, r1
 800d448:	f824 1f02 	strh.w	r1, [r4, #2]!
 800d44c:	d1c7      	bne.n	800d3de <D16_1CH_HTONS_VOL_HP+0x3e>
 800d44e:	9901      	ldr	r1, [sp, #4]
 800d450:	f8c9 301c 	str.w	r3, [r9, #28]
 800d454:	9b00      	ldr	r3, [sp, #0]
 800d456:	f8c9 0010 	str.w	r0, [r9, #16]
 800d45a:	2000      	movs	r0, #0
 800d45c:	f8c9 5008 	str.w	r5, [r9, #8]
 800d460:	f8c9 100c 	str.w	r1, [r9, #12]
 800d464:	f8c9 2014 	str.w	r2, [r9, #20]
 800d468:	f8c9 3018 	str.w	r3, [r9, #24]
 800d46c:	b003      	add	sp, #12
 800d46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d472:	463a      	mov	r2, r7
 800d474:	4621      	mov	r1, r4
 800d476:	e7eb      	b.n	800d450 <D16_1CH_HTONS_VOL_HP+0xb0>
 800d478:	00030001 	.word	0x00030001
 800d47c:	00010003 	.word	0x00010003
 800d480:	20000000 	.word	0x20000000

0800d484 <D24_1CH_HTONS_VOL_HP>:
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	b089      	sub	sp, #36	; 0x24
 800d48a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d48c:	6996      	ldr	r6, [r2, #24]
 800d48e:	9304      	str	r3, [sp, #16]
 800d490:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800d492:	9207      	str	r2, [sp, #28]
 800d494:	6915      	ldr	r5, [r2, #16]
 800d496:	6954      	ldr	r4, [r2, #20]
 800d498:	9606      	str	r6, [sp, #24]
 800d49a:	6893      	ldr	r3, [r2, #8]
 800d49c:	69d6      	ldr	r6, [r2, #28]
 800d49e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800d4a2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800d4a6:	9a04      	ldr	r2, [sp, #16]
 800d4a8:	9705      	str	r7, [sp, #20]
 800d4aa:	2a00      	cmp	r2, #0
 800d4ac:	d07e      	beq.n	800d5ac <D24_1CH_HTONS_VOL_HP+0x128>
 800d4ae:	f1a1 0b02 	sub.w	fp, r1, #2
 800d4b2:	2700      	movs	r7, #0
 800d4b4:	46a8      	mov	r8, r5
 800d4b6:	f8cd b004 	str.w	fp, [sp, #4]
 800d4ba:	4655      	mov	r5, sl
 800d4bc:	46e3      	mov	fp, ip
 800d4be:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800d5b8 <D24_1CH_HTONS_VOL_HP+0x134>
 800d4c2:	46ba      	mov	sl, r7
 800d4c4:	469c      	mov	ip, r3
 800d4c6:	e055      	b.n	800d574 <D24_1CH_HTONS_VOL_HP+0xf0>
 800d4c8:	7802      	ldrb	r2, [r0, #0]
 800d4ca:	78c3      	ldrb	r3, [r0, #3]
 800d4cc:	7841      	ldrb	r1, [r0, #1]
 800d4ce:	0212      	lsls	r2, r2, #8
 800d4d0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d4d4:	440b      	add	r3, r1
 800d4d6:	3002      	adds	r0, #2
 800d4d8:	b2d9      	uxtb	r1, r3
 800d4da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d4de:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800d4e2:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800d4e6:	0c1b      	lsrs	r3, r3, #16
 800d4e8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800d4ec:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d4f0:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800d4f4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800d4f8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800d4fc:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800d500:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d504:	4a2a      	ldr	r2, [pc, #168]	; (800d5b0 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800d506:	fb23 b102 	smlad	r1, r3, r2, fp
 800d50a:	4a2a      	ldr	r2, [pc, #168]	; (800d5b4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800d50c:	fb23 cb02 	smlad	fp, r3, r2, ip
 800d510:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800d514:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800d518:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800d51c:	2201      	movs	r2, #1
 800d51e:	fb23 f702 	smuad	r7, r3, r2
 800d522:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800d526:	eb01 0208 	add.w	r2, r1, r8
 800d52a:	1b12      	subs	r2, r2, r4
 800d52c:	17d4      	asrs	r4, r2, #31
 800d52e:	fba2 2305 	umull	r2, r3, r2, r5
 800d532:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d536:	fb05 3304 	mla	r3, r5, r4, r3
 800d53a:	f143 0300 	adc.w	r3, r3, #0
 800d53e:	9c05      	ldr	r4, [sp, #20]
 800d540:	03da      	lsls	r2, r3, #15
 800d542:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d546:	f04f 0900 	mov.w	r9, #0
 800d54a:	fbc4 8902 	smlal	r8, r9, r4, r2
 800d54e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d552:	9a01      	ldr	r2, [sp, #4]
 800d554:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800d558:	9b03      	ldr	r3, [sp, #12]
 800d55a:	109b      	asrs	r3, r3, #2
 800d55c:	f303 030f 	ssat	r3, #16, r3
 800d560:	f822 3f02 	strh.w	r3, [r2, #2]!
 800d564:	9b04      	ldr	r3, [sp, #16]
 800d566:	9201      	str	r2, [sp, #4]
 800d568:	f10a 0a01 	add.w	sl, sl, #1
 800d56c:	459a      	cmp	sl, r3
 800d56e:	44bc      	add	ip, r7
 800d570:	460c      	mov	r4, r1
 800d572:	d00b      	beq.n	800d58c <D24_1CH_HTONS_VOL_HP+0x108>
 800d574:	f01a 0f01 	tst.w	sl, #1
 800d578:	d0a6      	beq.n	800d4c8 <D24_1CH_HTONS_VOL_HP+0x44>
 800d57a:	78c2      	ldrb	r2, [r0, #3]
 800d57c:	7883      	ldrb	r3, [r0, #2]
 800d57e:	f810 1b04 	ldrb.w	r1, [r0], #4
 800d582:	0212      	lsls	r2, r2, #8
 800d584:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d588:	440b      	add	r3, r1
 800d58a:	e7a5      	b.n	800d4d8 <D24_1CH_HTONS_VOL_HP+0x54>
 800d58c:	4663      	mov	r3, ip
 800d58e:	4645      	mov	r5, r8
 800d590:	46dc      	mov	ip, fp
 800d592:	9807      	ldr	r0, [sp, #28]
 800d594:	6141      	str	r1, [r0, #20]
 800d596:	9906      	ldr	r1, [sp, #24]
 800d598:	6083      	str	r3, [r0, #8]
 800d59a:	f8c0 c00c 	str.w	ip, [r0, #12]
 800d59e:	61c6      	str	r6, [r0, #28]
 800d5a0:	6105      	str	r5, [r0, #16]
 800d5a2:	6181      	str	r1, [r0, #24]
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	b009      	add	sp, #36	; 0x24
 800d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	e7f0      	b.n	800d592 <D24_1CH_HTONS_VOL_HP+0x10e>
 800d5b0:	00030001 	.word	0x00030001
 800d5b4:	00060007 	.word	0x00060007
 800d5b8:	20000000 	.word	0x20000000

0800d5bc <D32_1CH_HTONS_VOL_HP>:
 800d5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c0:	4692      	mov	sl, r2
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d5c6:	f8da 3018 	ldr.w	r3, [sl, #24]
 800d5ca:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800d5ce:	9304      	str	r3, [sp, #16]
 800d5d0:	f8da 4010 	ldr.w	r4, [sl, #16]
 800d5d4:	f8da 8014 	ldr.w	r8, [sl, #20]
 800d5d8:	f8da 601c 	ldr.w	r6, [sl, #28]
 800d5dc:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d5e0:	f8da e00c 	ldr.w	lr, [sl, #12]
 800d5e4:	9501      	str	r5, [sp, #4]
 800d5e6:	f8da c020 	ldr.w	ip, [sl, #32]
 800d5ea:	2a00      	cmp	r2, #0
 800d5ec:	d07b      	beq.n	800d6e6 <D32_1CH_HTONS_VOL_HP+0x12a>
 800d5ee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d5f2:	4f3e      	ldr	r7, [pc, #248]	; (800d6ec <D32_1CH_HTONS_VOL_HP+0x130>)
 800d5f4:	f8cd c00c 	str.w	ip, [sp, #12]
 800d5f8:	9202      	str	r2, [sp, #8]
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	46a1      	mov	r9, r4
 800d5fe:	4684      	mov	ip, r0
 800d600:	f8cd a014 	str.w	sl, [sp, #20]
 800d604:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d608:	ba49      	rev16	r1, r1
 800d60a:	b2c8      	uxtb	r0, r1
 800d60c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800d610:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800d614:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800d618:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800d61c:	0e09      	lsrs	r1, r1, #24
 800d61e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800d622:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800d626:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800d62a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800d62e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800d632:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800d636:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d63a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800d63e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d642:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d646:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800d64a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800d64e:	4a28      	ldr	r2, [pc, #160]	; (800d6f0 <D32_1CH_HTONS_VOL_HP+0x134>)
 800d650:	fb20 e202 	smlad	r2, r0, r2, lr
 800d654:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d658:	fb2a 2101 	smlad	r1, sl, r1, r2
 800d65c:	4a25      	ldr	r2, [pc, #148]	; (800d6f4 <D32_1CH_HTONS_VOL_HP+0x138>)
 800d65e:	fb20 3302 	smlad	r3, r0, r2, r3
 800d662:	4a25      	ldr	r2, [pc, #148]	; (800d6f8 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800d664:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800d668:	2301      	movs	r3, #1
 800d66a:	fb20 f003 	smuad	r0, r0, r3
 800d66e:	4b23      	ldr	r3, [pc, #140]	; (800d6fc <D32_1CH_HTONS_VOL_HP+0x140>)
 800d670:	fb2a 0303 	smlad	r3, sl, r3, r0
 800d674:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800d678:	9c03      	ldr	r4, [sp, #12]
 800d67a:	eb02 0009 	add.w	r0, r2, r9
 800d67e:	eba0 0008 	sub.w	r0, r0, r8
 800d682:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800d686:	fba0 0104 	umull	r0, r1, r0, r4
 800d68a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d68e:	fb04 110b 	mla	r1, r4, fp, r1
 800d692:	f141 0100 	adc.w	r1, r1, #0
 800d696:	9c01      	ldr	r4, [sp, #4]
 800d698:	0388      	lsls	r0, r1, #14
 800d69a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d69e:	f04f 0900 	mov.w	r9, #0
 800d6a2:	fbc0 8904 	smlal	r8, r9, r0, r4
 800d6a6:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800d6aa:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800d6ae:	f300 000f 	ssat	r0, #16, r0
 800d6b2:	9902      	ldr	r1, [sp, #8]
 800d6b4:	f825 0b02 	strh.w	r0, [r5], #2
 800d6b8:	428d      	cmp	r5, r1
 800d6ba:	4690      	mov	r8, r2
 800d6bc:	d1a2      	bne.n	800d604 <D32_1CH_HTONS_VOL_HP+0x48>
 800d6be:	f8dd a014 	ldr.w	sl, [sp, #20]
 800d6c2:	464c      	mov	r4, r9
 800d6c4:	f8ca 3008 	str.w	r3, [sl, #8]
 800d6c8:	9b04      	ldr	r3, [sp, #16]
 800d6ca:	f8ca e00c 	str.w	lr, [sl, #12]
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	f8ca 601c 	str.w	r6, [sl, #28]
 800d6d4:	f8ca 4010 	str.w	r4, [sl, #16]
 800d6d8:	f8ca 2014 	str.w	r2, [sl, #20]
 800d6dc:	f8ca 3018 	str.w	r3, [sl, #24]
 800d6e0:	b007      	add	sp, #28
 800d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e6:	4642      	mov	r2, r8
 800d6e8:	e7ec      	b.n	800d6c4 <D32_1CH_HTONS_VOL_HP+0x108>
 800d6ea:	bf00      	nop
 800d6ec:	20000000 	.word	0x20000000
 800d6f0:	00060003 	.word	0x00060003
 800d6f4:	000a000c 	.word	0x000a000c
 800d6f8:	000c000a 	.word	0x000c000a
 800d6fc:	00030006 	.word	0x00030006

0800d700 <D48_1CH_HTONS_VOL_HP>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	4613      	mov	r3, r2
 800d706:	461c      	mov	r4, r3
 800d708:	b087      	sub	sp, #28
 800d70a:	4625      	mov	r5, r4
 800d70c:	4626      	mov	r6, r4
 800d70e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800d710:	9205      	str	r2, [sp, #20]
 800d712:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d714:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800d718:	9501      	str	r5, [sp, #4]
 800d71a:	4680      	mov	r8, r0
 800d71c:	6a35      	ldr	r5, [r6, #32]
 800d71e:	6918      	ldr	r0, [r3, #16]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	9304      	str	r3, [sp, #16]
 800d724:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800d728:	68a3      	ldr	r3, [r4, #8]
 800d72a:	9502      	str	r5, [sp, #8]
 800d72c:	68e4      	ldr	r4, [r4, #12]
 800d72e:	2a00      	cmp	r2, #0
 800d730:	f000 808c 	beq.w	800d84c <D48_1CH_HTONS_VOL_HP+0x14c>
 800d734:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d738:	4d45      	ldr	r5, [pc, #276]	; (800d850 <D48_1CH_HTONS_VOL_HP+0x150>)
 800d73a:	9203      	str	r2, [sp, #12]
 800d73c:	468c      	mov	ip, r1
 800d73e:	e898 0044 	ldmia.w	r8, {r2, r6}
 800d742:	f108 0806 	add.w	r8, r8, #6
 800d746:	ba52      	rev16	r2, r2
 800d748:	ba76      	rev16	r6, r6
 800d74a:	b2d7      	uxtb	r7, r2
 800d74c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d750:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800d754:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800d758:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800d75c:	0e12      	lsrs	r2, r2, #24
 800d75e:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800d762:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800d766:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d76a:	fa5f fb86 	uxtb.w	fp, r6
 800d76e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800d772:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800d776:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800d77a:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800d77e:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800d782:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d786:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800d78a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800d78e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d792:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d796:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800d79a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d79e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d7a2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d7a6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800d7aa:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800d7ae:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800d7b2:	4a28      	ldr	r2, [pc, #160]	; (800d854 <D48_1CH_HTONS_VOL_HP+0x154>)
 800d7b4:	fb2a 4202 	smlad	r2, sl, r2, r4
 800d7b8:	4927      	ldr	r1, [pc, #156]	; (800d858 <D48_1CH_HTONS_VOL_HP+0x158>)
 800d7ba:	fb27 2201 	smlad	r2, r7, r1, r2
 800d7be:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d7c2:	fb26 2201 	smlad	r2, r6, r1, r2
 800d7c6:	4925      	ldr	r1, [pc, #148]	; (800d85c <D48_1CH_HTONS_VOL_HP+0x15c>)
 800d7c8:	fb2a 3401 	smlad	r4, sl, r1, r3
 800d7cc:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800d7d0:	fb27 4403 	smlad	r4, r7, r3, r4
 800d7d4:	4b22      	ldr	r3, [pc, #136]	; (800d860 <D48_1CH_HTONS_VOL_HP+0x160>)
 800d7d6:	fb26 4403 	smlad	r4, r6, r3, r4
 800d7da:	2101      	movs	r1, #1
 800d7dc:	fb2a fa01 	smuad	sl, sl, r1
 800d7e0:	4b20      	ldr	r3, [pc, #128]	; (800d864 <D48_1CH_HTONS_VOL_HP+0x164>)
 800d7e2:	fb27 a703 	smlad	r7, r7, r3, sl
 800d7e6:	4b20      	ldr	r3, [pc, #128]	; (800d868 <D48_1CH_HTONS_VOL_HP+0x168>)
 800d7e8:	fb26 7303 	smlad	r3, r6, r3, r7
 800d7ec:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800d7f0:	9e02      	ldr	r6, [sp, #8]
 800d7f2:	9f01      	ldr	r7, [sp, #4]
 800d7f4:	4410      	add	r0, r2
 800d7f6:	eba0 0009 	sub.w	r0, r0, r9
 800d7fa:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800d7fe:	fba0 0106 	umull	r0, r1, r0, r6
 800d802:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d806:	fb06 110a 	mla	r1, r6, sl, r1
 800d80a:	f141 0100 	adc.w	r1, r1, #0
 800d80e:	0308      	lsls	r0, r1, #12
 800d810:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800d814:	f04f 0a00 	mov.w	sl, #0
 800d818:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800d81c:	4657      	mov	r7, sl
 800d81e:	10b8      	asrs	r0, r7, #2
 800d820:	f300 000f 	ssat	r0, #16, r0
 800d824:	f82c 0b02 	strh.w	r0, [ip], #2
 800d828:	0048      	lsls	r0, r1, #1
 800d82a:	9903      	ldr	r1, [sp, #12]
 800d82c:	458c      	cmp	ip, r1
 800d82e:	4691      	mov	r9, r2
 800d830:	d185      	bne.n	800d73e <D48_1CH_HTONS_VOL_HP+0x3e>
 800d832:	9d05      	ldr	r5, [sp, #20]
 800d834:	616a      	str	r2, [r5, #20]
 800d836:	9a04      	ldr	r2, [sp, #16]
 800d838:	6128      	str	r0, [r5, #16]
 800d83a:	2000      	movs	r0, #0
 800d83c:	60ab      	str	r3, [r5, #8]
 800d83e:	60ec      	str	r4, [r5, #12]
 800d840:	f8c5 e01c 	str.w	lr, [r5, #28]
 800d844:	61aa      	str	r2, [r5, #24]
 800d846:	b007      	add	sp, #28
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	464a      	mov	r2, r9
 800d84e:	e7f0      	b.n	800d832 <D48_1CH_HTONS_VOL_HP+0x132>
 800d850:	20000000 	.word	0x20000000
 800d854:	000f000a 	.word	0x000f000a
 800d858:	00060003 	.word	0x00060003
 800d85c:	00150019 	.word	0x00150019
 800d860:	00190015 	.word	0x00190015
 800d864:	00030006 	.word	0x00030006
 800d868:	000a000f 	.word	0x000a000f

0800d86c <D64_1CH_HTONS_VOL_HP>:
 800d86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d870:	b089      	sub	sp, #36	; 0x24
 800d872:	4614      	mov	r4, r2
 800d874:	9207      	str	r2, [sp, #28]
 800d876:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d878:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800d87c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800d880:	6992      	ldr	r2, [r2, #24]
 800d882:	9206      	str	r2, [sp, #24]
 800d884:	68e2      	ldr	r2, [r4, #12]
 800d886:	9201      	str	r2, [sp, #4]
 800d888:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d88a:	9203      	str	r2, [sp, #12]
 800d88c:	6a22      	ldr	r2, [r4, #32]
 800d88e:	69e5      	ldr	r5, [r4, #28]
 800d890:	68a6      	ldr	r6, [r4, #8]
 800d892:	9204      	str	r2, [sp, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 80b0 	beq.w	800d9fa <D64_1CH_HTONS_VOL_HP+0x18e>
 800d89a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d89e:	4f58      	ldr	r7, [pc, #352]	; (800da00 <D64_1CH_HTONS_VOL_HP+0x194>)
 800d8a0:	9305      	str	r3, [sp, #20]
 800d8a2:	9102      	str	r1, [sp, #8]
 800d8a4:	f850 2b08 	ldr.w	r2, [r0], #8
 800d8a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d8ac:	ba52      	rev16	r2, r2
 800d8ae:	fa93 f993 	rev16.w	r9, r3
 800d8b2:	b2d4      	uxtb	r4, r2
 800d8b4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d8b8:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800d8bc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d8c0:	9901      	ldr	r1, [sp, #4]
 800d8c2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d8c6:	0e12      	lsrs	r2, r2, #24
 800d8c8:	44ab      	add	fp, r5
 800d8ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d8ce:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800d8d2:	fa5f f289 	uxtb.w	r2, r9
 800d8d6:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800d8da:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800d8de:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800d8e2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800d8e6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d8ea:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800d8ee:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800d8f2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800d8f6:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800d8fa:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800d8fe:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800d902:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800d906:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d90a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800d90e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d912:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d916:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d91a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d91e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d922:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800d926:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d92a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800d92e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d932:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800d936:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800d93a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d93e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800d942:	4b30      	ldr	r3, [pc, #192]	; (800da04 <D64_1CH_HTONS_VOL_HP+0x198>)
 800d944:	fb2b 1303 	smlad	r3, fp, r3, r1
 800d948:	492f      	ldr	r1, [pc, #188]	; (800da08 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800d94a:	fb24 3301 	smlad	r3, r4, r1, r3
 800d94e:	492f      	ldr	r1, [pc, #188]	; (800da0c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800d950:	fb22 3301 	smlad	r3, r2, r1, r3
 800d954:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800d958:	fb2e 390a 	smlad	r9, lr, sl, r3
 800d95c:	4b2c      	ldr	r3, [pc, #176]	; (800da10 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800d95e:	fb2b 6603 	smlad	r6, fp, r3, r6
 800d962:	fb2e 6613 	smladx	r6, lr, r3, r6
 800d966:	4b2b      	ldr	r3, [pc, #172]	; (800da14 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800d968:	fb24 6603 	smlad	r6, r4, r3, r6
 800d96c:	fb22 6313 	smladx	r3, r2, r3, r6
 800d970:	f04f 0a01 	mov.w	sl, #1
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	fb2b fb0a 	smuad	fp, fp, sl
 800d97a:	4b27      	ldr	r3, [pc, #156]	; (800da18 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800d97c:	fb24 ba03 	smlad	sl, r4, r3, fp
 800d980:	4b26      	ldr	r3, [pc, #152]	; (800da1c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800d982:	fb22 a203 	smlad	r2, r2, r3, sl
 800d986:	4b26      	ldr	r3, [pc, #152]	; (800da20 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800d988:	fb2e 2603 	smlad	r6, lr, r3, r2
 800d98c:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800d990:	eb0a 020c 	add.w	r2, sl, ip
 800d994:	9c04      	ldr	r4, [sp, #16]
 800d996:	9903      	ldr	r1, [sp, #12]
 800d998:	eba2 0208 	sub.w	r2, r2, r8
 800d99c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800d9a0:	fba2 2304 	umull	r2, r3, r2, r4
 800d9a4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d9a8:	fb04 3309 	mla	r3, r4, r9, r3
 800d9ac:	f143 0300 	adc.w	r3, r3, #0
 800d9b0:	02da      	lsls	r2, r3, #11
 800d9b2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d9b6:	f04f 0900 	mov.w	r9, #0
 800d9ba:	fbc1 8902 	smlal	r8, r9, r1, r2
 800d9be:	9902      	ldr	r1, [sp, #8]
 800d9c0:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800d9c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d9c8:	f302 020f 	ssat	r2, #16, r2
 800d9cc:	9b05      	ldr	r3, [sp, #20]
 800d9ce:	f821 2b02 	strh.w	r2, [r1], #2
 800d9d2:	4299      	cmp	r1, r3
 800d9d4:	9102      	str	r1, [sp, #8]
 800d9d6:	46d0      	mov	r8, sl
 800d9d8:	f47f af64 	bne.w	800d8a4 <D64_1CH_HTONS_VOL_HP+0x38>
 800d9dc:	9a07      	ldr	r2, [sp, #28]
 800d9de:	9901      	ldr	r1, [sp, #4]
 800d9e0:	60d1      	str	r1, [r2, #12]
 800d9e2:	9906      	ldr	r1, [sp, #24]
 800d9e4:	6096      	str	r6, [r2, #8]
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	61d5      	str	r5, [r2, #28]
 800d9ea:	f8c2 c010 	str.w	ip, [r2, #16]
 800d9ee:	f8c2 a014 	str.w	sl, [r2, #20]
 800d9f2:	6191      	str	r1, [r2, #24]
 800d9f4:	b009      	add	sp, #36	; 0x24
 800d9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fa:	46c2      	mov	sl, r8
 800d9fc:	4622      	mov	r2, r4
 800d9fe:	e7ee      	b.n	800d9de <D64_1CH_HTONS_VOL_HP+0x172>
 800da00:	20000000 	.word	0x20000000
 800da04:	001c0015 	.word	0x001c0015
 800da08:	000f000a 	.word	0x000f000a
 800da0c:	00060003 	.word	0x00060003
 800da10:	0024002a 	.word	0x0024002a
 800da14:	002e0030 	.word	0x002e0030
 800da18:	00030006 	.word	0x00030006
 800da1c:	000a000f 	.word	0x000a000f
 800da20:	0015001c 	.word	0x0015001c

0800da24 <D80_1CH_HTONS_VOL_HP>:
 800da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	4613      	mov	r3, r2
 800da2a:	b089      	sub	sp, #36	; 0x24
 800da2c:	4686      	mov	lr, r0
 800da2e:	6918      	ldr	r0, [r3, #16]
 800da30:	9000      	str	r0, [sp, #0]
 800da32:	4618      	mov	r0, r3
 800da34:	461c      	mov	r4, r3
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	9302      	str	r3, [sp, #8]
 800da3a:	6983      	ldr	r3, [r0, #24]
 800da3c:	9306      	str	r3, [sp, #24]
 800da3e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800da42:	69c3      	ldr	r3, [r0, #28]
 800da44:	68c0      	ldr	r0, [r0, #12]
 800da46:	9207      	str	r2, [sp, #28]
 800da48:	9001      	str	r0, [sp, #4]
 800da4a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800da4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800da4e:	9003      	str	r0, [sp, #12]
 800da50:	6a20      	ldr	r0, [r4, #32]
 800da52:	9004      	str	r0, [sp, #16]
 800da54:	2a00      	cmp	r2, #0
 800da56:	f000 80d2 	beq.w	800dbfe <D80_1CH_HTONS_VOL_HP+0x1da>
 800da5a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800da5e:	4869      	ldr	r0, [pc, #420]	; (800dc04 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800da60:	9205      	str	r2, [sp, #20]
 800da62:	461c      	mov	r4, r3
 800da64:	f8de 5000 	ldr.w	r5, [lr]
 800da68:	f8de 2004 	ldr.w	r2, [lr, #4]
 800da6c:	f8de 3008 	ldr.w	r3, [lr, #8]
 800da70:	f10e 0e0a 	add.w	lr, lr, #10
 800da74:	ba6d      	rev16	r5, r5
 800da76:	ba52      	rev16	r2, r2
 800da78:	fa93 fb93 	rev16.w	fp, r3
 800da7c:	b2ee      	uxtb	r6, r5
 800da7e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800da82:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800da86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800da8a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800da8e:	eb04 0a07 	add.w	sl, r4, r7
 800da92:	0e2d      	lsrs	r5, r5, #24
 800da94:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800da98:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800da9c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800daa0:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800daa4:	b2d5      	uxtb	r5, r2
 800daa6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800daaa:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800daae:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800dab2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800dab6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800daba:	0e12      	lsrs	r2, r2, #24
 800dabc:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800dac0:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800dac4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800dac8:	fa5f f48b 	uxtb.w	r4, fp
 800dacc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800dad0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800dad4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800dad8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800dadc:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800dae0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800dae4:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800dae8:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800daec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800daf0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800daf4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800daf8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dafc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800db00:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800db04:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800db08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db0c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800db10:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800db14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800db18:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800db1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800db20:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800db24:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800db28:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800db2c:	4d36      	ldr	r5, [pc, #216]	; (800dc08 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800db2e:	9f01      	ldr	r7, [sp, #4]
 800db30:	fb23 7505 	smlad	r5, r3, r5, r7
 800db34:	4f35      	ldr	r7, [pc, #212]	; (800dc0c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800db36:	fb29 5507 	smlad	r5, r9, r7, r5
 800db3a:	4f35      	ldr	r7, [pc, #212]	; (800dc10 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800db3c:	fb28 5507 	smlad	r5, r8, r7, r5
 800db40:	4f34      	ldr	r7, [pc, #208]	; (800dc14 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800db42:	fb22 5507 	smlad	r5, r2, r7, r5
 800db46:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800db4a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800db4e:	4d32      	ldr	r5, [pc, #200]	; (800dc18 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800db50:	fb23 cc05 	smlad	ip, r3, r5, ip
 800db54:	4d31      	ldr	r5, [pc, #196]	; (800dc1c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800db56:	fb29 cc05 	smlad	ip, r9, r5, ip
 800db5a:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800db5e:	fb28 c505 	smlad	r5, r8, r5, ip
 800db62:	4f2f      	ldr	r7, [pc, #188]	; (800dc20 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800db64:	fb22 5507 	smlad	r5, r2, r7, r5
 800db68:	4f2e      	ldr	r7, [pc, #184]	; (800dc24 <D80_1CH_HTONS_VOL_HP+0x200>)
 800db6a:	fb26 5507 	smlad	r5, r6, r7, r5
 800db6e:	f04f 0a01 	mov.w	sl, #1
 800db72:	9501      	str	r5, [sp, #4]
 800db74:	fb23 fa0a 	smuad	sl, r3, sl
 800db78:	4b2b      	ldr	r3, [pc, #172]	; (800dc28 <D80_1CH_HTONS_VOL_HP+0x204>)
 800db7a:	fb29 a903 	smlad	r9, r9, r3, sl
 800db7e:	4d2b      	ldr	r5, [pc, #172]	; (800dc2c <D80_1CH_HTONS_VOL_HP+0x208>)
 800db80:	fb28 9805 	smlad	r8, r8, r5, r9
 800db84:	4d2a      	ldr	r5, [pc, #168]	; (800dc30 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800db86:	fb22 8205 	smlad	r2, r2, r5, r8
 800db8a:	4b2a      	ldr	r3, [pc, #168]	; (800dc34 <D80_1CH_HTONS_VOL_HP+0x210>)
 800db8c:	fb26 2c03 	smlad	ip, r6, r3, r2
 800db90:	9b00      	ldr	r3, [sp, #0]
 800db92:	9d04      	ldr	r5, [sp, #16]
 800db94:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800db98:	4453      	add	r3, sl
 800db9a:	461a      	mov	r2, r3
 800db9c:	9b02      	ldr	r3, [sp, #8]
 800db9e:	f8cd a008 	str.w	sl, [sp, #8]
 800dba2:	1ad2      	subs	r2, r2, r3
 800dba4:	17d7      	asrs	r7, r2, #31
 800dba6:	fba2 2305 	umull	r2, r3, r2, r5
 800dbaa:	fb05 3307 	mla	r3, r5, r7, r3
 800dbae:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dbb2:	f143 0300 	adc.w	r3, r3, #0
 800dbb6:	9d03      	ldr	r5, [sp, #12]
 800dbb8:	029a      	lsls	r2, r3, #10
 800dbba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dbbe:	2700      	movs	r7, #0
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	fbc5 6702 	smlal	r6, r7, r5, r2
 800dbc6:	10ba      	asrs	r2, r7, #2
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	f302 020f 	ssat	r2, #16, r2
 800dbce:	9b05      	ldr	r3, [sp, #20]
 800dbd0:	f821 2b02 	strh.w	r2, [r1], #2
 800dbd4:	4299      	cmp	r1, r3
 800dbd6:	f47f af45 	bne.w	800da64 <D80_1CH_HTONS_VOL_HP+0x40>
 800dbda:	4623      	mov	r3, r4
 800dbdc:	9907      	ldr	r1, [sp, #28]
 800dbde:	9801      	ldr	r0, [sp, #4]
 800dbe0:	60c8      	str	r0, [r1, #12]
 800dbe2:	9a00      	ldr	r2, [sp, #0]
 800dbe4:	f8c1 c008 	str.w	ip, [r1, #8]
 800dbe8:	4608      	mov	r0, r1
 800dbea:	61cb      	str	r3, [r1, #28]
 800dbec:	610a      	str	r2, [r1, #16]
 800dbee:	f8c1 a014 	str.w	sl, [r1, #20]
 800dbf2:	9906      	ldr	r1, [sp, #24]
 800dbf4:	6181      	str	r1, [r0, #24]
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	b009      	add	sp, #36	; 0x24
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	f8dd a008 	ldr.w	sl, [sp, #8]
 800dc02:	e7eb      	b.n	800dbdc <D80_1CH_HTONS_VOL_HP+0x1b8>
 800dc04:	20000000 	.word	0x20000000
 800dc08:	002d0024 	.word	0x002d0024
 800dc0c:	001c0015 	.word	0x001c0015
 800dc10:	000f000a 	.word	0x000f000a
 800dc14:	00060003 	.word	0x00060003
 800dc18:	0037003f 	.word	0x0037003f
 800dc1c:	00450049 	.word	0x00450049
 800dc20:	00490045 	.word	0x00490045
 800dc24:	003f0037 	.word	0x003f0037
 800dc28:	00030006 	.word	0x00030006
 800dc2c:	000a000f 	.word	0x000a000f
 800dc30:	0015001c 	.word	0x0015001c
 800dc34:	0024002d 	.word	0x0024002d

0800dc38 <D128_1CH_HTONS_VOL_HP>:
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	b093      	sub	sp, #76	; 0x4c
 800dc3e:	4614      	mov	r4, r2
 800dc40:	9211      	str	r2, [sp, #68]	; 0x44
 800dc42:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800dc44:	6912      	ldr	r2, [r2, #16]
 800dc46:	9203      	str	r2, [sp, #12]
 800dc48:	4622      	mov	r2, r4
 800dc4a:	4615      	mov	r5, r2
 800dc4c:	6964      	ldr	r4, [r4, #20]
 800dc4e:	9406      	str	r4, [sp, #24]
 800dc50:	4614      	mov	r4, r2
 800dc52:	6992      	ldr	r2, [r2, #24]
 800dc54:	9210      	str	r2, [sp, #64]	; 0x40
 800dc56:	68ea      	ldr	r2, [r5, #12]
 800dc58:	9204      	str	r2, [sp, #16]
 800dc5a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800dc5c:	69e6      	ldr	r6, [r4, #28]
 800dc5e:	920d      	str	r2, [sp, #52]	; 0x34
 800dc60:	68a4      	ldr	r4, [r4, #8]
 800dc62:	6a2a      	ldr	r2, [r5, #32]
 800dc64:	9405      	str	r4, [sp, #20]
 800dc66:	920e      	str	r2, [sp, #56]	; 0x38
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f000 8145 	beq.w	800def8 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800dc6e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800dc72:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc74:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800df54 <D128_1CH_HTONS_VOL_HP+0x31c>
 800dc78:	9107      	str	r1, [sp, #28]
 800dc7a:	f100 0310 	add.w	r3, r0, #16
 800dc7e:	4699      	mov	r9, r3
 800dc80:	f1a9 0110 	sub.w	r1, r9, #16
 800dc84:	c90e      	ldmia	r1, {r1, r2, r3}
 800dc86:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800dc8a:	ba49      	rev16	r1, r1
 800dc8c:	ba52      	rev16	r2, r2
 800dc8e:	ba5b      	rev16	r3, r3
 800dc90:	fa90 fa90 	rev16.w	sl, r0
 800dc94:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800dc98:	b2cc      	uxtb	r4, r1
 800dc9a:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800dc9e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800dca2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800dca6:	0e09      	lsrs	r1, r1, #24
 800dca8:	4426      	add	r6, r4
 800dcaa:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800dcae:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800dcb2:	b2d0      	uxtb	r0, r2
 800dcb4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800dcb8:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800dcbc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800dcc0:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800dcc4:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800dcc8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800dccc:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800dcd0:	0e12      	lsrs	r2, r2, #24
 800dcd2:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800dcd6:	9701      	str	r7, [sp, #4]
 800dcd8:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800dcdc:	4627      	mov	r7, r4
 800dcde:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800dce2:	9702      	str	r7, [sp, #8]
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800dcea:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800dcee:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800dcf2:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800dcf6:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800dcfa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dcfe:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800dd02:	0e1b      	lsrs	r3, r3, #24
 800dd04:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800dd08:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800dd0c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800dd10:	fa5f f38a 	uxtb.w	r3, sl
 800dd14:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dd18:	960a      	str	r6, [sp, #40]	; 0x28
 800dd1a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800dd1e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800dd22:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dd26:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800dd2a:	950b      	str	r5, [sp, #44]	; 0x2c
 800dd2c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800dd30:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800dd34:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800dd38:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800dd3c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800dd40:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800dd44:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800dd48:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800dd4c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800dd50:	9308      	str	r3, [sp, #32]
 800dd52:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800dd56:	9b01      	ldr	r3, [sp, #4]
 800dd58:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800dd5c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dd60:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800dd64:	9b02      	ldr	r3, [sp, #8]
 800dd66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd6a:	9302      	str	r3, [sp, #8]
 800dd6c:	9b08      	ldr	r3, [sp, #32]
 800dd6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd72:	9308      	str	r3, [sp, #32]
 800dd74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd76:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dd7a:	950c      	str	r5, [sp, #48]	; 0x30
 800dd7c:	461d      	mov	r5, r3
 800dd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd80:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800dd84:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dd88:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800dd8c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	9b02      	ldr	r3, [sp, #8]
 800dd94:	9202      	str	r2, [sp, #8]
 800dd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800dd9e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800dda2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800dda6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ddaa:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800ddae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ddb2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800ddb6:	9b08      	ldr	r3, [sp, #32]
 800ddb8:	9f01      	ldr	r7, [sp, #4]
 800ddba:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ddbe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ddc2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ddc6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ddca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ddce:	46be      	mov	lr, r7
 800ddd0:	0a96      	lsrs	r6, r2, #10
 800ddd2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800ddd6:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800ddda:	4f49      	ldr	r7, [pc, #292]	; (800df00 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800dddc:	9a04      	ldr	r2, [sp, #16]
 800ddde:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800dde2:	4a48      	ldr	r2, [pc, #288]	; (800df04 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800dde4:	fb2a ee02 	smlad	lr, sl, r2, lr
 800dde8:	4a47      	ldr	r2, [pc, #284]	; (800df08 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800ddea:	fb21 ee02 	smlad	lr, r1, r2, lr
 800ddee:	4a47      	ldr	r2, [pc, #284]	; (800df0c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800ddf0:	fb24 ee02 	smlad	lr, r4, r2, lr
 800ddf4:	4a46      	ldr	r2, [pc, #280]	; (800df10 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800ddf6:	9f02      	ldr	r7, [sp, #8]
 800ddf8:	fb27 ee02 	smlad	lr, r7, r2, lr
 800ddfc:	4a45      	ldr	r2, [pc, #276]	; (800df14 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800ddfe:	fb20 ee02 	smlad	lr, r0, r2, lr
 800de02:	4a45      	ldr	r2, [pc, #276]	; (800df18 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800de04:	fb23 e702 	smlad	r7, r3, r2, lr
 800de08:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800de0c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800de10:	9f01      	ldr	r7, [sp, #4]
 800de12:	4a42      	ldr	r2, [pc, #264]	; (800df1c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800de14:	46bc      	mov	ip, r7
 800de16:	9f05      	ldr	r7, [sp, #20]
 800de18:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800de1c:	4a40      	ldr	r2, [pc, #256]	; (800df20 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800de1e:	fb2a cc02 	smlad	ip, sl, r2, ip
 800de22:	4f40      	ldr	r7, [pc, #256]	; (800df24 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800de24:	fb21 cc07 	smlad	ip, r1, r7, ip
 800de28:	4f3f      	ldr	r7, [pc, #252]	; (800df28 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800de2a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800de2e:	4f3f      	ldr	r7, [pc, #252]	; (800df2c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800de30:	9a02      	ldr	r2, [sp, #8]
 800de32:	fb22 cc07 	smlad	ip, r2, r7, ip
 800de36:	4f3e      	ldr	r7, [pc, #248]	; (800df30 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800de38:	fb20 cc07 	smlad	ip, r0, r7, ip
 800de3c:	4f3d      	ldr	r7, [pc, #244]	; (800df34 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800de3e:	fb23 c707 	smlad	r7, r3, r7, ip
 800de42:	f8df c114 	ldr.w	ip, [pc, #276]	; 800df58 <D128_1CH_HTONS_VOL_HP+0x320>
 800de46:	fb25 720c 	smlad	r2, r5, ip, r7
 800de4a:	f04f 0b01 	mov.w	fp, #1
 800de4e:	9204      	str	r2, [sp, #16]
 800de50:	9f01      	ldr	r7, [sp, #4]
 800de52:	fb27 fb0b 	smuad	fp, r7, fp
 800de56:	4f38      	ldr	r7, [pc, #224]	; (800df38 <D128_1CH_HTONS_VOL_HP+0x300>)
 800de58:	fb2a ba07 	smlad	sl, sl, r7, fp
 800de5c:	4f37      	ldr	r7, [pc, #220]	; (800df3c <D128_1CH_HTONS_VOL_HP+0x304>)
 800de5e:	fb21 aa07 	smlad	sl, r1, r7, sl
 800de62:	4f37      	ldr	r7, [pc, #220]	; (800df40 <D128_1CH_HTONS_VOL_HP+0x308>)
 800de64:	fb24 aa07 	smlad	sl, r4, r7, sl
 800de68:	4f36      	ldr	r7, [pc, #216]	; (800df44 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800de6a:	9a02      	ldr	r2, [sp, #8]
 800de6c:	fb22 a707 	smlad	r7, r2, r7, sl
 800de70:	4a35      	ldr	r2, [pc, #212]	; (800df48 <D128_1CH_HTONS_VOL_HP+0x310>)
 800de72:	fb20 7702 	smlad	r7, r0, r2, r7
 800de76:	4a35      	ldr	r2, [pc, #212]	; (800df4c <D128_1CH_HTONS_VOL_HP+0x314>)
 800de78:	fb23 7702 	smlad	r7, r3, r2, r7
 800de7c:	4b34      	ldr	r3, [pc, #208]	; (800df50 <D128_1CH_HTONS_VOL_HP+0x318>)
 800de7e:	fb25 7303 	smlad	r3, r5, r3, r7
 800de82:	9305      	str	r3, [sp, #20]
 800de84:	9b03      	ldr	r3, [sp, #12]
 800de86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800de88:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800de8c:	4473      	add	r3, lr
 800de8e:	461a      	mov	r2, r3
 800de90:	9b06      	ldr	r3, [sp, #24]
 800de92:	f8cd e018 	str.w	lr, [sp, #24]
 800de96:	1ad2      	subs	r2, r2, r3
 800de98:	17d1      	asrs	r1, r2, #31
 800de9a:	fba2 2304 	umull	r2, r3, r2, r4
 800de9e:	fb04 3301 	mla	r3, r4, r1, r3
 800dea2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dea6:	f143 0300 	adc.w	r3, r3, #0
 800deaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800deac:	021a      	lsls	r2, r3, #8
 800deae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800deb2:	2100      	movs	r1, #0
 800deb4:	fbc4 0102 	smlal	r0, r1, r4, r2
 800deb8:	108a      	asrs	r2, r1, #2
 800deba:	9907      	ldr	r1, [sp, #28]
 800debc:	f302 020f 	ssat	r2, #16, r2
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	f821 2b02 	strh.w	r2, [r1], #2
 800dec6:	9303      	str	r3, [sp, #12]
 800dec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800deca:	9107      	str	r1, [sp, #28]
 800decc:	4299      	cmp	r1, r3
 800dece:	f109 0910 	add.w	r9, r9, #16
 800ded2:	f47f aed5 	bne.w	800dc80 <D128_1CH_HTONS_VOL_HP+0x48>
 800ded6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ded8:	9905      	ldr	r1, [sp, #20]
 800deda:	6091      	str	r1, [r2, #8]
 800dedc:	9904      	ldr	r1, [sp, #16]
 800dede:	60d1      	str	r1, [r2, #12]
 800dee0:	4613      	mov	r3, r2
 800dee2:	61d6      	str	r6, [r2, #28]
 800dee4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dee6:	9a03      	ldr	r2, [sp, #12]
 800dee8:	611a      	str	r2, [r3, #16]
 800deea:	2000      	movs	r0, #0
 800deec:	f8c3 e014 	str.w	lr, [r3, #20]
 800def0:	6199      	str	r1, [r3, #24]
 800def2:	b013      	add	sp, #76	; 0x4c
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def8:	f8dd e018 	ldr.w	lr, [sp, #24]
 800defc:	e7eb      	b.n	800ded6 <D128_1CH_HTONS_VOL_HP+0x29e>
 800defe:	bf00      	nop
 800df00:	00780069 	.word	0x00780069
 800df04:	005b004e 	.word	0x005b004e
 800df08:	00420037 	.word	0x00420037
 800df0c:	002d0024 	.word	0x002d0024
 800df10:	001c0015 	.word	0x001c0015
 800df14:	000f000a 	.word	0x000f000a
 800df18:	00060003 	.word	0x00060003
 800df1c:	00880096 	.word	0x00880096
 800df20:	00a200ac 	.word	0x00a200ac
 800df24:	00b400ba 	.word	0x00b400ba
 800df28:	00be00c0 	.word	0x00be00c0
 800df2c:	00c000be 	.word	0x00c000be
 800df30:	00ba00b4 	.word	0x00ba00b4
 800df34:	00ac00a2 	.word	0x00ac00a2
 800df38:	00030006 	.word	0x00030006
 800df3c:	000a000f 	.word	0x000a000f
 800df40:	0015001c 	.word	0x0015001c
 800df44:	0024002d 	.word	0x0024002d
 800df48:	00370042 	.word	0x00370042
 800df4c:	004e005b 	.word	0x004e005b
 800df50:	00690078 	.word	0x00690078
 800df54:	20000000 	.word	0x20000000
 800df58:	00960088 	.word	0x00960088

0800df5c <PDM_Filter_Init>:
 800df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5e:	2240      	movs	r2, #64	; 0x40
 800df60:	4604      	mov	r4, r0
 800df62:	2100      	movs	r1, #0
 800df64:	300c      	adds	r0, #12
 800df66:	f000 f9f8 	bl	800e35a <memset>
 800df6a:	493b      	ldr	r1, [pc, #236]	; (800e058 <PDM_Filter_Init+0xfc>)
 800df6c:	483b      	ldr	r0, [pc, #236]	; (800e05c <PDM_Filter_Init+0x100>)
 800df6e:	f000 f971 	bl	800e254 <CRC_Lock>
 800df72:	8822      	ldrh	r2, [r4, #0]
 800df74:	8963      	ldrh	r3, [r4, #10]
 800df76:	4938      	ldr	r1, [pc, #224]	; (800e058 <PDM_Filter_Init+0xfc>)
 800df78:	8925      	ldrh	r5, [r4, #8]
 800df7a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800df7c:	2801      	cmp	r0, #1
 800df7e:	f04f 0300 	mov.w	r3, #0
 800df82:	bf18      	it	ne
 800df84:	2100      	movne	r1, #0
 800df86:	2a01      	cmp	r2, #1
 800df88:	6461      	str	r1, [r4, #68]	; 0x44
 800df8a:	86e5      	strh	r5, [r4, #54]	; 0x36
 800df8c:	61a3      	str	r3, [r4, #24]
 800df8e:	6123      	str	r3, [r4, #16]
 800df90:	6163      	str	r3, [r4, #20]
 800df92:	60e3      	str	r3, [r4, #12]
 800df94:	6263      	str	r3, [r4, #36]	; 0x24
 800df96:	61e3      	str	r3, [r4, #28]
 800df98:	6223      	str	r3, [r4, #32]
 800df9a:	6423      	str	r3, [r4, #64]	; 0x40
 800df9c:	d918      	bls.n	800dfd0 <PDM_Filter_Init+0x74>
 800df9e:	2003      	movs	r0, #3
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	8862      	ldrh	r2, [r4, #2]
 800dfa4:	2a01      	cmp	r2, #1
 800dfa6:	d91d      	bls.n	800dfe4 <PDM_Filter_Init+0x88>
 800dfa8:	2140      	movs	r1, #64	; 0x40
 800dfaa:	2300      	movs	r3, #0
 800dfac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dfae:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800dfb2:	6862      	ldr	r2, [r4, #4]
 800dfb4:	bf04      	itt	eq
 800dfb6:	6421      	streq	r1, [r4, #64]	; 0x40
 800dfb8:	460b      	moveq	r3, r1
 800dfba:	b11a      	cbz	r2, 800dfc4 <PDM_Filter_Init+0x68>
 800dfbc:	f043 0310 	orr.w	r3, r3, #16
 800dfc0:	6423      	str	r3, [r4, #64]	; 0x40
 800dfc2:	62e2      	str	r2, [r4, #44]	; 0x2c
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	8722      	strh	r2, [r4, #56]	; 0x38
 800dfc8:	b908      	cbnz	r0, 800dfce <PDM_Filter_Init+0x72>
 800dfca:	3380      	adds	r3, #128	; 0x80
 800dfcc:	6423      	str	r3, [r4, #64]	; 0x40
 800dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd0:	4d23      	ldr	r5, [pc, #140]	; (800e060 <PDM_Filter_Init+0x104>)
 800dfd2:	d010      	beq.n	800dff6 <PDM_Filter_Init+0x9a>
 800dfd4:	782a      	ldrb	r2, [r5, #0]
 800dfd6:	2a01      	cmp	r2, #1
 800dfd8:	d027      	beq.n	800e02a <PDM_Filter_Init+0xce>
 800dfda:	8862      	ldrh	r2, [r4, #2]
 800dfdc:	2a01      	cmp	r2, #1
 800dfde:	f04f 0001 	mov.w	r0, #1
 800dfe2:	d8e1      	bhi.n	800dfa8 <PDM_Filter_Init+0x4c>
 800dfe4:	d001      	beq.n	800dfea <PDM_Filter_Init+0x8e>
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	e7de      	b.n	800dfa8 <PDM_Filter_Init+0x4c>
 800dfea:	2220      	movs	r2, #32
 800dfec:	4618      	mov	r0, r3
 800dfee:	6422      	str	r2, [r4, #64]	; 0x40
 800dff0:	4613      	mov	r3, r2
 800dff2:	2160      	movs	r1, #96	; 0x60
 800dff4:	e7da      	b.n	800dfac <PDM_Filter_Init+0x50>
 800dff6:	7829      	ldrb	r1, [r5, #0]
 800dff8:	2900      	cmp	r1, #0
 800dffa:	d1ee      	bne.n	800dfda <PDM_Filter_Init+0x7e>
 800dffc:	4919      	ldr	r1, [pc, #100]	; (800e064 <PDM_Filter_Init+0x108>)
 800dffe:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800e06c <PDM_Filter_Init+0x110>
 800e002:	4f19      	ldr	r7, [pc, #100]	; (800e068 <PDM_Filter_Init+0x10c>)
 800e004:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e008:	684a      	ldr	r2, [r1, #4]
 800e00a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e00e:	ea02 0007 	and.w	r0, r2, r7
 800e012:	4303      	orrs	r3, r0
 800e014:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e018:	4413      	add	r3, r2
 800e01a:	f841 3f04 	str.w	r3, [r1, #4]!
 800e01e:	428e      	cmp	r6, r1
 800e020:	d1f2      	bne.n	800e008 <PDM_Filter_Init+0xac>
 800e022:	2001      	movs	r0, #1
 800e024:	7028      	strb	r0, [r5, #0]
 800e026:	2300      	movs	r3, #0
 800e028:	e7bb      	b.n	800dfa2 <PDM_Filter_Init+0x46>
 800e02a:	490e      	ldr	r1, [pc, #56]	; (800e064 <PDM_Filter_Init+0x108>)
 800e02c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800e06c <PDM_Filter_Init+0x110>
 800e030:	4f0d      	ldr	r7, [pc, #52]	; (800e068 <PDM_Filter_Init+0x10c>)
 800e032:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e036:	684a      	ldr	r2, [r1, #4]
 800e038:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e03c:	ea02 0007 	and.w	r0, r2, r7
 800e040:	4303      	orrs	r3, r0
 800e042:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e046:	4413      	add	r3, r2
 800e048:	f841 3f04 	str.w	r3, [r1, #4]!
 800e04c:	428e      	cmp	r6, r1
 800e04e:	d1f2      	bne.n	800e036 <PDM_Filter_Init+0xda>
 800e050:	2300      	movs	r3, #0
 800e052:	702b      	strb	r3, [r5, #0]
 800e054:	e7c1      	b.n	800dfda <PDM_Filter_Init+0x7e>
 800e056:	bf00      	nop
 800e058:	b5e8b5cd 	.word	0xb5e8b5cd
 800e05c:	f407a5c2 	.word	0xf407a5c2
 800e060:	200004b0 	.word	0x200004b0
 800e064:	1ffffffc 	.word	0x1ffffffc
 800e068:	000ffc00 	.word	0x000ffc00
 800e06c:	3ff00000 	.word	0x3ff00000

0800e070 <PDM_Filter_setConfig>:
 800e070:	4b66      	ldr	r3, [pc, #408]	; (800e20c <PDM_Filter_setConfig+0x19c>)
 800e072:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e074:	429a      	cmp	r2, r3
 800e076:	d001      	beq.n	800e07c <PDM_Filter_setConfig+0xc>
 800e078:	2004      	movs	r0, #4
 800e07a:	4770      	bx	lr
 800e07c:	b530      	push	{r4, r5, lr}
 800e07e:	880a      	ldrh	r2, [r1, #0]
 800e080:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e082:	ed2d 8b04 	vpush	{d8-d9}
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	1e51      	subs	r1, r2, #1
 800e08c:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800e090:	2906      	cmp	r1, #6
 800e092:	b083      	sub	sp, #12
 800e094:	6420      	str	r0, [r4, #64]	; 0x40
 800e096:	d91a      	bls.n	800e0ce <PDM_Filter_setConfig+0x5e>
 800e098:	2008      	movs	r0, #8
 800e09a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e09e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e0a2:	4299      	cmp	r1, r3
 800e0a4:	d07e      	beq.n	800e1a4 <PDM_Filter_setConfig+0x134>
 800e0a6:	f113 0f0c 	cmn.w	r3, #12
 800e0aa:	da2a      	bge.n	800e102 <PDM_Filter_setConfig+0x92>
 800e0ac:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e0b0:	3040      	adds	r0, #64	; 0x40
 800e0b2:	80ab      	strh	r3, [r5, #4]
 800e0b4:	8622      	strh	r2, [r4, #48]	; 0x30
 800e0b6:	886b      	ldrh	r3, [r5, #2]
 800e0b8:	8663      	strh	r3, [r4, #50]	; 0x32
 800e0ba:	b920      	cbnz	r0, 800e0c6 <PDM_Filter_setConfig+0x56>
 800e0bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0c2:	6423      	str	r3, [r4, #64]	; 0x40
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	b003      	add	sp, #12
 800e0c8:	ecbd 8b04 	vpop	{d8-d9}
 800e0cc:	bd30      	pop	{r4, r5, pc}
 800e0ce:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e0d0:	4291      	cmp	r1, r2
 800e0d2:	d06c      	beq.n	800e1ae <PDM_Filter_setConfig+0x13e>
 800e0d4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800e0d8:	f023 0301 	bic.w	r3, r3, #1
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800e0e2:	6423      	str	r3, [r4, #64]	; 0x40
 800e0e4:	2970      	cmp	r1, #112	; 0x70
 800e0e6:	f003 030f 	and.w	r3, r3, #15
 800e0ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0ee:	d066      	beq.n	800e1be <PDM_Filter_setConfig+0x14e>
 800e0f0:	2b06      	cmp	r3, #6
 800e0f2:	f200 8089 	bhi.w	800e208 <PDM_Filter_setConfig+0x198>
 800e0f6:	e8df f003 	tbb	[pc, r3]
 800e0fa:	4f52      	.short	0x4f52
 800e0fc:	3d43494c 	.word	0x3d43494c
 800e100:	46          	.byte	0x46
 800e101:	00          	.byte	0x00
 800e102:	2b33      	cmp	r3, #51	; 0x33
 800e104:	dc32      	bgt.n	800e16c <PDM_Filter_setConfig+0xfc>
 800e106:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e108:	f002 020f 	and.w	r2, r2, #15
 800e10c:	3a01      	subs	r2, #1
 800e10e:	2a06      	cmp	r2, #6
 800e110:	d872      	bhi.n	800e1f8 <PDM_Filter_setConfig+0x188>
 800e112:	493f      	ldr	r1, [pc, #252]	; (800e210 <PDM_Filter_setConfig+0x1a0>)
 800e114:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e118:	ed92 9a00 	vldr	s18, [r2]
 800e11c:	ed92 8a07 	vldr	s16, [r2, #28]
 800e120:	9001      	str	r0, [sp, #4]
 800e122:	ee07 3a90 	vmov	s15, r3
 800e126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e12a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800e12e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800e132:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e136:	f000 f9f9 	bl	800e52c <powf>
 800e13a:	eddf 0a36 	vldr	s1, [pc, #216]	; 800e214 <PDM_Filter_setConfig+0x1a4>
 800e13e:	eef0 8a40 	vmov.f32	s17, s0
 800e142:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800e146:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e14a:	f000 f9ef 	bl	800e52c <powf>
 800e14e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e152:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e156:	f000 f9c3 	bl	800e4e0 <roundf>
 800e15a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e15e:	88ab      	ldrh	r3, [r5, #4]
 800e160:	882a      	ldrh	r2, [r5, #0]
 800e162:	9801      	ldr	r0, [sp, #4]
 800e164:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800e168:	8723      	strh	r3, [r4, #56]	; 0x38
 800e16a:	e7a3      	b.n	800e0b4 <PDM_Filter_setConfig+0x44>
 800e16c:	2333      	movs	r3, #51	; 0x33
 800e16e:	3040      	adds	r0, #64	; 0x40
 800e170:	80ab      	strh	r3, [r5, #4]
 800e172:	e79f      	b.n	800e0b4 <PDM_Filter_setConfig+0x44>
 800e174:	4b28      	ldr	r3, [pc, #160]	; (800e218 <PDM_Filter_setConfig+0x1a8>)
 800e176:	64a3      	str	r3, [r4, #72]	; 0x48
 800e178:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e17c:	2000      	movs	r0, #0
 800e17e:	e792      	b.n	800e0a6 <PDM_Filter_setConfig+0x36>
 800e180:	4b26      	ldr	r3, [pc, #152]	; (800e21c <PDM_Filter_setConfig+0x1ac>)
 800e182:	64a3      	str	r3, [r4, #72]	; 0x48
 800e184:	e7f8      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e186:	4b26      	ldr	r3, [pc, #152]	; (800e220 <PDM_Filter_setConfig+0x1b0>)
 800e188:	64a3      	str	r3, [r4, #72]	; 0x48
 800e18a:	e7f5      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e18c:	4b25      	ldr	r3, [pc, #148]	; (800e224 <PDM_Filter_setConfig+0x1b4>)
 800e18e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e190:	e7f2      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e192:	4b25      	ldr	r3, [pc, #148]	; (800e228 <PDM_Filter_setConfig+0x1b8>)
 800e194:	64a3      	str	r3, [r4, #72]	; 0x48
 800e196:	e7ef      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e198:	4b24      	ldr	r3, [pc, #144]	; (800e22c <PDM_Filter_setConfig+0x1bc>)
 800e19a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e19c:	e7ec      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e19e:	4b24      	ldr	r3, [pc, #144]	; (800e230 <PDM_Filter_setConfig+0x1c0>)
 800e1a0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1a2:	e7e9      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1a4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e1a6:	4291      	cmp	r1, r2
 800e1a8:	f47f af7d 	bne.w	800e0a6 <PDM_Filter_setConfig+0x36>
 800e1ac:	e783      	b.n	800e0b6 <PDM_Filter_setConfig+0x46>
 800e1ae:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e1b2:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e1b6:	4299      	cmp	r1, r3
 800e1b8:	d023      	beq.n	800e202 <PDM_Filter_setConfig+0x192>
 800e1ba:	2000      	movs	r0, #0
 800e1bc:	e773      	b.n	800e0a6 <PDM_Filter_setConfig+0x36>
 800e1be:	2b06      	cmp	r3, #6
 800e1c0:	d822      	bhi.n	800e208 <PDM_Filter_setConfig+0x198>
 800e1c2:	e8df f003 	tbb	[pc, r3]
 800e1c6:	1316      	.short	0x1316
 800e1c8:	070a0d10 	.word	0x070a0d10
 800e1cc:	04          	.byte	0x04
 800e1cd:	00          	.byte	0x00
 800e1ce:	4b19      	ldr	r3, [pc, #100]	; (800e234 <PDM_Filter_setConfig+0x1c4>)
 800e1d0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1d2:	e7d1      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1d4:	4b18      	ldr	r3, [pc, #96]	; (800e238 <PDM_Filter_setConfig+0x1c8>)
 800e1d6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1d8:	e7ce      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1da:	4b18      	ldr	r3, [pc, #96]	; (800e23c <PDM_Filter_setConfig+0x1cc>)
 800e1dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1de:	e7cb      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1e0:	4b17      	ldr	r3, [pc, #92]	; (800e240 <PDM_Filter_setConfig+0x1d0>)
 800e1e2:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1e4:	e7c8      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1e6:	4b17      	ldr	r3, [pc, #92]	; (800e244 <PDM_Filter_setConfig+0x1d4>)
 800e1e8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1ea:	e7c5      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1ec:	4b16      	ldr	r3, [pc, #88]	; (800e248 <PDM_Filter_setConfig+0x1d8>)
 800e1ee:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1f0:	e7c2      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1f2:	4b16      	ldr	r3, [pc, #88]	; (800e24c <PDM_Filter_setConfig+0x1dc>)
 800e1f4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1f6:	e7bf      	b.n	800e178 <PDM_Filter_setConfig+0x108>
 800e1f8:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800e250 <PDM_Filter_setConfig+0x1e0>
 800e1fc:	eeb0 9a48 	vmov.f32	s18, s16
 800e200:	e78e      	b.n	800e120 <PDM_Filter_setConfig+0xb0>
 800e202:	886b      	ldrh	r3, [r5, #2]
 800e204:	8663      	strh	r3, [r4, #50]	; 0x32
 800e206:	e759      	b.n	800e0bc <PDM_Filter_setConfig+0x4c>
 800e208:	2000      	movs	r0, #0
 800e20a:	e746      	b.n	800e09a <PDM_Filter_setConfig+0x2a>
 800e20c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e210:	0800efd4 	.word	0x0800efd4
 800e214:	42000000 	.word	0x42000000
 800e218:	0800c5dd 	.word	0x0800c5dd
 800e21c:	0800c4bd 	.word	0x0800c4bd
 800e220:	0800c76d 	.word	0x0800c76d
 800e224:	0800cfb1 	.word	0x0800cfb1
 800e228:	0800cd11 	.word	0x0800cd11
 800e22c:	0800caf1 	.word	0x0800caf1
 800e230:	0800c905 	.word	0x0800c905
 800e234:	0800d5bd 	.word	0x0800d5bd
 800e238:	0800d485 	.word	0x0800d485
 800e23c:	0800d3a1 	.word	0x0800d3a1
 800e240:	0800dc39 	.word	0x0800dc39
 800e244:	0800da25 	.word	0x0800da25
 800e248:	0800d86d 	.word	0x0800d86d
 800e24c:	0800d701 	.word	0x0800d701
 800e250:	00000000 	.word	0x00000000

0800e254 <CRC_Lock>:
 800e254:	4a17      	ldr	r2, [pc, #92]	; (800e2b4 <CRC_Lock+0x60>)
 800e256:	6813      	ldr	r3, [r2, #0]
 800e258:	b410      	push	{r4}
 800e25a:	f023 0301 	bic.w	r3, r3, #1
 800e25e:	4c16      	ldr	r4, [pc, #88]	; (800e2b8 <CRC_Lock+0x64>)
 800e260:	6013      	str	r3, [r2, #0]
 800e262:	6823      	ldr	r3, [r4, #0]
 800e264:	b933      	cbnz	r3, 800e274 <CRC_Lock+0x20>
 800e266:	4b15      	ldr	r3, [pc, #84]	; (800e2bc <CRC_Lock+0x68>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e26e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e272:	d00f      	beq.n	800e294 <CRC_Lock+0x40>
 800e274:	4a12      	ldr	r2, [pc, #72]	; (800e2c0 <CRC_Lock+0x6c>)
 800e276:	2301      	movs	r3, #1
 800e278:	6013      	str	r3, [r2, #0]
 800e27a:	6813      	ldr	r3, [r2, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1fc      	bne.n	800e27a <CRC_Lock+0x26>
 800e280:	4b10      	ldr	r3, [pc, #64]	; (800e2c4 <CRC_Lock+0x70>)
 800e282:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e286:	6018      	str	r0, [r3, #0]
 800e288:	6818      	ldr	r0, [r3, #0]
 800e28a:	1a08      	subs	r0, r1, r0
 800e28c:	fab0 f080 	clz	r0, r0
 800e290:	0940      	lsrs	r0, r0, #5
 800e292:	4770      	bx	lr
 800e294:	4a0c      	ldr	r2, [pc, #48]	; (800e2c8 <CRC_Lock+0x74>)
 800e296:	2301      	movs	r3, #1
 800e298:	6013      	str	r3, [r2, #0]
 800e29a:	6813      	ldr	r3, [r2, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1fc      	bne.n	800e29a <CRC_Lock+0x46>
 800e2a0:	4b0a      	ldr	r3, [pc, #40]	; (800e2cc <CRC_Lock+0x78>)
 800e2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2a6:	6018      	str	r0, [r3, #0]
 800e2a8:	6818      	ldr	r0, [r3, #0]
 800e2aa:	1a40      	subs	r0, r0, r1
 800e2ac:	fab0 f080 	clz	r0, r0
 800e2b0:	0940      	lsrs	r0, r0, #5
 800e2b2:	4770      	bx	lr
 800e2b4:	e0002000 	.word	0xe0002000
 800e2b8:	e0042000 	.word	0xe0042000
 800e2bc:	5c001000 	.word	0x5c001000
 800e2c0:	40023008 	.word	0x40023008
 800e2c4:	40023000 	.word	0x40023000
 800e2c8:	58024c08 	.word	0x58024c08
 800e2cc:	58024c00 	.word	0x58024c00

0800e2d0 <__errno>:
 800e2d0:	4b01      	ldr	r3, [pc, #4]	; (800e2d8 <__errno+0x8>)
 800e2d2:	6818      	ldr	r0, [r3, #0]
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	2000042c 	.word	0x2000042c

0800e2dc <__libc_init_array>:
 800e2dc:	b570      	push	{r4, r5, r6, lr}
 800e2de:	4e0d      	ldr	r6, [pc, #52]	; (800e314 <__libc_init_array+0x38>)
 800e2e0:	4c0d      	ldr	r4, [pc, #52]	; (800e318 <__libc_init_array+0x3c>)
 800e2e2:	1ba4      	subs	r4, r4, r6
 800e2e4:	10a4      	asrs	r4, r4, #2
 800e2e6:	2500      	movs	r5, #0
 800e2e8:	42a5      	cmp	r5, r4
 800e2ea:	d109      	bne.n	800e300 <__libc_init_array+0x24>
 800e2ec:	4e0b      	ldr	r6, [pc, #44]	; (800e31c <__libc_init_array+0x40>)
 800e2ee:	4c0c      	ldr	r4, [pc, #48]	; (800e320 <__libc_init_array+0x44>)
 800e2f0:	f000 fe22 	bl	800ef38 <_init>
 800e2f4:	1ba4      	subs	r4, r4, r6
 800e2f6:	10a4      	asrs	r4, r4, #2
 800e2f8:	2500      	movs	r5, #0
 800e2fa:	42a5      	cmp	r5, r4
 800e2fc:	d105      	bne.n	800e30a <__libc_init_array+0x2e>
 800e2fe:	bd70      	pop	{r4, r5, r6, pc}
 800e300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e304:	4798      	blx	r3
 800e306:	3501      	adds	r5, #1
 800e308:	e7ee      	b.n	800e2e8 <__libc_init_array+0xc>
 800e30a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e30e:	4798      	blx	r3
 800e310:	3501      	adds	r5, #1
 800e312:	e7f2      	b.n	800e2fa <__libc_init_array+0x1e>
 800e314:	0800f150 	.word	0x0800f150
 800e318:	0800f150 	.word	0x0800f150
 800e31c:	0800f150 	.word	0x0800f150
 800e320:	0800f154 	.word	0x0800f154

0800e324 <malloc>:
 800e324:	4b02      	ldr	r3, [pc, #8]	; (800e330 <malloc+0xc>)
 800e326:	4601      	mov	r1, r0
 800e328:	6818      	ldr	r0, [r3, #0]
 800e32a:	f000 b86d 	b.w	800e408 <_malloc_r>
 800e32e:	bf00      	nop
 800e330:	2000042c 	.word	0x2000042c

0800e334 <free>:
 800e334:	4b02      	ldr	r3, [pc, #8]	; (800e340 <free+0xc>)
 800e336:	4601      	mov	r1, r0
 800e338:	6818      	ldr	r0, [r3, #0]
 800e33a:	f000 b817 	b.w	800e36c <_free_r>
 800e33e:	bf00      	nop
 800e340:	2000042c 	.word	0x2000042c

0800e344 <memcpy>:
 800e344:	b510      	push	{r4, lr}
 800e346:	1e43      	subs	r3, r0, #1
 800e348:	440a      	add	r2, r1
 800e34a:	4291      	cmp	r1, r2
 800e34c:	d100      	bne.n	800e350 <memcpy+0xc>
 800e34e:	bd10      	pop	{r4, pc}
 800e350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e358:	e7f7      	b.n	800e34a <memcpy+0x6>

0800e35a <memset>:
 800e35a:	4402      	add	r2, r0
 800e35c:	4603      	mov	r3, r0
 800e35e:	4293      	cmp	r3, r2
 800e360:	d100      	bne.n	800e364 <memset+0xa>
 800e362:	4770      	bx	lr
 800e364:	f803 1b01 	strb.w	r1, [r3], #1
 800e368:	e7f9      	b.n	800e35e <memset+0x4>
	...

0800e36c <_free_r>:
 800e36c:	b538      	push	{r3, r4, r5, lr}
 800e36e:	4605      	mov	r5, r0
 800e370:	2900      	cmp	r1, #0
 800e372:	d045      	beq.n	800e400 <_free_r+0x94>
 800e374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e378:	1f0c      	subs	r4, r1, #4
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	bfb8      	it	lt
 800e37e:	18e4      	addlt	r4, r4, r3
 800e380:	f000 f8ac 	bl	800e4dc <__malloc_lock>
 800e384:	4a1f      	ldr	r2, [pc, #124]	; (800e404 <_free_r+0x98>)
 800e386:	6813      	ldr	r3, [r2, #0]
 800e388:	4610      	mov	r0, r2
 800e38a:	b933      	cbnz	r3, 800e39a <_free_r+0x2e>
 800e38c:	6063      	str	r3, [r4, #4]
 800e38e:	6014      	str	r4, [r2, #0]
 800e390:	4628      	mov	r0, r5
 800e392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e396:	f000 b8a2 	b.w	800e4de <__malloc_unlock>
 800e39a:	42a3      	cmp	r3, r4
 800e39c:	d90c      	bls.n	800e3b8 <_free_r+0x4c>
 800e39e:	6821      	ldr	r1, [r4, #0]
 800e3a0:	1862      	adds	r2, r4, r1
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	bf04      	itt	eq
 800e3a6:	681a      	ldreq	r2, [r3, #0]
 800e3a8:	685b      	ldreq	r3, [r3, #4]
 800e3aa:	6063      	str	r3, [r4, #4]
 800e3ac:	bf04      	itt	eq
 800e3ae:	1852      	addeq	r2, r2, r1
 800e3b0:	6022      	streq	r2, [r4, #0]
 800e3b2:	6004      	str	r4, [r0, #0]
 800e3b4:	e7ec      	b.n	800e390 <_free_r+0x24>
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	b10a      	cbz	r2, 800e3c0 <_free_r+0x54>
 800e3bc:	42a2      	cmp	r2, r4
 800e3be:	d9fa      	bls.n	800e3b6 <_free_r+0x4a>
 800e3c0:	6819      	ldr	r1, [r3, #0]
 800e3c2:	1858      	adds	r0, r3, r1
 800e3c4:	42a0      	cmp	r0, r4
 800e3c6:	d10b      	bne.n	800e3e0 <_free_r+0x74>
 800e3c8:	6820      	ldr	r0, [r4, #0]
 800e3ca:	4401      	add	r1, r0
 800e3cc:	1858      	adds	r0, r3, r1
 800e3ce:	4282      	cmp	r2, r0
 800e3d0:	6019      	str	r1, [r3, #0]
 800e3d2:	d1dd      	bne.n	800e390 <_free_r+0x24>
 800e3d4:	6810      	ldr	r0, [r2, #0]
 800e3d6:	6852      	ldr	r2, [r2, #4]
 800e3d8:	605a      	str	r2, [r3, #4]
 800e3da:	4401      	add	r1, r0
 800e3dc:	6019      	str	r1, [r3, #0]
 800e3de:	e7d7      	b.n	800e390 <_free_r+0x24>
 800e3e0:	d902      	bls.n	800e3e8 <_free_r+0x7c>
 800e3e2:	230c      	movs	r3, #12
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	e7d3      	b.n	800e390 <_free_r+0x24>
 800e3e8:	6820      	ldr	r0, [r4, #0]
 800e3ea:	1821      	adds	r1, r4, r0
 800e3ec:	428a      	cmp	r2, r1
 800e3ee:	bf04      	itt	eq
 800e3f0:	6811      	ldreq	r1, [r2, #0]
 800e3f2:	6852      	ldreq	r2, [r2, #4]
 800e3f4:	6062      	str	r2, [r4, #4]
 800e3f6:	bf04      	itt	eq
 800e3f8:	1809      	addeq	r1, r1, r0
 800e3fa:	6021      	streq	r1, [r4, #0]
 800e3fc:	605c      	str	r4, [r3, #4]
 800e3fe:	e7c7      	b.n	800e390 <_free_r+0x24>
 800e400:	bd38      	pop	{r3, r4, r5, pc}
 800e402:	bf00      	nop
 800e404:	20000558 	.word	0x20000558

0800e408 <_malloc_r>:
 800e408:	b570      	push	{r4, r5, r6, lr}
 800e40a:	1ccd      	adds	r5, r1, #3
 800e40c:	f025 0503 	bic.w	r5, r5, #3
 800e410:	3508      	adds	r5, #8
 800e412:	2d0c      	cmp	r5, #12
 800e414:	bf38      	it	cc
 800e416:	250c      	movcc	r5, #12
 800e418:	2d00      	cmp	r5, #0
 800e41a:	4606      	mov	r6, r0
 800e41c:	db01      	blt.n	800e422 <_malloc_r+0x1a>
 800e41e:	42a9      	cmp	r1, r5
 800e420:	d903      	bls.n	800e42a <_malloc_r+0x22>
 800e422:	230c      	movs	r3, #12
 800e424:	6033      	str	r3, [r6, #0]
 800e426:	2000      	movs	r0, #0
 800e428:	bd70      	pop	{r4, r5, r6, pc}
 800e42a:	f000 f857 	bl	800e4dc <__malloc_lock>
 800e42e:	4a21      	ldr	r2, [pc, #132]	; (800e4b4 <_malloc_r+0xac>)
 800e430:	6814      	ldr	r4, [r2, #0]
 800e432:	4621      	mov	r1, r4
 800e434:	b991      	cbnz	r1, 800e45c <_malloc_r+0x54>
 800e436:	4c20      	ldr	r4, [pc, #128]	; (800e4b8 <_malloc_r+0xb0>)
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	b91b      	cbnz	r3, 800e444 <_malloc_r+0x3c>
 800e43c:	4630      	mov	r0, r6
 800e43e:	f000 f83d 	bl	800e4bc <_sbrk_r>
 800e442:	6020      	str	r0, [r4, #0]
 800e444:	4629      	mov	r1, r5
 800e446:	4630      	mov	r0, r6
 800e448:	f000 f838 	bl	800e4bc <_sbrk_r>
 800e44c:	1c43      	adds	r3, r0, #1
 800e44e:	d124      	bne.n	800e49a <_malloc_r+0x92>
 800e450:	230c      	movs	r3, #12
 800e452:	6033      	str	r3, [r6, #0]
 800e454:	4630      	mov	r0, r6
 800e456:	f000 f842 	bl	800e4de <__malloc_unlock>
 800e45a:	e7e4      	b.n	800e426 <_malloc_r+0x1e>
 800e45c:	680b      	ldr	r3, [r1, #0]
 800e45e:	1b5b      	subs	r3, r3, r5
 800e460:	d418      	bmi.n	800e494 <_malloc_r+0x8c>
 800e462:	2b0b      	cmp	r3, #11
 800e464:	d90f      	bls.n	800e486 <_malloc_r+0x7e>
 800e466:	600b      	str	r3, [r1, #0]
 800e468:	50cd      	str	r5, [r1, r3]
 800e46a:	18cc      	adds	r4, r1, r3
 800e46c:	4630      	mov	r0, r6
 800e46e:	f000 f836 	bl	800e4de <__malloc_unlock>
 800e472:	f104 000b 	add.w	r0, r4, #11
 800e476:	1d23      	adds	r3, r4, #4
 800e478:	f020 0007 	bic.w	r0, r0, #7
 800e47c:	1ac3      	subs	r3, r0, r3
 800e47e:	d0d3      	beq.n	800e428 <_malloc_r+0x20>
 800e480:	425a      	negs	r2, r3
 800e482:	50e2      	str	r2, [r4, r3]
 800e484:	e7d0      	b.n	800e428 <_malloc_r+0x20>
 800e486:	428c      	cmp	r4, r1
 800e488:	684b      	ldr	r3, [r1, #4]
 800e48a:	bf16      	itet	ne
 800e48c:	6063      	strne	r3, [r4, #4]
 800e48e:	6013      	streq	r3, [r2, #0]
 800e490:	460c      	movne	r4, r1
 800e492:	e7eb      	b.n	800e46c <_malloc_r+0x64>
 800e494:	460c      	mov	r4, r1
 800e496:	6849      	ldr	r1, [r1, #4]
 800e498:	e7cc      	b.n	800e434 <_malloc_r+0x2c>
 800e49a:	1cc4      	adds	r4, r0, #3
 800e49c:	f024 0403 	bic.w	r4, r4, #3
 800e4a0:	42a0      	cmp	r0, r4
 800e4a2:	d005      	beq.n	800e4b0 <_malloc_r+0xa8>
 800e4a4:	1a21      	subs	r1, r4, r0
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f000 f808 	bl	800e4bc <_sbrk_r>
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	d0cf      	beq.n	800e450 <_malloc_r+0x48>
 800e4b0:	6025      	str	r5, [r4, #0]
 800e4b2:	e7db      	b.n	800e46c <_malloc_r+0x64>
 800e4b4:	20000558 	.word	0x20000558
 800e4b8:	2000055c 	.word	0x2000055c

0800e4bc <_sbrk_r>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4c06      	ldr	r4, [pc, #24]	; (800e4d8 <_sbrk_r+0x1c>)
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	4608      	mov	r0, r1
 800e4c6:	6023      	str	r3, [r4, #0]
 800e4c8:	f7f2 fe5c 	bl	8001184 <_sbrk>
 800e4cc:	1c43      	adds	r3, r0, #1
 800e4ce:	d102      	bne.n	800e4d6 <_sbrk_r+0x1a>
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	b103      	cbz	r3, 800e4d6 <_sbrk_r+0x1a>
 800e4d4:	602b      	str	r3, [r5, #0]
 800e4d6:	bd38      	pop	{r3, r4, r5, pc}
 800e4d8:	200017a4 	.word	0x200017a4

0800e4dc <__malloc_lock>:
 800e4dc:	4770      	bx	lr

0800e4de <__malloc_unlock>:
 800e4de:	4770      	bx	lr

0800e4e0 <roundf>:
 800e4e0:	ee10 0a10 	vmov	r0, s0
 800e4e4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e4e8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800e4ec:	2a16      	cmp	r2, #22
 800e4ee:	dc15      	bgt.n	800e51c <roundf+0x3c>
 800e4f0:	2a00      	cmp	r2, #0
 800e4f2:	da08      	bge.n	800e506 <roundf+0x26>
 800e4f4:	3201      	adds	r2, #1
 800e4f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e4fa:	d101      	bne.n	800e500 <roundf+0x20>
 800e4fc:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e500:	ee00 3a10 	vmov	s0, r3
 800e504:	4770      	bx	lr
 800e506:	4908      	ldr	r1, [pc, #32]	; (800e528 <roundf+0x48>)
 800e508:	4111      	asrs	r1, r2
 800e50a:	4208      	tst	r0, r1
 800e50c:	d0fa      	beq.n	800e504 <roundf+0x24>
 800e50e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e512:	4113      	asrs	r3, r2
 800e514:	4403      	add	r3, r0
 800e516:	ea23 0301 	bic.w	r3, r3, r1
 800e51a:	e7f1      	b.n	800e500 <roundf+0x20>
 800e51c:	2a80      	cmp	r2, #128	; 0x80
 800e51e:	d1f1      	bne.n	800e504 <roundf+0x24>
 800e520:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	007fffff 	.word	0x007fffff

0800e52c <powf>:
 800e52c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800e530:	ed2d 8b04 	vpush	{d8-d9}
 800e534:	4ca7      	ldr	r4, [pc, #668]	; (800e7d4 <powf+0x2a8>)
 800e536:	b08a      	sub	sp, #40	; 0x28
 800e538:	eef0 8a40 	vmov.f32	s17, s0
 800e53c:	eeb0 8a60 	vmov.f32	s16, s1
 800e540:	f000 f958 	bl	800e7f4 <__ieee754_powf>
 800e544:	f994 5000 	ldrsb.w	r5, [r4]
 800e548:	1c6b      	adds	r3, r5, #1
 800e54a:	eeb0 9a40 	vmov.f32	s18, s0
 800e54e:	4626      	mov	r6, r4
 800e550:	d05f      	beq.n	800e612 <powf+0xe6>
 800e552:	eeb4 8a48 	vcmp.f32	s16, s16
 800e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55a:	d65a      	bvs.n	800e612 <powf+0xe6>
 800e55c:	eef4 8a68 	vcmp.f32	s17, s17
 800e560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e564:	d721      	bvc.n	800e5aa <powf+0x7e>
 800e566:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e56e:	d150      	bne.n	800e612 <powf+0xe6>
 800e570:	2301      	movs	r3, #1
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	4b98      	ldr	r3, [pc, #608]	; (800e7d8 <powf+0x2ac>)
 800e576:	9301      	str	r3, [sp, #4]
 800e578:	ee18 0a90 	vmov	r0, s17
 800e57c:	2300      	movs	r3, #0
 800e57e:	9308      	str	r3, [sp, #32]
 800e580:	f7f1 ff8e 	bl	80004a0 <__aeabi_f2d>
 800e584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e588:	ee18 0a10 	vmov	r0, s16
 800e58c:	f7f1 ff88 	bl	80004a0 <__aeabi_f2d>
 800e590:	4b92      	ldr	r3, [pc, #584]	; (800e7dc <powf+0x2b0>)
 800e592:	2200      	movs	r2, #0
 800e594:	2d02      	cmp	r5, #2
 800e596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e59a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e59e:	d032      	beq.n	800e606 <powf+0xda>
 800e5a0:	4668      	mov	r0, sp
 800e5a2:	f000 fbea 	bl	800ed7a <matherr>
 800e5a6:	bb40      	cbnz	r0, 800e5fa <powf+0xce>
 800e5a8:	e065      	b.n	800e676 <powf+0x14a>
 800e5aa:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800e7e0 <powf+0x2b4>
 800e5ae:	eef4 8a69 	vcmp.f32	s17, s19
 800e5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b6:	d163      	bne.n	800e680 <powf+0x154>
 800e5b8:	eeb4 8a69 	vcmp.f32	s16, s19
 800e5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c0:	d12e      	bne.n	800e620 <powf+0xf4>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	4b84      	ldr	r3, [pc, #528]	; (800e7d8 <powf+0x2ac>)
 800e5c8:	9301      	str	r3, [sp, #4]
 800e5ca:	ee18 0a90 	vmov	r0, s17
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	9308      	str	r3, [sp, #32]
 800e5d2:	f7f1 ff65 	bl	80004a0 <__aeabi_f2d>
 800e5d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5da:	ee18 0a10 	vmov	r0, s16
 800e5de:	f7f1 ff5f 	bl	80004a0 <__aeabi_f2d>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e5ee:	2d00      	cmp	r5, #0
 800e5f0:	d0d6      	beq.n	800e5a0 <powf+0x74>
 800e5f2:	4b7a      	ldr	r3, [pc, #488]	; (800e7dc <powf+0x2b0>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e5fa:	9b08      	ldr	r3, [sp, #32]
 800e5fc:	b11b      	cbz	r3, 800e606 <powf+0xda>
 800e5fe:	f7ff fe67 	bl	800e2d0 <__errno>
 800e602:	9b08      	ldr	r3, [sp, #32]
 800e604:	6003      	str	r3, [r0, #0]
 800e606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e60a:	f7f1 ffa1 	bl	8000550 <__aeabi_d2f>
 800e60e:	ee09 0a10 	vmov	s18, r0
 800e612:	eeb0 0a49 	vmov.f32	s0, s18
 800e616:	b00a      	add	sp, #40	; 0x28
 800e618:	ecbd 8b04 	vpop	{d8-d9}
 800e61c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e620:	eeb0 0a48 	vmov.f32	s0, s16
 800e624:	f000 fbb2 	bl	800ed8c <finitef>
 800e628:	2800      	cmp	r0, #0
 800e62a:	d0f2      	beq.n	800e612 <powf+0xe6>
 800e62c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e634:	d5ed      	bpl.n	800e612 <powf+0xe6>
 800e636:	2301      	movs	r3, #1
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	4b67      	ldr	r3, [pc, #412]	; (800e7d8 <powf+0x2ac>)
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	ee18 0a90 	vmov	r0, s17
 800e642:	2300      	movs	r3, #0
 800e644:	9308      	str	r3, [sp, #32]
 800e646:	f7f1 ff2b 	bl	80004a0 <__aeabi_f2d>
 800e64a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e64e:	ee18 0a10 	vmov	r0, s16
 800e652:	f7f1 ff25 	bl	80004a0 <__aeabi_f2d>
 800e656:	f994 3000 	ldrsb.w	r3, [r4]
 800e65a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e65e:	b923      	cbnz	r3, 800e66a <powf+0x13e>
 800e660:	2200      	movs	r2, #0
 800e662:	2300      	movs	r3, #0
 800e664:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e668:	e79a      	b.n	800e5a0 <powf+0x74>
 800e66a:	495e      	ldr	r1, [pc, #376]	; (800e7e4 <powf+0x2b8>)
 800e66c:	2000      	movs	r0, #0
 800e66e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e672:	2b02      	cmp	r3, #2
 800e674:	d194      	bne.n	800e5a0 <powf+0x74>
 800e676:	f7ff fe2b 	bl	800e2d0 <__errno>
 800e67a:	2321      	movs	r3, #33	; 0x21
 800e67c:	6003      	str	r3, [r0, #0]
 800e67e:	e7bc      	b.n	800e5fa <powf+0xce>
 800e680:	f000 fb84 	bl	800ed8c <finitef>
 800e684:	4605      	mov	r5, r0
 800e686:	2800      	cmp	r0, #0
 800e688:	d173      	bne.n	800e772 <powf+0x246>
 800e68a:	eeb0 0a68 	vmov.f32	s0, s17
 800e68e:	f000 fb7d 	bl	800ed8c <finitef>
 800e692:	2800      	cmp	r0, #0
 800e694:	d06d      	beq.n	800e772 <powf+0x246>
 800e696:	eeb0 0a48 	vmov.f32	s0, s16
 800e69a:	f000 fb77 	bl	800ed8c <finitef>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d067      	beq.n	800e772 <powf+0x246>
 800e6a2:	ee18 0a90 	vmov	r0, s17
 800e6a6:	f7f1 fefb 	bl	80004a0 <__aeabi_f2d>
 800e6aa:	4680      	mov	r8, r0
 800e6ac:	ee18 0a10 	vmov	r0, s16
 800e6b0:	4689      	mov	r9, r1
 800e6b2:	f7f1 fef5 	bl	80004a0 <__aeabi_f2d>
 800e6b6:	eeb4 9a49 	vcmp.f32	s18, s18
 800e6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6be:	f994 4000 	ldrsb.w	r4, [r4]
 800e6c2:	4b45      	ldr	r3, [pc, #276]	; (800e7d8 <powf+0x2ac>)
 800e6c4:	d713      	bvc.n	800e6ee <powf+0x1c2>
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	e9cd 2300 	strd	r2, r3, [sp]
 800e6cc:	9508      	str	r5, [sp, #32]
 800e6ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e6d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6d6:	2c00      	cmp	r4, #0
 800e6d8:	d0c2      	beq.n	800e660 <powf+0x134>
 800e6da:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800e6de:	ee17 0a90 	vmov	r0, s15
 800e6e2:	f7f1 fedd 	bl	80004a0 <__aeabi_f2d>
 800e6e6:	2c02      	cmp	r4, #2
 800e6e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e6ec:	e7c2      	b.n	800e674 <powf+0x148>
 800e6ee:	2203      	movs	r2, #3
 800e6f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e6f4:	e9cd 2300 	strd	r2, r3, [sp]
 800e6f8:	9508      	str	r5, [sp, #32]
 800e6fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e6fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e702:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e706:	b9fc      	cbnz	r4, 800e748 <powf+0x21c>
 800e708:	4b37      	ldr	r3, [pc, #220]	; (800e7e8 <powf+0x2bc>)
 800e70a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e70e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e716:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e71a:	d553      	bpl.n	800e7c4 <powf+0x298>
 800e71c:	eeb0 0a48 	vmov.f32	s0, s16
 800e720:	f000 fb44 	bl	800edac <rintf>
 800e724:	eeb4 0a48 	vcmp.f32	s0, s16
 800e728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72c:	d004      	beq.n	800e738 <powf+0x20c>
 800e72e:	4b2f      	ldr	r3, [pc, #188]	; (800e7ec <powf+0x2c0>)
 800e730:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e734:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e738:	f996 3000 	ldrsb.w	r3, [r6]
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d141      	bne.n	800e7c4 <powf+0x298>
 800e740:	f7ff fdc6 	bl	800e2d0 <__errno>
 800e744:	2322      	movs	r3, #34	; 0x22
 800e746:	e799      	b.n	800e67c <powf+0x150>
 800e748:	4b29      	ldr	r3, [pc, #164]	; (800e7f0 <powf+0x2c4>)
 800e74a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e74e:	2200      	movs	r2, #0
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e758:	d5ee      	bpl.n	800e738 <powf+0x20c>
 800e75a:	eeb0 0a48 	vmov.f32	s0, s16
 800e75e:	f000 fb25 	bl	800edac <rintf>
 800e762:	eeb4 0a48 	vcmp.f32	s0, s16
 800e766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76a:	d0e5      	beq.n	800e738 <powf+0x20c>
 800e76c:	2200      	movs	r2, #0
 800e76e:	4b1d      	ldr	r3, [pc, #116]	; (800e7e4 <powf+0x2b8>)
 800e770:	e7e0      	b.n	800e734 <powf+0x208>
 800e772:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77a:	f47f af4a 	bne.w	800e612 <powf+0xe6>
 800e77e:	eeb0 0a68 	vmov.f32	s0, s17
 800e782:	f000 fb03 	bl	800ed8c <finitef>
 800e786:	2800      	cmp	r0, #0
 800e788:	f43f af43 	beq.w	800e612 <powf+0xe6>
 800e78c:	eeb0 0a48 	vmov.f32	s0, s16
 800e790:	f000 fafc 	bl	800ed8c <finitef>
 800e794:	2800      	cmp	r0, #0
 800e796:	f43f af3c 	beq.w	800e612 <powf+0xe6>
 800e79a:	2304      	movs	r3, #4
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	4b0e      	ldr	r3, [pc, #56]	; (800e7d8 <powf+0x2ac>)
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	ee18 0a90 	vmov	r0, s17
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9308      	str	r3, [sp, #32]
 800e7aa:	f7f1 fe79 	bl	80004a0 <__aeabi_f2d>
 800e7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7b2:	ee18 0a10 	vmov	r0, s16
 800e7b6:	f7f1 fe73 	bl	80004a0 <__aeabi_f2d>
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e7b7      	b.n	800e734 <powf+0x208>
 800e7c4:	4668      	mov	r0, sp
 800e7c6:	f000 fad8 	bl	800ed7a <matherr>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	f47f af15 	bne.w	800e5fa <powf+0xce>
 800e7d0:	e7b6      	b.n	800e740 <powf+0x214>
 800e7d2:	bf00      	nop
 800e7d4:	20000490 	.word	0x20000490
 800e7d8:	0800f120 	.word	0x0800f120
 800e7dc:	3ff00000 	.word	0x3ff00000
 800e7e0:	00000000 	.word	0x00000000
 800e7e4:	fff00000 	.word	0xfff00000
 800e7e8:	47efffff 	.word	0x47efffff
 800e7ec:	c7efffff 	.word	0xc7efffff
 800e7f0:	7ff00000 	.word	0x7ff00000

0800e7f4 <__ieee754_powf>:
 800e7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f8:	ee10 5a90 	vmov	r5, s1
 800e7fc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800e800:	ed2d 8b02 	vpush	{d8}
 800e804:	eeb0 8a40 	vmov.f32	s16, s0
 800e808:	eef0 8a60 	vmov.f32	s17, s1
 800e80c:	f000 8293 	beq.w	800ed36 <__ieee754_powf+0x542>
 800e810:	ee10 8a10 	vmov	r8, s0
 800e814:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800e818:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e81c:	dc06      	bgt.n	800e82c <__ieee754_powf+0x38>
 800e81e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e822:	dd0a      	ble.n	800e83a <__ieee754_powf+0x46>
 800e824:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e828:	f000 8285 	beq.w	800ed36 <__ieee754_powf+0x542>
 800e82c:	ecbd 8b02 	vpop	{d8}
 800e830:	48d9      	ldr	r0, [pc, #868]	; (800eb98 <__ieee754_powf+0x3a4>)
 800e832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e836:	f000 bab3 	b.w	800eda0 <nanf>
 800e83a:	f1b8 0f00 	cmp.w	r8, #0
 800e83e:	da1d      	bge.n	800e87c <__ieee754_powf+0x88>
 800e840:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800e844:	da2c      	bge.n	800e8a0 <__ieee754_powf+0xac>
 800e846:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e84a:	db30      	blt.n	800e8ae <__ieee754_powf+0xba>
 800e84c:	15fb      	asrs	r3, r7, #23
 800e84e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e852:	fa47 f603 	asr.w	r6, r7, r3
 800e856:	fa06 f303 	lsl.w	r3, r6, r3
 800e85a:	42bb      	cmp	r3, r7
 800e85c:	d127      	bne.n	800e8ae <__ieee754_powf+0xba>
 800e85e:	f006 0601 	and.w	r6, r6, #1
 800e862:	f1c6 0602 	rsb	r6, r6, #2
 800e866:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e86a:	d122      	bne.n	800e8b2 <__ieee754_powf+0xbe>
 800e86c:	2d00      	cmp	r5, #0
 800e86e:	f280 8268 	bge.w	800ed42 <__ieee754_powf+0x54e>
 800e872:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e876:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e87a:	e00d      	b.n	800e898 <__ieee754_powf+0xa4>
 800e87c:	2600      	movs	r6, #0
 800e87e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e882:	d1f0      	bne.n	800e866 <__ieee754_powf+0x72>
 800e884:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e888:	f000 8255 	beq.w	800ed36 <__ieee754_powf+0x542>
 800e88c:	dd0a      	ble.n	800e8a4 <__ieee754_powf+0xb0>
 800e88e:	2d00      	cmp	r5, #0
 800e890:	f280 8254 	bge.w	800ed3c <__ieee754_powf+0x548>
 800e894:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800eb9c <__ieee754_powf+0x3a8>
 800e898:	ecbd 8b02 	vpop	{d8}
 800e89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a0:	2602      	movs	r6, #2
 800e8a2:	e7ec      	b.n	800e87e <__ieee754_powf+0x8a>
 800e8a4:	2d00      	cmp	r5, #0
 800e8a6:	daf5      	bge.n	800e894 <__ieee754_powf+0xa0>
 800e8a8:	eeb1 0a68 	vneg.f32	s0, s17
 800e8ac:	e7f4      	b.n	800e898 <__ieee754_powf+0xa4>
 800e8ae:	2600      	movs	r6, #0
 800e8b0:	e7d9      	b.n	800e866 <__ieee754_powf+0x72>
 800e8b2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800e8b6:	d102      	bne.n	800e8be <__ieee754_powf+0xca>
 800e8b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e8bc:	e7ec      	b.n	800e898 <__ieee754_powf+0xa4>
 800e8be:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800e8c2:	eeb0 0a48 	vmov.f32	s0, s16
 800e8c6:	d108      	bne.n	800e8da <__ieee754_powf+0xe6>
 800e8c8:	f1b8 0f00 	cmp.w	r8, #0
 800e8cc:	db05      	blt.n	800e8da <__ieee754_powf+0xe6>
 800e8ce:	ecbd 8b02 	vpop	{d8}
 800e8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d6:	f000 ba4d 	b.w	800ed74 <__ieee754_sqrtf>
 800e8da:	f000 fa50 	bl	800ed7e <fabsf>
 800e8de:	b124      	cbz	r4, 800e8ea <__ieee754_powf+0xf6>
 800e8e0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800e8e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e8e8:	d117      	bne.n	800e91a <__ieee754_powf+0x126>
 800e8ea:	2d00      	cmp	r5, #0
 800e8ec:	bfbc      	itt	lt
 800e8ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e8f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e8f6:	f1b8 0f00 	cmp.w	r8, #0
 800e8fa:	dacd      	bge.n	800e898 <__ieee754_powf+0xa4>
 800e8fc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800e900:	ea54 0306 	orrs.w	r3, r4, r6
 800e904:	d104      	bne.n	800e910 <__ieee754_powf+0x11c>
 800e906:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e90a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e90e:	e7c3      	b.n	800e898 <__ieee754_powf+0xa4>
 800e910:	2e01      	cmp	r6, #1
 800e912:	d1c1      	bne.n	800e898 <__ieee754_powf+0xa4>
 800e914:	eeb1 0a40 	vneg.f32	s0, s0
 800e918:	e7be      	b.n	800e898 <__ieee754_powf+0xa4>
 800e91a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800e91e:	3801      	subs	r0, #1
 800e920:	ea56 0300 	orrs.w	r3, r6, r0
 800e924:	d104      	bne.n	800e930 <__ieee754_powf+0x13c>
 800e926:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e92a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e92e:	e7b3      	b.n	800e898 <__ieee754_powf+0xa4>
 800e930:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800e934:	dd6d      	ble.n	800ea12 <__ieee754_powf+0x21e>
 800e936:	4b9a      	ldr	r3, [pc, #616]	; (800eba0 <__ieee754_powf+0x3ac>)
 800e938:	429c      	cmp	r4, r3
 800e93a:	dc06      	bgt.n	800e94a <__ieee754_powf+0x156>
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	daa9      	bge.n	800e894 <__ieee754_powf+0xa0>
 800e940:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800eba4 <__ieee754_powf+0x3b0>
 800e944:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e948:	e7a6      	b.n	800e898 <__ieee754_powf+0xa4>
 800e94a:	4b97      	ldr	r3, [pc, #604]	; (800eba8 <__ieee754_powf+0x3b4>)
 800e94c:	429c      	cmp	r4, r3
 800e94e:	dd02      	ble.n	800e956 <__ieee754_powf+0x162>
 800e950:	2d00      	cmp	r5, #0
 800e952:	dcf5      	bgt.n	800e940 <__ieee754_powf+0x14c>
 800e954:	e79e      	b.n	800e894 <__ieee754_powf+0xa0>
 800e956:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e95a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e95e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800ebac <__ieee754_powf+0x3b8>
 800e962:	eef1 6a40 	vneg.f32	s13, s0
 800e966:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e96a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e96e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e972:	eee7 7a40 	vfms.f32	s15, s14, s0
 800e976:	ee60 0a00 	vmul.f32	s1, s0, s0
 800e97a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800ebb0 <__ieee754_powf+0x3bc>
 800e97e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800e982:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800ebb4 <__ieee754_powf+0x3c0>
 800e986:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800e98a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e98e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ebb8 <__ieee754_powf+0x3c4>
 800e992:	eeb0 6a67 	vmov.f32	s12, s15
 800e996:	eea0 6a07 	vfma.f32	s12, s0, s14
 800e99a:	ee16 3a10 	vmov	r3, s12
 800e99e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e9a2:	f023 030f 	bic.w	r3, r3, #15
 800e9a6:	ee00 3a90 	vmov	s1, r3
 800e9aa:	eee6 0a87 	vfma.f32	s1, s13, s14
 800e9ae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e9b2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800e9b6:	f025 050f 	bic.w	r5, r5, #15
 800e9ba:	ee07 5a10 	vmov	s14, r5
 800e9be:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e9c2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e9c6:	ee07 3a90 	vmov	s15, r3
 800e9ca:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e9ce:	3e01      	subs	r6, #1
 800e9d0:	ea56 0200 	orrs.w	r2, r6, r0
 800e9d4:	ee07 5a10 	vmov	s14, r5
 800e9d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e9e0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e9e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e9e8:	ee17 4a10 	vmov	r4, s14
 800e9ec:	bf08      	it	eq
 800e9ee:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e9f2:	2c00      	cmp	r4, #0
 800e9f4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e9f8:	f340 8184 	ble.w	800ed04 <__ieee754_powf+0x510>
 800e9fc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ea00:	f340 80fc 	ble.w	800ebfc <__ieee754_powf+0x408>
 800ea04:	eddf 7a67 	vldr	s15, [pc, #412]	; 800eba4 <__ieee754_powf+0x3b0>
 800ea08:	ee28 0a27 	vmul.f32	s0, s16, s15
 800ea0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea10:	e742      	b.n	800e898 <__ieee754_powf+0xa4>
 800ea12:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800ea16:	bfbf      	itttt	lt
 800ea18:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800ebbc <__ieee754_powf+0x3c8>
 800ea1c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ea20:	f06f 0217 	mvnlt.w	r2, #23
 800ea24:	ee17 4a90 	vmovlt	r4, s15
 800ea28:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800ea2c:	bfa8      	it	ge
 800ea2e:	2200      	movge	r2, #0
 800ea30:	3b7f      	subs	r3, #127	; 0x7f
 800ea32:	4413      	add	r3, r2
 800ea34:	4a62      	ldr	r2, [pc, #392]	; (800ebc0 <__ieee754_powf+0x3cc>)
 800ea36:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800ea3a:	4294      	cmp	r4, r2
 800ea3c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800ea40:	dd06      	ble.n	800ea50 <__ieee754_powf+0x25c>
 800ea42:	4a60      	ldr	r2, [pc, #384]	; (800ebc4 <__ieee754_powf+0x3d0>)
 800ea44:	4294      	cmp	r4, r2
 800ea46:	f340 80a5 	ble.w	800eb94 <__ieee754_powf+0x3a0>
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ea50:	2400      	movs	r4, #0
 800ea52:	4a5d      	ldr	r2, [pc, #372]	; (800ebc8 <__ieee754_powf+0x3d4>)
 800ea54:	00a7      	lsls	r7, r4, #2
 800ea56:	443a      	add	r2, r7
 800ea58:	ee07 1a90 	vmov	s15, r1
 800ea5c:	ed92 7a00 	vldr	s14, [r2]
 800ea60:	4a5a      	ldr	r2, [pc, #360]	; (800ebcc <__ieee754_powf+0x3d8>)
 800ea62:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ea66:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ea6a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800ea6e:	1049      	asrs	r1, r1, #1
 800ea70:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ea74:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ea78:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800ea7c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ea80:	ee06 1a10 	vmov	s12, r1
 800ea84:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800ea88:	ee14 ca90 	vmov	ip, s9
 800ea8c:	ea02 0c0c 	and.w	ip, r2, ip
 800ea90:	ee05 ca10 	vmov	s10, ip
 800ea94:	eeb1 4a45 	vneg.f32	s8, s10
 800ea98:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ea9c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800eaa0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ebd0 <__ieee754_powf+0x3dc>
 800eaa4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800eaa8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800eaac:	eee4 5a06 	vfma.f32	s11, s8, s12
 800eab0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800eab4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800eab8:	eddf 5a46 	vldr	s11, [pc, #280]	; 800ebd4 <__ieee754_powf+0x3e0>
 800eabc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800eac0:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ebd8 <__ieee754_powf+0x3e4>
 800eac4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800eac8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ebac <__ieee754_powf+0x3b8>
 800eacc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ead0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ebdc <__ieee754_powf+0x3e8>
 800ead4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ead8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ebe0 <__ieee754_powf+0x3ec>
 800eadc:	ee75 6a24 	vadd.f32	s13, s10, s9
 800eae0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800eae4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800eae8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800eaec:	eef0 7a65 	vmov.f32	s15, s11
 800eaf0:	eee3 6a87 	vfma.f32	s13, s7, s14
 800eaf4:	eee5 7a05 	vfma.f32	s15, s10, s10
 800eaf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eafc:	ee17 1a90 	vmov	r1, s15
 800eb00:	4011      	ands	r1, r2
 800eb02:	ee07 1a90 	vmov	s15, r1
 800eb06:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800eb0a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ebe4 <__ieee754_powf+0x3f0>
 800eb0e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800eb12:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800eb16:	ee27 7a24 	vmul.f32	s14, s14, s9
 800eb1a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800eb1e:	eeb0 6a47 	vmov.f32	s12, s14
 800eb22:	eea5 6a27 	vfma.f32	s12, s10, s15
 800eb26:	ee16 1a10 	vmov	r1, s12
 800eb2a:	4011      	ands	r1, r2
 800eb2c:	ee06 1a90 	vmov	s13, r1
 800eb30:	eee4 6a27 	vfma.f32	s13, s8, s15
 800eb34:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ebe8 <__ieee754_powf+0x3f4>
 800eb38:	ee37 7a66 	vsub.f32	s14, s14, s13
 800eb3c:	ee06 1a10 	vmov	s12, r1
 800eb40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb44:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ebec <__ieee754_powf+0x3f8>
 800eb48:	4929      	ldr	r1, [pc, #164]	; (800ebf0 <__ieee754_powf+0x3fc>)
 800eb4a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800eb4e:	4439      	add	r1, r7
 800eb50:	edd1 7a00 	vldr	s15, [r1]
 800eb54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb58:	ee07 3a90 	vmov	s15, r3
 800eb5c:	eef0 0a47 	vmov.f32	s1, s14
 800eb60:	4b24      	ldr	r3, [pc, #144]	; (800ebf4 <__ieee754_powf+0x400>)
 800eb62:	eee6 0a25 	vfma.f32	s1, s12, s11
 800eb66:	443b      	add	r3, r7
 800eb68:	ed93 5a00 	vldr	s10, [r3]
 800eb6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb70:	ee70 0a85 	vadd.f32	s1, s1, s10
 800eb74:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800eb78:	ee17 3a90 	vmov	r3, s15
 800eb7c:	4013      	ands	r3, r2
 800eb7e:	ee07 3a90 	vmov	s15, r3
 800eb82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eb86:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800eb8a:	eee6 7a65 	vfms.f32	s15, s12, s11
 800eb8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb92:	e70e      	b.n	800e9b2 <__ieee754_powf+0x1be>
 800eb94:	2401      	movs	r4, #1
 800eb96:	e75c      	b.n	800ea52 <__ieee754_powf+0x25e>
 800eb98:	0800f124 	.word	0x0800f124
 800eb9c:	00000000 	.word	0x00000000
 800eba0:	3f7ffff7 	.word	0x3f7ffff7
 800eba4:	7149f2ca 	.word	0x7149f2ca
 800eba8:	3f800007 	.word	0x3f800007
 800ebac:	3eaaaaab 	.word	0x3eaaaaab
 800ebb0:	36eca570 	.word	0x36eca570
 800ebb4:	3fb8aa3b 	.word	0x3fb8aa3b
 800ebb8:	3fb8aa00 	.word	0x3fb8aa00
 800ebbc:	4b800000 	.word	0x4b800000
 800ebc0:	001cc471 	.word	0x001cc471
 800ebc4:	005db3d6 	.word	0x005db3d6
 800ebc8:	0800f128 	.word	0x0800f128
 800ebcc:	fffff000 	.word	0xfffff000
 800ebd0:	3e6c3255 	.word	0x3e6c3255
 800ebd4:	3e53f142 	.word	0x3e53f142
 800ebd8:	3e8ba305 	.word	0x3e8ba305
 800ebdc:	3edb6db7 	.word	0x3edb6db7
 800ebe0:	3f19999a 	.word	0x3f19999a
 800ebe4:	3f763800 	.word	0x3f763800
 800ebe8:	3f76384f 	.word	0x3f76384f
 800ebec:	369dc3a0 	.word	0x369dc3a0
 800ebf0:	0800f138 	.word	0x0800f138
 800ebf4:	0800f130 	.word	0x0800f130
 800ebf8:	3338aa3c 	.word	0x3338aa3c
 800ebfc:	f040 8092 	bne.w	800ed24 <__ieee754_powf+0x530>
 800ec00:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ebf8 <__ieee754_powf+0x404>
 800ec04:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec08:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ec0c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ec10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec14:	f73f aef6 	bgt.w	800ea04 <__ieee754_powf+0x210>
 800ec18:	15db      	asrs	r3, r3, #23
 800ec1a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ec1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ec22:	4103      	asrs	r3, r0
 800ec24:	4423      	add	r3, r4
 800ec26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ec2a:	4947      	ldr	r1, [pc, #284]	; (800ed48 <__ieee754_powf+0x554>)
 800ec2c:	3a7f      	subs	r2, #127	; 0x7f
 800ec2e:	4111      	asrs	r1, r2
 800ec30:	ea23 0101 	bic.w	r1, r3, r1
 800ec34:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ec38:	ee07 1a10 	vmov	s14, r1
 800ec3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ec40:	f1c2 0217 	rsb	r2, r2, #23
 800ec44:	4110      	asrs	r0, r2
 800ec46:	2c00      	cmp	r4, #0
 800ec48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec4c:	bfb8      	it	lt
 800ec4e:	4240      	neglt	r0, r0
 800ec50:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ec54:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ed4c <__ieee754_powf+0x558>
 800ec58:	ee17 3a10 	vmov	r3, s14
 800ec5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ec60:	f023 030f 	bic.w	r3, r3, #15
 800ec64:	ee07 3a10 	vmov	s14, r3
 800ec68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec6c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ec70:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ed50 <__ieee754_powf+0x55c>
 800ec74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec78:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ec7c:	eddf 6a35 	vldr	s13, [pc, #212]	; 800ed54 <__ieee754_powf+0x560>
 800ec80:	eeb0 0a67 	vmov.f32	s0, s15
 800ec84:	eea7 0a26 	vfma.f32	s0, s14, s13
 800ec88:	eeb0 6a40 	vmov.f32	s12, s0
 800ec8c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ec90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ec94:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ec98:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ed58 <__ieee754_powf+0x564>
 800ec9c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ed5c <__ieee754_powf+0x568>
 800eca0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800eca4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800ed60 <__ieee754_powf+0x56c>
 800eca8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ecac:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ed64 <__ieee754_powf+0x570>
 800ecb0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ecb4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800ed68 <__ieee754_powf+0x574>
 800ecb8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ecbc:	eeb0 6a40 	vmov.f32	s12, s0
 800ecc0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ecc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ecc8:	eeb0 7a46 	vmov.f32	s14, s12
 800eccc:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ecd0:	ee20 6a06 	vmul.f32	s12, s0, s12
 800ecd4:	eee0 7a27 	vfma.f32	s15, s0, s15
 800ecd8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ecdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ece0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ece4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ece8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ecec:	ee10 3a10 	vmov	r3, s0
 800ecf0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ecf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ecf8:	da1a      	bge.n	800ed30 <__ieee754_powf+0x53c>
 800ecfa:	f000 f8b1 	bl	800ee60 <scalbnf>
 800ecfe:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ed02:	e5c9      	b.n	800e898 <__ieee754_powf+0xa4>
 800ed04:	4a19      	ldr	r2, [pc, #100]	; (800ed6c <__ieee754_powf+0x578>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	dd02      	ble.n	800ed10 <__ieee754_powf+0x51c>
 800ed0a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ed70 <__ieee754_powf+0x57c>
 800ed0e:	e67b      	b.n	800ea08 <__ieee754_powf+0x214>
 800ed10:	d108      	bne.n	800ed24 <__ieee754_powf+0x530>
 800ed12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed16:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ed1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1e:	f6ff af7b 	blt.w	800ec18 <__ieee754_powf+0x424>
 800ed22:	e7f2      	b.n	800ed0a <__ieee754_powf+0x516>
 800ed24:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ed28:	f73f af76 	bgt.w	800ec18 <__ieee754_powf+0x424>
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	e78f      	b.n	800ec50 <__ieee754_powf+0x45c>
 800ed30:	ee00 3a10 	vmov	s0, r3
 800ed34:	e7e3      	b.n	800ecfe <__ieee754_powf+0x50a>
 800ed36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ed3a:	e5ad      	b.n	800e898 <__ieee754_powf+0xa4>
 800ed3c:	eeb0 0a68 	vmov.f32	s0, s17
 800ed40:	e5aa      	b.n	800e898 <__ieee754_powf+0xa4>
 800ed42:	eeb0 0a48 	vmov.f32	s0, s16
 800ed46:	e5a7      	b.n	800e898 <__ieee754_powf+0xa4>
 800ed48:	007fffff 	.word	0x007fffff
 800ed4c:	3f317218 	.word	0x3f317218
 800ed50:	35bfbe8c 	.word	0x35bfbe8c
 800ed54:	3f317200 	.word	0x3f317200
 800ed58:	3331bb4c 	.word	0x3331bb4c
 800ed5c:	b5ddea0e 	.word	0xb5ddea0e
 800ed60:	388ab355 	.word	0x388ab355
 800ed64:	bb360b61 	.word	0xbb360b61
 800ed68:	3e2aaaab 	.word	0x3e2aaaab
 800ed6c:	43160000 	.word	0x43160000
 800ed70:	0da24260 	.word	0x0da24260

0800ed74 <__ieee754_sqrtf>:
 800ed74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ed78:	4770      	bx	lr

0800ed7a <matherr>:
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	4770      	bx	lr

0800ed7e <fabsf>:
 800ed7e:	ee10 3a10 	vmov	r3, s0
 800ed82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed86:	ee00 3a10 	vmov	s0, r3
 800ed8a:	4770      	bx	lr

0800ed8c <finitef>:
 800ed8c:	ee10 3a10 	vmov	r3, s0
 800ed90:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800ed94:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ed98:	bfac      	ite	ge
 800ed9a:	2000      	movge	r0, #0
 800ed9c:	2001      	movlt	r0, #1
 800ed9e:	4770      	bx	lr

0800eda0 <nanf>:
 800eda0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eda8 <nanf+0x8>
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	7fc00000 	.word	0x7fc00000

0800edac <rintf>:
 800edac:	b513      	push	{r0, r1, r4, lr}
 800edae:	ee10 1a10 	vmov	r1, s0
 800edb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800edb6:	0ddc      	lsrs	r4, r3, #23
 800edb8:	3c7f      	subs	r4, #127	; 0x7f
 800edba:	2c16      	cmp	r4, #22
 800edbc:	dc46      	bgt.n	800ee4c <rintf+0xa0>
 800edbe:	b32b      	cbz	r3, 800ee0c <rintf+0x60>
 800edc0:	2c00      	cmp	r4, #0
 800edc2:	ee10 2a10 	vmov	r2, s0
 800edc6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800edca:	da21      	bge.n	800ee10 <rintf+0x64>
 800edcc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800edd0:	425b      	negs	r3, r3
 800edd2:	4a21      	ldr	r2, [pc, #132]	; (800ee58 <rintf+0xac>)
 800edd4:	0a5b      	lsrs	r3, r3, #9
 800edd6:	0d09      	lsrs	r1, r1, #20
 800edd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eddc:	0509      	lsls	r1, r1, #20
 800edde:	430b      	orrs	r3, r1
 800ede0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ede4:	ee07 3a90 	vmov	s15, r3
 800ede8:	edd2 6a00 	vldr	s13, [r2]
 800edec:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800edf0:	ed8d 7a01 	vstr	s14, [sp, #4]
 800edf4:	eddd 7a01 	vldr	s15, [sp, #4]
 800edf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800edfc:	ee17 3a90 	vmov	r3, s15
 800ee00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee04:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800ee08:	ee00 3a10 	vmov	s0, r3
 800ee0c:	b002      	add	sp, #8
 800ee0e:	bd10      	pop	{r4, pc}
 800ee10:	4b12      	ldr	r3, [pc, #72]	; (800ee5c <rintf+0xb0>)
 800ee12:	4123      	asrs	r3, r4
 800ee14:	4219      	tst	r1, r3
 800ee16:	d0f9      	beq.n	800ee0c <rintf+0x60>
 800ee18:	085b      	lsrs	r3, r3, #1
 800ee1a:	4219      	tst	r1, r3
 800ee1c:	d006      	beq.n	800ee2c <rintf+0x80>
 800ee1e:	ea21 0203 	bic.w	r2, r1, r3
 800ee22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ee26:	fa43 f404 	asr.w	r4, r3, r4
 800ee2a:	4322      	orrs	r2, r4
 800ee2c:	4b0a      	ldr	r3, [pc, #40]	; (800ee58 <rintf+0xac>)
 800ee2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ee32:	ed90 7a00 	vldr	s14, [r0]
 800ee36:	ee07 2a90 	vmov	s15, r2
 800ee3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee3e:	edcd 7a01 	vstr	s15, [sp, #4]
 800ee42:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ee46:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ee4a:	e7df      	b.n	800ee0c <rintf+0x60>
 800ee4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ee50:	d3dc      	bcc.n	800ee0c <rintf+0x60>
 800ee52:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ee56:	e7d9      	b.n	800ee0c <rintf+0x60>
 800ee58:	0800f140 	.word	0x0800f140
 800ee5c:	007fffff 	.word	0x007fffff

0800ee60 <scalbnf>:
 800ee60:	b508      	push	{r3, lr}
 800ee62:	ee10 2a10 	vmov	r2, s0
 800ee66:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800ee6a:	ed2d 8b02 	vpush	{d8}
 800ee6e:	eef0 0a40 	vmov.f32	s1, s0
 800ee72:	d004      	beq.n	800ee7e <scalbnf+0x1e>
 800ee74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ee78:	d306      	bcc.n	800ee88 <scalbnf+0x28>
 800ee7a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800ee7e:	ecbd 8b02 	vpop	{d8}
 800ee82:	eeb0 0a60 	vmov.f32	s0, s1
 800ee86:	bd08      	pop	{r3, pc}
 800ee88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee8c:	d21c      	bcs.n	800eec8 <scalbnf+0x68>
 800ee8e:	4b1f      	ldr	r3, [pc, #124]	; (800ef0c <scalbnf+0xac>)
 800ee90:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ef10 <scalbnf+0xb0>
 800ee94:	4298      	cmp	r0, r3
 800ee96:	ee60 0a27 	vmul.f32	s1, s0, s15
 800ee9a:	db10      	blt.n	800eebe <scalbnf+0x5e>
 800ee9c:	ee10 2a90 	vmov	r2, s1
 800eea0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800eea4:	3b19      	subs	r3, #25
 800eea6:	4403      	add	r3, r0
 800eea8:	2bfe      	cmp	r3, #254	; 0xfe
 800eeaa:	dd0f      	ble.n	800eecc <scalbnf+0x6c>
 800eeac:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800ef14 <scalbnf+0xb4>
 800eeb0:	eeb0 0a48 	vmov.f32	s0, s16
 800eeb4:	f000 f834 	bl	800ef20 <copysignf>
 800eeb8:	ee60 0a08 	vmul.f32	s1, s0, s16
 800eebc:	e7df      	b.n	800ee7e <scalbnf+0x1e>
 800eebe:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ef18 <scalbnf+0xb8>
 800eec2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800eec6:	e7da      	b.n	800ee7e <scalbnf+0x1e>
 800eec8:	0ddb      	lsrs	r3, r3, #23
 800eeca:	e7ec      	b.n	800eea6 <scalbnf+0x46>
 800eecc:	2b00      	cmp	r3, #0
 800eece:	dd06      	ble.n	800eede <scalbnf+0x7e>
 800eed0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800eed4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800eed8:	ee00 3a90 	vmov	s1, r3
 800eedc:	e7cf      	b.n	800ee7e <scalbnf+0x1e>
 800eede:	f113 0f16 	cmn.w	r3, #22
 800eee2:	da06      	bge.n	800eef2 <scalbnf+0x92>
 800eee4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eee8:	4298      	cmp	r0, r3
 800eeea:	dcdf      	bgt.n	800eeac <scalbnf+0x4c>
 800eeec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800ef18 <scalbnf+0xb8>
 800eef0:	e7de      	b.n	800eeb0 <scalbnf+0x50>
 800eef2:	3319      	adds	r3, #25
 800eef4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800eef8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800eefc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ef1c <scalbnf+0xbc>
 800ef00:	ee07 3a10 	vmov	s14, r3
 800ef04:	ee67 0a27 	vmul.f32	s1, s14, s15
 800ef08:	e7b9      	b.n	800ee7e <scalbnf+0x1e>
 800ef0a:	bf00      	nop
 800ef0c:	ffff3cb0 	.word	0xffff3cb0
 800ef10:	4c000000 	.word	0x4c000000
 800ef14:	7149f2ca 	.word	0x7149f2ca
 800ef18:	0da24260 	.word	0x0da24260
 800ef1c:	33000000 	.word	0x33000000

0800ef20 <copysignf>:
 800ef20:	ee10 3a10 	vmov	r3, s0
 800ef24:	ee10 2a90 	vmov	r2, s1
 800ef28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ef30:	4313      	orrs	r3, r2
 800ef32:	ee00 3a10 	vmov	s0, r3
 800ef36:	4770      	bx	lr

0800ef38 <_init>:
 800ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3a:	bf00      	nop
 800ef3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef3e:	bc08      	pop	{r3}
 800ef40:	469e      	mov	lr, r3
 800ef42:	4770      	bx	lr

0800ef44 <_fini>:
 800ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef46:	bf00      	nop
 800ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4a:	bc08      	pop	{r3}
 800ef4c:	469e      	mov	lr, r3
 800ef4e:	4770      	bx	lr
