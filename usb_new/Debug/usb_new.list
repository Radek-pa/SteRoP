
usb_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800d490  0800d490  0001d490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a8  0800d5a8  00020494  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5b0  0800d5b0  00020494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5b0  0800d5b0  0001d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5b4  0800d5b4  0001d5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000494  20000000  0800d5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000494  0800da4c  00020494  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200017a8  0800da4c  000217a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a0be  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000560a  00000000  00000000  0004a582  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001768  00000000  00000000  0004fb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001528  00000000  00000000  000512f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db32  00000000  00000000  00052820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b12d  00000000  00000000  00070352  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000934b7  00000000  00000000  0008b47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0011e936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067d8  00000000  00000000  0011ea30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000494 	.word	0x20000494
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d478 	.word	0x0800d478

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000498 	.word	0x20000498
 80001d4:	0800d478 	.word	0x0800d478

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a51      	ldr	r2, [pc, #324]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4f      	ldr	r3, [pc, #316]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4a      	ldr	r2, [pc, #296]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <MX_GPIO_Init+0x19c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a3c      	ldr	r2, [pc, #240]	; (8000a8c <MX_GPIO_Init+0x19c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <MX_GPIO_Init+0x19c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4837      	ldr	r0, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 80009b4:	f001 fbc0 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	4835      	ldr	r0, [pc, #212]	; (8000a94 <MX_GPIO_Init+0x1a4>)
 80009be:	f001 fbbb 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009c8:	4833      	ldr	r0, [pc, #204]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 80009ca:	f001 fbb5 	bl	8002138 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482b      	ldr	r0, [pc, #172]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 80009e2:	f001 fa27 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4824      	ldr	r0, [pc, #144]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 80009fe:	f001 fa19 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a02:	2332      	movs	r3, #50	; 0x32
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481e      	ldr	r0, [pc, #120]	; (8000a90 <MX_GPIO_Init+0x1a0>)
 8000a16:	f001 fa0d 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_GPIO_Init+0x1a4>)
 8000a32:	f001 f9ff 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000a4a:	f001 f9f3 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a4e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a52:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000a68:	f001 f9e4 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000a80:	f001 f9d8 	bl	8001e34 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	10120000 	.word	0x10120000
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_I2C1_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_I2C1_Init+0x58>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ae2:	f003 f833 	bl	8003b4c <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fa3c 	bl	8000f68 <Error_Handler>
  }

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000560 	.word	0x20000560
 8000af8:	40005400 	.word	0x40005400
 8000afc:	000186a0 	.word	0x000186a0

08000b00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_I2C_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12c      	bne.n	8000b7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f001 f96a 	bl	8001e34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_I2S2_Init+0x54>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <MX_I2S2_Init+0x58>)
 8000bb8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_I2S2_Init+0x50>)
 8000bce:	f003 f8f5 	bl	8003dbc <HAL_I2S_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000bd8:	f000 f9c6 	bl	8000f68 <Error_Handler>
  }

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200005b4 	.word	0x200005b4
 8000be4:	40003800 	.word	0x40003800
 8000be8:	00017700 	.word	0x00017700

08000bec <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <MX_I2S3_Init+0x58>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c10:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <MX_I2S3_Init+0x5c>)
 8000c16:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_I2S3_Init+0x54>)
 8000c2c:	f003 f8c6 	bl	8003dbc <HAL_I2S_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c36:	f000 f997 	bl	8000f68 <Error_Handler>
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200005fc 	.word	0x200005fc
 8000c44:	40003c00 	.word	0x40003c00
 8000c48:	00017700 	.word	0x00017700

08000c4c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a59      	ldr	r2, [pc, #356]	; (8000dd0 <HAL_I2S_MspInit+0x184>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d15b      	bne.n	8000d26 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a57      	ldr	r2, [pc, #348]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	4b51      	ldr	r3, [pc, #324]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a50      	ldr	r2, [pc, #320]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	483e      	ldr	r0, [pc, #248]	; (8000dd8 <HAL_I2S_MspInit+0x18c>)
 8000cde:	f001 f8a9 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <HAL_I2S_MspInit+0x18c>)
 8000cfe:	f001 f899 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d14:	2305      	movs	r3, #5
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	482f      	ldr	r0, [pc, #188]	; (8000ddc <HAL_I2S_MspInit+0x190>)
 8000d20:	f001 f888 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d24:	e04f      	b.n	8000dc6 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <HAL_I2S_MspInit+0x194>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d14a      	bne.n	8000dc6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_I2S_MspInit+0x188>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d84:	2310      	movs	r3, #16
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d94:	2306      	movs	r3, #6
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <HAL_I2S_MspInit+0x198>)
 8000da0:	f001 f848 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000da4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db6:	2306      	movs	r3, #6
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_I2S_MspInit+0x18c>)
 8000dc2:	f001 f837 	bl	8001e34 <HAL_GPIO_Init>
}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40003800 	.word	0x40003800
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40003c00 	.word	0x40003c00
 8000de4:	40020000 	.word	0x40020000

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f000 fcbd 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f833 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f7ff fd79 	bl	80008f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dfe:	f7ff fe51 	bl	8000aa4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000e02:	f7ff fec5 	bl	8000b90 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000e06:	f7ff fef1 	bl	8000bec <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e0a:	f000 f8b5 	bl	8000f78 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e0e:	f008 ff07 	bl	8009c20 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000e12:	f005 f9f3 	bl	80061fc <MX_FATFS_Init>
  uint8_t wtext[4096]; /* File write buffer */
  uint8_t rtext[100];
  FILE * rFile;
  int flag_er;

  flag_er = BSP_AUDIO_IN_Init(44100, 8, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2108      	movs	r1, #8
 8000e1a:	f64a 4044 	movw	r0, #44100	; 0xac44
 8000e1e:	f000 fa9b 	bl	8001358 <BSP_AUDIO_IN_Init>
 8000e22:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000e26:	f103 030c 	add.w	r3, r3, #12
 8000e2a:	6018      	str	r0, [r3, #0]

  if(flag_er != 0){
 8000e2c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000e30:	f103 030c 	add.w	r3, r3, #12
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <main+0x56>
	  Error_Handler();
 8000e3a:	f000 f895 	bl	8000f68 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e3e:	f008 ff15 	bl	8009c6c <MX_USB_HOST_Process>
    // BSP_AUDIO_IN_Record(wtext, sizeof(wtext));
    //Write_usb(wtext, sizeof(wtext));
    rFile = open_r("Name.TXT");
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <main+0x74>)
 8000e44:	f008 fec2 	bl	8009bcc <open_r>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000e4e:	f102 0208 	add.w	r2, r2, #8
 8000e52:	6013      	str	r3, [r2, #0]
    HAL_Delay(10);
 8000e54:	200a      	movs	r0, #10
 8000e56:	f000 fcfd 	bl	8001854 <HAL_Delay>
  {
 8000e5a:	e7f0      	b.n	8000e3e <main+0x56>
 8000e5c:	0800d490 	.word	0x0800d490

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09a      	sub	sp, #104	; 0x68
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e6a:	2230      	movs	r2, #48	; 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f00b faa3 	bl	800c3ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <SystemClock_Config+0x100>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <SystemClock_Config+0x100>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <SystemClock_Config+0x100>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <SystemClock_Config+0x104>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2a      	ldr	r2, [pc, #168]	; (8000f64 <SystemClock_Config+0x104>)
 8000ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <SystemClock_Config+0x104>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
 8000ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eea:	2304      	movs	r3, #4
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fbf0 	bl	80046dc <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f02:	f000 f831 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	2103      	movs	r1, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fe4a 	bl	8004bbc <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f2e:	f000 f81b 	bl	8000f68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f32:	2301      	movs	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000f36:	23c8      	movs	r3, #200	; 0xc8
 8000f38:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 f816 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f52:	f000 f809 	bl	8000f68 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3768      	adds	r7, #104	; 0x68
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f7e:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <MX_SPI1_Init+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fca:	f004 f965 	bl	8005298 <HAL_SPI_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fd4:	f7ff ffc8 	bl	8000f68 <Error_Handler>
  }

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000644 	.word	0x20000644
 8000fe0:	40013000 	.word	0x40013000

08000fe4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_SPI_MspInit+0x84>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12b      	bne.n	800105e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_SPI_MspInit+0x88>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_SPI_MspInit+0x88>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800103e:	23e0      	movs	r3, #224	; 0xe0
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104e:	2305      	movs	r3, #5
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_SPI_MspInit+0x8c>)
 800105a:	f000 feeb 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40013000 	.word	0x40013000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_MspInit+0x4c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f000 fcc0 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 fb7c 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <OTG_FS_IRQHandler+0x10>)
 8001126:	f001 faaf 	bl	8002688 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200014e0 	.word	0x200014e0

08001134 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e00a      	b.n	800115c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001146:	f3af 8000 	nop.w
 800114a:	4601      	mov	r1, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf0      	blt.n	8001146 <_read+0x12>
	}

return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e009      	b.n	8001194 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	60ba      	str	r2, [r7, #8]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf1      	blt.n	8001180 <_write+0x12>
	}
	return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_close>:

int _close(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ce:	605a      	str	r2, [r3, #4]
	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_isatty>:

int _isatty(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_open>:

int _open(char *path, int flags, ...)
{
 800120e:	b40e      	push	{r1, r2, r3}
 8001210:	b480      	push	{r7}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	b003      	add	sp, #12
 8001228:	4770      	bx	lr
	...

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f00a ff2a 	bl	800c0b4 <__errno>
 8001260:	4602      	mov	r2, r0
 8001262:	230c      	movs	r3, #12
 8001264:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20020000 	.word	0x20020000
 800128c:	00000800 	.word	0x00000800
 8001290:	200004b4 	.word	0x200004b4
 8001294:	200017a8 	.word	0x200017a8

08001298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <SystemInit+0x28>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <SystemInit+0x28>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SystemInit+0x28>)
 80012ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012b2:	609a      	str	r2, [r3, #8]
#endif
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ca:	e003      	b.n	80012d4 <LoopCopyDataInit>

080012cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012d2:	3104      	adds	r1, #4

080012d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012dc:	d3f6      	bcc.n	80012cc <CopyDataInit>
  ldr  r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e0:	e002      	b.n	80012e8 <LoopFillZerobss>

080012e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012e4:	f842 3b04 	str.w	r3, [r2], #4

080012e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012ec:	d3f9      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ee:	f7ff ffd3 	bl	8001298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f00a ffbf 	bl	800c274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fd77 	bl	8000de8 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001300:	0800d5b8 	.word	0x0800d5b8
  ldr  r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001308:	20000494 	.word	0x20000494
  ldr  r2, =_sbss
 800130c:	20000494 	.word	0x20000494
  ldr  r3, = _ebss
 8001310:	200017a8 	.word	0x200017a8

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_I2S_TxCpltCallback+0x20>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 800132a:	f000 f807 	bl	800133c <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40003c00 	.word	0x40003c00

0800133c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio Bit resolution.
  * @param  ChnlNbr: Audio Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{  
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  /* Configure PLL clock */ 
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8001364:	2200      	movs	r2, #0
 8001366:	68f9      	ldr	r1, [r7, #12]
 8001368:	480e      	ldr	r0, [pc, #56]	; (80013a4 <BSP_AUDIO_IN_Init+0x4c>)
 800136a:	f000 f829 	bl	80013c0 <BSP_AUDIO_IN_ClockConfig>
  
  /* Configure the PDM library */
  /* On STM32F411E-Discovery a single microphone is mounted, samples are duplicated
     to make stereo audio streams */
  PDMDecoder_Init(AudioFreq, ChnlNbr, 2);
 800136e:	2202      	movs	r2, #2
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 f910 	bl	8001598 <PDMDecoder_Init>

  /* Configure the I2S peripheral */
  hAudioInI2s.Instance = I2S2;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <BSP_AUDIO_IN_Init+0x4c>)
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <BSP_AUDIO_IN_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <BSP_AUDIO_IN_Init+0x4c>)
 8001380:	f002 fe5c 	bl	800403c <HAL_I2S_GetState>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <BSP_AUDIO_IN_Init+0x3a>
  { 
    /* Initialize the I2S Msp: this __weak function can be rewritten by the application */
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 800138a:	2100      	movs	r1, #0
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <BSP_AUDIO_IN_Init+0x4c>)
 800138e:	f000 f847 	bl	8001420 <BSP_AUDIO_IN_MspInit>
  }
  
  /* Configure the I2S2 */
  I2S2_Init(AudioFreq);
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f99a 	bl	80016cc <I2S2_Init>
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000788 	.word	0x20000788
 80013a8:	40003800 	.word	0x40003800

080013ac <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80013b4:	f000 f8e2 	bl	800157c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fec1 	bl	8005158 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10d      	bne.n	80013fc <BSP_AUDIO_IN_ClockConfig+0x3c>
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013e0:	2301      	movs	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80013e4:	2308      	movs	r3, #8
 80013e6:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 80013e8:	23c0      	movs	r3, #192	; 0xc0
 80013ea:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 80013ec:	2306      	movs	r3, #6
 80013ee:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fdbf 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 290;
    rccclkinit.PLLI2S.PLLI2SR = 2;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80013fa:	e00d      	b.n	8001418 <BSP_AUDIO_IN_ClockConfig+0x58>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013fc:	2301      	movs	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8001400:	2308      	movs	r3, #8
 8001402:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8001404:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001408:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 2;
 800140a:	2302      	movs	r3, #2
 800140c:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fdb0 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	69bb      	ldr	r3, [r7, #24]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a45      	ldr	r2, [pc, #276]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28

  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 800148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 8001490:	2305      	movs	r3, #5
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4833      	ldr	r0, [pc, #204]	; (8001568 <BSP_AUDIO_IN_MspInit+0x148>)
 800149c:	f000 fcca 	bl	8001e34 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 80014a0:	2308      	movs	r3, #8
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
 80014a4:	2305      	movs	r3, #5
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	482f      	ldr	r0, [pc, #188]	; (800156c <BSP_AUDIO_IN_MspInit+0x14c>)
 80014b0:	f000 fcc0 	bl	8001e34 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a29      	ldr	r2, [pc, #164]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 80014be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <BSP_AUDIO_IN_MspInit+0x144>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    
  if(hi2s->Instance == I2S2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <BSP_AUDIO_IN_MspInit+0x150>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d137      	bne.n	800154a <BSP_AUDIO_IN_MspInit+0x12a>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 80014f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014fa:	615a      	str	r2, [r3, #20]
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 80014fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001502:	619a      	str	r2, [r3, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 8001506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150a:	61da      	str	r2, [r3, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 800150e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001512:	621a      	str	r2, [r3, #32]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 800151c:	2203      	movs	r2, #3
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <BSP_AUDIO_IN_MspInit+0x158>)
 8001530:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 8001540:	f000 fb6a 	bl	8001c18 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <BSP_AUDIO_IN_MspInit+0x154>)
 8001546:	f000 fab9 	bl	8001abc <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	210f      	movs	r1, #15
 800154e:	200e      	movs	r0, #14
 8001550:	f000 fa7d 	bl	8001a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8001554:	200e      	movs	r0, #14
 8001556:	f000 fa96 	bl	8001a86 <HAL_NVIC_EnableIRQ>
}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400
 800156c:	40020800 	.word	0x40020800
 8001570:	40003800 	.word	0x40003800
 8001574:	200004b8 	.word	0x200004b8
 8001578:	40026058 	.word	0x40026058

0800157c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <PDMDecoder_Init>:
  * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
  *         Number of audio channels (1: mono; 2: stereo)
  */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <PDMDecoder_Init+0x120>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	4a41      	ldr	r2, [pc, #260]	; (80016b8 <PDMDecoder_Init+0x120>)
 80015b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b6:	6313      	str	r3, [r2, #48]	; 0x30
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <PDMDecoder_Init+0x120>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]

  for(index = 0; index < ChnlNbrIn; index++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e06e      	b.n	80016a8 <PDMDecoder_Init+0x110>
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 80015ca:	4a3c      	ldr	r2, [pc, #240]	; (80016bc <PDMDecoder_Init+0x124>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	214c      	movs	r1, #76	; 0x4c
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	2200      	movs	r2, #0
 80015d8:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80015da:	4a38      	ldr	r2, [pc, #224]	; (80016bc <PDMDecoder_Init+0x124>)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	214c      	movs	r1, #76	; 0x4c
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	3302      	adds	r3, #2
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80015ec:	4a33      	ldr	r2, [pc, #204]	; (80016bc <PDMDecoder_Init+0x124>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	214c      	movs	r1, #76	; 0x4c
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	3304      	adds	r3, #4
 80015fa:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <PDMDecoder_Init+0x128>)
 80015fc:	601a      	str	r2, [r3, #0]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b298      	uxth	r0, r3
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <PDMDecoder_Init+0x124>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	214c      	movs	r1, #76	; 0x4c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	330a      	adds	r3, #10
 8001610:	4602      	mov	r2, r0
 8001612:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	b298      	uxth	r0, r3
 8001618:	4a28      	ldr	r2, [pc, #160]	; (80016bc <PDMDecoder_Init+0x124>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	214c      	movs	r1, #76	; 0x4c
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	4413      	add	r3, r2
 8001624:	3308      	adds	r3, #8
 8001626:	4602      	mov	r2, r0
 8001628:	801a      	strh	r2, [r3, #0]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	224c      	movs	r2, #76	; 0x4c
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <PDMDecoder_Init+0x124>)
 8001634:	4413      	add	r3, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f00a fb82 	bl	800bd40 <PDM_Filter_Init>

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <PDMDecoder_Init+0x12c>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	b298      	uxth	r0, r3
 8001648:	491f      	ldr	r1, [pc, #124]	; (80016c8 <PDMDecoder_Init+0x130>)
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	440b      	add	r3, r1
 8001656:	3302      	adds	r3, #2
 8001658:	4602      	mov	r2, r0
 800165a:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].mic_gain = 24;
 800165c:	491a      	ldr	r1, [pc, #104]	; (80016c8 <PDMDecoder_Init+0x130>)
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	440b      	add	r3, r1
 800166a:	3304      	adds	r3, #4
 800166c:	2218      	movs	r2, #24
 800166e:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001670:	4915      	ldr	r1, [pc, #84]	; (80016c8 <PDMDecoder_Init+0x130>)
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	440b      	add	r3, r1
 800167e:	2202      	movs	r2, #2
 8001680:	801a      	strh	r2, [r3, #0]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	224c      	movs	r2, #76	; 0x4c
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <PDMDecoder_Init+0x124>)
 800168c:	1898      	adds	r0, r3, r2
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <PDMDecoder_Init+0x130>)
 800169a:	4413      	add	r3, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f00a fbd9 	bl	800be54 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d38c      	bcc.n	80015ca <PDMDecoder_Init+0x32>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	200006a8 	.word	0x200006a8
 80016c0:	7e809d48 	.word	0x7e809d48
 80016c4:	10624dd3 	.word	0x10624dd3
 80016c8:	2000069c 	.word	0x2000069c

080016cc <I2S2_Init>:
  *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S2_Init(uint32_t AudioFreq)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <I2S2_Init+0x68>)
 80016d6:	4a18      	ldr	r2, [pc, #96]	; (8001738 <I2S2_Init+0x6c>)
 80016d8:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <I2S2_Init+0x68>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69da      	ldr	r2, [r3, #28]
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <I2S2_Init+0x68>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016e8:	61da      	str	r2, [r3, #28]
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <I2S2_Init+0x68>)
 80016f0:	6153      	str	r3, [r2, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <I2S2_Init+0x68>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <I2S2_Init+0x68>)
 80016fa:	2208      	movs	r2, #8
 80016fc:	619a      	str	r2, [r3, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <I2S2_Init+0x68>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <I2S2_Init+0x68>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <I2S2_Init+0x68>)
 800170c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001710:	605a      	str	r2, [r3, #4]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <I2S2_Init+0x68>)
 8001714:	2220      	movs	r2, #32
 8001716:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <I2S2_Init+0x68>)
 800171a:	f002 fb4f 	bl	8003dbc <HAL_I2S_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <I2S2_Init+0x5c>
  {
    return AUDIO_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <I2S2_Init+0x5e>
  }
  else
  {
    return AUDIO_OK; 
 8001728:	2300      	movs	r3, #0
  }
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000788 	.word	0x20000788
 8001738:	40003800 	.word	0x40003800

0800173c <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_I2S_ErrorCallback+0x2c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800174e:	f7ff fdfc 	bl	800134a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <HAL_I2S_ErrorCallback+0x30>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 800175c:	f7ff ff15 	bl	800158a <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40003c00 	.word	0x40003c00
 800176c:	40003800 	.word	0x40003800

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f94d 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fc66 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f965 	bl	8001aa2 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f92d 	bl	8001a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000400 	.word	0x20000400
 800180c:	20000408 	.word	0x20000408
 8001810:	20000404 	.word	0x20000404

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000408 	.word	0x20000408
 8001838:	200007d0 	.word	0x200007d0

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200007d0 	.word	0x200007d0

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_Delay+0x40>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000408 	.word	0x20000408

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f7ff ff8e 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff29 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff3e 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff8e 	bl	800198c <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff31 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffa2 	bl	80019f4 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff feb8 	bl	800183c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e099      	b.n	8001c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af8:	e00f      	b.n	8001b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afa:	f7ff fe9f 	bl	800183c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d908      	bls.n	8001b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e078      	b.n	8001c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e8      	bne.n	8001afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_DMA_Init+0x158>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d117      	bne.n	8001bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8bd 	bl	8001d40 <DMA_CheckFifoParam>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e016      	b.n	8001c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f874 	bl	8001cd4 <DMA_CalcBaseAndBitshift>
 8001bec:	4603      	mov	r3, r0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	223f      	movs	r2, #63	; 0x3f
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f010803f 	.word	0xf010803f

08001c18 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e050      	b.n	8001ccc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d101      	bne.n	8001c3a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
 8001c38:	e048      	b.n	8001ccc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2221      	movs	r2, #33	; 0x21
 8001c78:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f82a 	bl	8001cd4 <DMA_CalcBaseAndBitshift>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	223f      	movs	r2, #63	; 0x3f
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3b10      	subs	r3, #16
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <DMA_CalcBaseAndBitshift+0x68>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d909      	bls.n	8001d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58
 8001d14:	e007      	b.n	8001d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	aaaaaaab 	.word	0xaaaaaaab
 8001d3c:	0800d500 	.word	0x0800d500

08001d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d855      	bhi.n	8001e0c <DMA_CheckFifoParam+0xcc>
 8001d60:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <DMA_CheckFifoParam+0x28>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001d8b 	.word	0x08001d8b
 8001d70:	08001d79 	.word	0x08001d79
 8001d74:	08001e0d 	.word	0x08001e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d045      	beq.n	8001e10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d88:	e042      	b.n	8001e10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d92:	d13f      	bne.n	8001e14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e03c      	b.n	8001e14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da2:	d121      	bne.n	8001de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d836      	bhi.n	8001e18 <DMA_CheckFifoParam+0xd8>
 8001daa:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <DMA_CheckFifoParam+0x70>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dc7 	.word	0x08001dc7
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001dd9 	.word	0x08001dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc4:	e02f      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d024      	beq.n	8001e1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd6:	e021      	b.n	8001e1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001de0:	d11e      	bne.n	8001e20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001de6:	e01b      	b.n	8001e20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d902      	bls.n	8001df4 <DMA_CheckFifoParam+0xb4>
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d003      	beq.n	8001dfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001df2:	e018      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      break;
 8001df8:	e015      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00e      	beq.n	8001e24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0a:	e00b      	b.n	8001e24 <DMA_CheckFifoParam+0xe4>
      break;
 8001e0c:	bf00      	nop
 8001e0e:	e00a      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e10:	bf00      	nop
 8001e12:	e008      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e14:	bf00      	nop
 8001e16:	e006      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e18:	bf00      	nop
 8001e1a:	e004      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e002      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e24:	bf00      	nop
    }
  } 
  
  return status; 
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e159      	b.n	8002104 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8148 	bne.w	80020fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00b      	beq.n	8001e8e <HAL_GPIO_Init+0x5a>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e82:	2b11      	cmp	r3, #17
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0xfc>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a2 	beq.w	80020fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b56      	ldr	r3, [pc, #344]	; (8002118 <HAL_GPIO_Init+0x2e4>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a55      	ldr	r2, [pc, #340]	; (8002118 <HAL_GPIO_Init+0x2e4>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_GPIO_Init+0x2e4>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd6:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_GPIO_Init+0x2e8>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2ec>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x202>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_GPIO_Init+0x2f0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x1fe>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a46      	ldr	r2, [pc, #280]	; (8002128 <HAL_GPIO_Init+0x2f4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x1fa>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a45      	ldr	r2, [pc, #276]	; (800212c <HAL_GPIO_Init+0x2f8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x1f6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a44      	ldr	r2, [pc, #272]	; (8002130 <HAL_GPIO_Init+0x2fc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x1f2>
 8002022:	2304      	movs	r3, #4
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x204>
 8002026:	2307      	movs	r3, #7
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x204>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x204>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x204>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x204>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4934      	ldr	r1, [pc, #208]	; (800211c <HAL_GPIO_Init+0x2e8>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_GPIO_Init+0x300>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800207a:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <HAL_GPIO_Init+0x300>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_GPIO_Init+0x300>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_GPIO_Init+0x300>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_GPIO_Init+0x300>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_GPIO_Init+0x300>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_GPIO_Init+0x300>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_GPIO_Init+0x300>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f aea2 	bls.w	8001e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	3724      	adds	r7, #36	; 0x24
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40023800 	.word	0x40023800
 800211c:	40013800 	.word	0x40013800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002154:	e003      	b.n	800215e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	619a      	str	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800216a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216c:	b08f      	sub	sp, #60	; 0x3c
 800216e:	af0a      	add	r7, sp, #40	; 0x28
 8002170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e054      	b.n	8002226 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f007 fda4 	bl	8009ce4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2203      	movs	r2, #3
 80021a0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 f942 	bl	8005444 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	687e      	ldr	r6, [r7, #4]
 80021c8:	466d      	mov	r5, sp
 80021ca:	f106 0410 	add.w	r4, r6, #16
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021da:	e885 0003 	stmia.w	r5, {r0, r1}
 80021de:	1d33      	adds	r3, r6, #4
 80021e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	f003 f8bc 	bl	8005360 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 f939 	bl	8005466 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	687e      	ldr	r6, [r7, #4]
 80021fc:	466d      	mov	r5, sp
 80021fe:	f106 0410 	add.w	r4, r6, #16
 8002202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800220e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002212:	1d33      	adds	r3, r6, #4
 8002214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f003 fa4c 	bl	80056b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800222e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800222e:	b590      	push	{r4, r7, lr}
 8002230:	b089      	sub	sp, #36	; 0x24
 8002232:	af04      	add	r7, sp, #16
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	4608      	mov	r0, r1
 8002238:	4611      	mov	r1, r2
 800223a:	461a      	mov	r2, r3
 800223c:	4603      	mov	r3, r0
 800223e:	70fb      	strb	r3, [r7, #3]
 8002240:	460b      	mov	r3, r1
 8002242:	70bb      	strb	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_HCD_HC_Init+0x28>
 8002252:	2302      	movs	r3, #2
 8002254:	e07f      	b.n	8002356 <HAL_HCD_HC_Init+0x128>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	333d      	adds	r3, #61	; 0x3d
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3338      	adds	r3, #56	; 0x38
 8002282:	787a      	ldrb	r2, [r7, #1]
 8002284:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	3340      	adds	r3, #64	; 0x40
 8002296:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002298:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	3339      	adds	r3, #57	; 0x39
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	333f      	adds	r3, #63	; 0x3f
 80022be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	78bb      	ldrb	r3, [r7, #2]
 80022c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	333a      	adds	r3, #58	; 0x3a
 80022dc:	4602      	mov	r2, r0
 80022de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da0a      	bge.n	80022fe <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	333b      	adds	r3, #59	; 0x3b
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e009      	b.n	8002312 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	333b      	adds	r3, #59	; 0x3b
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	333c      	adds	r3, #60	; 0x3c
 8002322:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002326:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	787c      	ldrb	r4, [r7, #1]
 800232e:	78ba      	ldrb	r2, [r7, #2]
 8002330:	78f9      	ldrb	r1, [r7, #3]
 8002332:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	4623      	mov	r3, r4
 8002344:	f003 fb38 	bl	80059b8 <USB_HC_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}

0800235e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_HCD_HC_Halt+0x1e>
 8002378:	2302      	movs	r3, #2
 800237a:	e00f      	b.n	800239c <HAL_HCD_HC_Halt+0x3e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fd74 	bl	8005e7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	4608      	mov	r0, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	70fb      	strb	r3, [r7, #3]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70bb      	strb	r3, [r7, #2]
 80023ba:	4613      	mov	r3, r2
 80023bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	333b      	adds	r3, #59	; 0x3b
 80023ce:	78ba      	ldrb	r2, [r7, #2]
 80023d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	333f      	adds	r3, #63	; 0x3f
 80023e2:	787a      	ldrb	r2, [r7, #1]
 80023e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023e6:	7c3b      	ldrb	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d114      	bne.n	8002416 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	3342      	adds	r3, #66	; 0x42
 80023fc:	2203      	movs	r2, #3
 80023fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	333d      	adds	r3, #61	; 0x3d
 8002410:	7f3a      	ldrb	r2, [r7, #28]
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e009      	b.n	800242a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3342      	adds	r3, #66	; 0x42
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800242a:	787b      	ldrb	r3, [r7, #1]
 800242c:	2b03      	cmp	r3, #3
 800242e:	f200 80d6 	bhi.w	80025de <HAL_HCD_HC_SubmitRequest+0x23a>
 8002432:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	08002449 	.word	0x08002449
 800243c:	080025c9 	.word	0x080025c9
 8002440:	080024b5 	.word	0x080024b5
 8002444:	0800253f 	.word	0x0800253f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002448:	7c3b      	ldrb	r3, [r7, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	f040 80c9 	bne.w	80025e2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80c5 	bne.w	80025e2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002458:	8b3b      	ldrh	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	3351      	adds	r3, #81	; 0x51
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	3351      	adds	r3, #81	; 0x51
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3342      	adds	r3, #66	; 0x42
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800249c:	e0a1      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3342      	adds	r3, #66	; 0x42
 80024ae:	2202      	movs	r2, #2
 80024b0:	701a      	strb	r2, [r3, #0]
      break;
 80024b2:	e096      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024b4:	78bb      	ldrb	r3, [r7, #2]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d120      	bne.n	80024fc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3351      	adds	r3, #81	; 0x51
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3342      	adds	r3, #66	; 0x42
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024e4:	e07e      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	3342      	adds	r3, #66	; 0x42
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]
      break;
 80024fa:	e073      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	3350      	adds	r3, #80	; 0x50
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	3342      	adds	r3, #66	; 0x42
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
      break;
 8002526:	e05d      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	3342      	adds	r3, #66	; 0x42
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
      break;
 800253c:	e052      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800253e:	78bb      	ldrb	r3, [r7, #2]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d120      	bne.n	8002586 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	3351      	adds	r3, #81	; 0x51
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	3342      	adds	r3, #66	; 0x42
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800256e:	e039      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3342      	adds	r3, #66	; 0x42
 8002580:	2202      	movs	r2, #2
 8002582:	701a      	strb	r2, [r3, #0]
      break;
 8002584:	e02e      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	3350      	adds	r3, #80	; 0x50
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	3342      	adds	r3, #66	; 0x42
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
      break;
 80025b0:	e018      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	3342      	adds	r3, #66	; 0x42
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
      break;
 80025c6:	e00d      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3342      	adds	r3, #66	; 0x42
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
      break;
 80025dc:	e002      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80025e2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3344      	adds	r3, #68	; 0x44
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	8b39      	ldrh	r1, [r7, #24]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4403      	add	r3, r0
 8002608:	3348      	adds	r3, #72	; 0x48
 800260a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	335c      	adds	r3, #92	; 0x5c
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	334c      	adds	r3, #76	; 0x4c
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3339      	adds	r3, #57	; 0x39
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	335d      	adds	r3, #93	; 0x5d
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	3338      	adds	r3, #56	; 0x38
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	18d1      	adds	r1, r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	f003 faa8 	bl	8005bcc <USB_HC_StartXfer>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop

08002688 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 ffc5 	bl	800562e <USB_GetMode>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	f040 80ef 	bne.w	800288a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 ffa9 	bl	8005608 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80e5 	beq.w	8002888 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 ffa0 	bl	8005608 <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d2:	d104      	bne.n	80026de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 ff90 	bl	8005608 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f2:	d104      	bne.n	80026fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f002 ff80 	bl	8005608 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002712:	d104      	bne.n	800271e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800271c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f002 ff70 	bl	8005608 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d103      	bne.n	800273a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2202      	movs	r2, #2
 8002738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 ff62 	bl	8005608 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800274e:	d115      	bne.n	800277c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002758:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f007 fb38 	bl	8009de0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f003 f858 	bl	800582c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f002 ff41 	bl	8005608 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002790:	d102      	bne.n	8002798 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f001 f966 	bl	8003a64 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 ff33 	bl	8005608 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d106      	bne.n	80027ba <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f007 fafb 	bl	8009da8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2208      	movs	r2, #8
 80027b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 ff22 	bl	8005608 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ce:	d138      	bne.n	8002842 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 fb3f 	bl	8005e58 <USB_HC_ReadInterrupt>
 80027da:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e025      	b.n	800282e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280c:	d106      	bne.n	800281c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f8cf 	bl	80029b8 <HCD_HC_IN_IRQHandler>
 800281a:	e005      	b.n	8002828 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fcfd 	bl	8003222 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d3d4      	bcc.n	80027e2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fede 	bl	8005608 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	d101      	bne.n	800285a <HAL_HCD_IRQHandler+0x1d2>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_HCD_IRQHandler+0x1d4>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d014      	beq.n	800288a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0210 	bic.w	r2, r2, #16
 800286e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f001 f84b 	bl	800390c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0210 	orr.w	r2, r2, #16
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	e000      	b.n	800288a <HAL_HCD_IRQHandler+0x202>
      return;
 8002888:	bf00      	nop
    }
  }
}
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_HCD_Start+0x16>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e013      	b.n	80028ce <HAL_HCD_Start+0x3e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fdb5 	bl	8005422 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 f818 	bl	80058f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_HCD_Stop+0x16>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e00d      	b.n	8002908 <HAL_HCD_Stop+0x32>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fbf9 	bl	80060f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f002 ffbf 	bl	80058a0 <USB_ResetPort>
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	334c      	adds	r3, #76	; 0x4c
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f801 	bl	8005994 <USB_GetCurrentFrame>
 8002992:	4603      	mov	r3, r0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 ffdc 	bl	8005966 <USB_GetHostSpeed>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d119      	bne.n	8002a1c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	2304      	movs	r3, #4
 80029f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	0151      	lsls	r1, r2, #5
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	440a      	add	r2, r1
 8002a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	60d3      	str	r3, [r2, #12]
 8002a1a:	e0ce      	b.n	8002bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	d12c      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	335d      	adds	r3, #93	; 0x5d
 8002a58:	2207      	movs	r2, #7
 8002a5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 f9f7 	bl	8005e7a <USB_HC_Halt>
 8002a8c:	e095      	b.n	8002bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d109      	bne.n	8002ab8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	6093      	str	r3, [r2, #8]
 8002ab6:	e080      	b.n	8002bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d134      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	0151      	lsls	r1, r2, #5
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	440a      	add	r2, r1
 8002ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	335d      	adds	r3, #93	; 0x5d
 8002afe:	2205      	movs	r2, #5
 8002b00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2310      	movs	r3, #16
 8002b12:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2308      	movs	r3, #8
 8002b24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 f9a2 	bl	8005e7a <USB_HC_Halt>
 8002b36:	e040      	b.n	8002bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d134      	bne.n	8002bba <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 f97d 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2310      	movs	r3, #16
 8002b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	335d      	adds	r3, #93	; 0x5d
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d122      	bne.n	8002c18 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 f93c 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c14:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c16:	e300      	b.n	800321a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	f040 80fd 	bne.w	8002e2a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01b      	beq.n	8002c70 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	3348      	adds	r3, #72	; 0x48
 8002c48:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0159      	lsls	r1, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c5c:	1ad1      	subs	r1, r2, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4403      	add	r3, r0
 8002c6c:	334c      	adds	r3, #76	; 0x4c
 8002c6e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	335d      	adds	r3, #93	; 0x5d
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3358      	adds	r3, #88	; 0x58
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	333f      	adds	r3, #63	; 0x3f
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	333f      	adds	r3, #63	; 0x3f
 8002cd0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d121      	bne.n	8002d1a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 f8ba 	bl	8005e7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2310      	movs	r3, #16
 8002d16:	6093      	str	r3, [r2, #8]
 8002d18:	e070      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	333f      	adds	r3, #63	; 0x3f
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d12a      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	0151      	lsls	r1, r2, #5
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	440a      	add	r2, r1
 8002d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	335c      	adds	r3, #92	; 0x5c
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	b2d8      	uxtb	r0, r3
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f007 f83c 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d84:	e03a      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	333f      	adds	r3, #63	; 0x3f
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d12f      	bne.n	8002dfc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	335c      	adds	r3, #92	; 0x5c
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3350      	adds	r3, #80	; 0x50
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	f083 0301 	eor.w	r3, r3, #1
 8002dc6:	b2d8      	uxtb	r0, r3
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3350      	adds	r3, #80	; 0x50
 8002dd8:	4602      	mov	r2, r0
 8002dda:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	b2d8      	uxtb	r0, r3
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4601      	mov	r1, r0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f007 f800 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3350      	adds	r3, #80	; 0x50
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3350      	adds	r3, #80	; 0x50
 8002e24:	4602      	mov	r2, r0
 8002e26:	701a      	strb	r2, [r3, #0]
}
 8002e28:	e1f7      	b.n	800321a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 811a 	bne.w	8003076 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	0151      	lsls	r1, r2, #5
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	440a      	add	r2, r1
 8002e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	335d      	adds	r3, #93	; 0x5d
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10a      	bne.n	8002e8e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	335c      	adds	r3, #92	; 0x5c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e0d9      	b.n	8003042 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	335d      	adds	r3, #93	; 0x5d
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d10a      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	335c      	adds	r3, #92	; 0x5c
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e0c3      	b.n	8003042 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	335d      	adds	r3, #93	; 0x5d
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b06      	cmp	r3, #6
 8002ece:	d00a      	beq.n	8002ee6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	335d      	adds	r3, #93	; 0x5d
 8002ee0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d156      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3358      	adds	r3, #88	; 0x58
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1c59      	adds	r1, r3, #1
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4403      	add	r3, r0
 8002f08:	3358      	adds	r3, #88	; 0x58
 8002f0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3358      	adds	r3, #88	; 0x58
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d914      	bls.n	8002f4c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	3358      	adds	r3, #88	; 0x58
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	335c      	adds	r3, #92	; 0x5c
 8002f46:	2204      	movs	r2, #4
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e009      	b.n	8002f60 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	335c      	adds	r3, #92	; 0x5c
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f76:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f7e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e056      	b.n	8003042 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	335d      	adds	r3, #93	; 0x5d
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d123      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	335c      	adds	r3, #92	; 0x5c
 8002fba:	2202      	movs	r2, #2
 8002fbc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e027      	b.n	8003042 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	335d      	adds	r3, #93	; 0x5d
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b07      	cmp	r3, #7
 8003006:	d11c      	bne.n	8003042 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	3358      	adds	r3, #88	; 0x58
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4403      	add	r3, r0
 800302a:	3358      	adds	r3, #88	; 0x58
 800302c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	335c      	adds	r3, #92	; 0x5c
 800303e:	2204      	movs	r2, #4
 8003040:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	461a      	mov	r2, r3
 8003050:	2302      	movs	r3, #2
 8003052:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	b2d8      	uxtb	r0, r3
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	335c      	adds	r3, #92	; 0x5c
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4601      	mov	r1, r0
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f006 fec4 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003074:	e0d1      	b.n	800321a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d13e      	bne.n	800310a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	0151      	lsls	r1, r2, #5
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	440a      	add	r2, r1
 80030a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3358      	adds	r3, #88	; 0x58
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4403      	add	r3, r0
 80030ce:	3358      	adds	r3, #88	; 0x58
 80030d0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	335d      	adds	r3, #93	; 0x5d
 80030e2:	2206      	movs	r2, #6
 80030e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 fec2 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	461a      	mov	r2, r3
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	6093      	str	r3, [r2, #8]
}
 8003108:	e087      	b.n	800321a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b10      	cmp	r3, #16
 800311e:	d17c      	bne.n	800321a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	333f      	adds	r3, #63	; 0x3f
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d122      	bne.n	800317c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3358      	adds	r3, #88	; 0x58
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	0151      	lsls	r1, r2, #5
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	440a      	add	r2, r1
 8003160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f002 fe80 	bl	8005e7a <USB_HC_Halt>
 800317a:	e045      	b.n	8003208 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	333f      	adds	r3, #63	; 0x3f
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	333f      	adds	r3, #63	; 0x3f
 80031a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d12f      	bne.n	8003208 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	3358      	adds	r3, #88	; 0x58
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d121      	bne.n	8003208 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	335d      	adds	r3, #93	; 0x5d
 80031d4:	2203      	movs	r2, #3
 80031d6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	0151      	lsls	r1, r2, #5
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	440a      	add	r2, r1
 80031ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fe39 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	461a      	mov	r2, r3
 8003216:	2310      	movs	r3, #16
 8003218:	6093      	str	r3, [r2, #8]
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d119      	bne.n	8003286 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	2304      	movs	r3, #4
 8003262:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	0151      	lsls	r1, r2, #5
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	440a      	add	r2, r1
 800327a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003284:	e33e      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b20      	cmp	r3, #32
 800329a:	d141      	bne.n	8003320 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2320      	movs	r3, #32
 80032ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	333d      	adds	r3, #61	; 0x3d
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 831f 	bne.w	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	440b      	add	r3, r1
 80032d4:	333d      	adds	r3, #61	; 0x3d
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	335c      	adds	r3, #92	; 0x5c
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	440a      	add	r2, r1
 8003304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fdae 	bl	8005e7a <USB_HC_Halt>
}
 800331e:	e2f1      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d13f      	bne.n	80033b6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	335d      	adds	r3, #93	; 0x5d
 8003346:	2204      	movs	r2, #4
 8003348:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	333d      	adds	r3, #61	; 0x3d
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	3358      	adds	r3, #88	; 0x58
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	0151      	lsls	r1, r2, #5
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	440a      	add	r2, r1
 8003388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f002 fd6c 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ae:	461a      	mov	r2, r3
 80033b0:	2340      	movs	r3, #64	; 0x40
 80033b2:	6093      	str	r3, [r2, #8]
}
 80033b4:	e2a6      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d122      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	0151      	lsls	r1, r2, #5
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	440a      	add	r2, r1
 80033e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 fd3e 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	461a      	mov	r2, r3
 800340c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003410:	6093      	str	r3, [r2, #8]
}
 8003412:	e277      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d135      	bne.n	8003496 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	3358      	adds	r3, #88	; 0x58
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	0151      	lsls	r1, r2, #5
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	440a      	add	r2, r1
 8003454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f002 fd06 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	461a      	mov	r2, r3
 800347c:	2301      	movs	r3, #1
 800347e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	335d      	adds	r3, #93	; 0x5d
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
}
 8003494:	e236      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d12b      	bne.n	8003504 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	461a      	mov	r2, r3
 80034ba:	2308      	movs	r3, #8
 80034bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	0151      	lsls	r1, r2, #5
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	440a      	add	r2, r1
 80034d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 fcc6 	bl	8005e7a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	335d      	adds	r3, #93	; 0x5d
 80034fe:	2205      	movs	r2, #5
 8003500:	701a      	strb	r2, [r3, #0]
}
 8003502:	e1ff      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d155      	bne.n	80035c6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3358      	adds	r3, #88	; 0x58
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	335d      	adds	r3, #93	; 0x5d
 800353e:	2203      	movs	r2, #3
 8003540:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	333d      	adds	r3, #61	; 0x3d
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d114      	bne.n	8003582 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	333c      	adds	r3, #60	; 0x3c
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	333d      	adds	r3, #61	; 0x3d
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f002 fc64 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035be:	461a      	mov	r2, r3
 80035c0:	2310      	movs	r3, #16
 80035c2:	6093      	str	r3, [r2, #8]
}
 80035c4:	e19e      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d12b      	bne.n	8003634 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f002 fc37 	bl	8005e7a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	440b      	add	r3, r1
 800361a:	335d      	adds	r3, #93	; 0x5d
 800361c:	2206      	movs	r2, #6
 800361e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362c:	461a      	mov	r2, r3
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	6093      	str	r3, [r2, #8]
}
 8003632:	e167      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d135      	bne.n	80036b8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	440a      	add	r2, r1
 8003662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f002 fbff 	bl	8005e7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2310      	movs	r3, #16
 800368c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	335d      	adds	r3, #93	; 0x5d
 80036b2:	2208      	movs	r2, #8
 80036b4:	701a      	strb	r2, [r3, #0]
}
 80036b6:	e125      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	f040 811a 	bne.w	8003904 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	0151      	lsls	r1, r2, #5
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	440a      	add	r2, r1
 80036e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ea:	f023 0302 	bic.w	r3, r3, #2
 80036ee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	335d      	adds	r3, #93	; 0x5d
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d137      	bne.n	8003776 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	335c      	adds	r3, #92	; 0x5c
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	440b      	add	r3, r1
 8003728:	333f      	adds	r3, #63	; 0x3f
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d00b      	beq.n	8003748 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	333f      	adds	r3, #63	; 0x3f
 8003740:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003742:	2b03      	cmp	r3, #3
 8003744:	f040 80c5 	bne.w	80038d2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	3351      	adds	r3, #81	; 0x51
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	f083 0301 	eor.w	r3, r3, #1
 800375e:	b2d8      	uxtb	r0, r3
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	3351      	adds	r3, #81	; 0x51
 8003770:	4602      	mov	r2, r0
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e0ad      	b.n	80038d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	335d      	adds	r3, #93	; 0x5d
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d10a      	bne.n	80037a2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	440b      	add	r3, r1
 800379a:	335c      	adds	r3, #92	; 0x5c
 800379c:	2202      	movs	r2, #2
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e097      	b.n	80038d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	440b      	add	r3, r1
 80037b0:	335d      	adds	r3, #93	; 0x5d
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d10a      	bne.n	80037ce <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	335c      	adds	r3, #92	; 0x5c
 80037c8:	2202      	movs	r2, #2
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e081      	b.n	80038d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	335d      	adds	r3, #93	; 0x5d
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d10a      	bne.n	80037fa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	2205      	movs	r2, #5
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e06b      	b.n	80038d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	335d      	adds	r3, #93	; 0x5d
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d00a      	beq.n	8003826 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	335d      	adds	r3, #93	; 0x5d
 8003820:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003822:	2b08      	cmp	r3, #8
 8003824:	d155      	bne.n	80038d2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	3358      	adds	r3, #88	; 0x58
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1c59      	adds	r1, r3, #1
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4403      	add	r3, r0
 8003848:	3358      	adds	r3, #88	; 0x58
 800384a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	3358      	adds	r3, #88	; 0x58
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d914      	bls.n	800388c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	3358      	adds	r3, #88	; 0x58
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	440b      	add	r3, r1
 8003884:	335c      	adds	r3, #92	; 0x5c
 8003886:	2204      	movs	r2, #4
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e009      	b.n	80038a0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	335c      	adds	r3, #92	; 0x5c
 800389c:	2202      	movs	r2, #2
 800389e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038de:	461a      	mov	r2, r3
 80038e0:	2302      	movs	r3, #2
 80038e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	b2d8      	uxtb	r0, r3
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	335c      	adds	r3, #92	; 0x5c
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	4601      	mov	r1, r0
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f006 fa7c 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	0c5b      	lsrs	r3, r3, #17
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003940:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d003      	beq.n	8003950 <HCD_RXQLVL_IRQHandler+0x44>
 8003948:	2b05      	cmp	r3, #5
 800394a:	f000 8082 	beq.w	8003a52 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800394e:	e083      	b.n	8003a58 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d07f      	beq.n	8003a56 <HCD_RXQLVL_IRQHandler+0x14a>
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	440b      	add	r3, r1
 8003964:	3344      	adds	r3, #68	; 0x44
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d074      	beq.n	8003a56 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	440b      	add	r3, r1
 800397e:	3344      	adds	r3, #68	; 0x44
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	b292      	uxth	r2, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f001 fe15 	bl	80055b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3344      	adds	r3, #68	; 0x44
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	18d1      	adds	r1, r2, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4403      	add	r3, r0
 80039b0:	3344      	adds	r3, #68	; 0x44
 80039b2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	334c      	adds	r3, #76	; 0x4c
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	18d1      	adds	r1, r2, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4403      	add	r3, r0
 80039d8:	334c      	adds	r3, #76	; 0x4c
 80039da:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HCD_RXQLVL_IRQHandler+0x154>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d031      	beq.n	8003a56 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a08:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a10:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	3350      	adds	r3, #80	; 0x50
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	f083 0301 	eor.w	r3, r3, #1
 8003a3a:	b2d8      	uxtb	r0, r3
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	440b      	add	r3, r1
 8003a4a:	3350      	adds	r3, #80	; 0x50
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	701a      	strb	r2, [r3, #0]
      break;
 8003a50:	e001      	b.n	8003a56 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003a52:	bf00      	nop
 8003a54:	e000      	b.n	8003a58 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003a56:	bf00      	nop
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3728      	adds	r7, #40	; 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	1ff80000 	.word	0x1ff80000

08003a64 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a90:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d10b      	bne.n	8003ab4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f006 f98c 	bl	8009dc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d132      	bne.n	8003b24 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d126      	bne.n	8003b1e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d113      	bne.n	8003b00 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae2:	d106      	bne.n	8003af2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fe9e 	bl	800582c <USB_InitFSLSPClkSel>
 8003af0:	e011      	b.n	8003b16 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 fe97 	bl	800582c <USB_InitFSLSPClkSel>
 8003afe:	e00a      	b.n	8003b16 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d106      	bne.n	8003b16 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b14:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f006 f97e 	bl	8009e18 <HAL_HCD_PortEnabled_Callback>
 8003b1c:	e002      	b.n	8003b24 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f006 f988 	bl	8009e34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d103      	bne.n	8003b36 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f043 0320 	orr.w	r3, r3, #32
 8003b34:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6013      	str	r3, [r2, #0]
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e11f      	b.n	8003d9e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fc ffc4 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bb0:	f001 f9ce 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 8003bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a7b      	ldr	r2, [pc, #492]	; (8003da8 <HAL_I2C_Init+0x25c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d807      	bhi.n	8003bd0 <HAL_I2C_Init+0x84>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a7a      	ldr	r2, [pc, #488]	; (8003dac <HAL_I2C_Init+0x260>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bf94      	ite	ls
 8003bc8:	2301      	movls	r3, #1
 8003bca:	2300      	movhi	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e006      	b.n	8003bde <HAL_I2C_Init+0x92>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a77      	ldr	r2, [pc, #476]	; (8003db0 <HAL_I2C_Init+0x264>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bf94      	ite	ls
 8003bd8:	2301      	movls	r3, #1
 8003bda:	2300      	movhi	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0db      	b.n	8003d9e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a72      	ldr	r2, [pc, #456]	; (8003db4 <HAL_I2C_Init+0x268>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0c9b      	lsrs	r3, r3, #18
 8003bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a64      	ldr	r2, [pc, #400]	; (8003da8 <HAL_I2C_Init+0x25c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d802      	bhi.n	8003c20 <HAL_I2C_Init+0xd4>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	e009      	b.n	8003c34 <HAL_I2C_Init+0xe8>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	4a63      	ldr	r2, [pc, #396]	; (8003db8 <HAL_I2C_Init+0x26c>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	099b      	lsrs	r3, r3, #6
 8003c32:	3301      	adds	r3, #1
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4956      	ldr	r1, [pc, #344]	; (8003da8 <HAL_I2C_Init+0x25c>)
 8003c50:	428b      	cmp	r3, r1
 8003c52:	d80d      	bhi.n	8003c70 <HAL_I2C_Init+0x124>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e59      	subs	r1, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	bf38      	it	cc
 8003c6c:	2304      	movcc	r3, #4
 8003c6e:	e04f      	b.n	8003d10 <HAL_I2C_Init+0x1c4>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d111      	bne.n	8003c9c <HAL_I2C_Init+0x150>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	440b      	add	r3, r1
 8003c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e012      	b.n	8003cc2 <HAL_I2C_Init+0x176>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	0099      	lsls	r1, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Init+0x17e>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e022      	b.n	8003d10 <HAL_I2C_Init+0x1c4>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_I2C_Init+0x1a4>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1e58      	subs	r0, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	440b      	add	r3, r1
 8003ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cee:	e00f      	b.n	8003d10 <HAL_I2C_Init+0x1c4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	0099      	lsls	r1, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	6809      	ldr	r1, [r1, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6911      	ldr	r1, [r2, #16]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	4311      	orrs	r1, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	000186a0 	.word	0x000186a0
 8003dac:	001e847f 	.word	0x001e847f
 8003db0:	003d08ff 	.word	0x003d08ff
 8003db4:	431bde83 	.word	0x431bde83
 8003db8:	10624dd3 	.word	0x10624dd3

08003dbc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e128      	b.n	8004020 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a90      	ldr	r2, [pc, #576]	; (8004028 <HAL_I2S_Init+0x26c>)
 8003de6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fc ff2f 	bl	8000c4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d060      	beq.n	8003edc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e22:	2310      	movs	r3, #16
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e001      	b.n	8003e2c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e28:	2320      	movs	r3, #32
 8003e2a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d802      	bhi.n	8003e3a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f001 f9ce 	bl	80051dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003e40:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d125      	bne.n	8003e98 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	3305      	adds	r3, #5
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e01f      	b.n	8003eb6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	3305      	adds	r3, #5
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e00e      	b.n	8003eb6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	3305      	adds	r3, #5
 8003eb4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4a5c      	ldr	r2, [pc, #368]	; (800402c <HAL_I2S_Init+0x270>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	08db      	lsrs	r3, r3, #3
 8003ec0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e003      	b.n	8003ee4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003edc:	2302      	movs	r3, #2
 8003ede:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d902      	bls.n	8003ef0 <HAL_I2S_Init+0x134>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2bff      	cmp	r3, #255	; 0xff
 8003eee:	d907      	bls.n	8003f00 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	f043 0210 	orr.w	r2, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e08f      	b.n	8004020 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	ea42 0103 	orr.w	r1, r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f1e:	f023 030f 	bic.w	r3, r3, #15
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6851      	ldr	r1, [r2, #4]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6892      	ldr	r2, [r2, #8]
 8003f2a:	4311      	orrs	r1, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	68d2      	ldr	r2, [r2, #12]
 8003f30:	4311      	orrs	r1, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6992      	ldr	r2, [r2, #24]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f42:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d161      	bne.n	8004010 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a38      	ldr	r2, [pc, #224]	; (8004030 <HAL_I2S_Init+0x274>)
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a37      	ldr	r2, [pc, #220]	; (8004034 <HAL_I2S_Init+0x278>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2S_Init+0x1a4>
 8003f5c:	4b36      	ldr	r3, [pc, #216]	; (8004038 <HAL_I2S_Init+0x27c>)
 8003f5e:	e001      	b.n	8003f64 <HAL_I2S_Init+0x1a8>
 8003f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4932      	ldr	r1, [pc, #200]	; (8004034 <HAL_I2S_Init+0x278>)
 8003f6c:	428a      	cmp	r2, r1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2S_Init+0x1b8>
 8003f70:	4a31      	ldr	r2, [pc, #196]	; (8004038 <HAL_I2S_Init+0x27c>)
 8003f72:	e001      	b.n	8003f78 <HAL_I2S_Init+0x1bc>
 8003f74:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f78:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f7c:	f023 030f 	bic.w	r3, r3, #15
 8003f80:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <HAL_I2S_Init+0x278>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_I2S_Init+0x1d4>
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <HAL_I2S_Init+0x27c>)
 8003f8e:	e001      	b.n	8003f94 <HAL_I2S_Init+0x1d8>
 8003f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f94:	2202      	movs	r2, #2
 8003f96:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	; (8004034 <HAL_I2S_Init+0x278>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_I2S_Init+0x1ea>
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_I2S_Init+0x27c>)
 8003fa4:	e001      	b.n	8003faa <HAL_I2S_Init+0x1ee>
 8003fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb6:	d003      	beq.n	8003fc0 <HAL_I2S_Init+0x204>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e001      	b.n	8003fcc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	b299      	uxth	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003fe2:	4303      	orrs	r3, r0
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003fea:	4313      	orrs	r3, r2
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	897b      	ldrh	r3, [r7, #10]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a0d      	ldr	r2, [pc, #52]	; (8004034 <HAL_I2S_Init+0x278>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_I2S_Init+0x24c>
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_I2S_Init+0x27c>)
 8004006:	e001      	b.n	800400c <HAL_I2S_Init+0x250>
 8004008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800400c:	897a      	ldrh	r2, [r7, #10]
 800400e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	08004113 	.word	0x08004113
 800402c:	cccccccd 	.word	0xcccccccd
 8004030:	08004229 	.word	0x08004229
 8004034:	40003800 	.word	0x40003800
 8004038:	40003400 	.word	0x40003400

0800403c <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404a:	b2db      	uxtb	r3, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10e      	bne.n	80040ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800409c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd f936 	bl	8001318 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	b292      	uxth	r2, r2
 80040c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	1c9a      	adds	r2, r3, #2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10e      	bne.n	800410a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fd f951 	bl	80013ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b04      	cmp	r3, #4
 800412c:	d13a      	bne.n	80041a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d109      	bne.n	800414c <I2S_IRQHandler+0x3a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d102      	bne.n	800414c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ffb4 	bl	80040b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d126      	bne.n	80041a4 <I2S_IRQHandler+0x92>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b20      	cmp	r3, #32
 8004162:	d11f      	bne.n	80041a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004172:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f043 0202 	orr.w	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd facc 	bl	800173c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d136      	bne.n	800421e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d109      	bne.n	80041ce <I2S_IRQHandler+0xbc>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d102      	bne.n	80041ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ff45 	bl	8004058 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d122      	bne.n	800421e <I2S_IRQHandler+0x10c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d11b      	bne.n	800421e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fd fa8f 	bl	800173c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800421e:	bf00      	nop
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4aa2      	ldr	r2, [pc, #648]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004242:	4ba2      	ldr	r3, [pc, #648]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004244:	e001      	b.n	800424a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a9b      	ldr	r2, [pc, #620]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004260:	4b9a      	ldr	r3, [pc, #616]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004262:	e001      	b.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d004      	beq.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 8099 	bne.w	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d107      	bne.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f925 	bl	80044e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9c8 	bl	8004644 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d13a      	bne.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d035      	beq.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a7e      	ldr	r2, [pc, #504]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042d2:	4b7e      	ldr	r3, [pc, #504]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042d4:	e001      	b.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4979      	ldr	r1, [pc, #484]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042e2:	428b      	cmp	r3, r1
 80042e4:	d101      	bne.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042e6:	4b79      	ldr	r3, [pc, #484]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e8:	e001      	b.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004302:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f043 0202 	orr.w	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fa04 	bl	800173c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	f040 80be 	bne.w	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80b8 	beq.w	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800435a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a59      	ldr	r2, [pc, #356]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004366:	4b59      	ldr	r3, [pc, #356]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004368:	e001      	b.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800436a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4954      	ldr	r1, [pc, #336]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004376:	428b      	cmp	r3, r1
 8004378:	d101      	bne.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800437c:	e001      	b.n	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800437e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004382:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004386:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd f9c6 	bl	800173c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043b0:	e084      	b.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d107      	bne.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8be 	bl	8004548 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d107      	bne.n	80043e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8fd 	bl	80045e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d12f      	bne.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d02a      	beq.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004408:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004414:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004416:	e001      	b.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4929      	ldr	r1, [pc, #164]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004424:	428b      	cmp	r3, r1
 8004426:	d101      	bne.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800442a:	e001      	b.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800442c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004430:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004434:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0202 	orr.w	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd f976 	bl	800173c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d131      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02c      	beq.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004470:	e001      	b.n	8004476 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4912      	ldr	r1, [pc, #72]	; (80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800447e:	428b      	cmp	r3, r1
 8004480:	d101      	bne.n	8004486 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004484:	e001      	b.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800448a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800448e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800449e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fd f941 	bl	800173c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ba:	e000      	b.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044bc:	bf00      	nop
}
 80044be:	bf00      	nop
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40003800 	.word	0x40003800
 80044cc:	40003400 	.word	0x40003400

080044d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c99      	adds	r1, r3, #2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6251      	str	r1, [r2, #36]	; 0x24
 80044f6:	881a      	ldrh	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d113      	bne.n	800453e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004524:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ffc9 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c99      	adds	r1, r3, #2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6251      	str	r1, [r2, #36]	; 0x24
 800455a:	8819      	ldrh	r1, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <I2SEx_TxISR_I2SExt+0x22>
 8004566:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <I2SEx_TxISR_I2SExt+0x94>)
 8004568:	e001      	b.n	800456e <I2SEx_TxISR_I2SExt+0x26>
 800456a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800456e:	460a      	mov	r2, r1
 8004570:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d121      	bne.n	80045ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <I2SEx_TxISR_I2SExt+0x50>
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <I2SEx_TxISR_I2SExt+0x94>)
 8004596:	e001      	b.n	800459c <I2SEx_TxISR_I2SExt+0x54>
 8004598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	490d      	ldr	r1, [pc, #52]	; (80045d8 <I2SEx_TxISR_I2SExt+0x90>)
 80045a4:	428b      	cmp	r3, r1
 80045a6:	d101      	bne.n	80045ac <I2SEx_TxISR_I2SExt+0x64>
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <I2SEx_TxISR_I2SExt+0x94>)
 80045aa:	e001      	b.n	80045b0 <I2SEx_TxISR_I2SExt+0x68>
 80045ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff81 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40003800 	.word	0x40003800
 80045dc:	40003400 	.word	0x40003400

080045e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68d8      	ldr	r0, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	1c99      	adds	r1, r3, #2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045f8:	b282      	uxth	r2, r0
 80045fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d113      	bne.n	800463c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004622:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ff4a 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <I2SEx_RxISR_I2SExt+0x90>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <I2SEx_RxISR_I2SExt+0x16>
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004658:	e001      	b.n	800465e <I2SEx_RxISR_I2SExt+0x1a>
 800465a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465e:	68d8      	ldr	r0, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	1c99      	adds	r1, r3, #2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	62d1      	str	r1, [r2, #44]	; 0x2c
 800466a:	b282      	uxth	r2, r0
 800466c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d121      	bne.n	80046ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <I2SEx_RxISR_I2SExt+0x90>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <I2SEx_RxISR_I2SExt+0x50>
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004692:	e001      	b.n	8004698 <I2SEx_RxISR_I2SExt+0x54>
 8004694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	490d      	ldr	r1, [pc, #52]	; (80046d4 <I2SEx_RxISR_I2SExt+0x90>)
 80046a0:	428b      	cmp	r3, r1
 80046a2:	d101      	bne.n	80046a8 <I2SEx_RxISR_I2SExt+0x64>
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <I2SEx_RxISR_I2SExt+0x94>)
 80046a6:	e001      	b.n	80046ac <I2SEx_RxISR_I2SExt+0x68>
 80046a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff03 	bl	80044d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40003800 	.word	0x40003800
 80046d8:	40003400 	.word	0x40003400

080046dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e25b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d075      	beq.n	80047e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046fa:	4ba3      	ldr	r3, [pc, #652]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b04      	cmp	r3, #4
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4ba0      	ldr	r3, [pc, #640]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470e:	2b08      	cmp	r3, #8
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b9d      	ldr	r3, [pc, #628]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b99      	ldr	r3, [pc, #612]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x108>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e236      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x74>
 8004742:	4b91      	ldr	r3, [pc, #580]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a90      	ldr	r2, [pc, #576]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x98>
 800475a:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a8a      	ldr	r2, [pc, #552]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a87      	ldr	r2, [pc, #540]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004774:	4b84      	ldr	r3, [pc, #528]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a83      	ldr	r2, [pc, #524]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a80      	ldr	r2, [pc, #512]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd f852 	bl	800183c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd f84e 	bl	800183c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1fb      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b76      	ldr	r3, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xc0>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fd f83e 	bl	800183c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd f83a 	bl	800183c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1e7      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0xe8>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d063      	beq.n	80048ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1bb      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4952      	ldr	r1, [pc, #328]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e03a      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b4f      	ldr	r3, [pc, #316]	; (800498c <HAL_RCC_OscConfig+0x2b0>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fc fff3 	bl	800183c <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485a:	f7fc ffef 	bl	800183c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e19c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	4b46      	ldr	r3, [pc, #280]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b43      	ldr	r3, [pc, #268]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4940      	ldr	r1, [pc, #256]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488e:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCC_OscConfig+0x2b0>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fc ffd2 	bl	800183c <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489c:	f7fc ffce 	bl	800183c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e17b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d030      	beq.n	8004928 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_OscConfig+0x2b4>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fc ffb2 	bl	800183c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fc ffae 	bl	800183c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e15b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x200>
 80048fa:	e015      	b.n	8004928 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_OscConfig+0x2b4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fc ff9b 	bl	800183c <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490a:	f7fc ff97 	bl	800183c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e144      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a0 	beq.w	8004a76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6413      	str	r3, [r2, #64]	; 0x40
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d121      	bne.n	80049b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fc ff5d 	bl	800183c <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e011      	b.n	80049aa <HAL_RCC_OscConfig+0x2ce>
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	42470000 	.word	0x42470000
 8004990:	42470e80 	.word	0x42470e80
 8004994:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004998:	f7fc ff50 	bl	800183c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0fd      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b81      	ldr	r3, [pc, #516]	; (8004bb0 <HAL_RCC_OscConfig+0x4d4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d106      	bne.n	80049cc <HAL_RCC_OscConfig+0x2f0>
 80049be:	4b7d      	ldr	r3, [pc, #500]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a7c      	ldr	r2, [pc, #496]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e01c      	b.n	8004a06 <HAL_RCC_OscConfig+0x32a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d10c      	bne.n	80049ee <HAL_RCC_OscConfig+0x312>
 80049d4:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	4a76      	ldr	r2, [pc, #472]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049da:	f043 0304 	orr.w	r3, r3, #4
 80049de:	6713      	str	r3, [r2, #112]	; 0x70
 80049e0:	4b74      	ldr	r3, [pc, #464]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	4a73      	ldr	r2, [pc, #460]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70
 80049ec:	e00b      	b.n	8004a06 <HAL_RCC_OscConfig+0x32a>
 80049ee:	4b71      	ldr	r3, [pc, #452]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a70      	ldr	r2, [pc, #448]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	4b6e      	ldr	r3, [pc, #440]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a6d      	ldr	r2, [pc, #436]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d015      	beq.n	8004a3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0e:	f7fc ff15 	bl	800183c <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fc ff11 	bl	800183c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e0bc      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ee      	beq.n	8004a16 <HAL_RCC_OscConfig+0x33a>
 8004a38:	e014      	b.n	8004a64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3a:	f7fc feff 	bl	800183c <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fc fefb 	bl	800183c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0a6      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a58:	4b56      	ldr	r3, [pc, #344]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ee      	bne.n	8004a42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6a:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a51      	ldr	r2, [pc, #324]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8092 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a80:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d05c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d141      	bne.n	8004b18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a94:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <HAL_RCC_OscConfig+0x4dc>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fc fecf 	bl	800183c <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fc fecb 	bl	800183c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e078      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	019b      	lsls	r3, r3, #6
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	4933      	ldr	r1, [pc, #204]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aea:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <HAL_RCC_OscConfig+0x4dc>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fc fea4 	bl	800183c <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fc fea0 	bl	800183c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e04d      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x41c>
 8004b16:	e045      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <HAL_RCC_OscConfig+0x4dc>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7fc fe8d 	bl	800183c <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b26:	f7fc fe89 	bl	800183c <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e036      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b38:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0x44a>
 8004b44:	e02e      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e029      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b52:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d11c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d115      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d106      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470060 	.word	0x42470060

08004bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0cc      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b68      	ldr	r3, [pc, #416]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90c      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d044      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d119      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e06f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e067      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9a:	4b37      	ldr	r3, [pc, #220]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4934      	ldr	r1, [pc, #208]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fc fdc6 	bl	800183c <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb4:	f7fc fdc2 	bl	800183c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 020c 	and.w	r2, r3, #12
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1eb      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d20c      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4601      	mov	r1, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	fa21 f303 	lsr.w	r3, r1, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fc fd26 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800d4e8 	.word	0x0800d4e8
 8004d80:	20000400 	.word	0x20000400
 8004d84:	20000404 	.word	0x20000404

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d9e:	4b63      	ldr	r3, [pc, #396]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d007      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0x32>
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d008      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x38>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 80b4 	bne.w	8004f1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b5e      	ldr	r3, [pc, #376]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004db6:	60bb      	str	r3, [r7, #8]
       break;
 8004db8:	e0b3      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dba:	4b5e      	ldr	r3, [pc, #376]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004dbc:	60bb      	str	r3, [r7, #8]
      break;
 8004dbe:	e0b0      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc0:	4b5a      	ldr	r3, [pc, #360]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dca:	4b58      	ldr	r3, [pc, #352]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d04a      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b55      	ldr	r3, [pc, #340]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	f04f 0400 	mov.w	r4, #0
 8004de0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	ea03 0501 	and.w	r5, r3, r1
 8004dec:	ea04 0602 	and.w	r6, r4, r2
 8004df0:	4629      	mov	r1, r5
 8004df2:	4632      	mov	r2, r6
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	f04f 0400 	mov.w	r4, #0
 8004dfc:	0154      	lsls	r4, r2, #5
 8004dfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e02:	014b      	lsls	r3, r1, #5
 8004e04:	4619      	mov	r1, r3
 8004e06:	4622      	mov	r2, r4
 8004e08:	1b49      	subs	r1, r1, r5
 8004e0a:	eb62 0206 	sbc.w	r2, r2, r6
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	0194      	lsls	r4, r2, #6
 8004e18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e1c:	018b      	lsls	r3, r1, #6
 8004e1e:	1a5b      	subs	r3, r3, r1
 8004e20:	eb64 0402 	sbc.w	r4, r4, r2
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	00e2      	lsls	r2, r4, #3
 8004e2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e32:	00d9      	lsls	r1, r3, #3
 8004e34:	460b      	mov	r3, r1
 8004e36:	4614      	mov	r4, r2
 8004e38:	195b      	adds	r3, r3, r5
 8004e3a:	eb44 0406 	adc.w	r4, r4, r6
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	0262      	lsls	r2, r4, #9
 8004e48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e4c:	0259      	lsls	r1, r3, #9
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4614      	mov	r4, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	4621      	mov	r1, r4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f04f 0400 	mov.w	r4, #0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	f7fb fbc6 	bl	80005f0 <__aeabi_uldivmod>
 8004e64:	4603      	mov	r3, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e049      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6c:	4b2f      	ldr	r3, [pc, #188]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	f04f 0400 	mov.w	r4, #0
 8004e76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	ea03 0501 	and.w	r5, r3, r1
 8004e82:	ea04 0602 	and.w	r6, r4, r2
 8004e86:	4629      	mov	r1, r5
 8004e88:	4632      	mov	r2, r6
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	f04f 0400 	mov.w	r4, #0
 8004e92:	0154      	lsls	r4, r2, #5
 8004e94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e98:	014b      	lsls	r3, r1, #5
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4622      	mov	r2, r4
 8004e9e:	1b49      	subs	r1, r1, r5
 8004ea0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	f04f 0400 	mov.w	r4, #0
 8004eac:	0194      	lsls	r4, r2, #6
 8004eae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004eb2:	018b      	lsls	r3, r1, #6
 8004eb4:	1a5b      	subs	r3, r3, r1
 8004eb6:	eb64 0402 	sbc.w	r4, r4, r2
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	00e2      	lsls	r2, r4, #3
 8004ec4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ec8:	00d9      	lsls	r1, r3, #3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4614      	mov	r4, r2
 8004ece:	195b      	adds	r3, r3, r5
 8004ed0:	eb44 0406 	adc.w	r4, r4, r6
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	02a2      	lsls	r2, r4, #10
 8004ede:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ee2:	0299      	lsls	r1, r3, #10
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4614      	mov	r4, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	4621      	mov	r1, r4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f04f 0400 	mov.w	r4, #0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	f7fb fb7b 	bl	80005f0 <__aeabi_uldivmod>
 8004efa:	4603      	mov	r3, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	60bb      	str	r3, [r7, #8]
      break;
 8004f1a:	e002      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f1e:	60bb      	str	r3, [r7, #8]
      break;
 8004f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f22:	68bb      	ldr	r3, [r7, #8]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	007a1200 	.word	0x007a1200

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000400 	.word	0x20000400

08004f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f54:	f7ff fff0 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f58:	4601      	mov	r1, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4a03      	ldr	r2, [pc, #12]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f66:	5cd3      	ldrb	r3, [r2, r3]
 8004f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	0800d4f8 	.word	0x0800d4f8

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d038      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fa0:	4b68      	ldr	r3, [pc, #416]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fc49 	bl	800183c <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fae:	f7fc fc45 	bl	800183c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0bd      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	071b      	lsls	r3, r3, #28
 8004fde:	495a      	ldr	r1, [pc, #360]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fe6:	4b57      	ldr	r3, [pc, #348]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fc fc26 	bl	800183c <HAL_GetTick>
 8004ff0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ff4:	f7fc fc22 	bl	800183c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e09a      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005006:	4b50      	ldr	r3, [pc, #320]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8083 	beq.w	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	4b48      	ldr	r3, [pc, #288]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	4a47      	ldr	r2, [pc, #284]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502e:	6413      	str	r3, [r2, #64]	; 0x40
 8005030:	4b45      	ldr	r3, [pc, #276]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800503c:	4b43      	ldr	r3, [pc, #268]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a42      	ldr	r2, [pc, #264]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005046:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005048:	f7fc fbf8 	bl	800183c <HAL_GetTick>
 800504c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005050:	f7fc fbf4 	bl	800183c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e06c      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005062:	4b3a      	ldr	r3, [pc, #232]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005076:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d02f      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	429a      	cmp	r2, r3
 800508a:	d028      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800508c:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005094:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005096:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050a2:	4a29      	ldr	r2, [pc, #164]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d114      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fc fbc2 	bl	800183c <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fc fbbe 	bl	800183c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e034      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ee      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ea:	d10d      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80050ec:	4b16      	ldr	r3, [pc, #88]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005100:	4911      	ldr	r1, [pc, #68]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a0e      	ldr	r2, [pc, #56]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005112:	6093      	str	r3, [r2, #8]
 8005114:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	4909      	ldr	r1, [pc, #36]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7d1a      	ldrb	r2, [r3, #20]
 8005136:	4b07      	ldr	r3, [pc, #28]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005138:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	42470068 	.word	0x42470068
 8005148:	40023800 	.word	0x40023800
 800514c:	40007000 	.word	0x40007000
 8005150:	42470e40 	.word	0x42470e40
 8005154:	424711e0 	.word	0x424711e0

08005158 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2203      	movs	r2, #3
 8005164:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005166:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516c:	099b      	lsrs	r3, r3, #6
 800516e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005176:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800517c:	0f1b      	lsrs	r3, r3, #28
 800517e:	f003 0207 	and.w	r2, r3, #7
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800519c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80051c2:	e002      	b.n	80051ca <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	751a      	strb	r2, [r3, #20]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40023800 	.word	0x40023800

080051dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d13f      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051fa:	4b23      	ldr	r3, [pc, #140]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005202:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800520a:	2b01      	cmp	r3, #1
 800520c:	d131      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800520e:	4b1f      	ldr	r3, [pc, #124]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005210:	617b      	str	r3, [r7, #20]
          break;
 8005212:	e031      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005214:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005220:	d109      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005222:	4b19      	ldr	r3, [pc, #100]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800522c:	4a18      	ldr	r2, [pc, #96]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	e008      	b.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005240:	4a14      	ldr	r2, [pc, #80]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005262:	0f1b      	lsrs	r3, r3, #28
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	fbb2 f3f3 	udiv	r3, r2, r3
 800526e:	617b      	str	r3, [r7, #20]
          break;
 8005270:	e002      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
          break;
 8005276:	bf00      	nop
        }
      }
      break;
 8005278:	bf00      	nop
    }
  }
  return frequency;
 800527a:	697b      	ldr	r3, [r7, #20]
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40023800 	.word	0x40023800
 800528c:	00bb8000 	.word	0x00bb8000
 8005290:	007a1200 	.word	0x007a1200
 8005294:	00f42400 	.word	0x00f42400

08005298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e056      	b.n	8005358 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fb fe8d 	bl	8000fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	ea42 0103 	orr.w	r1, r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f003 0104 	and.w	r1, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69da      	ldr	r2, [r3, #28]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005360:	b084      	sub	sp, #16
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	f107 001c 	add.w	r0, r7, #28
 800536e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d122      	bne.n	80053be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800538c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d105      	bne.n	80053b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f94a 	bl	800564c <USB_CoreReset>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	e01a      	b.n	80053f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f93e 	bl	800564c <USB_CoreReset>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
 80053e6:	e005      	b.n	80053f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10b      	bne.n	8005412 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f043 0206 	orr.w	r2, r3, #6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541e:	b004      	add	sp, #16
 8005420:	4770      	bx	lr

08005422 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f023 0201 	bic.w	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d106      	bne.n	8005492 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
 8005490:	e00b      	b.n	80054aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
 80054a4:	e001      	b.n	80054aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e003      	b.n	80054b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80054aa:	2032      	movs	r0, #50	; 0x32
 80054ac:	f7fc f9d2 	bl	8001854 <HAL_Delay>

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <USB_FlushTxFifo+0x48>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d901      	bls.n	80054e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e006      	b.n	80054f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d0f0      	beq.n	80054d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	00030d40 	.word	0x00030d40

08005508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2210      	movs	r2, #16
 8005518:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <USB_FlushRxFifo+0x40>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	d0f0      	beq.n	800551a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	00030d40 	.word	0x00030d40

0800554c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	460b      	mov	r3, r1
 800555c:	71fb      	strb	r3, [r7, #7]
 800555e:	4613      	mov	r3, r2
 8005560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800556a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11a      	bne.n	80055a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005572:	88bb      	ldrh	r3, [r7, #4]
 8005574:	3303      	adds	r3, #3
 8005576:	089b      	lsrs	r3, r3, #2
 8005578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e00f      	b.n	80055a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	031a      	lsls	r2, r3, #12
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558c:	461a      	mov	r2, r3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3304      	adds	r3, #4
 8005598:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	3301      	adds	r3, #1
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d3eb      	bcc.n	8005580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3724      	adds	r7, #36	; 0x24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b089      	sub	sp, #36	; 0x24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	4613      	mov	r3, r2
 80055c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	3303      	adds	r3, #3
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	e00b      	b.n	80055f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3304      	adds	r3, #4
 80055ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d3ef      	bcc.n	80055da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80055fa:	69fb      	ldr	r3, [r7, #28]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3724      	adds	r7, #36	; 0x24
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0301 	and.w	r3, r3, #1
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <USB_CoreReset+0x64>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e01b      	b.n	80056a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	daf2      	bge.n	8005658 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <USB_CoreReset+0x64>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d901      	bls.n	8005694 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e006      	b.n	80056a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d0f0      	beq.n	8005682 <USB_CoreReset+0x36>

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	00030d40 	.word	0x00030d40

080056b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b4:	b084      	sub	sp, #16
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	f107 001c 	add.w	r0, r7, #28
 80056c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d018      	beq.n	8005738 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10a      	bne.n	8005722 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800571a:	f043 0304 	orr.w	r3, r3, #4
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	e014      	b.n	800574c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e009      	b.n	800574c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005746:	f023 0304 	bic.w	r3, r3, #4
 800574a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800574c:	2110      	movs	r1, #16
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff feb4 	bl	80054bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff fed7 	bl	8005508 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e015      	b.n	800578c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4413      	add	r3, r2
 8005768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576c:	461a      	mov	r2, r3
 800576e:	f04f 33ff 	mov.w	r3, #4294967295
 8005772:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	461a      	mov	r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	429a      	cmp	r2, r3
 8005792:	d3e5      	bcc.n	8005760 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005794:	2101      	movs	r1, #1
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8ac 	bl	80058f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800579c:	20c8      	movs	r0, #200	; 0xc8
 800579e:	f7fc f859 	bl	8001854 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a14      	ldr	r2, [pc, #80]	; (8005818 <USB_HostInit+0x164>)
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a13      	ldr	r2, [pc, #76]	; (800581c <USB_HostInit+0x168>)
 80057ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057d2:	e009      	b.n	80057e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a10      	ldr	r2, [pc, #64]	; (8005820 <USB_HostInit+0x16c>)
 80057de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <USB_HostInit+0x170>)
 80057e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f043 0210 	orr.w	r2, r3, #16
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <USB_HostInit+0x174>)
 8005800:	4313      	orrs	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005812:	b004      	add	sp, #16
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	01000200 	.word	0x01000200
 800581c:	00e00300 	.word	0x00e00300
 8005820:	00600080 	.word	0x00600080
 8005824:	004000e0 	.word	0x004000e0
 8005828:	a3200008 	.word	0xa3200008

0800582c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d107      	bne.n	800587e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005874:	461a      	mov	r2, r3
 8005876:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800587a:	6053      	str	r3, [r2, #4]
 800587c:	e009      	b.n	8005892 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d106      	bne.n	8005892 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588a:	461a      	mov	r2, r3
 800588c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005890:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058d0:	2064      	movs	r0, #100	; 0x64
 80058d2:	f7fb ffbf 	bl	8001854 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058e4:	200a      	movs	r0, #10
 80058e6:	f7fb ffb5 	bl	8001854 <HAL_Delay>

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005918:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <USB_DriveVbus+0x44>
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d106      	bne.n	8005938 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005932:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005936:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005942:	d109      	bne.n	8005958 <USB_DriveVbus+0x64>
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005956:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	0c5b      	lsrs	r3, r3, #17
 8005984:	f003 0303 	and.w	r3, r3, #3
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	b29b      	uxth	r3, r3
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	70fb      	strb	r3, [r7, #3]
 80059ca:	460b      	mov	r3, r1
 80059cc:	70bb      	strb	r3, [r7, #2]
 80059ce:	4613      	mov	r3, r2
 80059d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e6:	461a      	mov	r2, r3
 80059e8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d87e      	bhi.n	8005af4 <USB_HC_Init+0x13c>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <USB_HC_Init+0x44>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005ab7 	.word	0x08005ab7
 8005a04:	08005a0d 	.word	0x08005a0d
 8005a08:	08005a79 	.word	0x08005a79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da10      	bge.n	8005a4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a46:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005a48:	e057      	b.n	8005afa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d051      	beq.n	8005afa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	78fa      	ldrb	r2, [r7, #3]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a74:	60d3      	str	r3, [r2, #12]
      break;
 8005a76:	e040      	b.n	8005afa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a84:	461a      	mov	r2, r3
 8005a86:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da34      	bge.n	8005afe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ab4:	e023      	b.n	8005afe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f240 2325 	movw	r3, #549	; 0x225
 8005ac8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da17      	bge.n	8005b02 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005af0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005af2:	e006      	b.n	8005b02 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	75fb      	strb	r3, [r7, #23]
      break;
 8005af8:	e004      	b.n	8005b04 <USB_HC_Init+0x14c>
      break;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <USB_HC_Init+0x14c>
      break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <USB_HC_Init+0x14c>
      break;
 8005b02:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	2101      	movs	r1, #1
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da03      	bge.n	8005b3e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	e001      	b.n	8005b42 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d103      	bne.n	8005b52 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e001      	b.n	8005b56 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b56:	787b      	ldrb	r3, [r7, #1]
 8005b58:	059b      	lsls	r3, r3, #22
 8005b5a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b5e:	78bb      	ldrb	r3, [r7, #2]
 8005b60:	02db      	lsls	r3, r3, #11
 8005b62:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b6c:	049b      	lsls	r3, r3, #18
 8005b6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	0159      	lsls	r1, r3, #5
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	440b      	add	r3, r1
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b92:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d10f      	bne.n	8005bbc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	78fa      	ldrb	r2, [r7, #3]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop

08005bcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	; 0x30
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d028      	beq.n	8005c48 <USB_HC_StartXfer+0x7c>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d124      	bne.n	8005c48 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <USB_HC_StartXfer+0x50>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	795b      	ldrb	r3, [r3, #5]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d107      	bne.n	8005c1c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	4619      	mov	r1, r3
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fa30 	bl	8006078 <USB_DoPing>
      return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e114      	b.n	8005e46 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d112      	bne.n	8005c48 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	69fa      	ldr	r2, [r7, #28]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	6a3a      	ldr	r2, [r7, #32]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005c40:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2200      	movs	r2, #0
 8005c46:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d018      	beq.n	8005c82 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	8912      	ldrh	r2, [r2, #8]
 8005c58:	4413      	add	r3, r2
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	8912      	ldrh	r2, [r2, #8]
 8005c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c64:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c68:	8b7b      	ldrh	r3, [r7, #26]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d90b      	bls.n	8005c86 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005c6e:	8b7b      	ldrh	r3, [r7, #26]
 8005c70:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005c72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	8912      	ldrh	r2, [r2, #8]
 8005c78:	fb02 f203 	mul.w	r2, r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	611a      	str	r2, [r3, #16]
 8005c80:	e001      	b.n	8005c86 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005c82:	2301      	movs	r3, #1
 8005c84:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	78db      	ldrb	r3, [r3, #3]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005c8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	8912      	ldrh	r2, [r2, #8]
 8005c94:	fb02 f203 	mul.w	r2, r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ca6:	04d9      	lsls	r1, r3, #19
 8005ca8:	4b69      	ldr	r3, [pc, #420]	; (8005e50 <USB_HC_StartXfer+0x284>)
 8005caa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	7a9b      	ldrb	r3, [r3, #10]
 8005cb2:	075b      	lsls	r3, r3, #29
 8005cb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cb8:	69f9      	ldr	r1, [r7, #28]
 8005cba:	0148      	lsls	r0, r1, #5
 8005cbc:	6a39      	ldr	r1, [r7, #32]
 8005cbe:	4401      	add	r1, r0
 8005cc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cc4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cc6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68d9      	ldr	r1, [r3, #12]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	460a      	mov	r2, r1
 8005ce0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bf0c      	ite	eq
 8005cf2:	2301      	moveq	r3, #1
 8005cf4:	2300      	movne	r3, #0
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	6a3a      	ldr	r2, [r7, #32]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	7e7b      	ldrb	r3, [r7, #25]
 8005d2a:	075b      	lsls	r3, r3, #29
 8005d2c:	69f9      	ldr	r1, [r7, #28]
 8005d2e:	0148      	lsls	r0, r1, #5
 8005d30:	6a39      	ldr	r1, [r7, #32]
 8005d32:	4401      	add	r1, r0
 8005d34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a42      	ldr	r2, [pc, #264]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d4c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d4e:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d56:	4a3f      	ldr	r2, [pc, #252]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d58:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d006      	beq.n	8005d70 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d62:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e005      	b.n	8005d7c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d70:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d78:	4a36      	ldr	r2, [pc, #216]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d7a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d7c:	4b35      	ldr	r3, [pc, #212]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d84:	4a33      	ldr	r2, [pc, #204]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d86:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	461a      	mov	r2, r3
 8005d96:	4b2f      	ldr	r3, [pc, #188]	; (8005e54 <USB_HC_StartXfer+0x288>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e04f      	b.n	8005e46 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	78db      	ldrb	r3, [r3, #3]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d14a      	bne.n	8005e44 <USB_HC_StartXfer+0x278>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d046      	beq.n	8005e44 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	79db      	ldrb	r3, [r3, #7]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d830      	bhi.n	8005e20 <USB_HC_StartXfer+0x254>
 8005dbe:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <USB_HC_StartXfer+0x1f8>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005dd5 	.word	0x08005dd5
 8005dc8:	08005df9 	.word	0x08005df9
 8005dcc:	08005dd5 	.word	0x08005dd5
 8005dd0:	08005df9 	.word	0x08005df9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	3303      	adds	r3, #3
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dde:	8afa      	ldrh	r2, [r7, #22]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d91c      	bls.n	8005e24 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f043 0220 	orr.w	r2, r3, #32
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005df6:	e015      	b.n	8005e24 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	3303      	adds	r3, #3
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e02:	8afa      	ldrh	r2, [r7, #22]
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d90a      	bls.n	8005e28 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e1e:	e003      	b.n	8005e28 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e20:	bf00      	nop
 8005e22:	e002      	b.n	8005e2a <USB_HC_StartXfer+0x25e>
        break;
 8005e24:	bf00      	nop
 8005e26:	e000      	b.n	8005e2a <USB_HC_StartXfer+0x25e>
        break;
 8005e28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	68d9      	ldr	r1, [r3, #12]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	785a      	ldrb	r2, [r3, #1]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	b298      	uxth	r0, r3
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff fb84 	bl	800554c <USB_WritePacket>
  }

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3728      	adds	r7, #40	; 0x28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	1ff80000 	.word	0x1ff80000
 8005e54:	20000518 	.word	0x20000518

08005e58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	b29b      	uxth	r3, r3
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b087      	sub	sp, #28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	0c9b      	lsrs	r3, r3, #18
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <USB_HC_Halt+0x3a>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d16c      	bne.n	8005f8e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d143      	bne.n	8005f68 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005efe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3301      	adds	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f4c:	d81d      	bhi.n	8005f8a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f64:	d0ec      	beq.n	8005f40 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f66:	e080      	b.n	800606a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f86:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f88:	e06f      	b.n	800606a <USB_HC_Halt+0x1f0>
          break;
 8005f8a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f8c:	e06d      	b.n	800606a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d143      	bne.n	8006046 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	440a      	add	r2, r1
 8006014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800601c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	3301      	adds	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800602a:	d81d      	bhi.n	8006068 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006042:	d0ec      	beq.n	800601e <USB_HC_Halt+0x1a4>
 8006044:	e011      	b.n	800606a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	440a      	add	r2, r1
 800605c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e000      	b.n	800606a <USB_HC_Halt+0x1f0>
          break;
 8006068:	bf00      	nop
    }
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800608c:	2301      	movs	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	04da      	lsls	r2, r3, #19
 8006094:	4b15      	ldr	r3, [pc, #84]	; (80060ec <USB_DoPing+0x74>)
 8006096:	4013      	ands	r3, r2
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d6:	461a      	mov	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	1ff80000 	.word	0x1ff80000

080060f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff f99f 	bl	8005444 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006106:	2110      	movs	r1, #16
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff f9d7 	bl	80054bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff f9fa 	bl	8005508 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006114:	2300      	movs	r3, #0
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	e01f      	b.n	800615a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006130:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006138:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006140:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614e:	461a      	mov	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3301      	adds	r3, #1
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b0f      	cmp	r3, #15
 800615e:	d9dc      	bls.n	800611a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	e034      	b.n	80061d0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800617c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006184:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800618c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3301      	adds	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ac:	d80c      	bhi.n	80061c8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c4:	d0ec      	beq.n	80061a0 <USB_StopHost+0xb0>
 80061c6:	e000      	b.n	80061ca <USB_StopHost+0xda>
        break;
 80061c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3301      	adds	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b0f      	cmp	r3, #15
 80061d4:	d9c7      	bls.n	8006166 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061dc:	461a      	mov	r2, r3
 80061de:	f04f 33ff 	mov.w	r3, #4294967295
 80061e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff f918 	bl	8005422 <USB_EnableGlobalInt>

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006200:	4904      	ldr	r1, [pc, #16]	; (8006214 <MX_FATFS_Init+0x18>)
 8006202:	4805      	ldr	r0, [pc, #20]	; (8006218 <MX_FATFS_Init+0x1c>)
 8006204:	f003 fcc6 	bl	8009b94 <FATFS_LinkDriver>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <MX_FATFS_Init+0x20>)
 800620e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006210:	bf00      	nop
 8006212:	bd80      	pop	{r7, pc}
 8006214:	200007d4 	.word	0x200007d4
 8006218:	0800d508 	.word	0x0800d508
 800621c:	20000c38 	.word	0x20000c38

08006220 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	4619      	mov	r1, r3
 800624a:	4808      	ldr	r0, [pc, #32]	; (800626c <USBH_status+0x34>)
 800624c:	f000 fe11 	bl	8006e72 <USBH_MSC_UnitIsReady>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <USBH_status+0x24>
  {
    res = RES_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
 800625a:	e001      	b.n	8006260 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000c3c 	.word	0x20000c3c

08006270 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b094      	sub	sp, #80	; 0x50
 8006274:	af02      	add	r7, sp, #8
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006286:	7bf9      	ldrb	r1, [r7, #15]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4812      	ldr	r0, [pc, #72]	; (80062dc <USBH_read+0x6c>)
 8006292:	f000 fe38 	bl	8006f06 <USBH_MSC_Read>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <USBH_read+0x34>
  {
    res = RES_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80062a2:	e015      	b.n	80062d0 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80062a4:	f107 0210 	add.w	r2, r7, #16
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	4619      	mov	r1, r3
 80062ac:	480b      	ldr	r0, [pc, #44]	; (80062dc <USBH_read+0x6c>)
 80062ae:	f000 fe06 	bl	8006ebe <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80062b2:	7f7b      	ldrb	r3, [r7, #29]
 80062b4:	2b28      	cmp	r3, #40	; 0x28
 80062b6:	d003      	beq.n	80062c0 <USBH_read+0x50>
 80062b8:	2b3a      	cmp	r3, #58	; 0x3a
 80062ba:	d001      	beq.n	80062c0 <USBH_read+0x50>
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d103      	bne.n	80062c8 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80062c0:	2303      	movs	r3, #3
 80062c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80062c6:	e003      	b.n	80062d0 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80062ce:	bf00      	nop
    }
  }

  return res;
 80062d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3748      	adds	r7, #72	; 0x48
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000c3c 	.word	0x20000c3c

080062e0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b094      	sub	sp, #80	; 0x50
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80062f6:	7bf9      	ldrb	r1, [r7, #15]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	4817      	ldr	r0, [pc, #92]	; (8006360 <USBH_write+0x80>)
 8006302:	f000 fe69 	bl	8006fd8 <USBH_MSC_Write>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d103      	bne.n	8006314 <USBH_write+0x34>
  {
    res = RES_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006312:	e01f      	b.n	8006354 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006314:	f107 0210 	add.w	r2, r7, #16
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	4619      	mov	r1, r3
 800631c:	4810      	ldr	r0, [pc, #64]	; (8006360 <USBH_write+0x80>)
 800631e:	f000 fdce 	bl	8006ebe <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006322:	7f7b      	ldrb	r3, [r7, #29]
 8006324:	2b27      	cmp	r3, #39	; 0x27
 8006326:	d009      	beq.n	800633c <USBH_write+0x5c>
 8006328:	2b27      	cmp	r3, #39	; 0x27
 800632a:	dc02      	bgt.n	8006332 <USBH_write+0x52>
 800632c:	2b04      	cmp	r3, #4
 800632e:	d009      	beq.n	8006344 <USBH_write+0x64>
 8006330:	e00c      	b.n	800634c <USBH_write+0x6c>
 8006332:	2b28      	cmp	r3, #40	; 0x28
 8006334:	d006      	beq.n	8006344 <USBH_write+0x64>
 8006336:	2b3a      	cmp	r3, #58	; 0x3a
 8006338:	d004      	beq.n	8006344 <USBH_write+0x64>
 800633a:	e007      	b.n	800634c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800633c:	2302      	movs	r3, #2
 800633e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006342:	e007      	b.n	8006354 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006344:	2303      	movs	r3, #3
 8006346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800634a:	e003      	b.n	8006354 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006352:	bf00      	nop
    }
  }

  return res;
 8006354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006358:	4618      	mov	r0, r3
 800635a:	3748      	adds	r7, #72	; 0x48
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000c3c 	.word	0x20000c3c

08006364 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b090      	sub	sp, #64	; 0x40
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	603a      	str	r2, [r7, #0]
 800636e:	71fb      	strb	r3, [r7, #7]
 8006370:	460b      	mov	r3, r1
 8006372:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800637a:	79bb      	ldrb	r3, [r7, #6]
 800637c:	2b03      	cmp	r3, #3
 800637e:	d852      	bhi.n	8006426 <USBH_ioctl+0xc2>
 8006380:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <USBH_ioctl+0x24>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	08006399 	.word	0x08006399
 800638c:	080063a1 	.word	0x080063a1
 8006390:	080063cb 	.word	0x080063cb
 8006394:	080063f7 	.word	0x080063f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800639e:	e045      	b.n	800642c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80063a0:	f107 0208 	add.w	r2, r7, #8
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	4619      	mov	r1, r3
 80063a8:	4823      	ldr	r0, [pc, #140]	; (8006438 <USBH_ioctl+0xd4>)
 80063aa:	f000 fd88 	bl	8006ebe <USBH_MSC_GetLUNInfo>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80063c0:	e034      	b.n	800642c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80063c8:	e030      	b.n	800642c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80063ca:	f107 0208 	add.w	r2, r7, #8
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	4619      	mov	r1, r3
 80063d2:	4819      	ldr	r0, [pc, #100]	; (8006438 <USBH_ioctl+0xd4>)
 80063d4:	f000 fd73 	bl	8006ebe <USBH_MSC_GetLUNInfo>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d107      	bne.n	80063ee <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80063de:	8a3b      	ldrh	r3, [r7, #16]
 80063e0:	461a      	mov	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80063ec:	e01e      	b.n	800642c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80063f4:	e01a      	b.n	800642c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80063f6:	f107 0208 	add.w	r2, r7, #8
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	4619      	mov	r1, r3
 80063fe:	480e      	ldr	r0, [pc, #56]	; (8006438 <USBH_ioctl+0xd4>)
 8006400:	f000 fd5d 	bl	8006ebe <USBH_MSC_GetLUNInfo>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800640a:	8a3b      	ldrh	r3, [r7, #16]
 800640c:	0a5b      	lsrs	r3, r3, #9
 800640e:	b29b      	uxth	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800641c:	e006      	b.n	800642c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006424:	e002      	b.n	800642c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006426:	2304      	movs	r3, #4
 8006428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800642c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006430:	4618      	mov	r0, r3
 8006432:	3740      	adds	r7, #64	; 0x40
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20000c3c 	.word	0x20000c3c

0800643c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800643c:	b590      	push	{r4, r7, lr}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af04      	add	r7, sp, #16
 8006442:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800644a:	7919      	ldrb	r1, [r3, #4]
 800644c:	2350      	movs	r3, #80	; 0x50
 800644e:	2206      	movs	r2, #6
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 fc4f 	bl	8007cf4 <USBH_FindInterface>
 8006456:	4603      	mov	r3, r0
 8006458:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2bff      	cmp	r3, #255	; 0xff
 800645e:	d002      	beq.n	8006466 <USBH_MSC_InterfaceInit+0x2a>
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d901      	bls.n	800646a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006466:	2302      	movs	r3, #2
 8006468:	e0ef      	b.n	800664a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fc24 	bl	8007cbc <USBH_SelectInterface>
 8006474:	4603      	mov	r3, r0
 8006476:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800647e:	2302      	movs	r3, #2
 8006480:	e0e3      	b.n	800664a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006488:	f44f 7080 	mov.w	r0, #256	; 0x100
 800648c:	f005 ff7a 	bl	800c384 <malloc>
 8006490:	4603      	mov	r3, r0
 8006492:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80064a4:	2302      	movs	r3, #2
 80064a6:	e0d0      	b.n	800664a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80064a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ac:	2100      	movs	r1, #0
 80064ae:	68b8      	ldr	r0, [r7, #8]
 80064b0:	f005 ff83 	bl	800c3ba <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	211a      	movs	r1, #26
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b25b      	sxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da16      	bge.n	80064fa <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	211a      	movs	r1, #26
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	211a      	movs	r1, #26
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064f2:	881a      	ldrh	r2, [r3, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	815a      	strh	r2, [r3, #10]
 80064f8:	e015      	b.n	8006526 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	211a      	movs	r1, #26
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800650a:	781a      	ldrb	r2, [r3, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	211a      	movs	r1, #26
 8006516:	fb01 f303 	mul.w	r3, r1, r3
 800651a:	4413      	add	r3, r2
 800651c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	211a      	movs	r1, #26
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	4413      	add	r3, r2
 8006532:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b25b      	sxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	da16      	bge.n	800656c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	211a      	movs	r1, #26
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	4413      	add	r3, r2
 800654a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800654e:	781a      	ldrb	r2, [r3, #0]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	211a      	movs	r1, #26
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	4413      	add	r3, r2
 8006560:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006564:	881a      	ldrh	r2, [r3, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	815a      	strh	r2, [r3, #10]
 800656a:	e015      	b.n	8006598 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	211a      	movs	r1, #26
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	4413      	add	r3, r2
 8006578:	f203 3356 	addw	r3, r3, #854	; 0x356
 800657c:	781a      	ldrb	r2, [r3, #0]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	211a      	movs	r1, #26
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	4413      	add	r3, r2
 800658e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2200      	movs	r2, #0
 80065a8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	799b      	ldrb	r3, [r3, #6]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f002 fdc2 	bl	800913a <USBH_AllocPipe>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	79db      	ldrb	r3, [r3, #7]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f002 fdb8 	bl	800913a <USBH_AllocPipe>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fda4 	bl	8007120 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	7959      	ldrb	r1, [r3, #5]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	7998      	ldrb	r0, [r3, #6]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	8912      	ldrh	r2, [r2, #8]
 80065f0:	9202      	str	r2, [sp, #8]
 80065f2:	2202      	movs	r2, #2
 80065f4:	9201      	str	r2, [sp, #4]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	4623      	mov	r3, r4
 80065fa:	4602      	mov	r2, r0
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f002 fd6d 	bl	80090dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	7919      	ldrb	r1, [r3, #4]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	79d8      	ldrb	r0, [r3, #7]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	8952      	ldrh	r2, [r2, #10]
 800661a:	9202      	str	r2, [sp, #8]
 800661c:	2202      	movs	r2, #2
 800661e:	9201      	str	r2, [sp, #4]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4623      	mov	r3, r4
 8006624:	4602      	mov	r2, r0
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f002 fd58 	bl	80090dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f003 fd79 	bl	800a12c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	795b      	ldrb	r3, [r3, #5]
 800663e:	2200      	movs	r2, #0
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f003 fd72 	bl	800a12c <USBH_LL_SetToggle>

  return USBH_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}

08006652 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	795b      	ldrb	r3, [r3, #5]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	795b      	ldrb	r3, [r3, #5]
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f002 fd51 	bl	800911a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	795b      	ldrb	r3, [r3, #5]
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f002 fd7c 	bl	800917c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	791b      	ldrb	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00e      	beq.n	80066b0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	791b      	ldrb	r3, [r3, #4]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f002 fd3e 	bl	800911a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	791b      	ldrb	r3, [r3, #4]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f002 fd69 	bl	800917c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f005 fe65 	bl	800c394 <free>
    phost->pActiveClass->pData = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066d0:	2200      	movs	r2, #0
 80066d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	7b9b      	ldrb	r3, [r3, #14]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d004      	beq.n	8006706 <USBH_MSC_ClassRequest+0x28>
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d03e      	beq.n	800677e <USBH_MSC_ClassRequest+0xa0>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d000      	beq.n	8006706 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8006704:	e04a      	b.n	800679c <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fcea 	bl	80070e4 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b03      	cmp	r3, #3
 8006718:	d104      	bne.n	8006724 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2200      	movs	r2, #0
 800671e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d135      	bne.n	8006796 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d804      	bhi.n	800673c <USBH_MSC_ClassRequest+0x5e>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	b2da      	uxtb	r2, r3
 800673a:	e000      	b.n	800673e <USBH_MSC_ClassRequest+0x60>
 800673c:	2202      	movs	r2, #2
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006742:	2300      	movs	r3, #0
 8006744:	73bb      	strb	r3, [r7, #14]
 8006746:	e014      	b.n	8006772 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	2134      	movs	r1, #52	; 0x34
 800674e:	fb01 f303 	mul.w	r3, r1, r3
 8006752:	4413      	add	r3, r2
 8006754:	3392      	adds	r3, #146	; 0x92
 8006756:	2202      	movs	r2, #2
 8006758:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	2134      	movs	r1, #52	; 0x34
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	33c1      	adds	r3, #193	; 0xc1
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	3301      	adds	r3, #1
 8006770:	73bb      	strb	r3, [r7, #14]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	7bba      	ldrb	r2, [r7, #14]
 8006778:	429a      	cmp	r2, r3
 800677a:	d3e5      	bcc.n	8006748 <USBH_MSC_ClassRequest+0x6a>
      break;
 800677c:	e00b      	b.n	8006796 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800677e:	2100      	movs	r1, #0
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f002 f878 	bl	8008876 <USBH_ClrFeature>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	7bda      	ldrb	r2, [r3, #15]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	739a      	strb	r2, [r3, #14]
      break;
 8006794:	e001      	b.n	800679a <USBH_MSC_ClassRequest+0xbc>
      break;
 8006796:	bf00      	nop
 8006798:	e000      	b.n	800679c <USBH_MSC_ClassRequest+0xbe>
      break;
 800679a:	bf00      	nop
  }

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	7b1b      	ldrb	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <USBH_MSC_Process+0x2e>
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	f000 8271 	beq.w	8006cb6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80067d4:	e272      	b.n	8006cbc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	429a      	cmp	r2, r3
 80067e4:	f080 824f 	bcs.w	8006c86 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067ee:	4619      	mov	r1, r3
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	2334      	movs	r3, #52	; 0x34
 80067f4:	fb03 f301 	mul.w	r3, r3, r1
 80067f8:	4413      	add	r3, r2
 80067fa:	3391      	adds	r3, #145	; 0x91
 80067fc:	2201      	movs	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006806:	4619      	mov	r1, r3
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	2334      	movs	r3, #52	; 0x34
 800680c:	fb03 f301 	mul.w	r3, r3, r1
 8006810:	4413      	add	r3, r2
 8006812:	3390      	adds	r3, #144	; 0x90
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b08      	cmp	r3, #8
 8006818:	f200 8243 	bhi.w	8006ca2 <USBH_MSC_Process+0x4fa>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <USBH_MSC_Process+0x7c>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006849 	.word	0x08006849
 8006828:	08006ca3 	.word	0x08006ca3
 800682c:	08006911 	.word	0x08006911
 8006830:	08006a95 	.word	0x08006a95
 8006834:	0800686f 	.word	0x0800686f
 8006838:	08006b61 	.word	0x08006b61
 800683c:	08006ca3 	.word	0x08006ca3
 8006840:	08006ca3 	.word	0x08006ca3
 8006844:	08006c75 	.word	0x08006c75
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800684e:	4619      	mov	r1, r3
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	2334      	movs	r3, #52	; 0x34
 8006854:	fb03 f301 	mul.w	r3, r3, r1
 8006858:	4413      	add	r3, r2
 800685a:	3390      	adds	r3, #144	; 0x90
 800685c:	2204      	movs	r2, #4
 800685e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800686c:	e222      	b.n	8006cb4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006874:	b2d9      	uxtb	r1, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800687c:	461a      	mov	r2, r3
 800687e:	2334      	movs	r3, #52	; 0x34
 8006880:	fb03 f302 	mul.w	r3, r3, r2
 8006884:	3398      	adds	r3, #152	; 0x98
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	3307      	adds	r3, #7
 800688c:	461a      	mov	r2, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 ff68 	bl	8007764 <USBH_MSC_SCSI_Inquiry>
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068a4:	4619      	mov	r1, r3
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	2334      	movs	r3, #52	; 0x34
 80068aa:	fb03 f301 	mul.w	r3, r3, r1
 80068ae:	4413      	add	r3, r2
 80068b0:	3390      	adds	r3, #144	; 0x90
 80068b2:	2202      	movs	r2, #2
 80068b4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d10c      	bne.n	80068d6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068c2:	4619      	mov	r1, r3
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	2334      	movs	r3, #52	; 0x34
 80068c8:	fb03 f301 	mul.w	r3, r3, r1
 80068cc:	4413      	add	r3, r2
 80068ce:	3390      	adds	r3, #144	; 0x90
 80068d0:	2205      	movs	r2, #5
 80068d2:	701a      	strb	r2, [r3, #0]
            break;
 80068d4:	e1e7      	b.n	8006ca6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	f040 81e4 	bne.w	8006ca6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068e4:	4619      	mov	r1, r3
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	2334      	movs	r3, #52	; 0x34
 80068ea:	fb03 f301 	mul.w	r3, r3, r1
 80068ee:	4413      	add	r3, r2
 80068f0:	3390      	adds	r3, #144	; 0x90
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80068fc:	4619      	mov	r1, r3
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	2334      	movs	r3, #52	; 0x34
 8006902:	fb03 f301 	mul.w	r3, r3, r1
 8006906:	4413      	add	r3, r2
 8006908:	3391      	adds	r3, #145	; 0x91
 800690a:	2202      	movs	r2, #2
 800690c:	701a      	strb	r2, [r3, #0]
            break;
 800690e:	e1ca      	b.n	8006ca6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006916:	b2db      	uxtb	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fe64 	bl	80075e8 <USBH_MSC_SCSI_TestUnitReady>
 8006920:	4603      	mov	r3, r0
 8006922:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d149      	bne.n	80069be <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006930:	4619      	mov	r1, r3
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	2334      	movs	r3, #52	; 0x34
 8006936:	fb03 f301 	mul.w	r3, r3, r1
 800693a:	4413      	add	r3, r2
 800693c:	3392      	adds	r3, #146	; 0x92
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00c      	beq.n	800695e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800694a:	4619      	mov	r1, r3
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	2334      	movs	r3, #52	; 0x34
 8006950:	fb03 f301 	mul.w	r3, r3, r1
 8006954:	4413      	add	r3, r2
 8006956:	33c1      	adds	r3, #193	; 0xc1
 8006958:	2201      	movs	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e00b      	b.n	8006976 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006964:	4619      	mov	r1, r3
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	2334      	movs	r3, #52	; 0x34
 800696a:	fb03 f301 	mul.w	r3, r3, r1
 800696e:	4413      	add	r3, r2
 8006970:	33c1      	adds	r3, #193	; 0xc1
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800697c:	4619      	mov	r1, r3
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	2334      	movs	r3, #52	; 0x34
 8006982:	fb03 f301 	mul.w	r3, r3, r1
 8006986:	4413      	add	r3, r2
 8006988:	3390      	adds	r3, #144	; 0x90
 800698a:	2203      	movs	r2, #3
 800698c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006994:	4619      	mov	r1, r3
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	2334      	movs	r3, #52	; 0x34
 800699a:	fb03 f301 	mul.w	r3, r3, r1
 800699e:	4413      	add	r3, r2
 80069a0:	3391      	adds	r3, #145	; 0x91
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80069ac:	4619      	mov	r1, r3
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	2334      	movs	r3, #52	; 0x34
 80069b2:	fb03 f301 	mul.w	r3, r3, r1
 80069b6:	4413      	add	r3, r2
 80069b8:	3392      	adds	r3, #146	; 0x92
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d14a      	bne.n	8006a5a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80069ca:	4619      	mov	r1, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	2334      	movs	r3, #52	; 0x34
 80069d0:	fb03 f301 	mul.w	r3, r3, r1
 80069d4:	4413      	add	r3, r2
 80069d6:	3392      	adds	r3, #146	; 0x92
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d00c      	beq.n	80069f8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80069e4:	4619      	mov	r1, r3
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	2334      	movs	r3, #52	; 0x34
 80069ea:	fb03 f301 	mul.w	r3, r3, r1
 80069ee:	4413      	add	r3, r2
 80069f0:	33c1      	adds	r3, #193	; 0xc1
 80069f2:	2201      	movs	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e00b      	b.n	8006a10 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80069fe:	4619      	mov	r1, r3
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	2334      	movs	r3, #52	; 0x34
 8006a04:	fb03 f301 	mul.w	r3, r3, r1
 8006a08:	4413      	add	r3, r2
 8006a0a:	33c1      	adds	r3, #193	; 0xc1
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a16:	4619      	mov	r1, r3
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	2334      	movs	r3, #52	; 0x34
 8006a1c:	fb03 f301 	mul.w	r3, r3, r1
 8006a20:	4413      	add	r3, r2
 8006a22:	3390      	adds	r3, #144	; 0x90
 8006a24:	2205      	movs	r2, #5
 8006a26:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a2e:	4619      	mov	r1, r3
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	2334      	movs	r3, #52	; 0x34
 8006a34:	fb03 f301 	mul.w	r3, r3, r1
 8006a38:	4413      	add	r3, r2
 8006a3a:	3391      	adds	r3, #145	; 0x91
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a46:	4619      	mov	r1, r3
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	2334      	movs	r3, #52	; 0x34
 8006a4c:	fb03 f301 	mul.w	r3, r3, r1
 8006a50:	4413      	add	r3, r2
 8006a52:	3392      	adds	r3, #146	; 0x92
 8006a54:	2202      	movs	r2, #2
 8006a56:	701a      	strb	r2, [r3, #0]
            break;
 8006a58:	e127      	b.n	8006caa <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	f040 8124 	bne.w	8006caa <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a68:	4619      	mov	r1, r3
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	2334      	movs	r3, #52	; 0x34
 8006a6e:	fb03 f301 	mul.w	r3, r3, r1
 8006a72:	4413      	add	r3, r2
 8006a74:	3390      	adds	r3, #144	; 0x90
 8006a76:	2201      	movs	r2, #1
 8006a78:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a80:	4619      	mov	r1, r3
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	2334      	movs	r3, #52	; 0x34
 8006a86:	fb03 f301 	mul.w	r3, r3, r1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3391      	adds	r3, #145	; 0x91
 8006a8e:	2202      	movs	r2, #2
 8006a90:	701a      	strb	r2, [r3, #0]
            break;
 8006a92:	e10a      	b.n	8006caa <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a9a:	b2d9      	uxtb	r1, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2334      	movs	r3, #52	; 0x34
 8006aa6:	fb03 f302 	mul.w	r3, r3, r2
 8006aaa:	3390      	adds	r3, #144	; 0x90
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fdda 	bl	800766e <USBH_MSC_SCSI_ReadCapacity>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d120      	bne.n	8006b06 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006aca:	4619      	mov	r1, r3
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	2334      	movs	r3, #52	; 0x34
 8006ad0:	fb03 f301 	mul.w	r3, r3, r1
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3390      	adds	r3, #144	; 0x90
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	2334      	movs	r3, #52	; 0x34
 8006ae8:	fb03 f301 	mul.w	r3, r3, r1
 8006aec:	4413      	add	r3, r2
 8006aee:	3391      	adds	r3, #145	; 0x91
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006afa:	3301      	adds	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006b04:	e0d3      	b.n	8006cae <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d10c      	bne.n	8006b26 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b12:	4619      	mov	r1, r3
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	2334      	movs	r3, #52	; 0x34
 8006b18:	fb03 f301 	mul.w	r3, r3, r1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3390      	adds	r3, #144	; 0x90
 8006b20:	2205      	movs	r2, #5
 8006b22:	701a      	strb	r2, [r3, #0]
            break;
 8006b24:	e0c3      	b.n	8006cae <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	f040 80c0 	bne.w	8006cae <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b34:	4619      	mov	r1, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	2334      	movs	r3, #52	; 0x34
 8006b3a:	fb03 f301 	mul.w	r3, r3, r1
 8006b3e:	4413      	add	r3, r2
 8006b40:	3390      	adds	r3, #144	; 0x90
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	2334      	movs	r3, #52	; 0x34
 8006b52:	fb03 f301 	mul.w	r3, r3, r1
 8006b56:	4413      	add	r3, r2
 8006b58:	3391      	adds	r3, #145	; 0x91
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	701a      	strb	r2, [r3, #0]
            break;
 8006b5e:	e0a6      	b.n	8006cae <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b66:	b2d9      	uxtb	r1, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b6e:	461a      	mov	r2, r3
 8006b70:	2334      	movs	r3, #52	; 0x34
 8006b72:	fb03 f302 	mul.w	r3, r3, r2
 8006b76:	3398      	adds	r3, #152	; 0x98
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fe94 	bl	80078ae <USBH_MSC_SCSI_RequestSense>
 8006b86:	4603      	mov	r3, r0
 8006b88:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d145      	bne.n	8006c1c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b96:	4619      	mov	r1, r3
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	2334      	movs	r3, #52	; 0x34
 8006b9c:	fb03 f301 	mul.w	r3, r3, r1
 8006ba0:	4413      	add	r3, r2
 8006ba2:	339c      	adds	r3, #156	; 0x9c
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d00c      	beq.n	8006bc4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	2334      	movs	r3, #52	; 0x34
 8006bb6:	fb03 f301 	mul.w	r3, r3, r1
 8006bba:	4413      	add	r3, r2
 8006bbc:	339c      	adds	r3, #156	; 0x9c
 8006bbe:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d117      	bne.n	8006bf4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d80c      	bhi.n	8006bf4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006be0:	4619      	mov	r1, r3
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	2334      	movs	r3, #52	; 0x34
 8006be6:	fb03 f301 	mul.w	r3, r3, r1
 8006bea:	4413      	add	r3, r2
 8006bec:	3390      	adds	r3, #144	; 0x90
 8006bee:	2202      	movs	r2, #2
 8006bf0:	701a      	strb	r2, [r3, #0]
                  break;
 8006bf2:	e05f      	b.n	8006cb4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	2334      	movs	r3, #52	; 0x34
 8006c00:	fb03 f301 	mul.w	r3, r3, r1
 8006c04:	4413      	add	r3, r2
 8006c06:	3390      	adds	r3, #144	; 0x90
 8006c08:	2201      	movs	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c12:	3301      	adds	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d10c      	bne.n	8006c3c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c28:	4619      	mov	r1, r3
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	2334      	movs	r3, #52	; 0x34
 8006c2e:	fb03 f301 	mul.w	r3, r3, r1
 8006c32:	4413      	add	r3, r2
 8006c34:	3390      	adds	r3, #144	; 0x90
 8006c36:	2208      	movs	r2, #8
 8006c38:	701a      	strb	r2, [r3, #0]
            break;
 8006c3a:	e03a      	b.n	8006cb2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d137      	bne.n	8006cb2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c48:	4619      	mov	r1, r3
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	2334      	movs	r3, #52	; 0x34
 8006c4e:	fb03 f301 	mul.w	r3, r3, r1
 8006c52:	4413      	add	r3, r2
 8006c54:	3390      	adds	r3, #144	; 0x90
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c60:	4619      	mov	r1, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	2334      	movs	r3, #52	; 0x34
 8006c66:	fb03 f301 	mul.w	r3, r3, r1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3391      	adds	r3, #145	; 0x91
 8006c6e:	2202      	movs	r2, #2
 8006c70:	701a      	strb	r2, [r3, #0]
            break;
 8006c72:	e01e      	b.n	8006cb2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006c84:	e016      	b.n	8006cb4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2201      	movs	r2, #1
 8006c92:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c9a:	2102      	movs	r1, #2
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
      break;
 8006ca0:	e00c      	b.n	8006cbc <USBH_MSC_Process+0x514>
            break;
 8006ca2:	bf00      	nop
 8006ca4:	e00a      	b.n	8006cbc <USBH_MSC_Process+0x514>
            break;
 8006ca6:	bf00      	nop
 8006ca8:	e008      	b.n	8006cbc <USBH_MSC_Process+0x514>
            break;
 8006caa:	bf00      	nop
 8006cac:	e006      	b.n	8006cbc <USBH_MSC_Process+0x514>
            break;
 8006cae:	bf00      	nop
 8006cb0:	e004      	b.n	8006cbc <USBH_MSC_Process+0x514>
            break;
 8006cb2:	bf00      	nop
      break;
 8006cb4:	e002      	b.n	8006cbc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cba:	bf00      	nop
  }
  return error;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop

08006cc8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b088      	sub	sp, #32
 8006ce2:	af02      	add	r7, sp, #8
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	2134      	movs	r1, #52	; 0x34
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	3390      	adds	r3, #144	; 0x90
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b06      	cmp	r3, #6
 8006d0e:	d004      	beq.n	8006d1a <USBH_MSC_RdWrProcess+0x3c>
 8006d10:	2b07      	cmp	r3, #7
 8006d12:	d037      	beq.n	8006d84 <USBH_MSC_RdWrProcess+0xa6>
 8006d14:	2b05      	cmp	r3, #5
 8006d16:	d06a      	beq.n	8006dee <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8006d18:	e0a6      	b.n	8006e68 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006d1a:	78f9      	ldrb	r1, [r7, #3]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	2200      	movs	r2, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fea6 	bl	8007a76 <USBH_MSC_SCSI_Read>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	2134      	movs	r1, #52	; 0x34
 8006d3a:	fb01 f303 	mul.w	r3, r1, r3
 8006d3e:	4413      	add	r3, r2
 8006d40:	3390      	adds	r3, #144	; 0x90
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4a:	e088      	b.n	8006e5e <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d109      	bne.n	8006d66 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	2134      	movs	r1, #52	; 0x34
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3390      	adds	r3, #144	; 0x90
 8006d60:	2205      	movs	r2, #5
 8006d62:	701a      	strb	r2, [r3, #0]
      break;
 8006d64:	e07b      	b.n	8006e5e <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d178      	bne.n	8006e5e <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	2134      	movs	r1, #52	; 0x34
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	3390      	adds	r3, #144	; 0x90
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	75fb      	strb	r3, [r7, #23]
      break;
 8006d82:	e06c      	b.n	8006e5e <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006d84:	78f9      	ldrb	r1, [r7, #3]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fe06 	bl	80079a0 <USBH_MSC_SCSI_Write>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	2134      	movs	r1, #52	; 0x34
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	4413      	add	r3, r2
 8006daa:	3390      	adds	r3, #144	; 0x90
 8006dac:	2201      	movs	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	75fb      	strb	r3, [r7, #23]
      break;
 8006db4:	e055      	b.n	8006e62 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d109      	bne.n	8006dd0 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	2134      	movs	r1, #52	; 0x34
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3390      	adds	r3, #144	; 0x90
 8006dca:	2205      	movs	r2, #5
 8006dcc:	701a      	strb	r2, [r3, #0]
      break;
 8006dce:	e048      	b.n	8006e62 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d145      	bne.n	8006e62 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	2134      	movs	r1, #52	; 0x34
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	4413      	add	r3, r2
 8006de2:	3390      	adds	r3, #144	; 0x90
 8006de4:	2208      	movs	r2, #8
 8006de6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006de8:	2302      	movs	r3, #2
 8006dea:	75fb      	strb	r3, [r7, #23]
      break;
 8006dec:	e039      	b.n	8006e62 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	2234      	movs	r2, #52	; 0x34
 8006df2:	fb02 f303 	mul.w	r3, r2, r3
 8006df6:	3398      	adds	r3, #152	; 0x98
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fd53 	bl	80078ae <USBH_MSC_SCSI_RequestSense>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d113      	bne.n	8006e3a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	2134      	movs	r1, #52	; 0x34
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3390      	adds	r3, #144	; 0x90
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	2134      	movs	r1, #52	; 0x34
 8006e2a:	fb01 f303 	mul.w	r3, r1, r3
 8006e2e:	4413      	add	r3, r2
 8006e30:	3391      	adds	r3, #145	; 0x91
 8006e32:	2202      	movs	r2, #2
 8006e34:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8006e36:	2302      	movs	r3, #2
 8006e38:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d012      	beq.n	8006e66 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d10f      	bne.n	8006e66 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	2134      	movs	r1, #52	; 0x34
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	3390      	adds	r3, #144	; 0x90
 8006e54:	2208      	movs	r2, #8
 8006e56:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5c:	e003      	b.n	8006e66 <USBH_MSC_RdWrProcess+0x188>
      break;
 8006e5e:	bf00      	nop
 8006e60:	e002      	b.n	8006e68 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006e66:	bf00      	nop

  }
  return error;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b0b      	cmp	r3, #11
 8006e90:	d10c      	bne.n	8006eac <USBH_MSC_UnitIsReady+0x3a>
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	2134      	movs	r1, #52	; 0x34
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3391      	adds	r3, #145	; 0x91
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	e001      	b.n	8006eb0 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b0b      	cmp	r3, #11
 8006ede:	d10d      	bne.n	8006efc <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	2234      	movs	r2, #52	; 0x34
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	3390      	adds	r3, #144	; 0x90
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4413      	add	r3, r2
 8006eee:	2234      	movs	r2, #52	; 0x34
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f005 fa56 	bl	800c3a4 <memcpy>
    return USBH_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b088      	sub	sp, #32
 8006f0a:	af02      	add	r7, sp, #8
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	460b      	mov	r3, r1
 8006f14:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00e      	beq.n	8006f4a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006f32:	2b0b      	cmp	r3, #11
 8006f34:	d109      	bne.n	8006f4a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	2134      	movs	r1, #52	; 0x34
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	3390      	adds	r3, #144	; 0x90
 8006f44:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d001      	beq.n	8006f4e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e040      	b.n	8006fd0 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2206      	movs	r2, #6
 8006f52:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006f54:	7afb      	ldrb	r3, [r7, #11]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	2134      	movs	r1, #52	; 0x34
 8006f5a:	fb01 f303 	mul.w	r3, r1, r3
 8006f5e:	4413      	add	r3, r2
 8006f60:	3390      	adds	r3, #144	; 0x90
 8006f62:	2206      	movs	r2, #6
 8006f64:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006f70:	7af9      	ldrb	r1, [r7, #11]
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fd7b 	bl	8007a76 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f86:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006f88:	e016      	b.n	8006fb8 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad2      	subs	r2, r2, r3
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	f242 7110 	movw	r1, #10000	; 0x2710
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d805      	bhi.n	8006fae <USBH_MSC_Read+0xa8>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e00b      	b.n	8006fd0 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff fe8e 	bl	8006cde <USBH_MSC_RdWrProcess>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d0e0      	beq.n	8006f8a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00e      	beq.n	800701c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007004:	2b0b      	cmp	r3, #11
 8007006:	d109      	bne.n	800701c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	2134      	movs	r1, #52	; 0x34
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	4413      	add	r3, r2
 8007014:	3390      	adds	r3, #144	; 0x90
 8007016:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007018:	2b01      	cmp	r3, #1
 800701a:	d001      	beq.n	8007020 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	e040      	b.n	80070a2 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2207      	movs	r2, #7
 8007024:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	2134      	movs	r1, #52	; 0x34
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	4413      	add	r3, r2
 8007032:	3390      	adds	r3, #144	; 0x90
 8007034:	2207      	movs	r2, #7
 8007036:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007038:	7afb      	ldrb	r3, [r7, #11]
 800703a:	b29a      	uxth	r2, r3
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007042:	7af9      	ldrb	r1, [r7, #11]
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fca7 	bl	80079a0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007058:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800705a:	e016      	b.n	800708a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad2      	subs	r2, r2, r3
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f242 7110 	movw	r1, #10000	; 0x2710
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	429a      	cmp	r2, r3
 8007072:	d805      	bhi.n	8007080 <USBH_MSC_Write+0xa8>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2201      	movs	r2, #1
 8007084:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007086:	2302      	movs	r3, #2
 8007088:	e00b      	b.n	80070a2 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	4619      	mov	r1, r3
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff fe25 	bl	8006cde <USBH_MSC_RdWrProcess>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	d0e0      	beq.n	800705c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2201      	movs	r2, #1
 800709e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2221      	movs	r2, #33	; 0x21
 80070b6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	22ff      	movs	r2, #255	; 0xff
 80070bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80070d0:	2200      	movs	r2, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 fdae 	bl	8008c36 <USBH_CtlReq>
 80070da:	4603      	mov	r3, r0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	22a1      	movs	r2, #161	; 0xa1
 80070f2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	22fe      	movs	r2, #254	; 0xfe
 80070f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800710c:	2201      	movs	r2, #1
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 fd90 	bl	8008c36 <USBH_CtlReq>
 8007116:	4603      	mov	r3, r0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4a09      	ldr	r2, [pc, #36]	; (800715c <USBH_MSC_BOT_Init+0x3c>)
 8007136:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a09      	ldr	r2, [pc, #36]	; (8007160 <USBH_MSC_BOT_Init+0x40>)
 800713c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	43425355 	.word	0x43425355
 8007160:	20304050 	.word	0x20304050

08007164 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af02      	add	r7, sp, #8
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007174:	2301      	movs	r3, #1
 8007176:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007178:	2301      	movs	r3, #1
 800717a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800717c:	2300      	movs	r3, #0
 800717e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007194:	3b01      	subs	r3, #1
 8007196:	2b0a      	cmp	r3, #10
 8007198:	f200 81a1 	bhi.w	80074de <USBH_MSC_BOT_Process+0x37a>
 800719c:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <USBH_MSC_BOT_Process+0x40>)
 800719e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a2:	bf00      	nop
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	080071fb 	.word	0x080071fb
 80071ac:	08007265 	.word	0x08007265
 80071b0:	08007283 	.word	0x08007283
 80071b4:	08007307 	.word	0x08007307
 80071b8:	0800732b 	.word	0x0800732b
 80071bc:	080073c5 	.word	0x080073c5
 80071c0:	080073e1 	.word	0x080073e1
 80071c4:	08007433 	.word	0x08007433
 80071c8:	08007463 	.word	0x08007463
 80071cc:	080074c5 	.word	0x080074c5
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	795a      	ldrb	r2, [r3, #5]
 80071ea:	2301      	movs	r3, #1
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	221f      	movs	r2, #31
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 ff2f 	bl	8009056 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80071f8:	e180      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	795b      	ldrb	r3, [r3, #5]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f002 ff69 	bl	800a0d8 <USBH_LL_GetURBState>
 8007206:	4603      	mov	r3, r0
 8007208:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800720a:	7d3b      	ldrb	r3, [r7, #20]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d118      	bne.n	8007242 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00f      	beq.n	8007238 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800721e:	b25b      	sxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	da04      	bge.n	800722e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2203      	movs	r2, #3
 8007228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800722c:	e159      	b.n	80074e2 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2205      	movs	r2, #5
 8007232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007236:	e154      	b.n	80074e2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2207      	movs	r2, #7
 800723c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007240:	e14f      	b.n	80074e2 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007242:	7d3b      	ldrb	r3, [r7, #20]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d104      	bne.n	8007252 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007250:	e147      	b.n	80074e2 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8007252:	7d3b      	ldrb	r3, [r7, #20]
 8007254:	2b05      	cmp	r3, #5
 8007256:	f040 8144 	bne.w	80074e2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	220a      	movs	r2, #10
 800725e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007262:	e13e      	b.n	80074e2 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	895a      	ldrh	r2, [r3, #10]
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 ff14 	bl	80090a0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2204      	movs	r2, #4
 800727c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007280:	e13c      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	791b      	ldrb	r3, [r3, #4]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f002 ff25 	bl	800a0d8 <USBH_LL_GetURBState>
 800728e:	4603      	mov	r3, r0
 8007290:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007292:	7d3b      	ldrb	r3, [r7, #20]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d12d      	bne.n	80072f4 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	8952      	ldrh	r2, [r2, #10]
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d910      	bls.n	80072c6 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	8952      	ldrh	r2, [r2, #10]
 80072ae:	441a      	add	r2, r3
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	8952      	ldrh	r2, [r2, #10]
 80072be:	1a9a      	subs	r2, r3, r2
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80072c4:	e002      	b.n	80072cc <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2200      	movs	r2, #0
 80072ca:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	895a      	ldrh	r2, [r3, #10]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fedc 	bl	80090a0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80072e8:	e0fd      	b.n	80074e6 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2207      	movs	r2, #7
 80072ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80072f2:	e0f8      	b.n	80074e6 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80072f4:	7d3b      	ldrb	r3, [r7, #20]
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	f040 80f5 	bne.w	80074e6 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2209      	movs	r2, #9
 8007300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007304:	e0ef      	b.n	80074e6 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	891a      	ldrh	r2, [r3, #8]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	7958      	ldrb	r0, [r3, #5]
 8007314:	2301      	movs	r3, #1
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4603      	mov	r3, r0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fe9b 	bl	8009056 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2206      	movs	r2, #6
 8007324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007328:	e0e8      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	795b      	ldrb	r3, [r3, #5]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f002 fed1 	bl	800a0d8 <USBH_LL_GetURBState>
 8007336:	4603      	mov	r3, r0
 8007338:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800733a:	7d3b      	ldrb	r3, [r7, #20]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d130      	bne.n	80073a2 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	8912      	ldrh	r2, [r2, #8]
 8007348:	4293      	cmp	r3, r2
 800734a:	d910      	bls.n	800736e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	8912      	ldrh	r2, [r2, #8]
 8007356:	441a      	add	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	8912      	ldrh	r2, [r2, #8]
 8007366:	1a9a      	subs	r2, r3, r2
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	65da      	str	r2, [r3, #92]	; 0x5c
 800736c:	e002      	b.n	8007374 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2200      	movs	r2, #0
 8007372:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	891a      	ldrh	r2, [r3, #8]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	7958      	ldrb	r0, [r3, #5]
 800738a:	2301      	movs	r3, #1
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4603      	mov	r3, r0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fe60 	bl	8009056 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007396:	e0a8      	b.n	80074ea <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2207      	movs	r2, #7
 800739c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80073a0:	e0a3      	b.n	80074ea <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073a2:	7d3b      	ldrb	r3, [r7, #20]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d104      	bne.n	80073b2 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2205      	movs	r2, #5
 80073ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80073b0:	e09b      	b.n	80074ea <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 80073b2:	7d3b      	ldrb	r3, [r7, #20]
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	f040 8098 	bne.w	80074ea <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	220a      	movs	r2, #10
 80073be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80073c2:	e092      	b.n	80074ea <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	791b      	ldrb	r3, [r3, #4]
 80073ce:	220d      	movs	r2, #13
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fe65 	bl	80090a0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2208      	movs	r2, #8
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80073de:	e08d      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	791b      	ldrb	r3, [r3, #4]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f002 fe76 	bl	800a0d8 <USBH_LL_GetURBState>
 80073ec:	4603      	mov	r3, r0
 80073ee:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80073f0:	7d3b      	ldrb	r3, [r7, #20]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d115      	bne.n	8007422 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f8aa 	bl	8007560 <USBH_MSC_DecodeCSW>
 800740c:	4603      	mov	r3, r0
 800740e:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007410:	7d7b      	ldrb	r3, [r7, #21]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800741a:	e068      	b.n	80074ee <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800741c:	2302      	movs	r3, #2
 800741e:	75fb      	strb	r3, [r7, #23]
      break;
 8007420:	e065      	b.n	80074ee <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8007422:	7d3b      	ldrb	r3, [r7, #20]
 8007424:	2b05      	cmp	r3, #5
 8007426:	d162      	bne.n	80074ee <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2209      	movs	r2, #9
 800742c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007430:	e05d      	b.n	80074ee <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	2200      	movs	r2, #0
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f865 	bl	8007508 <USBH_MSC_BOT_Abort>
 800743e:	4603      	mov	r3, r0
 8007440:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007442:	7dbb      	ldrb	r3, [r7, #22]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2207      	movs	r2, #7
 800744c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007450:	e04f      	b.n	80074f2 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007452:	7dbb      	ldrb	r3, [r7, #22]
 8007454:	2b04      	cmp	r3, #4
 8007456:	d14c      	bne.n	80074f2 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	220b      	movs	r2, #11
 800745c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007460:	e047      	b.n	80074f2 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	2201      	movs	r2, #1
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f84d 	bl	8007508 <USBH_MSC_BOT_Abort>
 800746e:	4603      	mov	r3, r0
 8007470:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007472:	7dbb      	ldrb	r3, [r7, #22]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11d      	bne.n	80074b4 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	795b      	ldrb	r3, [r3, #5]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f002 fe87 	bl	800a192 <USBH_LL_GetToggle>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	7959      	ldrb	r1, [r3, #5]
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	f1c3 0301 	rsb	r3, r3, #1
 8007492:	b2db      	uxtb	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f002 fe48 	bl	800a12c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	791b      	ldrb	r3, [r3, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f002 fe41 	bl	800a12c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2209      	movs	r2, #9
 80074ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80074b2:	e020      	b.n	80074f6 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 80074b4:	7dbb      	ldrb	r3, [r7, #22]
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d11d      	bne.n	80074f6 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	220b      	movs	r2, #11
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80074c2:	e018      	b.n	80074f6 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff fdf0 	bl	80070aa <USBH_MSC_BOT_REQ_Reset>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d112      	bne.n	80074fa <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80074dc:	e00d      	b.n	80074fa <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 80074de:	bf00      	nop
 80074e0:	e00c      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>
      break;
 80074e2:	bf00      	nop
 80074e4:	e00a      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>
      break;
 80074e6:	bf00      	nop
 80074e8:	e008      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>
      break;
 80074ea:	bf00      	nop
 80074ec:	e006      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>
      break;
 80074ee:	bf00      	nop
 80074f0:	e004      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>
      break;
 80074f2:	bf00      	nop
 80074f4:	e002      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>
      break;
 80074f6:	bf00      	nop
 80074f8:	e000      	b.n	80074fc <USBH_MSC_BOT_Process+0x398>
      break;
 80074fa:	bf00      	nop
  }
  return status;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop

08007508 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
 8007514:	4613      	mov	r3, r2
 8007516:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007518:	2302      	movs	r3, #2
 800751a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007526:	78bb      	ldrb	r3, [r7, #2]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <USBH_MSC_BOT_Abort+0x2a>
 800752c:	2b01      	cmp	r3, #1
 800752e:	d009      	beq.n	8007544 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007530:	e011      	b.n	8007556 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	79db      	ldrb	r3, [r3, #7]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f99c 	bl	8008876 <USBH_ClrFeature>
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]
      break;
 8007542:	e008      	b.n	8007556 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	799b      	ldrb	r3, [r3, #6]
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 f993 	bl	8008876 <USBH_ClrFeature>
 8007550:	4603      	mov	r3, r0
 8007552:	73fb      	strb	r3, [r7, #15]
      break;
 8007554:	bf00      	nop
  }
  return status;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007572:	2301      	movs	r3, #1
 8007574:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f002 fd19 	bl	8009fb4 <USBH_LL_GetLastXferSize>
 8007582:	4603      	mov	r3, r0
 8007584:	2b0d      	cmp	r3, #13
 8007586:	d002      	beq.n	800758e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007588:	2302      	movs	r3, #2
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	e024      	b.n	80075d8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007592:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <USBH_MSC_DecodeCSW+0x84>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d11d      	bne.n	80075d4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d119      	bne.n	80075d8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
 80075b2:	e011      	b.n	80075d8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d102      	bne.n	80075c4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
 80075c2:	e009      	b.n	80075d8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d104      	bne.n	80075d8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80075ce:	2302      	movs	r3, #2
 80075d0:	73fb      	strb	r3, [r7, #15]
 80075d2:	e001      	b.n	80075d8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80075d4:	2302      	movs	r3, #2
 80075d6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	53425355 	.word	0x53425355

080075e8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80075f4:	2302      	movs	r3, #2
 80075f6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007608:	2b01      	cmp	r3, #1
 800760a:	d002      	beq.n	8007612 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800760c:	2b02      	cmp	r3, #2
 800760e:	d021      	beq.n	8007654 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007610:	e028      	b.n	8007664 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2200      	movs	r2, #0
 8007616:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	220a      	movs	r2, #10
 8007624:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	3363      	adds	r3, #99	; 0x63
 800762c:	2210      	movs	r2, #16
 800762e:	2100      	movs	r1, #0
 8007630:	4618      	mov	r0, r3
 8007632:	f004 fec2 	bl	800c3ba <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800764e:	2301      	movs	r3, #1
 8007650:	73fb      	strb	r3, [r7, #15]
      break;
 8007652:	e007      	b.n	8007664 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff fd83 	bl	8007164 <USBH_MSC_BOT_Process>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
      break;
 8007662:	bf00      	nop
  }

  return error;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	460b      	mov	r3, r1
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800767c:	2301      	movs	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007690:	2b01      	cmp	r3, #1
 8007692:	d002      	beq.n	800769a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007694:	2b02      	cmp	r3, #2
 8007696:	d027      	beq.n	80076e8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007698:	e05f      	b.n	800775a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2208      	movs	r2, #8
 800769e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2280      	movs	r2, #128	; 0x80
 80076a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	220a      	movs	r2, #10
 80076ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	3363      	adds	r3, #99	; 0x63
 80076b4:	2210      	movs	r2, #16
 80076b6:	2100      	movs	r1, #0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f004 fe7e 	bl	800c3ba <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2225      	movs	r2, #37	; 0x25
 80076c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f103 0210 	add.w	r2, r3, #16
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80076e2:	2301      	movs	r3, #1
 80076e4:	75fb      	strb	r3, [r7, #23]
      break;
 80076e6:	e038      	b.n	800775a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	4619      	mov	r1, r3
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fd39 	bl	8007164 <USBH_MSC_BOT_Process>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d12d      	bne.n	8007758 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007702:	3303      	adds	r3, #3
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770e:	3302      	adds	r3, #2
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800771c:	3301      	adds	r3, #1
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007722:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	061b      	lsls	r3, r3, #24
 800772e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773a:	3307      	adds	r3, #7
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b29a      	uxth	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	3306      	adds	r3, #6
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	b29b      	uxth	r3, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	809a      	strh	r2, [r3, #4]
      break;
 8007758:	bf00      	nop
  }

  return error;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	460b      	mov	r3, r1
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007772:	2302      	movs	r3, #2
 8007774:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007786:	2b01      	cmp	r3, #1
 8007788:	d002      	beq.n	8007790 <USBH_MSC_SCSI_Inquiry+0x2c>
 800778a:	2b02      	cmp	r3, #2
 800778c:	d03d      	beq.n	800780a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800778e:	e089      	b.n	80078a4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	2224      	movs	r2, #36	; 0x24
 8007794:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2280      	movs	r2, #128	; 0x80
 800779a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	220a      	movs	r2, #10
 80077a2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	3363      	adds	r3, #99	; 0x63
 80077aa:	220a      	movs	r2, #10
 80077ac:	2100      	movs	r1, #0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f004 fe03 	bl	800c3ba <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	2212      	movs	r2, #18
 80077b8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	015b      	lsls	r3, r3, #5
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2224      	movs	r2, #36	; 0x24
 80077dc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f103 0210 	add.w	r2, r3, #16
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007804:	2301      	movs	r3, #1
 8007806:	75fb      	strb	r3, [r7, #23]
      break;
 8007808:	e04c      	b.n	80078a4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	4619      	mov	r1, r3
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff fca8 	bl	8007164 <USBH_MSC_BOT_Process>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d141      	bne.n	80078a2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800781e:	2222      	movs	r2, #34	; 0x22
 8007820:	2100      	movs	r1, #0
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f004 fdc9 	bl	800c3ba <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	f003 031f 	and.w	r3, r3, #31
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007850:	3301      	adds	r3, #1
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b25b      	sxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	da03      	bge.n	8007862 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	709a      	strb	r2, [r3, #2]
 8007860:	e002      	b.n	8007868 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	1cd8      	adds	r0, r3, #3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007872:	3308      	adds	r3, #8
 8007874:	2208      	movs	r2, #8
 8007876:	4619      	mov	r1, r3
 8007878:	f004 fd94 	bl	800c3a4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f103 000c 	add.w	r0, r3, #12
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007888:	3310      	adds	r3, #16
 800788a:	2210      	movs	r2, #16
 800788c:	4619      	mov	r1, r3
 800788e:	f004 fd89 	bl	800c3a4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	331d      	adds	r3, #29
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800789c:	3220      	adds	r2, #32
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	601a      	str	r2, [r3, #0]
      break;
 80078a2:	bf00      	nop
  }

  return error;
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	460b      	mov	r3, r1
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80078bc:	2302      	movs	r3, #2
 80078be:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d002      	beq.n	80078da <USBH_MSC_SCSI_RequestSense+0x2c>
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d03d      	beq.n	8007954 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80078d8:	e05d      	b.n	8007996 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	220e      	movs	r2, #14
 80078de:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	220a      	movs	r2, #10
 80078ec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	3363      	adds	r3, #99	; 0x63
 80078f4:	2210      	movs	r2, #16
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f004 fd5e 	bl	800c3ba <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2203      	movs	r2, #3
 8007902:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007906:	7afb      	ldrb	r3, [r7, #11]
 8007908:	015b      	lsls	r3, r3, #5
 800790a:	b2da      	uxtb	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	220e      	movs	r2, #14
 8007926:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2202      	movs	r2, #2
 800793e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f103 0210 	add.w	r2, r3, #16
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800794e:	2301      	movs	r3, #1
 8007950:	75fb      	strb	r3, [r7, #23]
      break;
 8007952:	e020      	b.n	8007996 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	4619      	mov	r1, r3
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7ff fc03 	bl	8007164 <USBH_MSC_BOT_Process>
 800795e:	4603      	mov	r3, r0
 8007960:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d115      	bne.n	8007994 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800796e:	3302      	adds	r3, #2
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 030f 	and.w	r3, r3, #15
 8007976:	b2da      	uxtb	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007982:	7b1a      	ldrb	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800798e:	7b5a      	ldrb	r2, [r3, #13]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	709a      	strb	r2, [r3, #2]
      break;
 8007994:	bf00      	nop
  }

  return error;
 8007996:	7dfb      	ldrb	r3, [r7, #23]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	607a      	str	r2, [r7, #4]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	460b      	mov	r3, r1
 80079ae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80079b0:	2302      	movs	r3, #2
 80079b2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d002      	beq.n	80079ce <USBH_MSC_SCSI_Write+0x2e>
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d047      	beq.n	8007a5c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80079cc:	e04e      	b.n	8007a6c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80079d4:	461a      	mov	r2, r3
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	fb03 f202 	mul.w	r2, r3, r2
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	220a      	movs	r2, #10
 80079ec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	3363      	adds	r3, #99	; 0x63
 80079f4:	2210      	movs	r2, #16
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f004 fcde 	bl	800c3ba <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	222a      	movs	r2, #42	; 0x2a
 8007a02:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007a06:	79fa      	ldrb	r2, [r7, #7]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007a0e:	79ba      	ldrb	r2, [r7, #6]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007a16:	797a      	ldrb	r2, [r7, #5]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007a1e:	1d3b      	adds	r3, r7, #4
 8007a20:	781a      	ldrb	r2, [r3, #0]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007a28:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007a32:	f107 0320 	add.w	r3, r7, #32
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007a56:	2301      	movs	r3, #1
 8007a58:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5a:	e007      	b.n	8007a6c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff fb7f 	bl	8007164 <USBH_MSC_BOT_Process>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6a:	bf00      	nop
  }

  return error;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	460b      	mov	r3, r1
 8007a84:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007a86:	2302      	movs	r3, #2
 8007a88:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d002      	beq.n	8007aa4 <USBH_MSC_SCSI_Read+0x2e>
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d047      	beq.n	8007b32 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007aa2:	e04e      	b.n	8007b42 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	fb03 f202 	mul.w	r2, r3, r2
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2280      	movs	r2, #128	; 0x80
 8007aba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3363      	adds	r3, #99	; 0x63
 8007aca:	2210      	movs	r2, #16
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f004 fc73 	bl	800c3ba <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2228      	movs	r2, #40	; 0x28
 8007ad8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007adc:	79fa      	ldrb	r2, [r7, #7]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007ae4:	79ba      	ldrb	r2, [r7, #6]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007aec:	797a      	ldrb	r2, [r7, #5]
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007af4:	1d3b      	adds	r3, r7, #4
 8007af6:	781a      	ldrb	r2, [r3, #0]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007afe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007b08:	f107 0320 	add.w	r3, r7, #32
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b30:	e007      	b.n	8007b42 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007b32:	7afb      	ldrb	r3, [r7, #11]
 8007b34:	4619      	mov	r1, r3
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff fb14 	bl	8007164 <USBH_MSC_BOT_Process>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b40:	bf00      	nop
  }

  return error;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b60:	2302      	movs	r3, #2
 8007b62:	e029      	b.n	8007bb8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	79fa      	ldrb	r2, [r7, #7]
 8007b68:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f81f 	bl	8007bc0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f002 f94d 	bl	8009e50 <USBH_LL_Init>

  return USBH_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	e009      	b.n	8007be6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	33e0      	adds	r3, #224	; 0xe0
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	2200      	movs	r2, #0
 8007bde:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b0e      	cmp	r3, #14
 8007bea:	d9f2      	bls.n	8007bd2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e009      	b.n	8007c06 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0c:	d3f1      	bcc.n	8007bf2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2240      	movs	r2, #64	; 0x40
 8007c32:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d016      	beq.n	8007caa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10e      	bne.n	8007ca4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c8c:	1c59      	adds	r1, r3, #1
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	33de      	adds	r3, #222	; 0xde
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e004      	b.n	8007cae <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	73fb      	strb	r3, [r7, #15]
 8007ca8:	e001      	b.n	8007cae <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d204      	bcs.n	8007ce2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007ce0:	e001      	b.n	8007ce6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	70fb      	strb	r3, [r7, #3]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70bb      	strb	r3, [r7, #2]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d1c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d1e:	e025      	b.n	8007d6c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	221a      	movs	r2, #26
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
 8007d28:	3308      	adds	r3, #8
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3302      	adds	r3, #2
 8007d30:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	795b      	ldrb	r3, [r3, #5]
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d002      	beq.n	8007d42 <USBH_FindInterface+0x4e>
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	2bff      	cmp	r3, #255	; 0xff
 8007d40:	d111      	bne.n	8007d66 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d46:	78ba      	ldrb	r2, [r7, #2]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d002      	beq.n	8007d52 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d4c:	78bb      	ldrb	r3, [r7, #2]
 8007d4e:	2bff      	cmp	r3, #255	; 0xff
 8007d50:	d109      	bne.n	8007d66 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d56:	787a      	ldrb	r2, [r7, #1]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d002      	beq.n	8007d62 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d5c:	787b      	ldrb	r3, [r7, #1]
 8007d5e:	2bff      	cmp	r3, #255	; 0xff
 8007d60:	d101      	bne.n	8007d66 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	e006      	b.n	8007d74 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d9d6      	bls.n	8007d20 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d72:	23ff      	movs	r3, #255	; 0xff
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f002 f89d 	bl	8009ec8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007d8e:	2101      	movs	r1, #1
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f002 f9b4 	bl	800a0fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af04      	add	r7, sp, #16
 8007da6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007da8:	2302      	movs	r3, #2
 8007daa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d102      	bne.n	8007dc2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b0b      	cmp	r3, #11
 8007dca:	f200 81b3 	bhi.w	8008134 <USBH_Process+0x394>
 8007dce:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBH_Process+0x34>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007e05 	.word	0x08007e05
 8007dd8:	08007e37 	.word	0x08007e37
 8007ddc:	08007e9f 	.word	0x08007e9f
 8007de0:	080080cf 	.word	0x080080cf
 8007de4:	08008135 	.word	0x08008135
 8007de8:	08007f43 	.word	0x08007f43
 8007dec:	08008075 	.word	0x08008075
 8007df0:	08007f79 	.word	0x08007f79
 8007df4:	08007f99 	.word	0x08007f99
 8007df8:	08007fb9 	.word	0x08007fb9
 8007dfc:	08007fe7 	.word	0x08007fe7
 8007e00:	080080b7 	.word	0x080080b7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8193 	beq.w	8008138 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e18:	20c8      	movs	r0, #200	; 0xc8
 8007e1a:	f002 f9ed 	bl	800a1f8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f002 f8ad 	bl	8009f7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e34:	e180      	b.n	8008138 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d107      	bne.n	8007e50 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e4e:	e182      	b.n	8008156 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e5a:	d914      	bls.n	8007e86 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e62:	3301      	adds	r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d903      	bls.n	8007e7e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	220d      	movs	r2, #13
 8007e7a:	701a      	strb	r2, [r3, #0]
      break;
 8007e7c:	e16b      	b.n	8008156 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	701a      	strb	r2, [r3, #0]
      break;
 8007e84:	e167      	b.n	8008156 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e8c:	f103 020a 	add.w	r2, r3, #10
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e96:	200a      	movs	r0, #10
 8007e98:	f002 f9ae 	bl	800a1f8 <USBH_Delay>
      break;
 8007e9c:	e15b      	b.n	8008156 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eae:	2104      	movs	r1, #4
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007eb4:	2064      	movs	r0, #100	; 0x64
 8007eb6:	f002 f99f 	bl	800a1f8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f002 f83a 	bl	8009f34 <USBH_LL_GetSpeed>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2205      	movs	r2, #5
 8007ece:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 f931 	bl	800913a <USBH_AllocPipe>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ee0:	2180      	movs	r1, #128	; 0x80
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 f929 	bl	800913a <USBH_AllocPipe>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7919      	ldrb	r1, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f04:	b292      	uxth	r2, r2
 8007f06:	9202      	str	r2, [sp, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2280      	movs	r2, #128	; 0x80
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 f8e2 	bl	80090dc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7959      	ldrb	r1, [r3, #5]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f2c:	b292      	uxth	r2, r2
 8007f2e:	9202      	str	r2, [sp, #8]
 8007f30:	2200      	movs	r2, #0
 8007f32:	9201      	str	r2, [sp, #4]
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	4603      	mov	r3, r0
 8007f38:	2200      	movs	r2, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f8ce 	bl	80090dc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f40:	e109      	b.n	8008156 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f90c 	bl	8008160 <USBH_HandleEnum>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 80f3 	bne.w	800813c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d103      	bne.n	8007f70 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f6e:	e0e5      	b.n	800813c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2207      	movs	r2, #7
 8007f74:	701a      	strb	r2, [r3, #0]
      break;
 8007f76:	e0e1      	b.n	800813c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80de 	beq.w	8008140 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2208      	movs	r2, #8
 8007f94:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f96:	e0d3      	b.n	8008140 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fc20 	bl	80087e8 <USBH_SetCfg>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 80ca 	bne.w	8008144 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2209      	movs	r2, #9
 8007fb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fb6:	e0c5      	b.n	8008144 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007fbe:	f003 0320 	and.w	r3, r3, #32
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fc30 	bl	800882e <USBH_SetFeature>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 80b9 	bne.w	8008148 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	220a      	movs	r2, #10
 8007fda:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fdc:	e0b4      	b.n	8008148 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	220a      	movs	r2, #10
 8007fe2:	701a      	strb	r2, [r3, #0]
      break;
 8007fe4:	e0b0      	b.n	8008148 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 80ad 	beq.w	800814c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
 8007ffe:	e016      	b.n	800802e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008000:	7bfa      	ldrb	r2, [r7, #15]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32de      	adds	r2, #222	; 0xde
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	791a      	ldrb	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008012:	429a      	cmp	r2, r3
 8008014:	d108      	bne.n	8008028 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	32de      	adds	r2, #222	; 0xde
 800801c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008026:	e005      	b.n	8008034 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	3301      	adds	r3, #1
 800802c:	73fb      	strb	r3, [r7, #15]
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0e5      	beq.n	8008000 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d016      	beq.n	800806c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2206      	movs	r2, #6
 8008054:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800805c:	2103      	movs	r1, #3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008062:	e073      	b.n	800814c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	220d      	movs	r2, #13
 8008068:	701a      	strb	r2, [r3, #0]
      break;
 800806a:	e06f      	b.n	800814c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	220d      	movs	r2, #13
 8008070:	701a      	strb	r2, [r3, #0]
      break;
 8008072:	e06b      	b.n	800814c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d017      	beq.n	80080ae <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	220b      	movs	r2, #11
 800809a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800809c:	e058      	b.n	8008150 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d154      	bne.n	8008150 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	220d      	movs	r2, #13
 80080aa:	701a      	strb	r2, [r3, #0]
      break;
 80080ac:	e050      	b.n	8008150 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	220d      	movs	r2, #13
 80080b2:	701a      	strb	r2, [r3, #0]
      break;
 80080b4:	e04c      	b.n	8008150 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d049      	beq.n	8008154 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
      }
      break;
 80080cc:	e042      	b.n	8008154 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fd72 	bl	8007bc0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800810a:	2105      	movs	r1, #5
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	d107      	bne.n	800812c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff fe2b 	bl	8007d80 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800812a:	e014      	b.n	8008156 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 fecb 	bl	8009ec8 <USBH_LL_Start>
      break;
 8008132:	e010      	b.n	8008156 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008134:	bf00      	nop
 8008136:	e00e      	b.n	8008156 <USBH_Process+0x3b6>
      break;
 8008138:	bf00      	nop
 800813a:	e00c      	b.n	8008156 <USBH_Process+0x3b6>
      break;
 800813c:	bf00      	nop
 800813e:	e00a      	b.n	8008156 <USBH_Process+0x3b6>
    break;
 8008140:	bf00      	nop
 8008142:	e008      	b.n	8008156 <USBH_Process+0x3b6>
      break;
 8008144:	bf00      	nop
 8008146:	e006      	b.n	8008156 <USBH_Process+0x3b6>
      break;
 8008148:	bf00      	nop
 800814a:	e004      	b.n	8008156 <USBH_Process+0x3b6>
      break;
 800814c:	bf00      	nop
 800814e:	e002      	b.n	8008156 <USBH_Process+0x3b6>
      break;
 8008150:	bf00      	nop
 8008152:	e000      	b.n	8008156 <USBH_Process+0x3b6>
      break;
 8008154:	bf00      	nop
  }
  return USBH_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af04      	add	r7, sp, #16
 8008166:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800816c:	2301      	movs	r3, #1
 800816e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b07      	cmp	r3, #7
 8008176:	f200 81c1 	bhi.w	80084fc <USBH_HandleEnum+0x39c>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBH_HandleEnum+0x20>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	080081a1 	.word	0x080081a1
 8008184:	0800825f 	.word	0x0800825f
 8008188:	080082c9 	.word	0x080082c9
 800818c:	08008357 	.word	0x08008357
 8008190:	080083c1 	.word	0x080083c1
 8008194:	08008431 	.word	0x08008431
 8008198:	08008477 	.word	0x08008477
 800819c:	080084bd 	.word	0x080084bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80081a0:	2108      	movs	r1, #8
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa50 	bl	8008648 <USBH_Get_DevDesc>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d130      	bne.n	8008214 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7919      	ldrb	r1, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081d6:	b292      	uxth	r2, r2
 80081d8:	9202      	str	r2, [sp, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	9201      	str	r2, [sp, #4]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4603      	mov	r3, r0
 80081e2:	2280      	movs	r2, #128	; 0x80
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 ff79 	bl	80090dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7959      	ldrb	r1, [r3, #5]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081fe:	b292      	uxth	r2, r2
 8008200:	9202      	str	r2, [sp, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	9201      	str	r2, [sp, #4]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4603      	mov	r3, r0
 800820a:	2200      	movs	r2, #0
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 ff65 	bl	80090dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008212:	e175      	b.n	8008500 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b03      	cmp	r3, #3
 8008218:	f040 8172 	bne.w	8008500 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008222:	3301      	adds	r3, #1
 8008224:	b2da      	uxtb	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008232:	2b03      	cmp	r3, #3
 8008234:	d903      	bls.n	800823e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	220d      	movs	r2, #13
 800823a:	701a      	strb	r2, [r3, #0]
      break;
 800823c:	e160      	b.n	8008500 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	795b      	ldrb	r3, [r3, #5]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 ff99 	bl	800917c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	791b      	ldrb	r3, [r3, #4]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 ff93 	bl	800917c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
      break;
 800825c:	e150      	b.n	8008500 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800825e:	2112      	movs	r1, #18
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f9f1 	bl	8008648 <USBH_Get_DevDesc>
 8008266:	4603      	mov	r3, r0
 8008268:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008276:	e145      	b.n	8008504 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b03      	cmp	r3, #3
 800827c:	f040 8142 	bne.w	8008504 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008286:	3301      	adds	r3, #1
 8008288:	b2da      	uxtb	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008296:	2b03      	cmp	r3, #3
 8008298:	d903      	bls.n	80082a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	220d      	movs	r2, #13
 800829e:	701a      	strb	r2, [r3, #0]
      break;
 80082a0:	e130      	b.n	8008504 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	795b      	ldrb	r3, [r3, #5]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 ff67 	bl	800917c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 ff61 	bl	800917c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	701a      	strb	r2, [r3, #0]
      break;
 80082c6:	e11d      	b.n	8008504 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082c8:	2101      	movs	r1, #1
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa68 	bl	80087a0 <USBH_SetAddress>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d132      	bne.n	8008340 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082da:	2002      	movs	r0, #2
 80082dc:	f001 ff8c 	bl	800a1f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2203      	movs	r2, #3
 80082ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7919      	ldrb	r1, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008302:	b292      	uxth	r2, r2
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	2200      	movs	r2, #0
 8008308:	9201      	str	r2, [sp, #4]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4603      	mov	r3, r0
 800830e:	2280      	movs	r2, #128	; 0x80
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fee3 	bl	80090dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7959      	ldrb	r1, [r3, #5]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800832a:	b292      	uxth	r2, r2
 800832c:	9202      	str	r2, [sp, #8]
 800832e:	2200      	movs	r2, #0
 8008330:	9201      	str	r2, [sp, #4]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	4603      	mov	r3, r0
 8008336:	2200      	movs	r2, #0
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fecf 	bl	80090dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800833e:	e0e3      	b.n	8008508 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b03      	cmp	r3, #3
 8008344:	f040 80e0 	bne.w	8008508 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	220d      	movs	r2, #13
 800834c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	705a      	strb	r2, [r3, #1]
      break;
 8008354:	e0d8      	b.n	8008508 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008356:	2109      	movs	r1, #9
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f99d 	bl	8008698 <USBH_Get_CfgDesc>
 800835e:	4603      	mov	r3, r0
 8008360:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2204      	movs	r2, #4
 800836c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800836e:	e0cd      	b.n	800850c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2b03      	cmp	r3, #3
 8008374:	f040 80ca 	bne.w	800850c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800837e:	3301      	adds	r3, #1
 8008380:	b2da      	uxtb	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800838e:	2b03      	cmp	r3, #3
 8008390:	d903      	bls.n	800839a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	220d      	movs	r2, #13
 8008396:	701a      	strb	r2, [r3, #0]
      break;
 8008398:	e0b8      	b.n	800850c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	795b      	ldrb	r3, [r3, #5]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 feeb 	bl	800917c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	791b      	ldrb	r3, [r3, #4]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fee5 	bl	800917c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
      break;
 80083be:	e0a5      	b.n	800850c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f965 	bl	8008698 <USBH_Get_CfgDesc>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2205      	movs	r2, #5
 80083dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083de:	e097      	b.n	8008510 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	f040 8094 	bne.w	8008510 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ee:	3301      	adds	r3, #1
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d903      	bls.n	800840a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	220d      	movs	r2, #13
 8008406:	701a      	strb	r2, [r3, #0]
      break;
 8008408:	e082      	b.n	8008510 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	795b      	ldrb	r3, [r3, #5]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 feb3 	bl	800917c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	791b      	ldrb	r3, [r3, #4]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fead 	bl	800917c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
      break;
 800842e:	e06f      	b.n	8008510 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008436:	2b00      	cmp	r3, #0
 8008438:	d019      	beq.n	800846e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008446:	23ff      	movs	r3, #255	; 0xff
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f949 	bl	80086e0 <USBH_Get_StringDesc>
 800844e:	4603      	mov	r3, r0
 8008450:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2206      	movs	r2, #6
 800845c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800845e:	e059      	b.n	8008514 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	2b03      	cmp	r3, #3
 8008464:	d156      	bne.n	8008514 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2206      	movs	r2, #6
 800846a:	705a      	strb	r2, [r3, #1]
      break;
 800846c:	e052      	b.n	8008514 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2206      	movs	r2, #6
 8008472:	705a      	strb	r2, [r3, #1]
      break;
 8008474:	e04e      	b.n	8008514 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800847c:	2b00      	cmp	r3, #0
 800847e:	d019      	beq.n	80084b4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800848c:	23ff      	movs	r3, #255	; 0xff
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f926 	bl	80086e0 <USBH_Get_StringDesc>
 8008494:	4603      	mov	r3, r0
 8008496:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d103      	bne.n	80084a6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2207      	movs	r2, #7
 80084a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80084a4:	e038      	b.n	8008518 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d135      	bne.n	8008518 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2207      	movs	r2, #7
 80084b0:	705a      	strb	r2, [r3, #1]
      break;
 80084b2:	e031      	b.n	8008518 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2207      	movs	r2, #7
 80084b8:	705a      	strb	r2, [r3, #1]
      break;
 80084ba:	e02d      	b.n	8008518 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d017      	beq.n	80084f6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084d2:	23ff      	movs	r3, #255	; 0xff
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f903 	bl	80086e0 <USBH_Get_StringDesc>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084e8:	e018      	b.n	800851c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d115      	bne.n	800851c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
      break;
 80084f4:	e012      	b.n	800851c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
      break;
 80084fa:	e00f      	b.n	800851c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80084fc:	bf00      	nop
 80084fe:	e00e      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 8008500:	bf00      	nop
 8008502:	e00c      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 8008504:	bf00      	nop
 8008506:	e00a      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 8008508:	bf00      	nop
 800850a:	e008      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 800850c:	bf00      	nop
 800850e:	e006      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 8008510:	bf00      	nop
 8008512:	e004      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <USBH_HandleEnum+0x3be>
      break;
 800851c:	bf00      	nop
  }
  return Status;
 800851e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f804 	bl	800856a <USBH_HandleSof>
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b0b      	cmp	r3, #11
 800857a:	d10a      	bne.n	8008592 <USBH_HandleSof+0x28>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
  }
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80085aa:	bf00      	nop
}
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80085c6:	bf00      	nop
}
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 fc6c 	bl	8009efe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	791b      	ldrb	r3, [r3, #4]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fda5 	bl	800917c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	795b      	ldrb	r3, [r3, #5]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fd9f 	bl	800917c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af02      	add	r7, sp, #8
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	b29b      	uxth	r3, r3
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	4613      	mov	r3, r2
 8008662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008666:	2100      	movs	r1, #0
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f864 	bl	8008736 <USBH_GetDescriptor>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	b292      	uxth	r2, r2
 8008688:	4619      	mov	r1, r3
 800868a:	f000 f918 	bl	80088be <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af02      	add	r7, sp, #8
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	331c      	adds	r3, #28
 80086a8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80086aa:	887b      	ldrh	r3, [r7, #2]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086b4:	2100      	movs	r1, #0
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f83d 	bl	8008736 <USBH_GetDescriptor>
 80086bc:	4603      	mov	r3, r0
 80086be:	72fb      	strb	r3, [r7, #11]
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d107      	bne.n	80086d6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80086cc:	887a      	ldrh	r2, [r7, #2]
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 f964 	bl	800899e <USBH_ParseCfgDesc>
  }

  return status;
 80086d6:	7afb      	ldrb	r3, [r7, #11]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	607a      	str	r2, [r7, #4]
 80086ea:	461a      	mov	r2, r3
 80086ec:	460b      	mov	r3, r1
 80086ee:	72fb      	strb	r3, [r7, #11]
 80086f0:	4613      	mov	r3, r2
 80086f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086fc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008704:	893b      	ldrh	r3, [r7, #8]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	460b      	mov	r3, r1
 800870a:	2100      	movs	r1, #0
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 f812 	bl	8008736 <USBH_GetDescriptor>
 8008712:	4603      	mov	r3, r0
 8008714:	75fb      	strb	r3, [r7, #23]
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d107      	bne.n	800872c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008722:	893a      	ldrh	r2, [r7, #8]
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fa37 	bl	8008b9a <USBH_ParseStringDesc>
  }

  return status;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	607b      	str	r3, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	72fb      	strb	r3, [r7, #11]
 8008744:	4613      	mov	r3, r2
 8008746:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	789b      	ldrb	r3, [r3, #2]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d11c      	bne.n	800878a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008750:	7afb      	ldrb	r3, [r7, #11]
 8008752:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008756:	b2da      	uxtb	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2206      	movs	r2, #6
 8008760:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	893a      	ldrh	r2, [r7, #8]
 8008766:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008768:	893b      	ldrh	r3, [r7, #8]
 800876a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800876e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008772:	d104      	bne.n	800877e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f240 4209 	movw	r2, #1033	; 0x409
 800877a:	829a      	strh	r2, [r3, #20]
 800877c:	e002      	b.n	8008784 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8b3a      	ldrh	r2, [r7, #24]
 8008788:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800878a:	8b3b      	ldrh	r3, [r7, #24]
 800878c:	461a      	mov	r2, r3
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fa50 	bl	8008c36 <USBH_CtlReq>
 8008796:	4603      	mov	r3, r0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	789b      	ldrb	r3, [r3, #2]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d10f      	bne.n	80087d4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2205      	movs	r2, #5
 80087be:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087d4:	2200      	movs	r2, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fa2c 	bl	8008c36 <USBH_CtlReq>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	789b      	ldrb	r3, [r3, #2]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d10e      	bne.n	800881a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2209      	movs	r2, #9
 8008806:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	887a      	ldrh	r2, [r7, #2]
 800880c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa09 	bl	8008c36 <USBH_CtlReq>
 8008824:	4603      	mov	r3, r0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	460b      	mov	r3, r1
 8008838:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	789b      	ldrb	r3, [r3, #2]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d10f      	bne.n	8008862 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2203      	movs	r2, #3
 800884c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	b29a      	uxth	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f9e5 	bl	8008c36 <USBH_CtlReq>
 800886c:	4603      	mov	r3, r0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	789b      	ldrb	r3, [r3, #2]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10f      	bne.n	80088aa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2202      	movs	r2, #2
 800888e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f9c1 	bl	8008c36 <USBH_CtlReq>
 80088b4:	4603      	mov	r3, r0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80088be:	b480      	push	{r7}
 80088c0:	b085      	sub	sp, #20
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	4613      	mov	r3, r2
 80088ca:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	781a      	ldrb	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	785a      	ldrb	r2, [r3, #1]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	3302      	adds	r3, #2
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3303      	adds	r3, #3
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	4313      	orrs	r3, r2
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	791a      	ldrb	r2, [r3, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	795a      	ldrb	r2, [r3, #5]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	799a      	ldrb	r2, [r3, #6]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	79da      	ldrb	r2, [r3, #7]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	2b08      	cmp	r3, #8
 800891c:	d939      	bls.n	8008992 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	3308      	adds	r3, #8
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b29a      	uxth	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3309      	adds	r3, #9
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	b29b      	uxth	r3, r3
 8008932:	4313      	orrs	r3, r2
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	330a      	adds	r3, #10
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	b29a      	uxth	r2, r3
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	330b      	adds	r3, #11
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	b29b      	uxth	r3, r3
 800894e:	4313      	orrs	r3, r2
 8008950:	b29a      	uxth	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	330c      	adds	r3, #12
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	b29a      	uxth	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	330d      	adds	r3, #13
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b29b      	uxth	r3, r3
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	4313      	orrs	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	7b9a      	ldrb	r2, [r3, #14]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	7bda      	ldrb	r2, [r3, #15]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	7c1a      	ldrb	r2, [r3, #16]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	7c5a      	ldrb	r2, [r3, #17]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	745a      	strb	r2, [r3, #17]
  }
}
 8008992:	bf00      	nop
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b08a      	sub	sp, #40	; 0x28
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	4613      	mov	r3, r2
 80089aa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	781a      	ldrb	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	785a      	ldrb	r2, [r3, #1]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	3302      	adds	r3, #2
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	3303      	adds	r3, #3
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	4313      	orrs	r3, r2
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	791a      	ldrb	r2, [r3, #4]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	795a      	ldrb	r2, [r3, #5]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	799a      	ldrb	r2, [r3, #6]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	79da      	ldrb	r2, [r3, #7]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	7a1a      	ldrb	r2, [r3, #8]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	2b09      	cmp	r3, #9
 8008a18:	d95f      	bls.n	8008ada <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a1a:	2309      	movs	r3, #9
 8008a1c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a22:	e051      	b.n	8008ac8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a24:	f107 0316 	add.w	r3, r7, #22
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a2c:	f000 f8e8 	bl	8008c00 <USBH_GetNextDesc>
 8008a30:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d146      	bne.n	8008ac8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a3e:	221a      	movs	r2, #26
 8008a40:	fb02 f303 	mul.w	r3, r2, r3
 8008a44:	3308      	adds	r3, #8
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	3302      	adds	r3, #2
 8008a4c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a50:	69f8      	ldr	r0, [r7, #28]
 8008a52:	f000 f846 	bl	8008ae2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a60:	e022      	b.n	8008aa8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a62:	f107 0316 	add.w	r3, r7, #22
 8008a66:	4619      	mov	r1, r3
 8008a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a6a:	f000 f8c9 	bl	8008c00 <USBH_GetNextDesc>
 8008a6e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b05      	cmp	r3, #5
 8008a76:	d117      	bne.n	8008aa8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a80:	3201      	adds	r2, #1
 8008a82:	00d2      	lsls	r2, r2, #3
 8008a84:	211a      	movs	r1, #26
 8008a86:	fb01 f303 	mul.w	r3, r1, r3
 8008a8a:	4413      	add	r3, r2
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	3304      	adds	r3, #4
 8008a94:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a98:	69b8      	ldr	r0, [r7, #24]
 8008a9a:	f000 f851 	bl	8008b40 <USBH_ParseEPDesc>
            ep_ix++;
 8008a9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	791b      	ldrb	r3, [r3, #4]
 8008aac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d204      	bcs.n	8008abe <USBH_ParseCfgDesc+0x120>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	885a      	ldrh	r2, [r3, #2]
 8008ab8:	8afb      	ldrh	r3, [r7, #22]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d8d1      	bhi.n	8008a62 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d804      	bhi.n	8008ada <USBH_ParseCfgDesc+0x13c>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	885a      	ldrh	r2, [r3, #2]
 8008ad4:	8afb      	ldrh	r3, [r7, #22]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d8a4      	bhi.n	8008a24 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008ada:	bf00      	nop
 8008adc:	3728      	adds	r7, #40	; 0x28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	785a      	ldrb	r2, [r3, #1]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	789a      	ldrb	r2, [r3, #2]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	78da      	ldrb	r2, [r3, #3]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	791a      	ldrb	r2, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	795a      	ldrb	r2, [r3, #5]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	799a      	ldrb	r2, [r3, #6]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	79da      	ldrb	r2, [r3, #7]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	7a1a      	ldrb	r2, [r3, #8]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	721a      	strb	r2, [r3, #8]
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781a      	ldrb	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	785a      	ldrb	r2, [r3, #1]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	789a      	ldrb	r2, [r3, #2]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	78da      	ldrb	r2, [r3, #3]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	3305      	adds	r3, #5
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	799a      	ldrb	r2, [r3, #6]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	719a      	strb	r2, [r3, #6]
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b087      	sub	sp, #28
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d120      	bne.n	8008bf4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	1e9a      	subs	r2, r3, #2
 8008bb8:	88fb      	ldrh	r3, [r7, #6]
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bf28      	it	cs
 8008bbe:	4613      	movcs	r3, r2
 8008bc0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	82fb      	strh	r3, [r7, #22]
 8008bcc:	e00b      	b.n	8008be6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008bce:	8afb      	ldrh	r3, [r7, #22]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008be0:	8afb      	ldrh	r3, [r7, #22]
 8008be2:	3302      	adds	r3, #2
 8008be4:	82fb      	strh	r3, [r7, #22]
 8008be6:	8afa      	ldrh	r2, [r7, #22]
 8008be8:	8abb      	ldrh	r3, [r7, #20]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d3ef      	bcc.n	8008bce <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	881a      	ldrh	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	4413      	add	r3, r2
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c28:	68fb      	ldr	r3, [r7, #12]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	4613      	mov	r3, r2
 8008c42:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c44:	2301      	movs	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	789b      	ldrb	r3, [r3, #2]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d002      	beq.n	8008c56 <USBH_CtlReq+0x20>
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d00f      	beq.n	8008c74 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c54:	e027      	b.n	8008ca6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	88fa      	ldrh	r2, [r7, #6]
 8008c60:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]
      break;
 8008c72:	e018      	b.n	8008ca6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f81b 	bl	8008cb0 <USBH_HandleControl>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <USBH_CtlReq+0x54>
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d106      	bne.n	8008c98 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	761a      	strb	r2, [r3, #24]
      break;
 8008c96:	e005      	b.n	8008ca4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d102      	bne.n	8008ca4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	709a      	strb	r2, [r3, #2]
      break;
 8008ca4:	bf00      	nop
  }
  return status;
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	7e1b      	ldrb	r3, [r3, #24]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	2b0a      	cmp	r3, #10
 8008cc8:	f200 8158 	bhi.w	8008f7c <USBH_HandleControl+0x2cc>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <USBH_HandleControl+0x24>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d1b 	.word	0x08008d1b
 8008cdc:	08008d85 	.word	0x08008d85
 8008ce0:	08008dab 	.word	0x08008dab
 8008ce4:	08008de3 	.word	0x08008de3
 8008ce8:	08008e0f 	.word	0x08008e0f
 8008cec:	08008e61 	.word	0x08008e61
 8008cf0:	08008e83 	.word	0x08008e83
 8008cf4:	08008ebf 	.word	0x08008ebf
 8008cf8:	08008ee7 	.word	0x08008ee7
 8008cfc:	08008f25 	.word	0x08008f25
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f103 0110 	add.w	r1, r3, #16
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	795b      	ldrb	r3, [r3, #5]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f945 	bl	8008f9c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	761a      	strb	r2, [r3, #24]
      break;
 8008d18:	e13b      	b.n	8008f92 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	795b      	ldrb	r3, [r3, #5]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f9d9 	bl	800a0d8 <USBH_LL_GetURBState>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d11e      	bne.n	8008d6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	7c1b      	ldrb	r3, [r3, #16]
 8008d34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8adb      	ldrh	r3, [r3, #22]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d42:	7b7b      	ldrb	r3, [r7, #13]
 8008d44:	2b80      	cmp	r3, #128	; 0x80
 8008d46:	d103      	bne.n	8008d50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d4e:	e117      	b.n	8008f80 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2205      	movs	r2, #5
 8008d54:	761a      	strb	r2, [r3, #24]
      break;
 8008d56:	e113      	b.n	8008f80 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008d58:	7b7b      	ldrb	r3, [r7, #13]
 8008d5a:	2b80      	cmp	r3, #128	; 0x80
 8008d5c:	d103      	bne.n	8008d66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2209      	movs	r2, #9
 8008d62:	761a      	strb	r2, [r3, #24]
      break;
 8008d64:	e10c      	b.n	8008f80 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2207      	movs	r2, #7
 8008d6a:	761a      	strb	r2, [r3, #24]
      break;
 8008d6c:	e108      	b.n	8008f80 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d003      	beq.n	8008d7c <USBH_HandleControl+0xcc>
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	f040 8102 	bne.w	8008f80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	220b      	movs	r2, #11
 8008d80:	761a      	strb	r2, [r3, #24]
      break;
 8008d82:	e0fd      	b.n	8008f80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6899      	ldr	r1, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	899a      	ldrh	r2, [r3, #12]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	791b      	ldrb	r3, [r3, #4]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f93c 	bl	800901a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2204      	movs	r2, #4
 8008da6:	761a      	strb	r2, [r3, #24]
      break;
 8008da8:	e0f3      	b.n	8008f92 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	791b      	ldrb	r3, [r3, #4]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 f991 	bl	800a0d8 <USBH_LL_GetURBState>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d102      	bne.n	8008dc6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2209      	movs	r2, #9
 8008dc4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	2b05      	cmp	r3, #5
 8008dca:	d102      	bne.n	8008dd2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008dd0:	e0d8      	b.n	8008f84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	f040 80d5 	bne.w	8008f84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	220b      	movs	r2, #11
 8008dde:	761a      	strb	r2, [r3, #24]
      break;
 8008de0:	e0d0      	b.n	8008f84 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6899      	ldr	r1, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	899a      	ldrh	r2, [r3, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	7958      	ldrb	r0, [r3, #5]
 8008dee:	2301      	movs	r3, #1
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	4603      	mov	r3, r0
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f8eb 	bl	8008fd0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2206      	movs	r2, #6
 8008e0a:	761a      	strb	r2, [r3, #24]
      break;
 8008e0c:	e0c1      	b.n	8008f92 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	795b      	ldrb	r3, [r3, #5]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f95f 	bl	800a0d8 <USBH_LL_GetURBState>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d103      	bne.n	8008e2c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2207      	movs	r2, #7
 8008e28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e2a:	e0ad      	b.n	8008f88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b05      	cmp	r3, #5
 8008e30:	d105      	bne.n	8008e3e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	220c      	movs	r2, #12
 8008e36:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	e0a4      	b.n	8008f88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d103      	bne.n	8008e4c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2205      	movs	r2, #5
 8008e48:	761a      	strb	r2, [r3, #24]
      break;
 8008e4a:	e09d      	b.n	8008f88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	f040 809a 	bne.w	8008f88 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	220b      	movs	r2, #11
 8008e58:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e5e:	e093      	b.n	8008f88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	791b      	ldrb	r3, [r3, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f8d6 	bl	800901a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	761a      	strb	r2, [r3, #24]

      break;
 8008e80:	e087      	b.n	8008f92 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	791b      	ldrb	r3, [r3, #4]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f925 	bl	800a0d8 <USBH_LL_GetURBState>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d105      	bne.n	8008ea4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	220d      	movs	r2, #13
 8008e9c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ea2:	e073      	b.n	8008f8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	d103      	bne.n	8008eb2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	220b      	movs	r2, #11
 8008eae:	761a      	strb	r2, [r3, #24]
      break;
 8008eb0:	e06c      	b.n	8008f8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d169      	bne.n	8008f8c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]
      break;
 8008ebc:	e066      	b.n	8008f8c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	795a      	ldrb	r2, [r3, #5]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2100      	movs	r1, #0
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f87f 	bl	8008fd0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	761a      	strb	r2, [r3, #24]
      break;
 8008ee4:	e055      	b.n	8008f92 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	795b      	ldrb	r3, [r3, #5]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f8f3 	bl	800a0d8 <USBH_LL_GetURBState>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d105      	bne.n	8008f08 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	220d      	movs	r2, #13
 8008f04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f06:	e043      	b.n	8008f90 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d103      	bne.n	8008f16 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2209      	movs	r2, #9
 8008f12:	761a      	strb	r2, [r3, #24]
      break;
 8008f14:	e03c      	b.n	8008f90 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d139      	bne.n	8008f90 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	220b      	movs	r2, #11
 8008f20:	761a      	strb	r2, [r3, #24]
      break;
 8008f22:	e035      	b.n	8008f90 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7e5b      	ldrb	r3, [r3, #25]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	765a      	strb	r2, [r3, #25]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7e5b      	ldrb	r3, [r3, #25]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d806      	bhi.n	8008f46 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f44:	e025      	b.n	8008f92 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f4c:	2106      	movs	r1, #6
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	795b      	ldrb	r3, [r3, #5]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f90c 	bl	800917c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	791b      	ldrb	r3, [r3, #4]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f906 	bl	800917c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]
      break;
 8008f7a:	e00a      	b.n	8008f92 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e008      	b.n	8008f92 <USBH_HandleControl+0x2e2>
      break;
 8008f80:	bf00      	nop
 8008f82:	e006      	b.n	8008f92 <USBH_HandleControl+0x2e2>
      break;
 8008f84:	bf00      	nop
 8008f86:	e004      	b.n	8008f92 <USBH_HandleControl+0x2e2>
      break;
 8008f88:	bf00      	nop
 8008f8a:	e002      	b.n	8008f92 <USBH_HandleControl+0x2e2>
      break;
 8008f8c:	bf00      	nop
 8008f8e:	e000      	b.n	8008f92 <USBH_HandleControl+0x2e2>
      break;
 8008f90:	bf00      	nop
  }

  return status;
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af04      	add	r7, sp, #16
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008faa:	79f9      	ldrb	r1, [r7, #7]
 8008fac:	2300      	movs	r3, #0
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f001 f858 	bl	800a076 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af04      	add	r7, sp, #16
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4611      	mov	r1, r2
 8008fdc:	461a      	mov	r2, r3
 8008fde:	460b      	mov	r3, r1
 8008fe0:	80fb      	strh	r3, [r7, #6]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ff4:	7979      	ldrb	r1, [r7, #5]
 8008ff6:	7e3b      	ldrb	r3, [r7, #24]
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	88fb      	ldrh	r3, [r7, #6]
 8008ffc:	9302      	str	r3, [sp, #8]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	2301      	movs	r3, #1
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	2300      	movs	r3, #0
 8009008:	2200      	movs	r2, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f001 f833 	bl	800a076 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b088      	sub	sp, #32
 800901e:	af04      	add	r7, sp, #16
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	4611      	mov	r1, r2
 8009026:	461a      	mov	r2, r3
 8009028:	460b      	mov	r3, r1
 800902a:	80fb      	strh	r3, [r7, #6]
 800902c:	4613      	mov	r3, r2
 800902e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009030:	7979      	ldrb	r1, [r7, #5]
 8009032:	2300      	movs	r3, #0
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	9302      	str	r3, [sp, #8]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	2301      	movs	r3, #1
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	2300      	movs	r3, #0
 8009044:	2201      	movs	r2, #1
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f001 f815 	bl	800a076 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800904c:	2300      	movs	r3, #0

}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b088      	sub	sp, #32
 800905a:	af04      	add	r7, sp, #16
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	4611      	mov	r1, r2
 8009062:	461a      	mov	r2, r3
 8009064:	460b      	mov	r3, r1
 8009066:	80fb      	strh	r3, [r7, #6]
 8009068:	4613      	mov	r3, r2
 800906a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800907a:	7979      	ldrb	r1, [r7, #5]
 800907c:	7e3b      	ldrb	r3, [r7, #24]
 800907e:	9303      	str	r3, [sp, #12]
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	9302      	str	r3, [sp, #8]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2301      	movs	r3, #1
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2302      	movs	r3, #2
 800908e:	2200      	movs	r2, #0
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fff0 	bl	800a076 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af04      	add	r7, sp, #16
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4611      	mov	r1, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	460b      	mov	r3, r1
 80090b0:	80fb      	strh	r3, [r7, #6]
 80090b2:	4613      	mov	r3, r2
 80090b4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80090b6:	7979      	ldrb	r1, [r7, #5]
 80090b8:	2300      	movs	r3, #0
 80090ba:	9303      	str	r3, [sp, #12]
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	2301      	movs	r3, #1
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	2302      	movs	r3, #2
 80090ca:	2201      	movs	r2, #1
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 ffd2 	bl	800a076 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af04      	add	r7, sp, #16
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	461a      	mov	r2, r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	70fb      	strb	r3, [r7, #3]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70bb      	strb	r3, [r7, #2]
 80090f2:	4613      	mov	r3, r2
 80090f4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090f6:	7878      	ldrb	r0, [r7, #1]
 80090f8:	78ba      	ldrb	r2, [r7, #2]
 80090fa:	78f9      	ldrb	r1, [r7, #3]
 80090fc:	8b3b      	ldrh	r3, [r7, #24]
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	7d3b      	ldrb	r3, [r7, #20]
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	7c3b      	ldrb	r3, [r7, #16]
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	4603      	mov	r3, r0
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 ff65 	bl	8009fda <USBH_LL_OpenPipe>

  return USBH_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 ff84 	bl	800a038 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f836 	bl	80091b8 <USBH_GetFreePipe>
 800914c:	4603      	mov	r3, r0
 800914e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009150:	89fb      	ldrh	r3, [r7, #14]
 8009152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009156:	4293      	cmp	r3, r2
 8009158:	d00a      	beq.n	8009170 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	89fb      	ldrh	r3, [r7, #14]
 800915e:	f003 030f 	and.w	r3, r3, #15
 8009162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	33e0      	adds	r3, #224	; 0xe0
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009170:	89fb      	ldrh	r3, [r7, #14]
 8009172:	b2db      	uxtb	r3, r3
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	2b0a      	cmp	r3, #10
 800918c:	d80d      	bhi.n	80091aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	33e0      	adds	r3, #224	; 0xe0
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	33e0      	adds	r3, #224	; 0xe0
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
 80091c8:	e00f      	b.n	80091ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	33e0      	adds	r3, #224	; 0xe0
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	e007      	b.n	80091f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	3301      	adds	r3, #1
 80091e8:	73fb      	strb	r3, [r7, #15]
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b0a      	cmp	r3, #10
 80091ee:	d9ec      	bls.n	80091ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	4a08      	ldr	r2, [pc, #32]	; (8009230 <disk_status+0x30>)
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	79fa      	ldrb	r2, [r7, #7]
 8009218:	4905      	ldr	r1, [pc, #20]	; (8009230 <disk_status+0x30>)
 800921a:	440a      	add	r2, r1
 800921c:	7a12      	ldrb	r2, [r2, #8]
 800921e:	4610      	mov	r0, r2
 8009220:	4798      	blx	r3
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20000544 	.word	0x20000544

08009234 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	4a0d      	ldr	r2, [pc, #52]	; (800927c <disk_initialize+0x48>)
 8009246:	5cd3      	ldrb	r3, [r2, r3]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d111      	bne.n	8009270 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	4a0b      	ldr	r2, [pc, #44]	; (800927c <disk_initialize+0x48>)
 8009250:	2101      	movs	r1, #1
 8009252:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	4a09      	ldr	r2, [pc, #36]	; (800927c <disk_initialize+0x48>)
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	79fa      	ldrb	r2, [r7, #7]
 8009262:	4906      	ldr	r1, [pc, #24]	; (800927c <disk_initialize+0x48>)
 8009264:	440a      	add	r2, r1
 8009266:	7a12      	ldrb	r2, [r2, #8]
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000544 	.word	0x20000544

08009280 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <disk_read+0x3c>)
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	689c      	ldr	r4, [r3, #8]
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	4a07      	ldr	r2, [pc, #28]	; (80092bc <disk_read+0x3c>)
 80092a0:	4413      	add	r3, r2
 80092a2:	7a18      	ldrb	r0, [r3, #8]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	47a0      	blx	r4
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd90      	pop	{r4, r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000544 	.word	0x20000544

080092c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <disk_write+0x3c>)
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	68dc      	ldr	r4, [r3, #12]
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	4a07      	ldr	r2, [pc, #28]	; (80092fc <disk_write+0x3c>)
 80092e0:	4413      	add	r3, r2
 80092e2:	7a18      	ldrb	r0, [r3, #8]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	47a0      	blx	r4
 80092ec:	4603      	mov	r3, r0
 80092ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd90      	pop	{r4, r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000544 	.word	0x20000544

08009300 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3301      	adds	r3, #1
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009310:	89fb      	ldrh	r3, [r7, #14]
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	b21a      	sxth	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	b21b      	sxth	r3, r3
 800931c:	4313      	orrs	r3, r2
 800931e:	b21b      	sxth	r3, r3
 8009320:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009322:	89fb      	ldrh	r3, [r7, #14]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3303      	adds	r3, #3
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	3202      	adds	r2, #2
 8009348:	7812      	ldrb	r2, [r2, #0]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	021b      	lsls	r3, r3, #8
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	3201      	adds	r2, #1
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	4313      	orrs	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	4313      	orrs	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
	return rv;
 8009368:	68fb      	ldr	r3, [r7, #12]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
	...

08009378 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	e010      	b.n	80093a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009386:	4a0d      	ldr	r2, [pc, #52]	; (80093bc <clear_lock+0x44>)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	4413      	add	r3, r2
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	429a      	cmp	r2, r3
 8009394:	d105      	bne.n	80093a2 <clear_lock+0x2a>
 8009396:	4a09      	ldr	r2, [pc, #36]	; (80093bc <clear_lock+0x44>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	4413      	add	r3, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d9eb      	bls.n	8009386 <clear_lock+0xe>
	}
}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000524 	.word	0x20000524

080093c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	78db      	ldrb	r3, [r3, #3]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d034      	beq.n	800943e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	7858      	ldrb	r0, [r3, #1]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093e4:	2301      	movs	r3, #1
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	f7ff ff6a 	bl	80092c0 <disk_write>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	73fb      	strb	r3, [r7, #15]
 80093f6:	e022      	b.n	800943e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	1ad2      	subs	r2, r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	429a      	cmp	r2, r3
 800940c:	d217      	bcs.n	800943e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	789b      	ldrb	r3, [r3, #2]
 8009412:	613b      	str	r3, [r7, #16]
 8009414:	e010      	b.n	8009438 <sync_window+0x78>
					wsect += fs->fsize;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4413      	add	r3, r2
 800941e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	7858      	ldrb	r0, [r3, #1]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800942a:	2301      	movs	r3, #1
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	f7ff ff47 	bl	80092c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	3b01      	subs	r3, #1
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d8eb      	bhi.n	8009416 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d01b      	beq.n	8009498 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff ffad 	bl	80093c0 <sync_window>
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d113      	bne.n	8009498 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7858      	ldrb	r0, [r3, #1]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800947a:	2301      	movs	r3, #1
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	f7ff feff 	bl	8009280 <disk_read>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d004      	beq.n	8009492 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009488:	f04f 33ff 	mov.w	r3, #4294967295
 800948c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800948e:	2301      	movs	r3, #1
 8009490:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b087      	sub	sp, #28
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80094aa:	f04f 33ff 	mov.w	r3, #4294967295
 80094ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d031      	beq.n	800951c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	e002      	b.n	80094c6 <get_ldnumber+0x24>
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	3301      	adds	r3, #1
 80094c4:	617b      	str	r3, [r7, #20]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	d903      	bls.n	80094d6 <get_ldnumber+0x34>
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b3a      	cmp	r3, #58	; 0x3a
 80094d4:	d1f4      	bne.n	80094c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	2b3a      	cmp	r3, #58	; 0x3a
 80094dc:	d11c      	bne.n	8009518 <get_ldnumber+0x76>
			tp = *path;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	60fa      	str	r2, [r7, #12]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	3b30      	subs	r3, #48	; 0x30
 80094ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b09      	cmp	r3, #9
 80094f4:	d80e      	bhi.n	8009514 <get_ldnumber+0x72>
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d10a      	bne.n	8009514 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d107      	bne.n	8009514 <get_ldnumber+0x72>
					vol = (int)i;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	3301      	adds	r3, #1
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	e002      	b.n	800951e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800951c:	693b      	ldr	r3, [r7, #16]
}
 800951e:	4618      	mov	r0, r3
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
	...

0800952c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	70da      	strb	r2, [r3, #3]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f04f 32ff 	mov.w	r2, #4294967295
 8009542:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff ff7e 	bl	8009448 <move_window>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <check_fs+0x2a>
 8009552:	2304      	movs	r3, #4
 8009554:	e038      	b.n	80095c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3330      	adds	r3, #48	; 0x30
 800955a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff fece 	bl	8009300 <ld_word>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800956c:	429a      	cmp	r2, r3
 800956e:	d001      	beq.n	8009574 <check_fs+0x48>
 8009570:	2303      	movs	r3, #3
 8009572:	e029      	b.n	80095c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800957a:	2be9      	cmp	r3, #233	; 0xe9
 800957c:	d009      	beq.n	8009592 <check_fs+0x66>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009584:	2beb      	cmp	r3, #235	; 0xeb
 8009586:	d11e      	bne.n	80095c6 <check_fs+0x9a>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800958e:	2b90      	cmp	r3, #144	; 0x90
 8009590:	d119      	bne.n	80095c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3330      	adds	r3, #48	; 0x30
 8009596:	3336      	adds	r3, #54	; 0x36
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff fec9 	bl	8009330 <ld_dword>
 800959e:	4603      	mov	r3, r0
 80095a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095a4:	4a0a      	ldr	r2, [pc, #40]	; (80095d0 <check_fs+0xa4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d101      	bne.n	80095ae <check_fs+0x82>
 80095aa:	2300      	movs	r3, #0
 80095ac:	e00c      	b.n	80095c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3330      	adds	r3, #48	; 0x30
 80095b2:	3352      	adds	r3, #82	; 0x52
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff febb 	bl	8009330 <ld_dword>
 80095ba:	4602      	mov	r2, r0
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <check_fs+0xa8>)
 80095be:	429a      	cmp	r2, r3
 80095c0:	d101      	bne.n	80095c6 <check_fs+0x9a>
 80095c2:	2300      	movs	r3, #0
 80095c4:	e000      	b.n	80095c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80095c6:	2302      	movs	r3, #2
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	00544146 	.word	0x00544146
 80095d4:	33544146 	.word	0x33544146

080095d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b096      	sub	sp, #88	; 0x58
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	4613      	mov	r3, r2
 80095e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7ff ff58 	bl	80094a2 <get_ldnumber>
 80095f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	da01      	bge.n	80095fe <find_volume+0x26>
 80095fa:	230b      	movs	r3, #11
 80095fc:	e22e      	b.n	8009a5c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80095fe:	4aa8      	ldr	r2, [pc, #672]	; (80098a0 <find_volume+0x2c8>)
 8009600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009606:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <find_volume+0x3a>
 800960e:	230c      	movs	r3, #12
 8009610:	e224      	b.n	8009a5c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009616:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	f023 0301 	bic.w	r3, r3, #1
 800961e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01a      	beq.n	800965e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fde7 	bl	8009200 <disk_status>
 8009632:	4603      	mov	r3, r0
 8009634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10c      	bne.n	800965e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d007      	beq.n	800965a <find_volume+0x82>
 800964a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009656:	230a      	movs	r3, #10
 8009658:	e200      	b.n	8009a5c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800965a:	2300      	movs	r3, #0
 800965c:	e1fe      	b.n	8009a5c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009666:	b2da      	uxtb	r2, r3
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800966c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fddf 	bl	8009234 <disk_initialize>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800967c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009688:	2303      	movs	r3, #3
 800968a:	e1e7      	b.n	8009a5c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d007      	beq.n	80096a2 <find_volume+0xca>
 8009692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800969e:	230a      	movs	r3, #10
 80096a0:	e1dc      	b.n	8009a5c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80096a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096aa:	f7ff ff3f 	bl	800952c <check_fs>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80096b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d14b      	bne.n	8009754 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096bc:	2300      	movs	r3, #0
 80096be:	643b      	str	r3, [r7, #64]	; 0x40
 80096c0:	e01f      	b.n	8009702 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80096d0:	4413      	add	r3, r2
 80096d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	3304      	adds	r3, #4
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d006      	beq.n	80096ec <find_volume+0x114>
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	3308      	adds	r3, #8
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fe24 	bl	8009330 <ld_dword>
 80096e8:	4602      	mov	r2, r0
 80096ea:	e000      	b.n	80096ee <find_volume+0x116>
 80096ec:	2200      	movs	r2, #0
 80096ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80096f6:	440b      	add	r3, r1
 80096f8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096fe:	3301      	adds	r3, #1
 8009700:	643b      	str	r3, [r7, #64]	; 0x40
 8009702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009704:	2b03      	cmp	r3, #3
 8009706:	d9dc      	bls.n	80096c2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009708:	2300      	movs	r3, #0
 800970a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800970c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <find_volume+0x140>
 8009712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009714:	3b01      	subs	r3, #1
 8009716:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009720:	4413      	add	r3, r2
 8009722:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009726:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <find_volume+0x162>
 800972e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009732:	f7ff fefb 	bl	800952c <check_fs>
 8009736:	4603      	mov	r3, r0
 8009738:	e000      	b.n	800973c <find_volume+0x164>
 800973a:	2303      	movs	r3, #3
 800973c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009740:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009744:	2b01      	cmp	r3, #1
 8009746:	d905      	bls.n	8009754 <find_volume+0x17c>
 8009748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974a:	3301      	adds	r3, #1
 800974c:	643b      	str	r3, [r7, #64]	; 0x40
 800974e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009750:	2b03      	cmp	r3, #3
 8009752:	d9e1      	bls.n	8009718 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009758:	2b04      	cmp	r3, #4
 800975a:	d101      	bne.n	8009760 <find_volume+0x188>
 800975c:	2301      	movs	r3, #1
 800975e:	e17d      	b.n	8009a5c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009764:	2b01      	cmp	r3, #1
 8009766:	d901      	bls.n	800976c <find_volume+0x194>
 8009768:	230d      	movs	r3, #13
 800976a:	e177      	b.n	8009a5c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	3330      	adds	r3, #48	; 0x30
 8009770:	330b      	adds	r3, #11
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fdc4 	bl	8009300 <ld_word>
 8009778:	4603      	mov	r3, r0
 800977a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800977e:	d001      	beq.n	8009784 <find_volume+0x1ac>
 8009780:	230d      	movs	r3, #13
 8009782:	e16b      	b.n	8009a5c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	3330      	adds	r3, #48	; 0x30
 8009788:	3316      	adds	r3, #22
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff fdb8 	bl	8009300 <ld_word>
 8009790:	4603      	mov	r3, r0
 8009792:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <find_volume+0x1d0>
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	3330      	adds	r3, #48	; 0x30
 800979e:	3324      	adds	r3, #36	; 0x24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fdc5 	bl	8009330 <ld_dword>
 80097a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	789b      	ldrb	r3, [r3, #2]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d005      	beq.n	80097cc <find_volume+0x1f4>
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	789b      	ldrb	r3, [r3, #2]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d001      	beq.n	80097cc <find_volume+0x1f4>
 80097c8:	230d      	movs	r3, #13
 80097ca:	e147      	b.n	8009a5c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	789b      	ldrb	r3, [r3, #2]
 80097d0:	461a      	mov	r2, r3
 80097d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d4:	fb02 f303 	mul.w	r3, r2, r3
 80097d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	895b      	ldrh	r3, [r3, #10]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d008      	beq.n	8009800 <find_volume+0x228>
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	895b      	ldrh	r3, [r3, #10]
 80097f2:	461a      	mov	r2, r3
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	895b      	ldrh	r3, [r3, #10]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	4013      	ands	r3, r2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <find_volume+0x22c>
 8009800:	230d      	movs	r3, #13
 8009802:	e12b      	b.n	8009a5c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009806:	3330      	adds	r3, #48	; 0x30
 8009808:	3311      	adds	r3, #17
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fd78 	bl	8009300 <ld_word>
 8009810:	4603      	mov	r3, r0
 8009812:	461a      	mov	r2, r3
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	891b      	ldrh	r3, [r3, #8]
 800981c:	f003 030f 	and.w	r3, r3, #15
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <find_volume+0x252>
 8009826:	230d      	movs	r3, #13
 8009828:	e118      	b.n	8009a5c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	3330      	adds	r3, #48	; 0x30
 800982e:	3313      	adds	r3, #19
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff fd65 	bl	8009300 <ld_word>
 8009836:	4603      	mov	r3, r0
 8009838:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800983a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983c:	2b00      	cmp	r3, #0
 800983e:	d106      	bne.n	800984e <find_volume+0x276>
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	3330      	adds	r3, #48	; 0x30
 8009844:	3320      	adds	r3, #32
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fd72 	bl	8009330 <ld_dword>
 800984c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	3330      	adds	r3, #48	; 0x30
 8009852:	330e      	adds	r3, #14
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff fd53 	bl	8009300 <ld_word>
 800985a:	4603      	mov	r3, r0
 800985c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800985e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <find_volume+0x290>
 8009864:	230d      	movs	r3, #13
 8009866:	e0f9      	b.n	8009a5c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009868:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800986a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800986c:	4413      	add	r3, r2
 800986e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009870:	8912      	ldrh	r2, [r2, #8]
 8009872:	0912      	lsrs	r2, r2, #4
 8009874:	b292      	uxth	r2, r2
 8009876:	4413      	add	r3, r2
 8009878:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800987a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	429a      	cmp	r2, r3
 8009880:	d201      	bcs.n	8009886 <find_volume+0x2ae>
 8009882:	230d      	movs	r3, #13
 8009884:	e0ea      	b.n	8009a5c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800988e:	8952      	ldrh	r2, [r2, #10]
 8009890:	fbb3 f3f2 	udiv	r3, r3, r2
 8009894:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <find_volume+0x2cc>
 800989c:	230d      	movs	r3, #13
 800989e:	e0dd      	b.n	8009a5c <find_volume+0x484>
 80098a0:	2000051c 	.word	0x2000051c
		fmt = FS_FAT32;
 80098a4:	2303      	movs	r3, #3
 80098a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d802      	bhi.n	80098ba <find_volume+0x2e2>
 80098b4:	2302      	movs	r3, #2
 80098b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d802      	bhi.n	80098ca <find_volume+0x2f2>
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	1c9a      	adds	r2, r3, #2
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098d6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80098d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80098da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098dc:	441a      	add	r2, r3
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80098e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	441a      	add	r2, r3
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80098ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d11e      	bne.n	8009932 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	3330      	adds	r3, #48	; 0x30
 80098f8:	332a      	adds	r3, #42	; 0x2a
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff fd00 	bl	8009300 <ld_word>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <find_volume+0x332>
 8009906:	230d      	movs	r3, #13
 8009908:	e0a8      	b.n	8009a5c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	891b      	ldrh	r3, [r3, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <find_volume+0x33e>
 8009912:	230d      	movs	r3, #13
 8009914:	e0a2      	b.n	8009a5c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	3330      	adds	r3, #48	; 0x30
 800991a:	332c      	adds	r3, #44	; 0x2c
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fd07 	bl	8009330 <ld_dword>
 8009922:	4602      	mov	r2, r0
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	647b      	str	r3, [r7, #68]	; 0x44
 8009930:	e01f      	b.n	8009972 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	891b      	ldrh	r3, [r3, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <find_volume+0x366>
 800993a:	230d      	movs	r3, #13
 800993c:	e08e      	b.n	8009a5c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009944:	441a      	add	r2, r3
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800994a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800994e:	2b02      	cmp	r3, #2
 8009950:	d103      	bne.n	800995a <find_volume+0x382>
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	e00a      	b.n	8009970 <find_volume+0x398>
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	695a      	ldr	r2, [r3, #20]
 800995e:	4613      	mov	r3, r2
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	4413      	add	r3, r2
 8009964:	085a      	lsrs	r2, r3, #1
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009970:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	699a      	ldr	r2, [r3, #24]
 8009976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009978:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800997c:	0a5b      	lsrs	r3, r3, #9
 800997e:	429a      	cmp	r2, r3
 8009980:	d201      	bcs.n	8009986 <find_volume+0x3ae>
 8009982:	230d      	movs	r3, #13
 8009984:	e06a      	b.n	8009a5c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	f04f 32ff 	mov.w	r2, #4294967295
 800998c:	611a      	str	r2, [r3, #16]
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	2280      	movs	r2, #128	; 0x80
 800999a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800999c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d149      	bne.n	8009a38 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	3330      	adds	r3, #48	; 0x30
 80099a8:	3330      	adds	r3, #48	; 0x30
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fca8 	bl	8009300 <ld_word>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d140      	bne.n	8009a38 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80099b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b8:	3301      	adds	r3, #1
 80099ba:	4619      	mov	r1, r3
 80099bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099be:	f7ff fd43 	bl	8009448 <move_window>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d137      	bne.n	8009a38 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	2200      	movs	r2, #0
 80099cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	3330      	adds	r3, #48	; 0x30
 80099d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff fc92 	bl	8009300 <ld_word>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d127      	bne.n	8009a38 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	3330      	adds	r3, #48	; 0x30
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fc9f 	bl	8009330 <ld_dword>
 80099f2:	4602      	mov	r2, r0
 80099f4:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <find_volume+0x48c>)
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d11e      	bne.n	8009a38 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	3330      	adds	r3, #48	; 0x30
 80099fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7ff fc94 	bl	8009330 <ld_dword>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	4b17      	ldr	r3, [pc, #92]	; (8009a68 <find_volume+0x490>)
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d113      	bne.n	8009a38 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a12:	3330      	adds	r3, #48	; 0x30
 8009a14:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff fc89 	bl	8009330 <ld_dword>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	3330      	adds	r3, #48	; 0x30
 8009a28:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff fc7f 	bl	8009330 <ld_dword>
 8009a32:	4602      	mov	r2, r0
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009a3e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <find_volume+0x494>)
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	4b08      	ldr	r3, [pc, #32]	; (8009a6c <find_volume+0x494>)
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <find_volume+0x494>)
 8009a4e:	881a      	ldrh	r2, [r3, #0]
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a56:	f7ff fc8f 	bl	8009378 <clear_lock>
#endif
	return FR_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3758      	adds	r7, #88	; 0x58
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	41615252 	.word	0x41615252
 8009a68:	61417272 	.word	0x61417272
 8009a6c:	20000520 	.word	0x20000520

08009a70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a82:	f107 0310 	add.w	r3, r7, #16
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fd0b 	bl	80094a2 <get_ldnumber>
 8009a8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da01      	bge.n	8009a98 <f_mount+0x28>
 8009a94:	230b      	movs	r3, #11
 8009a96:	e02b      	b.n	8009af0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a98:	4a17      	ldr	r2, [pc, #92]	; (8009af8 <f_mount+0x88>)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d005      	beq.n	8009ab4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009aa8:	69b8      	ldr	r0, [r7, #24]
 8009aaa:	f7ff fc65 	bl	8009378 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	490d      	ldr	r1, [pc, #52]	; (8009af8 <f_mount+0x88>)
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <f_mount+0x66>
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d001      	beq.n	8009ada <f_mount+0x6a>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e00a      	b.n	8009af0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ada:	f107 010c 	add.w	r1, r7, #12
 8009ade:	f107 0308 	add.w	r3, r7, #8
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fd77 	bl	80095d8 <find_volume>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3720      	adds	r7, #32
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	2000051c 	.word	0x2000051c

08009afc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009b12:	4b1f      	ldr	r3, [pc, #124]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b14:	7a5b      	ldrb	r3, [r3, #9]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d131      	bne.n	8009b80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b1c:	4b1c      	ldr	r3, [pc, #112]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b1e:	7a5b      	ldrb	r3, [r3, #9]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	4b1a      	ldr	r3, [pc, #104]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b26:	2100      	movs	r1, #0
 8009b28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b2a:	4b19      	ldr	r3, [pc, #100]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b2c:	7a5b      	ldrb	r3, [r3, #9]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	4a17      	ldr	r2, [pc, #92]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009b3a:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b3c:	7a5b      	ldrb	r3, [r3, #9]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	4b13      	ldr	r3, [pc, #76]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b44:	4413      	add	r3, r2
 8009b46:	79fa      	ldrb	r2, [r7, #7]
 8009b48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b4a:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b4c:	7a5b      	ldrb	r3, [r3, #9]
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	b2d1      	uxtb	r1, r2
 8009b54:	4a0e      	ldr	r2, [pc, #56]	; (8009b90 <FATFS_LinkDriverEx+0x94>)
 8009b56:	7251      	strb	r1, [r2, #9]
 8009b58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b5a:	7dbb      	ldrb	r3, [r7, #22]
 8009b5c:	3330      	adds	r3, #48	; 0x30
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	3301      	adds	r3, #1
 8009b68:	223a      	movs	r2, #58	; 0x3a
 8009b6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	3302      	adds	r3, #2
 8009b70:	222f      	movs	r2, #47	; 0x2f
 8009b72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	3303      	adds	r3, #3
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20000544 	.word	0x20000544

08009b94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff ffaa 	bl	8009afc <FATFS_LinkDriverEx>
 8009ba8:	4603      	mov	r3, r0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <USB_Error_Handler>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USB_Error_Handler(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
 HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009bbe:	4802      	ldr	r0, [pc, #8]	; (8009bc8 <USB_Error_Handler+0x14>)
 8009bc0:	f7f8 faba 	bl	8002138 <HAL_GPIO_WritePin>
  while(1)
 8009bc4:	e7fe      	b.n	8009bc4 <USB_Error_Handler+0x10>
 8009bc6:	bf00      	nop
 8009bc8:	40020c00 	.word	0x40020c00

08009bcc <open_r>:
  /* Unlink the USB disk I/O driver */
  FATFS_UnLinkDriver(USBDISKPath);
  }
}

FILE* open_r(char* name){
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	if (flag_usb == 1){
 8009bd4:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <open_r+0x40>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d110      	bne.n	8009bfe <open_r+0x32>
	  /* Register the file system object to the FatFs module */
	  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	490c      	ldr	r1, [pc, #48]	; (8009c10 <open_r+0x44>)
 8009be0:	480c      	ldr	r0, [pc, #48]	; (8009c14 <open_r+0x48>)
 8009be2:	f7ff ff45 	bl	8009a70 <f_mount>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <open_r+0x24>
	  {
	    /* FatFs Initialization Error */
	    USB_Error_Handler();
 8009bec:	f7ff ffe2 	bl	8009bb4 <USB_Error_Handler>
	  }
	  rFILE = fopen(name,"r");
 8009bf0:	4909      	ldr	r1, [pc, #36]	; (8009c18 <open_r+0x4c>)
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 faa4 	bl	800c140 <fopen>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	4b08      	ldr	r3, [pc, #32]	; (8009c1c <open_r+0x50>)
 8009bfc:	601a      	str	r2, [r3, #0]
	}
	return rFILE;
 8009bfe:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <open_r+0x50>)
 8009c00:	681b      	ldr	r3, [r3, #0]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000554 	.word	0x20000554
 8009c10:	20001014 	.word	0x20001014
 8009c14:	200012b0 	.word	0x200012b0
 8009c18:	0800d4ac 	.word	0x0800d4ac
 8009c1c:	20001018 	.word	0x20001018

08009c20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009c24:	2201      	movs	r2, #1
 8009c26:	490e      	ldr	r1, [pc, #56]	; (8009c60 <MX_USB_HOST_Init+0x40>)
 8009c28:	480e      	ldr	r0, [pc, #56]	; (8009c64 <MX_USB_HOST_Init+0x44>)
 8009c2a:	f7fd ff8f 	bl	8007b4c <USBH_Init>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009c34:	f7f7 f998 	bl	8000f68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8009c38:	490b      	ldr	r1, [pc, #44]	; (8009c68 <MX_USB_HOST_Init+0x48>)
 8009c3a:	480a      	ldr	r0, [pc, #40]	; (8009c64 <MX_USB_HOST_Init+0x44>)
 8009c3c:	f7fe f814 	bl	8007c68 <USBH_RegisterClass>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009c46:	f7f7 f98f 	bl	8000f68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009c4a:	4806      	ldr	r0, [pc, #24]	; (8009c64 <MX_USB_HOST_Init+0x44>)
 8009c4c:	f7fe f898 	bl	8007d80 <USBH_Start>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009c56:	f7f7 f987 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009c5a:	bf00      	nop
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	20000c3c 	.word	0x20000c3c
 8009c68:	2000040c 	.word	0x2000040c

08009c6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009c70:	4802      	ldr	r0, [pc, #8]	; (8009c7c <MX_USB_HOST_Process+0x10>)
 8009c72:	f7fe f895 	bl	8007da0 <USBH_Process>
}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000c3c 	.word	0x20000c3c

08009c80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d81c      	bhi.n	8009cce <USBH_UserProcess+0x4e>
 8009c94:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <USBH_UserProcess+0x1c>)
 8009c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9a:	bf00      	nop
 8009c9c:	08009ccf 	.word	0x08009ccf
 8009ca0:	08009cb9 	.word	0x08009cb9
 8009ca4:	08009ccf 	.word	0x08009ccf
 8009ca8:	08009cc7 	.word	0x08009cc7
 8009cac:	08009cb1 	.word	0x08009cb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <USBH_UserProcess+0x5c>)
 8009cb2:	2203      	movs	r2, #3
 8009cb4:	701a      	strb	r2, [r3, #0]
  break;
 8009cb6:	e00b      	b.n	8009cd0 <USBH_UserProcess+0x50>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009cb8:	4b08      	ldr	r3, [pc, #32]	; (8009cdc <USBH_UserProcess+0x5c>)
 8009cba:	2202      	movs	r2, #2
 8009cbc:	701a      	strb	r2, [r3, #0]
  flag_usb = 1;
 8009cbe:	4b08      	ldr	r3, [pc, #32]	; (8009ce0 <USBH_UserProcess+0x60>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
  break;
 8009cc4:	e004      	b.n	8009cd0 <USBH_UserProcess+0x50>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009cc6:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <USBH_UserProcess+0x5c>)
 8009cc8:	2201      	movs	r2, #1
 8009cca:	701a      	strb	r2, [r3, #0]
  break;
 8009ccc:	e000      	b.n	8009cd0 <USBH_UserProcess+0x50>

  default:
  break;
 8009cce:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	20000550 	.word	0x20000550
 8009ce0:	20000554 	.word	0x20000554

08009ce4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08a      	sub	sp, #40	; 0x28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cec:	f107 0314 	add.w	r3, r7, #20
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	605a      	str	r2, [r3, #4]
 8009cf6:	609a      	str	r2, [r3, #8]
 8009cf8:	60da      	str	r2, [r3, #12]
 8009cfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d04:	d147      	bne.n	8009d96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d06:	2300      	movs	r3, #0
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0e:	4a24      	ldr	r2, [pc, #144]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d10:	f043 0301 	orr.w	r3, r3, #1
 8009d14:	6313      	str	r3, [r2, #48]	; 0x30
 8009d16:	4b22      	ldr	r3, [pc, #136]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009d30:	f107 0314 	add.w	r3, r7, #20
 8009d34:	4619      	mov	r1, r3
 8009d36:	481b      	ldr	r0, [pc, #108]	; (8009da4 <HAL_HCD_MspInit+0xc0>)
 8009d38:	f7f8 f87c 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009d3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d42:	2302      	movs	r3, #2
 8009d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d4e:	230a      	movs	r3, #10
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d52:	f107 0314 	add.w	r3, r7, #20
 8009d56:	4619      	mov	r1, r3
 8009d58:	4812      	ldr	r0, [pc, #72]	; (8009da4 <HAL_HCD_MspInit+0xc0>)
 8009d5a:	f7f8 f86b 	bl	8001e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d5e:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d62:	4a0f      	ldr	r2, [pc, #60]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d68:	6353      	str	r3, [r2, #52]	; 0x34
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
 8009d6e:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	4a0b      	ldr	r2, [pc, #44]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d78:	6453      	str	r3, [r2, #68]	; 0x44
 8009d7a:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d86:	2200      	movs	r2, #0
 8009d88:	2100      	movs	r1, #0
 8009d8a:	2043      	movs	r0, #67	; 0x43
 8009d8c:	f7f7 fe5f 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d90:	2043      	movs	r0, #67	; 0x43
 8009d92:	f7f7 fe78 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d96:	bf00      	nop
 8009d98:	3728      	adds	r7, #40	; 0x28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	40023800 	.word	0x40023800
 8009da4:	40020000 	.word	0x40020000

08009da8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fbc5 	bl	8008546 <USBH_LL_IncTimer>
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe fbfd 	bl	80085d2 <USBH_LL_Connect>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fc06 	bl	8008600 <USBH_LL_Disconnect>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	70fb      	strb	r3, [r7, #3]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fe fbb7 	bl	800859a <USBH_LL_PortEnabled>
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fbb7 	bl	80085b6 <USBH_LL_PortDisabled>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d12a      	bne.n	8009eb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009e62:	4a18      	ldr	r2, [pc, #96]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a15      	ldr	r2, [pc, #84]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e6e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e72:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009e80:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e8e:	2202      	movs	r2, #2
 8009e90:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e92:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009e98:	480a      	ldr	r0, [pc, #40]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e9a:	f7f8 f966 	bl	800216a <HAL_HCD_Init>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009ea4:	f7f7 f860 	bl	8000f68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009ea8:	4806      	ldr	r0, [pc, #24]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009eaa:	f7f8 fd69 	bl	8002980 <HAL_HCD_GetCurrentFrame>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fe fb38 	bl	8008528 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	200014e0 	.word	0x200014e0

08009ec8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f8 fcd6 	bl	8002890 <HAL_HCD_Start>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f990 	bl	800a210 <USBH_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7f8 fcde 	bl	80028d6 <HAL_HCD_Stop>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 f975 	bl	800a210 <USBH_Get_USB_Status>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7f8 fd28 	bl	800299c <HAL_HCD_GetCurrentSpeed>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d007      	beq.n	8009f62 <USBH_LL_GetSpeed+0x2e>
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d302      	bcc.n	8009f5c <USBH_LL_GetSpeed+0x28>
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d006      	beq.n	8009f68 <USBH_LL_GetSpeed+0x34>
 8009f5a:	e008      	b.n	8009f6e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f60:	e008      	b.n	8009f74 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009f62:	2301      	movs	r3, #1
 8009f64:	73fb      	strb	r3, [r7, #15]
    break;
 8009f66:	e005      	b.n	8009f74 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f6c:	e002      	b.n	8009f74 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	73fb      	strb	r3, [r7, #15]
    break;
 8009f72:	bf00      	nop
  }
  return  speed;
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f8 fcbb 	bl	8002910 <HAL_HCD_ResetPort>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 f935 	bl	800a210 <USBH_Get_USB_Status>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f8 fcc3 	bl	8002956 <HAL_HCD_HC_GetXferCount>
 8009fd0:	4603      	mov	r3, r0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009fda:	b590      	push	{r4, r7, lr}
 8009fdc:	b089      	sub	sp, #36	; 0x24
 8009fde:	af04      	add	r7, sp, #16
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	4603      	mov	r3, r0
 8009fea:	70fb      	strb	r3, [r7, #3]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70bb      	strb	r3, [r7, #2]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a002:	787c      	ldrb	r4, [r7, #1]
 800a004:	78ba      	ldrb	r2, [r7, #2]
 800a006:	78f9      	ldrb	r1, [r7, #3]
 800a008:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a00a:	9302      	str	r3, [sp, #8]
 800a00c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	4623      	mov	r3, r4
 800a01a:	f7f8 f908 	bl	800222e <HAL_HCD_HC_Init>
 800a01e:	4603      	mov	r3, r0
 800a020:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	4618      	mov	r0, r3
 800a026:	f000 f8f3 	bl	800a210 <USBH_Get_USB_Status>
 800a02a:	4603      	mov	r3, r0
 800a02c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	bd90      	pop	{r4, r7, pc}

0800a038 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a052:	78fa      	ldrb	r2, [r7, #3]
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f7f8 f981 	bl	800235e <HAL_HCD_HC_Halt>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f8d4 	bl	800a210 <USBH_Get_USB_Status>
 800a068:	4603      	mov	r3, r0
 800a06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a076:	b590      	push	{r4, r7, lr}
 800a078:	b089      	sub	sp, #36	; 0x24
 800a07a:	af04      	add	r7, sp, #16
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	4608      	mov	r0, r1
 800a080:	4611      	mov	r1, r2
 800a082:	461a      	mov	r2, r3
 800a084:	4603      	mov	r3, r0
 800a086:	70fb      	strb	r3, [r7, #3]
 800a088:	460b      	mov	r3, r1
 800a08a:	70bb      	strb	r3, [r7, #2]
 800a08c:	4613      	mov	r3, r2
 800a08e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a09e:	787c      	ldrb	r4, [r7, #1]
 800a0a0:	78ba      	ldrb	r2, [r7, #2]
 800a0a2:	78f9      	ldrb	r1, [r7, #3]
 800a0a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4623      	mov	r3, r4
 800a0ba:	f7f8 f973 	bl	80023a4 <HAL_HCD_HC_SubmitRequest>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f8a3 	bl	800a210 <USBH_Get_USB_Status>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd90      	pop	{r4, r7, pc}

0800a0d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f8 fc1c 	bl	800292c <HAL_HCD_HC_GetURBState>
 800a0f4:	4603      	mov	r3, r0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a110:	2b01      	cmp	r3, #1
 800a112:	d103      	bne.n	800a11c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f8a6 	bl	800a268 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a11c:	20c8      	movs	r0, #200	; 0xc8
 800a11e:	f7f7 fb99 	bl	8001854 <HAL_Delay>
  return USBH_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	70fb      	strb	r3, [r7, #3]
 800a138:	4613      	mov	r3, r2
 800a13a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a142:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a144:	78fa      	ldrb	r2, [r7, #3]
 800a146:	68f9      	ldr	r1, [r7, #12]
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	440b      	add	r3, r1
 800a152:	333b      	adds	r3, #59	; 0x3b
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	440b      	add	r3, r1
 800a168:	3350      	adds	r3, #80	; 0x50
 800a16a:	78ba      	ldrb	r2, [r7, #2]
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	e009      	b.n	800a184 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	68f9      	ldr	r1, [r7, #12]
 800a174:	4613      	mov	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	00db      	lsls	r3, r3, #3
 800a17c:	440b      	add	r3, r1
 800a17e:	3351      	adds	r3, #81	; 0x51
 800a180:	78ba      	ldrb	r2, [r7, #2]
 800a182:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1a8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	440b      	add	r3, r1
 800a1b8:	333b      	adds	r3, #59	; 0x3b
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00a      	beq.n	800a1d6 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800a1c0:	78fa      	ldrb	r2, [r7, #3]
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	440b      	add	r3, r1
 800a1ce:	3350      	adds	r3, #80	; 0x50
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	73fb      	strb	r3, [r7, #15]
 800a1d4:	e009      	b.n	800a1ea <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800a1d6:	78fa      	ldrb	r2, [r7, #3]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	440b      	add	r3, r1
 800a1e4:	3351      	adds	r3, #81	; 0x51
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7f7 fb27 	bl	8001854 <HAL_Delay>
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	2b03      	cmp	r3, #3
 800a222:	d817      	bhi.n	800a254 <USBH_Get_USB_Status+0x44>
 800a224:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <USBH_Get_USB_Status+0x1c>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a23d 	.word	0x0800a23d
 800a230:	0800a243 	.word	0x0800a243
 800a234:	0800a249 	.word	0x0800a249
 800a238:	0800a24f 	.word	0x0800a24f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
    break;
 800a240:	e00b      	b.n	800a25a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a242:	2302      	movs	r3, #2
 800a244:	73fb      	strb	r3, [r7, #15]
    break;
 800a246:	e008      	b.n	800a25a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
    break;
 800a24c:	e005      	b.n	800a25a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a24e:	2302      	movs	r3, #2
 800a250:	73fb      	strb	r3, [r7, #15]
    break;
 800a252:	e002      	b.n	800a25a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a254:	2302      	movs	r3, #2
 800a256:	73fb      	strb	r3, [r7, #15]
    break;
 800a258:	bf00      	nop
  }
  return usb_status;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a27c:	2301      	movs	r3, #1
 800a27e:	73fb      	strb	r3, [r7, #15]
 800a280:	e001      	b.n	800a286 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	461a      	mov	r2, r3
 800a28a:	2101      	movs	r1, #1
 800a28c:	4803      	ldr	r0, [pc, #12]	; (800a29c <MX_DriverVbusFS+0x34>)
 800a28e:	f7f7 ff53 	bl	8002138 <HAL_GPIO_WritePin>
}
 800a292:	bf00      	nop
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	40020800 	.word	0x40020800

0800a2a0 <D16_GENERIC>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	b089      	sub	sp, #36	; 0x24
 800a2a6:	68d4      	ldr	r4, [r2, #12]
 800a2a8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a2aa:	6993      	ldr	r3, [r2, #24]
 800a2ac:	9407      	str	r4, [sp, #28]
 800a2ae:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a2b0:	9306      	str	r3, [sp, #24]
 800a2b2:	9402      	str	r4, [sp, #8]
 800a2b4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a2b8:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800a2bc:	69d3      	ldr	r3, [r2, #28]
 800a2be:	6896      	ldr	r6, [r2, #8]
 800a2c0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a2c2:	9103      	str	r1, [sp, #12]
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	d066      	beq.n	800a396 <D16_GENERIC+0xf6>
 800a2c8:	f004 0510 	and.w	r5, r4, #16
 800a2cc:	f004 0420 	and.w	r4, r4, #32
 800a2d0:	9504      	str	r5, [sp, #16]
 800a2d2:	4938      	ldr	r1, [pc, #224]	; (800a3b4 <D16_GENERIC+0x114>)
 800a2d4:	9405      	str	r4, [sp, #20]
 800a2d6:	f04f 0e00 	mov.w	lr, #0
 800a2da:	4635      	mov	r5, r6
 800a2dc:	e04f      	b.n	800a37e <D16_GENERIC+0xde>
 800a2de:	5d87      	ldrb	r7, [r0, r6]
 800a2e0:	7804      	ldrb	r4, [r0, #0]
 800a2e2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a2e6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800a2ea:	b2e6      	uxtb	r6, r4
 800a2ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a2f0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a2f4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a2f8:	4433      	add	r3, r6
 800a2fa:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800a2fe:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800a302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a306:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800a30a:	0aa3      	lsrs	r3, r4, #10
 800a30c:	4c2a      	ldr	r4, [pc, #168]	; (800a3b8 <D16_GENERIC+0x118>)
 800a30e:	fb26 5404 	smlad	r4, r6, r4, r5
 800a312:	4d2a      	ldr	r5, [pc, #168]	; (800a3bc <D16_GENERIC+0x11c>)
 800a314:	fb26 f505 	smuad	r5, r6, r5
 800a318:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800a31c:	eb04 080a 	add.w	r8, r4, sl
 800a320:	eba8 080b 	sub.w	r8, r8, fp
 800a324:	4646      	mov	r6, r8
 800a326:	17f7      	asrs	r7, r6, #31
 800a328:	e9cd 6700 	strd	r6, r7, [sp]
 800a32c:	9e04      	ldr	r6, [sp, #16]
 800a32e:	f10e 0c01 	add.w	ip, lr, #1
 800a332:	b16e      	cbz	r6, 800a350 <D16_GENERIC+0xb0>
 800a334:	6a16      	ldr	r6, [r2, #32]
 800a336:	9f01      	ldr	r7, [sp, #4]
 800a338:	fba8 8906 	umull	r8, r9, r8, r6
 800a33c:	fb06 9907 	mla	r9, r6, r7, r9
 800a340:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800a344:	f149 0900 	adc.w	r9, r9, #0
 800a348:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800a34c:	46a3      	mov	fp, r4
 800a34e:	4654      	mov	r4, sl
 800a350:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a352:	9f02      	ldr	r7, [sp, #8]
 800a354:	0424      	lsls	r4, r4, #16
 800a356:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a35a:	f04f 0900 	mov.w	r9, #0
 800a35e:	fb0e fe06 	mul.w	lr, lr, r6
 800a362:	fbc7 8904 	smlal	r8, r9, r7, r4
 800a366:	9e03      	ldr	r6, [sp, #12]
 800a368:	464f      	mov	r7, r9
 800a36a:	10bc      	asrs	r4, r7, #2
 800a36c:	f304 040f 	ssat	r4, #16, r4
 800a370:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800a374:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a376:	fa1f fe8c 	uxth.w	lr, ip
 800a37a:	4574      	cmp	r4, lr
 800a37c:	d90a      	bls.n	800a394 <D16_GENERIC+0xf4>
 800a37e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a380:	2c01      	cmp	r4, #1
 800a382:	b2e6      	uxtb	r6, r4
 800a384:	d1ab      	bne.n	800a2de <D16_GENERIC+0x3e>
 800a386:	9e05      	ldr	r6, [sp, #20]
 800a388:	f850 4b02 	ldr.w	r4, [r0], #2
 800a38c:	2e00      	cmp	r6, #0
 800a38e:	d0ac      	beq.n	800a2ea <D16_GENERIC+0x4a>
 800a390:	ba64      	rev16	r4, r4
 800a392:	e7aa      	b.n	800a2ea <D16_GENERIC+0x4a>
 800a394:	462e      	mov	r6, r5
 800a396:	9907      	ldr	r1, [sp, #28]
 800a398:	61d3      	str	r3, [r2, #28]
 800a39a:	9b06      	ldr	r3, [sp, #24]
 800a39c:	6096      	str	r6, [r2, #8]
 800a39e:	2000      	movs	r0, #0
 800a3a0:	60d1      	str	r1, [r2, #12]
 800a3a2:	f8c2 a010 	str.w	sl, [r2, #16]
 800a3a6:	f8c2 b014 	str.w	fp, [r2, #20]
 800a3aa:	6193      	str	r3, [r2, #24]
 800a3ac:	b009      	add	sp, #36	; 0x24
 800a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000000 	.word	0x20000000
 800a3b8:	00030001 	.word	0x00030001
 800a3bc:	00010003 	.word	0x00010003

0800a3c0 <D24_GENERIC>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800a3c6:	6993      	ldr	r3, [r2, #24]
 800a3c8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a3ca:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a3ce:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800a3d2:	6894      	ldr	r4, [r2, #8]
 800a3d4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800a3d8:	b089      	sub	sp, #36	; 0x24
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	9503      	str	r5, [sp, #12]
 800a3de:	69d3      	ldr	r3, [r2, #28]
 800a3e0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a3e2:	9104      	str	r1, [sp, #16]
 800a3e4:	2e00      	cmp	r6, #0
 800a3e6:	f000 8096 	beq.w	800a516 <D24_GENERIC+0x156>
 800a3ea:	f005 0610 	and.w	r6, r5, #16
 800a3ee:	f005 0520 	and.w	r5, r5, #32
 800a3f2:	4954      	ldr	r1, [pc, #336]	; (800a544 <D24_GENERIC+0x184>)
 800a3f4:	9605      	str	r6, [sp, #20]
 800a3f6:	9506      	str	r5, [sp, #24]
 800a3f8:	f04f 0e00 	mov.w	lr, #0
 800a3fc:	f8cd 9008 	str.w	r9, [sp, #8]
 800a400:	e06a      	b.n	800a4d8 <D24_GENERIC+0x118>
 800a402:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800a406:	f810 8007 	ldrb.w	r8, [r0, r7]
 800a40a:	f890 c000 	ldrb.w	ip, [r0]
 800a40e:	042d      	lsls	r5, r5, #16
 800a410:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800a414:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800a418:	44ac      	add	ip, r5
 800a41a:	4438      	add	r0, r7
 800a41c:	fa5f f68c 	uxtb.w	r6, ip
 800a420:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800a424:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a428:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800a42c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a430:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a434:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a438:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800a43c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800a440:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a444:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800a448:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800a44c:	4d3e      	ldr	r5, [pc, #248]	; (800a548 <D24_GENERIC+0x188>)
 800a44e:	fb26 b705 	smlad	r7, r6, r5, fp
 800a452:	4d3e      	ldr	r5, [pc, #248]	; (800a54c <D24_GENERIC+0x18c>)
 800a454:	fb26 4b05 	smlad	fp, r6, r5, r4
 800a458:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800a45c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800a460:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800a464:	2401      	movs	r4, #1
 800a466:	fb26 f604 	smuad	r6, r6, r4
 800a46a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800a46e:	9f02      	ldr	r7, [sp, #8]
 800a470:	eb0e 0c04 	add.w	ip, lr, r4
 800a474:	eb08 0406 	add.w	r4, r8, r6
 800a478:	eb05 060a 	add.w	r6, r5, sl
 800a47c:	1bf6      	subs	r6, r6, r7
 800a47e:	4637      	mov	r7, r6
 800a480:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800a484:	e9cd 7800 	strd	r7, r8, [sp]
 800a488:	9f05      	ldr	r7, [sp, #20]
 800a48a:	b177      	cbz	r7, 800a4aa <D24_GENERIC+0xea>
 800a48c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800a490:	9502      	str	r5, [sp, #8]
 800a492:	fba6 9a08 	umull	r9, sl, r6, r8
 800a496:	9e01      	ldr	r6, [sp, #4]
 800a498:	fb08 aa06 	mla	sl, r8, r6, sl
 800a49c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800a4a0:	f14a 0700 	adc.w	r7, sl, #0
 800a4a4:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800a4a8:	4655      	mov	r5, sl
 800a4aa:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a4ac:	9f03      	ldr	r7, [sp, #12]
 800a4ae:	03ad      	lsls	r5, r5, #14
 800a4b0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a4b4:	f04f 0900 	mov.w	r9, #0
 800a4b8:	fb0e fe06 	mul.w	lr, lr, r6
 800a4bc:	fbc7 8905 	smlal	r8, r9, r7, r5
 800a4c0:	9e04      	ldr	r6, [sp, #16]
 800a4c2:	464f      	mov	r7, r9
 800a4c4:	10bd      	asrs	r5, r7, #2
 800a4c6:	f305 050f 	ssat	r5, #16, r5
 800a4ca:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800a4ce:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a4d0:	fa1f fe8c 	uxth.w	lr, ip
 800a4d4:	4575      	cmp	r5, lr
 800a4d6:	d91c      	bls.n	800a512 <D24_GENERIC+0x152>
 800a4d8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a4da:	b2ef      	uxtb	r7, r5
 800a4dc:	2d01      	cmp	r5, #1
 800a4de:	b23e      	sxth	r6, r7
 800a4e0:	d18f      	bne.n	800a402 <D24_GENERIC+0x42>
 800a4e2:	9d06      	ldr	r5, [sp, #24]
 800a4e4:	b15d      	cbz	r5, 800a4fe <D24_GENERIC+0x13e>
 800a4e6:	f01e 0f01 	tst.w	lr, #1
 800a4ea:	d122      	bne.n	800a532 <D24_GENERIC+0x172>
 800a4ec:	7805      	ldrb	r5, [r0, #0]
 800a4ee:	78c7      	ldrb	r7, [r0, #3]
 800a4f0:	7846      	ldrb	r6, [r0, #1]
 800a4f2:	022d      	lsls	r5, r5, #8
 800a4f4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800a4f8:	44b4      	add	ip, r6
 800a4fa:	3002      	adds	r0, #2
 800a4fc:	e78e      	b.n	800a41c <D24_GENERIC+0x5c>
 800a4fe:	7846      	ldrb	r6, [r0, #1]
 800a500:	f890 c002 	ldrb.w	ip, [r0, #2]
 800a504:	f810 5b03 	ldrb.w	r5, [r0], #3
 800a508:	0236      	lsls	r6, r6, #8
 800a50a:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800a50e:	44ac      	add	ip, r5
 800a510:	e784      	b.n	800a41c <D24_GENERIC+0x5c>
 800a512:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a516:	61d3      	str	r3, [r2, #28]
 800a518:	9b07      	ldr	r3, [sp, #28]
 800a51a:	6094      	str	r4, [r2, #8]
 800a51c:	2000      	movs	r0, #0
 800a51e:	f8c2 b00c 	str.w	fp, [r2, #12]
 800a522:	f8c2 a010 	str.w	sl, [r2, #16]
 800a526:	f8c2 9014 	str.w	r9, [r2, #20]
 800a52a:	6193      	str	r3, [r2, #24]
 800a52c:	b009      	add	sp, #36	; 0x24
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	78c5      	ldrb	r5, [r0, #3]
 800a534:	7887      	ldrb	r7, [r0, #2]
 800a536:	f810 6b04 	ldrb.w	r6, [r0], #4
 800a53a:	022d      	lsls	r5, r5, #8
 800a53c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800a540:	44b4      	add	ip, r6
 800a542:	e76b      	b.n	800a41c <D24_GENERIC+0x5c>
 800a544:	20000000 	.word	0x20000000
 800a548:	00030001 	.word	0x00030001
 800a54c:	00060007 	.word	0x00060007

0800a550 <D32_GENERIC>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a556:	6993      	ldr	r3, [r2, #24]
 800a558:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a55a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a55e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800a562:	69d6      	ldr	r6, [r2, #28]
 800a564:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800a568:	b089      	sub	sp, #36	; 0x24
 800a56a:	9307      	str	r3, [sp, #28]
 800a56c:	9403      	str	r4, [sp, #12]
 800a56e:	6893      	ldr	r3, [r2, #8]
 800a570:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a572:	9104      	str	r1, [sp, #16]
 800a574:	2d00      	cmp	r5, #0
 800a576:	f000 809f 	beq.w	800a6b8 <D32_GENERIC+0x168>
 800a57a:	f004 0510 	and.w	r5, r4, #16
 800a57e:	f004 0420 	and.w	r4, r4, #32
 800a582:	9505      	str	r5, [sp, #20]
 800a584:	4953      	ldr	r1, [pc, #332]	; (800a6d4 <D32_GENERIC+0x184>)
 800a586:	9406      	str	r4, [sp, #24]
 800a588:	f04f 0c00 	mov.w	ip, #0
 800a58c:	f8cd 9008 	str.w	r9, [sp, #8]
 800a590:	461d      	mov	r5, r3
 800a592:	4617      	mov	r7, r2
 800a594:	e077      	b.n	800a686 <D32_GENERIC+0x136>
 800a596:	f818 3003 	ldrb.w	r3, [r8, r3]
 800a59a:	f810 800e 	ldrb.w	r8, [r0, lr]
 800a59e:	f810 e002 	ldrb.w	lr, [r0, r2]
 800a5a2:	7800      	ldrb	r0, [r0, #0]
 800a5a4:	041b      	lsls	r3, r3, #16
 800a5a6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800a5aa:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800a5ae:	4403      	add	r3, r0
 800a5b0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800a5b4:	b2dc      	uxtb	r4, r3
 800a5b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a5ba:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800a5be:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800a5c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a5c6:	0e1b      	lsrs	r3, r3, #24
 800a5c8:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800a5cc:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800a5d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a5d4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a5d8:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800a5dc:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800a5e0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800a5e4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a5e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a5ec:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a5f0:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800a5f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5f8:	4b37      	ldr	r3, [pc, #220]	; (800a6d8 <D32_GENERIC+0x188>)
 800a5fa:	fb22 b403 	smlad	r4, r2, r3, fp
 800a5fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a602:	fb2e 4803 	smlad	r8, lr, r3, r4
 800a606:	4b35      	ldr	r3, [pc, #212]	; (800a6dc <D32_GENERIC+0x18c>)
 800a608:	fb22 5503 	smlad	r5, r2, r3, r5
 800a60c:	4b34      	ldr	r3, [pc, #208]	; (800a6e0 <D32_GENERIC+0x190>)
 800a60e:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800a612:	2301      	movs	r3, #1
 800a614:	fb22 f203 	smuad	r2, r2, r3
 800a618:	4b32      	ldr	r3, [pc, #200]	; (800a6e4 <D32_GENERIC+0x194>)
 800a61a:	fb2e 2503 	smlad	r5, lr, r3, r2
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800a624:	eb04 080a 	add.w	r8, r4, sl
 800a628:	eba8 0803 	sub.w	r8, r8, r3
 800a62c:	4642      	mov	r2, r8
 800a62e:	17d3      	asrs	r3, r2, #31
 800a630:	e9cd 2300 	strd	r2, r3, [sp]
 800a634:	9b05      	ldr	r3, [sp, #20]
 800a636:	f10c 0e01 	add.w	lr, ip, #1
 800a63a:	b16b      	cbz	r3, 800a658 <D32_GENERIC+0x108>
 800a63c:	6a3a      	ldr	r2, [r7, #32]
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	9402      	str	r4, [sp, #8]
 800a642:	fba8 8902 	umull	r8, r9, r8, r2
 800a646:	fb02 9903 	mla	r9, r2, r3, r9
 800a64a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800a64e:	f149 0900 	adc.w	r9, r9, #0
 800a652:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800a656:	4654      	mov	r4, sl
 800a658:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a65a:	9a04      	ldr	r2, [sp, #16]
 800a65c:	fb0c fc03 	mul.w	ip, ip, r3
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	0364      	lsls	r4, r4, #13
 800a664:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a668:	f04f 0900 	mov.w	r9, #0
 800a66c:	fbc3 8904 	smlal	r8, r9, r3, r4
 800a670:	464b      	mov	r3, r9
 800a672:	109b      	asrs	r3, r3, #2
 800a674:	f303 030f 	ssat	r3, #16, r3
 800a678:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800a67c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a67e:	fa1f fc8e 	uxth.w	ip, lr
 800a682:	4563      	cmp	r3, ip
 800a684:	d914      	bls.n	800a6b0 <D32_GENERIC+0x160>
 800a686:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800a688:	b2e2      	uxtb	r2, r4
 800a68a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800a68e:	eb00 080e 	add.w	r8, r0, lr
 800a692:	4253      	negs	r3, r2
 800a694:	2c01      	cmp	r4, #1
 800a696:	eb08 0403 	add.w	r4, r8, r3
 800a69a:	f47f af7c 	bne.w	800a596 <D32_GENERIC+0x46>
 800a69e:	1d02      	adds	r2, r0, #4
 800a6a0:	6803      	ldr	r3, [r0, #0]
 800a6a2:	9806      	ldr	r0, [sp, #24]
 800a6a4:	b110      	cbz	r0, 800a6ac <D32_GENERIC+0x15c>
 800a6a6:	ba5b      	rev16	r3, r3
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	e783      	b.n	800a5b4 <D32_GENERIC+0x64>
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	e781      	b.n	800a5b4 <D32_GENERIC+0x64>
 800a6b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	6093      	str	r3, [r2, #8]
 800a6ba:	9b07      	ldr	r3, [sp, #28]
 800a6bc:	f8c2 b00c 	str.w	fp, [r2, #12]
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	61d6      	str	r6, [r2, #28]
 800a6c4:	f8c2 a010 	str.w	sl, [r2, #16]
 800a6c8:	f8c2 9014 	str.w	r9, [r2, #20]
 800a6cc:	6193      	str	r3, [r2, #24]
 800a6ce:	b009      	add	sp, #36	; 0x24
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	20000000 	.word	0x20000000
 800a6d8:	00060003 	.word	0x00060003
 800a6dc:	000a000c 	.word	0x000a000c
 800a6e0:	000c000a 	.word	0x000c000a
 800a6e4:	00030006 	.word	0x00030006

0800a6e8 <D48_GENERIC>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	b089      	sub	sp, #36	; 0x24
 800a6ee:	6953      	ldr	r3, [r2, #20]
 800a6f0:	68d4      	ldr	r4, [r2, #12]
 800a6f2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800a6f4:	9302      	str	r3, [sp, #8]
 800a6f6:	9400      	str	r4, [sp, #0]
 800a6f8:	6993      	ldr	r3, [r2, #24]
 800a6fa:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a6fc:	9307      	str	r3, [sp, #28]
 800a6fe:	9403      	str	r4, [sp, #12]
 800a700:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800a704:	69d6      	ldr	r6, [r2, #28]
 800a706:	6893      	ldr	r3, [r2, #8]
 800a708:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a70a:	9104      	str	r1, [sp, #16]
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	f000 80c5 	beq.w	800a89c <D48_GENERIC+0x1b4>
 800a712:	f004 0510 	and.w	r5, r4, #16
 800a716:	f004 0420 	and.w	r4, r4, #32
 800a71a:	4967      	ldr	r1, [pc, #412]	; (800a8b8 <D48_GENERIC+0x1d0>)
 800a71c:	9505      	str	r5, [sp, #20]
 800a71e:	9406      	str	r4, [sp, #24]
 800a720:	f04f 0c00 	mov.w	ip, #0
 800a724:	4657      	mov	r7, sl
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	e09c      	b.n	800a864 <D48_GENERIC+0x17c>
 800a72a:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800a72e:	f810 b009 	ldrb.w	fp, [r0, r9]
 800a732:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800a736:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800a73a:	7800      	ldrb	r0, [r0, #0]
 800a73c:	0424      	lsls	r4, r4, #16
 800a73e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800a742:	f818 4005 	ldrb.w	r4, [r8, r5]
 800a746:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800a74a:	44a8      	add	r8, r5
 800a74c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800a750:	eb0b 0500 	add.w	r5, fp, r0
 800a754:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800a758:	fa5f f885 	uxtb.w	r8, r5
 800a75c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800a760:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800a764:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800a768:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800a76c:	0e2d      	lsrs	r5, r5, #24
 800a76e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800a772:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800a776:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800a77a:	b2e6      	uxtb	r6, r4
 800a77c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800a780:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a784:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800a788:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a78c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800a790:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800a794:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800a798:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800a79c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7a0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a7a4:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800a7a8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a7ac:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a7b0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a7b4:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800a7b8:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800a7bc:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800a7c0:	4c3e      	ldr	r4, [pc, #248]	; (800a8bc <D48_GENERIC+0x1d4>)
 800a7c2:	9d00      	ldr	r5, [sp, #0]
 800a7c4:	fb2a 5404 	smlad	r4, sl, r4, r5
 800a7c8:	4d3d      	ldr	r5, [pc, #244]	; (800a8c0 <D48_GENERIC+0x1d8>)
 800a7ca:	fb28 4405 	smlad	r4, r8, r5, r4
 800a7ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7d2:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800a7d6:	4c3b      	ldr	r4, [pc, #236]	; (800a8c4 <D48_GENERIC+0x1dc>)
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	fb2a 3304 	smlad	r3, sl, r4, r3
 800a7de:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a7e2:	fb28 3304 	smlad	r3, r8, r4, r3
 800a7e6:	4c38      	ldr	r4, [pc, #224]	; (800a8c8 <D48_GENERIC+0x1e0>)
 800a7e8:	fb2e 3304 	smlad	r3, lr, r4, r3
 800a7ec:	2501      	movs	r5, #1
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	fb2a fa05 	smuad	sl, sl, r5
 800a7f4:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <D48_GENERIC+0x1e4>)
 800a7f6:	fb28 a803 	smlad	r8, r8, r3, sl
 800a7fa:	4b35      	ldr	r3, [pc, #212]	; (800a8d0 <D48_GENERIC+0x1e8>)
 800a7fc:	fb2e 8303 	smlad	r3, lr, r3, r8
 800a800:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	eb04 0807 	add.w	r8, r4, r7
 800a80c:	eba8 0803 	sub.w	r8, r8, r3
 800a810:	9b05      	ldr	r3, [sp, #20]
 800a812:	4465      	add	r5, ip
 800a814:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800a818:	b163      	cbz	r3, 800a834 <D48_GENERIC+0x14c>
 800a81a:	6a17      	ldr	r7, [r2, #32]
 800a81c:	9402      	str	r4, [sp, #8]
 800a81e:	fba8 8907 	umull	r8, r9, r8, r7
 800a822:	fb07 990b 	mla	r9, r7, fp, r9
 800a826:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800a82a:	f149 0900 	adc.w	r9, r9, #0
 800a82e:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800a832:	463c      	mov	r4, r7
 800a834:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800a838:	9b03      	ldr	r3, [sp, #12]
 800a83a:	02e4      	lsls	r4, r4, #11
 800a83c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a840:	f04f 0900 	mov.w	r9, #0
 800a844:	fb0c fc0e 	mul.w	ip, ip, lr
 800a848:	fbc3 8904 	smlal	r8, r9, r3, r4
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800a852:	f304 040f 	ssat	r4, #16, r4
 800a856:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800a85a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a85c:	fa1f fc85 	uxth.w	ip, r5
 800a860:	4564      	cmp	r4, ip
 800a862:	d919      	bls.n	800a898 <D48_GENERIC+0x1b0>
 800a864:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a866:	fa5f fe84 	uxtb.w	lr, r4
 800a86a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800a86e:	f1ce 0500 	rsb	r5, lr, #0
 800a872:	eb00 0b09 	add.w	fp, r0, r9
 800a876:	eb0b 0a05 	add.w	sl, fp, r5
 800a87a:	2c01      	cmp	r4, #1
 800a87c:	eb0a 0809 	add.w	r8, sl, r9
 800a880:	f47f af53 	bne.w	800a72a <D48_GENERIC+0x42>
 800a884:	9b06      	ldr	r3, [sp, #24]
 800a886:	6805      	ldr	r5, [r0, #0]
 800a888:	6844      	ldr	r4, [r0, #4]
 800a88a:	3006      	adds	r0, #6
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f43f af63 	beq.w	800a758 <D48_GENERIC+0x70>
 800a892:	ba6d      	rev16	r5, r5
 800a894:	ba64      	rev16	r4, r4
 800a896:	e75f      	b.n	800a758 <D48_GENERIC+0x70>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	46ba      	mov	sl, r7
 800a89c:	6093      	str	r3, [r2, #8]
 800a89e:	9b00      	ldr	r3, [sp, #0]
 800a8a0:	60d3      	str	r3, [r2, #12]
 800a8a2:	9b02      	ldr	r3, [sp, #8]
 800a8a4:	6153      	str	r3, [r2, #20]
 800a8a6:	9b07      	ldr	r3, [sp, #28]
 800a8a8:	61d6      	str	r6, [r2, #28]
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	f8c2 a010 	str.w	sl, [r2, #16]
 800a8b0:	6193      	str	r3, [r2, #24]
 800a8b2:	b009      	add	sp, #36	; 0x24
 800a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b8:	20000000 	.word	0x20000000
 800a8bc:	000f000a 	.word	0x000f000a
 800a8c0:	00060003 	.word	0x00060003
 800a8c4:	00150019 	.word	0x00150019
 800a8c8:	00190015 	.word	0x00190015
 800a8cc:	00030006 	.word	0x00030006
 800a8d0:	000a000f 	.word	0x000a000f

0800a8d4 <D64_GENERIC>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	b089      	sub	sp, #36	; 0x24
 800a8da:	6913      	ldr	r3, [r2, #16]
 800a8dc:	6895      	ldr	r5, [r2, #8]
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	9501      	str	r5, [sp, #4]
 800a8e2:	6953      	ldr	r3, [r2, #20]
 800a8e4:	68d5      	ldr	r5, [r2, #12]
 800a8e6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	9500      	str	r5, [sp, #0]
 800a8ec:	6993      	ldr	r3, [r2, #24]
 800a8ee:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a8f0:	9307      	str	r3, [sp, #28]
 800a8f2:	9505      	str	r5, [sp, #20]
 800a8f4:	69d3      	ldr	r3, [r2, #28]
 800a8f6:	9106      	str	r1, [sp, #24]
 800a8f8:	2c00      	cmp	r4, #0
 800a8fa:	f000 80d9 	beq.w	800aab0 <D64_GENERIC+0x1dc>
 800a8fe:	6a11      	ldr	r1, [r2, #32]
 800a900:	9102      	str	r1, [sp, #8]
 800a902:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800aaf0 <D64_GENERIC+0x21c>
 800a906:	f04f 0c00 	mov.w	ip, #0
 800a90a:	4681      	mov	r9, r0
 800a90c:	e0c1      	b.n	800aa92 <D64_GENERIC+0x1be>
 800a90e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800a912:	4274      	negs	r4, r6
 800a914:	eb09 0708 	add.w	r7, r9, r8
 800a918:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800a91c:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800a920:	5d38      	ldrb	r0, [r7, r4]
 800a922:	5d29      	ldrb	r1, [r5, r4]
 800a924:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800a928:	f819 a008 	ldrb.w	sl, [r9, r8]
 800a92c:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800a930:	f899 7000 	ldrb.w	r7, [r9]
 800a934:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800a938:	4425      	add	r5, r4
 800a93a:	0409      	lsls	r1, r1, #16
 800a93c:	0400      	lsls	r0, r0, #16
 800a93e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800a942:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a946:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800a94a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800a94e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800a952:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800a956:	4459      	add	r1, fp
 800a958:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800a95c:	4438      	add	r0, r7
 800a95e:	b2c5      	uxtb	r5, r0
 800a960:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a964:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800a968:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800a96c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800a970:	0e00      	lsrs	r0, r0, #24
 800a972:	eb03 0806 	add.w	r8, r3, r6
 800a976:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800a97a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800a97e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a982:	b2c8      	uxtb	r0, r1
 800a984:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a988:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a98c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800a990:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800a994:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800a998:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800a99c:	0e09      	lsrs	r1, r1, #24
 800a99e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800a9a2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800a9a6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800a9aa:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a9ae:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800a9b2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a9b6:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800a9ba:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a9be:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a9c2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a9c6:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800a9ca:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a9ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a9d2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a9d6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a9da:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800a9de:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800a9e2:	0a8b      	lsrs	r3, r1, #10
 800a9e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800a9e8:	4939      	ldr	r1, [pc, #228]	; (800aad0 <D64_GENERIC+0x1fc>)
 800a9ea:	9c00      	ldr	r4, [sp, #0]
 800a9ec:	fb28 4101 	smlad	r1, r8, r1, r4
 800a9f0:	4c38      	ldr	r4, [pc, #224]	; (800aad4 <D64_GENERIC+0x200>)
 800a9f2:	fb27 1104 	smlad	r1, r7, r4, r1
 800a9f6:	4c38      	ldr	r4, [pc, #224]	; (800aad8 <D64_GENERIC+0x204>)
 800a9f8:	fb20 1104 	smlad	r1, r0, r4, r1
 800a9fc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800aa00:	fb2a 1106 	smlad	r1, sl, r6, r1
 800aa04:	4c35      	ldr	r4, [pc, #212]	; (800aadc <D64_GENERIC+0x208>)
 800aa06:	9d01      	ldr	r5, [sp, #4]
 800aa08:	fb28 5404 	smlad	r4, r8, r4, r5
 800aa0c:	4d33      	ldr	r5, [pc, #204]	; (800aadc <D64_GENERIC+0x208>)
 800aa0e:	fb2a 4415 	smladx	r4, sl, r5, r4
 800aa12:	4d33      	ldr	r5, [pc, #204]	; (800aae0 <D64_GENERIC+0x20c>)
 800aa14:	fb27 4405 	smlad	r4, r7, r5, r4
 800aa18:	fb20 4415 	smladx	r4, r0, r5, r4
 800aa1c:	2501      	movs	r5, #1
 800aa1e:	9400      	str	r4, [sp, #0]
 800aa20:	fb28 f805 	smuad	r8, r8, r5
 800aa24:	4c2f      	ldr	r4, [pc, #188]	; (800aae4 <D64_GENERIC+0x210>)
 800aa26:	fb27 8704 	smlad	r7, r7, r4, r8
 800aa2a:	4c2f      	ldr	r4, [pc, #188]	; (800aae8 <D64_GENERIC+0x214>)
 800aa2c:	fb20 7004 	smlad	r0, r0, r4, r7
 800aa30:	4c2e      	ldr	r4, [pc, #184]	; (800aaec <D64_GENERIC+0x218>)
 800aa32:	fb2a 0004 	smlad	r0, sl, r4, r0
 800aa36:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800aa3a:	9902      	ldr	r1, [sp, #8]
 800aa3c:	9001      	str	r0, [sp, #4]
 800aa3e:	b189      	cbz	r1, 800aa64 <D64_GENERIC+0x190>
 800aa40:	9803      	ldr	r0, [sp, #12]
 800aa42:	9c04      	ldr	r4, [sp, #16]
 800aa44:	9604      	str	r6, [sp, #16]
 800aa46:	4430      	add	r0, r6
 800aa48:	1b00      	subs	r0, r0, r4
 800aa4a:	17c5      	asrs	r5, r0, #31
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	fba0 0101 	umull	r0, r1, r0, r1
 800aa52:	fb07 1105 	mla	r1, r7, r5, r1
 800aa56:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800aa5a:	f141 0100 	adc.w	r1, r1, #0
 800aa5e:	0049      	lsls	r1, r1, #1
 800aa60:	9103      	str	r1, [sp, #12]
 800aa62:	460e      	mov	r6, r1
 800aa64:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800aa66:	9905      	ldr	r1, [sp, #20]
 800aa68:	9806      	ldr	r0, [sp, #24]
 800aa6a:	02b6      	lsls	r6, r6, #10
 800aa6c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800aa70:	f04f 0800 	mov.w	r8, #0
 800aa74:	fb0c f404 	mul.w	r4, ip, r4
 800aa78:	fbc1 7806 	smlal	r7, r8, r1, r6
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	1089      	asrs	r1, r1, #2
 800aa80:	f301 010f 	ssat	r1, #16, r1
 800aa84:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800aa88:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800aa8a:	f10c 0c01 	add.w	ip, ip, #1
 800aa8e:	4561      	cmp	r1, ip
 800aa90:	dd0e      	ble.n	800aab0 <D64_GENERIC+0x1dc>
 800aa92:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800aa94:	2e01      	cmp	r6, #1
 800aa96:	f47f af3a 	bne.w	800a90e <D64_GENERIC+0x3a>
 800aa9a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800aa9c:	06b4      	lsls	r4, r6, #26
 800aa9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800aaa2:	f109 0908 	add.w	r9, r9, #8
 800aaa6:	f57f af5a 	bpl.w	800a95e <D64_GENERIC+0x8a>
 800aaaa:	ba40      	rev16	r0, r0
 800aaac:	ba49      	rev16	r1, r1
 800aaae:	e756      	b.n	800a95e <D64_GENERIC+0x8a>
 800aab0:	61d3      	str	r3, [r2, #28]
 800aab2:	9b03      	ldr	r3, [sp, #12]
 800aab4:	9901      	ldr	r1, [sp, #4]
 800aab6:	6113      	str	r3, [r2, #16]
 800aab8:	9b04      	ldr	r3, [sp, #16]
 800aaba:	6091      	str	r1, [r2, #8]
 800aabc:	6153      	str	r3, [r2, #20]
 800aabe:	9900      	ldr	r1, [sp, #0]
 800aac0:	9b07      	ldr	r3, [sp, #28]
 800aac2:	60d1      	str	r1, [r2, #12]
 800aac4:	2000      	movs	r0, #0
 800aac6:	6193      	str	r3, [r2, #24]
 800aac8:	b009      	add	sp, #36	; 0x24
 800aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aace:	bf00      	nop
 800aad0:	001c0015 	.word	0x001c0015
 800aad4:	000f000a 	.word	0x000f000a
 800aad8:	00060003 	.word	0x00060003
 800aadc:	0024002a 	.word	0x0024002a
 800aae0:	002e0030 	.word	0x002e0030
 800aae4:	00030006 	.word	0x00030006
 800aae8:	000a000f 	.word	0x000a000f
 800aaec:	0015001c 	.word	0x0015001c
 800aaf0:	20000000 	.word	0x20000000

0800aaf4 <D80_GENERIC>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	b08b      	sub	sp, #44	; 0x2c
 800aafa:	6914      	ldr	r4, [r2, #16]
 800aafc:	9404      	str	r4, [sp, #16]
 800aafe:	6954      	ldr	r4, [r2, #20]
 800ab00:	9405      	str	r4, [sp, #20]
 800ab02:	6994      	ldr	r4, [r2, #24]
 800ab04:	9409      	str	r4, [sp, #36]	; 0x24
 800ab06:	6894      	ldr	r4, [r2, #8]
 800ab08:	9402      	str	r4, [sp, #8]
 800ab0a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ab0c:	68d4      	ldr	r4, [r2, #12]
 800ab0e:	9401      	str	r4, [sp, #4]
 800ab10:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ab12:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800ab16:	9406      	str	r4, [sp, #24]
 800ab18:	9107      	str	r1, [sp, #28]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 810f 	beq.w	800ad3e <D80_GENERIC+0x24a>
 800ab20:	6a13      	ldr	r3, [r2, #32]
 800ab22:	9308      	str	r3, [sp, #32]
 800ab24:	2300      	movs	r3, #0
 800ab26:	9200      	str	r2, [sp, #0]
 800ab28:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800ad90 <D80_GENERIC+0x29c>
 800ab2c:	f8cd b00c 	str.w	fp, [sp, #12]
 800ab30:	461a      	mov	r2, r3
 800ab32:	e0ed      	b.n	800ad10 <D80_GENERIC+0x21c>
 800ab34:	fa5f fc8c 	uxtb.w	ip, ip
 800ab38:	fa0f f48c 	sxth.w	r4, ip
 800ab3c:	0066      	lsls	r6, r4, #1
 800ab3e:	eb06 0804 	add.w	r8, r6, r4
 800ab42:	f1cc 0500 	rsb	r5, ip, #0
 800ab46:	eb00 0108 	add.w	r1, r0, r8
 800ab4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ab4e:	194b      	adds	r3, r1, r5
 800ab50:	5d49      	ldrb	r1, [r1, r5]
 800ab52:	f810 a008 	ldrb.w	sl, [r0, r8]
 800ab56:	f813 b004 	ldrb.w	fp, [r3, r4]
 800ab5a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800ab5e:	f890 8000 	ldrb.w	r8, [r0]
 800ab62:	eb03 0e04 	add.w	lr, r3, r4
 800ab66:	eb0e 0705 	add.w	r7, lr, r5
 800ab6a:	0409      	lsls	r1, r1, #16
 800ab6c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800ab70:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800ab74:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800ab78:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800ab7c:	eb0a 0004 	add.w	r0, sl, r4
 800ab80:	041b      	lsls	r3, r3, #16
 800ab82:	f81a a004 	ldrb.w	sl, [sl, r4]
 800ab86:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800ab8a:	5d44      	ldrb	r4, [r0, r5]
 800ab8c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800ab90:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800ab94:	4428      	add	r0, r5
 800ab96:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800ab9a:	4441      	add	r1, r8
 800ab9c:	4430      	add	r0, r6
 800ab9e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800aba2:	441f      	add	r7, r3
 800aba4:	b2cd      	uxtb	r5, r1
 800aba6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800abaa:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800abae:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800abb8:	0e09      	lsrs	r1, r1, #24
 800abba:	4433      	add	r3, r6
 800abbc:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800abc0:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800abc4:	b2fd      	uxtb	r5, r7
 800abc6:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800abca:	469b      	mov	fp, r3
 800abcc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800abd0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800abd4:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800abd8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800abdc:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800abe0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800abe4:	0e3b      	lsrs	r3, r7, #24
 800abe6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800abea:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800abee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800abf2:	fa5f fe84 	uxtb.w	lr, r4
 800abf6:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800abfa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800abfe:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800ac02:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800ac06:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800ac0a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ac0e:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800ac12:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800ac16:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ac1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac1e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ac22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ac26:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ac2a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ac2e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800ac32:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800ac36:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800ac3a:	0aa3      	lsrs	r3, r4, #10
 800ac3c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800ac40:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ac44:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ac48:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800ac4c:	9303      	str	r3, [sp, #12]
 800ac4e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800ac52:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800ac56:	4b42      	ldr	r3, [pc, #264]	; (800ad60 <D80_GENERIC+0x26c>)
 800ac58:	9901      	ldr	r1, [sp, #4]
 800ac5a:	fb2b 1303 	smlad	r3, fp, r3, r1
 800ac5e:	4941      	ldr	r1, [pc, #260]	; (800ad64 <D80_GENERIC+0x270>)
 800ac60:	fb28 3301 	smlad	r3, r8, r1, r3
 800ac64:	4940      	ldr	r1, [pc, #256]	; (800ad68 <D80_GENERIC+0x274>)
 800ac66:	fb2c 3301 	smlad	r3, ip, r1, r3
 800ac6a:	4940      	ldr	r1, [pc, #256]	; (800ad6c <D80_GENERIC+0x278>)
 800ac6c:	fb27 3301 	smlad	r3, r7, r1, r3
 800ac70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ac74:	fb2e 3301 	smlad	r3, lr, r1, r3
 800ac78:	493d      	ldr	r1, [pc, #244]	; (800ad70 <D80_GENERIC+0x27c>)
 800ac7a:	9c02      	ldr	r4, [sp, #8]
 800ac7c:	fb2b 4401 	smlad	r4, fp, r1, r4
 800ac80:	493c      	ldr	r1, [pc, #240]	; (800ad74 <D80_GENERIC+0x280>)
 800ac82:	fb28 4401 	smlad	r4, r8, r1, r4
 800ac86:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800ac8a:	fb2c 4101 	smlad	r1, ip, r1, r4
 800ac8e:	4c3a      	ldr	r4, [pc, #232]	; (800ad78 <D80_GENERIC+0x284>)
 800ac90:	fb27 1104 	smlad	r1, r7, r4, r1
 800ac94:	4c39      	ldr	r4, [pc, #228]	; (800ad7c <D80_GENERIC+0x288>)
 800ac96:	fb2e 1104 	smlad	r1, lr, r4, r1
 800ac9a:	9101      	str	r1, [sp, #4]
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	fb2b fb01 	smuad	fp, fp, r1
 800aca2:	4937      	ldr	r1, [pc, #220]	; (800ad80 <D80_GENERIC+0x28c>)
 800aca4:	fb28 b801 	smlad	r8, r8, r1, fp
 800aca8:	4d36      	ldr	r5, [pc, #216]	; (800ad84 <D80_GENERIC+0x290>)
 800acaa:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800acae:	4d36      	ldr	r5, [pc, #216]	; (800ad88 <D80_GENERIC+0x294>)
 800acb0:	fb27 c705 	smlad	r7, r7, r5, ip
 800acb4:	4d35      	ldr	r5, [pc, #212]	; (800ad8c <D80_GENERIC+0x298>)
 800acb6:	fb2e 7105 	smlad	r1, lr, r5, r7
 800acba:	9102      	str	r1, [sp, #8]
 800acbc:	9908      	ldr	r1, [sp, #32]
 800acbe:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800acc2:	b181      	cbz	r1, 800ace6 <D80_GENERIC+0x1f2>
 800acc4:	9c04      	ldr	r4, [sp, #16]
 800acc6:	9d05      	ldr	r5, [sp, #20]
 800acc8:	9305      	str	r3, [sp, #20]
 800acca:	441c      	add	r4, r3
 800accc:	1b64      	subs	r4, r4, r5
 800acce:	17e7      	asrs	r7, r4, #31
 800acd0:	fba4 4501 	umull	r4, r5, r4, r1
 800acd4:	fb01 5507 	mla	r5, r1, r7, r5
 800acd8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800acdc:	f145 0500 	adc.w	r5, r5, #0
 800ace0:	0069      	lsls	r1, r5, #1
 800ace2:	9104      	str	r1, [sp, #16]
 800ace4:	460b      	mov	r3, r1
 800ace6:	9e00      	ldr	r6, [sp, #0]
 800ace8:	9f06      	ldr	r7, [sp, #24]
 800acea:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800acec:	025b      	lsls	r3, r3, #9
 800acee:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800acf2:	2500      	movs	r5, #0
 800acf4:	fb02 f101 	mul.w	r1, r2, r1
 800acf8:	fbc7 4503 	smlal	r4, r5, r7, r3
 800acfc:	9c07      	ldr	r4, [sp, #28]
 800acfe:	10ab      	asrs	r3, r5, #2
 800ad00:	f303 030f 	ssat	r3, #16, r3
 800ad04:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800ad08:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800ad0a:	3201      	adds	r2, #1
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	dd13      	ble.n	800ad38 <D80_GENERIC+0x244>
 800ad10:	9b00      	ldr	r3, [sp, #0]
 800ad12:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800ad16:	f1bc 0f01 	cmp.w	ip, #1
 800ad1a:	f47f af0b 	bne.w	800ab34 <D80_GENERIC+0x40>
 800ad1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad20:	6884      	ldr	r4, [r0, #8]
 800ad22:	069b      	lsls	r3, r3, #26
 800ad24:	e890 0082 	ldmia.w	r0, {r1, r7}
 800ad28:	f100 000a 	add.w	r0, r0, #10
 800ad2c:	f57f af3a 	bpl.w	800aba4 <D80_GENERIC+0xb0>
 800ad30:	ba49      	rev16	r1, r1
 800ad32:	ba7f      	rev16	r7, r7
 800ad34:	ba64      	rev16	r4, r4
 800ad36:	e735      	b.n	800aba4 <D80_GENERIC+0xb0>
 800ad38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	9b02      	ldr	r3, [sp, #8]
 800ad40:	6093      	str	r3, [r2, #8]
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	60d3      	str	r3, [r2, #12]
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	6113      	str	r3, [r2, #16]
 800ad4a:	9b05      	ldr	r3, [sp, #20]
 800ad4c:	6153      	str	r3, [r2, #20]
 800ad4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad50:	f8c2 b01c 	str.w	fp, [r2, #28]
 800ad54:	2000      	movs	r0, #0
 800ad56:	6193      	str	r3, [r2, #24]
 800ad58:	b00b      	add	sp, #44	; 0x2c
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5e:	bf00      	nop
 800ad60:	002d0024 	.word	0x002d0024
 800ad64:	001c0015 	.word	0x001c0015
 800ad68:	000f000a 	.word	0x000f000a
 800ad6c:	00060003 	.word	0x00060003
 800ad70:	0037003f 	.word	0x0037003f
 800ad74:	00450049 	.word	0x00450049
 800ad78:	00490045 	.word	0x00490045
 800ad7c:	003f0037 	.word	0x003f0037
 800ad80:	00030006 	.word	0x00030006
 800ad84:	000a000f 	.word	0x000a000f
 800ad88:	0015001c 	.word	0x0015001c
 800ad8c:	0024002d 	.word	0x0024002d
 800ad90:	20000000 	.word	0x20000000

0800ad94 <D128_GENERIC>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	b093      	sub	sp, #76	; 0x4c
 800ad9a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ad9c:	9005      	str	r0, [sp, #20]
 800ad9e:	4610      	mov	r0, r2
 800ada0:	9201      	str	r2, [sp, #4]
 800ada2:	6912      	ldr	r2, [r2, #16]
 800ada4:	920c      	str	r2, [sp, #48]	; 0x30
 800ada6:	4602      	mov	r2, r0
 800ada8:	6940      	ldr	r0, [r0, #20]
 800adaa:	900d      	str	r0, [sp, #52]	; 0x34
 800adac:	4610      	mov	r0, r2
 800adae:	4614      	mov	r4, r2
 800adb0:	6992      	ldr	r2, [r2, #24]
 800adb2:	9211      	str	r2, [sp, #68]	; 0x44
 800adb4:	69c2      	ldr	r2, [r0, #28]
 800adb6:	9202      	str	r2, [sp, #8]
 800adb8:	68e2      	ldr	r2, [r4, #12]
 800adba:	6880      	ldr	r0, [r0, #8]
 800adbc:	9203      	str	r2, [sp, #12]
 800adbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800adc0:	9004      	str	r0, [sp, #16]
 800adc2:	920e      	str	r2, [sp, #56]	; 0x38
 800adc4:	910f      	str	r1, [sp, #60]	; 0x3c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 819b 	beq.w	800b102 <D128_GENERIC+0x36e>
 800adcc:	6a23      	ldr	r3, [r4, #32]
 800adce:	9310      	str	r3, [sp, #64]	; 0x40
 800add0:	2300      	movs	r3, #0
 800add2:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800b17c <D128_GENERIC+0x3e8>
 800add6:	9306      	str	r3, [sp, #24]
 800add8:	e17a      	b.n	800b0d0 <D128_GENERIC+0x33c>
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	9d05      	ldr	r5, [sp, #20]
 800adde:	b214      	sxth	r4, r2
 800ade0:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800ade4:	4250      	negs	r0, r2
 800ade6:	eb05 010a 	add.w	r1, r5, sl
 800adea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adee:	eb01 0800 	add.w	r8, r1, r0
 800adf2:	eb0b 0c04 	add.w	ip, fp, r4
 800adf6:	eb08 070c 	add.w	r7, r8, ip
 800adfa:	183b      	adds	r3, r7, r0
 800adfc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800ae00:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800ae04:	eb0e 0604 	add.w	r6, lr, r4
 800ae08:	9307      	str	r3, [sp, #28]
 800ae0a:	1833      	adds	r3, r6, r0
 800ae0c:	9305      	str	r3, [sp, #20]
 800ae0e:	462b      	mov	r3, r5
 800ae10:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800ae14:	f8cd a020 	str.w	sl, [sp, #32]
 800ae18:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800ae1c:	f813 c002 	ldrb.w	ip, [r3, r2]
 800ae20:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800ae24:	5c3a      	ldrb	r2, [r7, r0]
 800ae26:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800ae2a:	781f      	ldrb	r7, [r3, #0]
 800ae2c:	9b07      	ldr	r3, [sp, #28]
 800ae2e:	9d05      	ldr	r5, [sp, #20]
 800ae30:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800ae34:	5c09      	ldrb	r1, [r1, r0]
 800ae36:	9709      	str	r7, [sp, #36]	; 0x24
 800ae38:	9307      	str	r3, [sp, #28]
 800ae3a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800ae3e:	5c33      	ldrb	r3, [r6, r0]
 800ae40:	0412      	lsls	r2, r2, #16
 800ae42:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800ae46:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800ae4a:	9d08      	ldr	r5, [sp, #32]
 800ae4c:	eb06 0a04 	add.w	sl, r6, r4
 800ae50:	0409      	lsls	r1, r1, #16
 800ae52:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800ae56:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800ae5a:	5d36      	ldrb	r6, [r6, r4]
 800ae5c:	9c05      	ldr	r4, [sp, #20]
 800ae5e:	042d      	lsls	r5, r5, #16
 800ae60:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800ae64:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800ae68:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800ae6c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800ae70:	eb0a 0c00 	add.w	ip, sl, r0
 800ae74:	041b      	lsls	r3, r3, #16
 800ae76:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800ae7a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800ae7e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800ae82:	9d07      	ldr	r5, [sp, #28]
 800ae84:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800ae88:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800ae8c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae8e:	4458      	add	r0, fp
 800ae90:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800ae94:	9005      	str	r0, [sp, #20]
 800ae96:	4439      	add	r1, r7
 800ae98:	442a      	add	r2, r5
 800ae9a:	44b2      	add	sl, r6
 800ae9c:	1918      	adds	r0, r3, r4
 800ae9e:	b2cb      	uxtb	r3, r1
 800aea0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800aea4:	9e02      	ldr	r6, [sp, #8]
 800aea6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aeaa:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800aeae:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800aeb2:	441e      	add	r6, r3
 800aeb4:	0e09      	lsrs	r1, r1, #24
 800aeb6:	4633      	mov	r3, r6
 800aeb8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800aebc:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800aec0:	b2d4      	uxtb	r4, r2
 800aec2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800aec6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800aeca:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800aece:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800aed2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aed6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800aeda:	0e12      	lsrs	r2, r2, #24
 800aedc:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800aee0:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800aee4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800aee8:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800aeec:	9702      	str	r7, [sp, #8]
 800aeee:	b2c2      	uxtb	r2, r0
 800aef0:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800aef4:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800aef8:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800aefc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800af00:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800af04:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800af08:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800af0c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800af10:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800af14:	0e00      	lsrs	r0, r0, #24
 800af16:	fa5f f68a 	uxtb.w	r6, sl
 800af1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af1e:	9309      	str	r3, [sp, #36]	; 0x24
 800af20:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800af24:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800af28:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800af2c:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800af30:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800af34:	950a      	str	r5, [sp, #40]	; 0x28
 800af36:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800af3a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800af3e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800af42:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800af46:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800af4a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800af4e:	920b      	str	r2, [sp, #44]	; 0x2c
 800af50:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800af54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af56:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800af5a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800af5e:	9307      	str	r3, [sp, #28]
 800af60:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800af64:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800af68:	9b02      	ldr	r3, [sp, #8]
 800af6a:	f8cd c008 	str.w	ip, [sp, #8]
 800af6e:	4694      	mov	ip, r2
 800af70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af72:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800af76:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800af7a:	9a02      	ldr	r2, [sp, #8]
 800af7c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800af80:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800af84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800af88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af8a:	f8cd a020 	str.w	sl, [sp, #32]
 800af8e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800af92:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800af96:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800afa0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800afa4:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800afa8:	9a08      	ldr	r2, [sp, #32]
 800afaa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800afae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afb2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800afb6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800afba:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800afbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800afc2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800afc6:	0a96      	lsrs	r6, r2, #10
 800afc8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800afcc:	9602      	str	r6, [sp, #8]
 800afce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800afd2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800afd6:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800afda:	4e53      	ldr	r6, [pc, #332]	; (800b128 <D128_GENERIC+0x394>)
 800afdc:	9f03      	ldr	r7, [sp, #12]
 800afde:	fb2c 7606 	smlad	r6, ip, r6, r7
 800afe2:	4f52      	ldr	r7, [pc, #328]	; (800b12c <D128_GENERIC+0x398>)
 800afe4:	fb2a 6607 	smlad	r6, sl, r7, r6
 800afe8:	4f51      	ldr	r7, [pc, #324]	; (800b130 <D128_GENERIC+0x39c>)
 800afea:	fb21 6607 	smlad	r6, r1, r7, r6
 800afee:	4f51      	ldr	r7, [pc, #324]	; (800b134 <D128_GENERIC+0x3a0>)
 800aff0:	fb24 6607 	smlad	r6, r4, r7, r6
 800aff4:	4f50      	ldr	r7, [pc, #320]	; (800b138 <D128_GENERIC+0x3a4>)
 800aff6:	fb28 6607 	smlad	r6, r8, r7, r6
 800affa:	4f50      	ldr	r7, [pc, #320]	; (800b13c <D128_GENERIC+0x3a8>)
 800affc:	fb20 6607 	smlad	r6, r0, r7, r6
 800b000:	4f4f      	ldr	r7, [pc, #316]	; (800b140 <D128_GENERIC+0x3ac>)
 800b002:	fb23 6607 	smlad	r6, r3, r7, r6
 800b006:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800b00a:	fb25 6607 	smlad	r6, r5, r7, r6
 800b00e:	4f4d      	ldr	r7, [pc, #308]	; (800b144 <D128_GENERIC+0x3b0>)
 800b010:	9a04      	ldr	r2, [sp, #16]
 800b012:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800b016:	4a4c      	ldr	r2, [pc, #304]	; (800b148 <D128_GENERIC+0x3b4>)
 800b018:	fb2a ee02 	smlad	lr, sl, r2, lr
 800b01c:	4f4b      	ldr	r7, [pc, #300]	; (800b14c <D128_GENERIC+0x3b8>)
 800b01e:	fb21 ee07 	smlad	lr, r1, r7, lr
 800b022:	4f4b      	ldr	r7, [pc, #300]	; (800b150 <D128_GENERIC+0x3bc>)
 800b024:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b028:	4f4a      	ldr	r7, [pc, #296]	; (800b154 <D128_GENERIC+0x3c0>)
 800b02a:	fb28 ee07 	smlad	lr, r8, r7, lr
 800b02e:	4f4a      	ldr	r7, [pc, #296]	; (800b158 <D128_GENERIC+0x3c4>)
 800b030:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b034:	4f49      	ldr	r7, [pc, #292]	; (800b15c <D128_GENERIC+0x3c8>)
 800b036:	fb23 e707 	smlad	r7, r3, r7, lr
 800b03a:	f8df e144 	ldr.w	lr, [pc, #324]	; 800b180 <D128_GENERIC+0x3ec>
 800b03e:	fb25 720e 	smlad	r2, r5, lr, r7
 800b042:	f04f 0b01 	mov.w	fp, #1
 800b046:	9203      	str	r2, [sp, #12]
 800b048:	fb2c fb0b 	smuad	fp, ip, fp
 800b04c:	4f44      	ldr	r7, [pc, #272]	; (800b160 <D128_GENERIC+0x3cc>)
 800b04e:	fb2a ba07 	smlad	sl, sl, r7, fp
 800b052:	4f44      	ldr	r7, [pc, #272]	; (800b164 <D128_GENERIC+0x3d0>)
 800b054:	fb21 aa07 	smlad	sl, r1, r7, sl
 800b058:	4f43      	ldr	r7, [pc, #268]	; (800b168 <D128_GENERIC+0x3d4>)
 800b05a:	fb24 aa07 	smlad	sl, r4, r7, sl
 800b05e:	4f43      	ldr	r7, [pc, #268]	; (800b16c <D128_GENERIC+0x3d8>)
 800b060:	fb28 a707 	smlad	r7, r8, r7, sl
 800b064:	4a42      	ldr	r2, [pc, #264]	; (800b170 <D128_GENERIC+0x3dc>)
 800b066:	fb20 7702 	smlad	r7, r0, r2, r7
 800b06a:	4a42      	ldr	r2, [pc, #264]	; (800b174 <D128_GENERIC+0x3e0>)
 800b06c:	fb23 7702 	smlad	r7, r3, r2, r7
 800b070:	4b41      	ldr	r3, [pc, #260]	; (800b178 <D128_GENERIC+0x3e4>)
 800b072:	fb25 7303 	smlad	r3, r5, r3, r7
 800b076:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b078:	9304      	str	r3, [sp, #16]
 800b07a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800b07e:	b185      	cbz	r5, 800b0a2 <D128_GENERIC+0x30e>
 800b080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b082:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b084:	960d      	str	r6, [sp, #52]	; 0x34
 800b086:	4432      	add	r2, r6
 800b088:	1a52      	subs	r2, r2, r1
 800b08a:	17d1      	asrs	r1, r2, #31
 800b08c:	fba2 2305 	umull	r2, r3, r2, r5
 800b090:	fb05 3301 	mla	r3, r5, r1, r3
 800b094:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b098:	f143 0300 	adc.w	r3, r3, #0
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	930c      	str	r3, [sp, #48]	; 0x30
 800b0a0:	461e      	mov	r6, r3
 800b0a2:	9801      	ldr	r0, [sp, #4]
 800b0a4:	9c06      	ldr	r4, [sp, #24]
 800b0a6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800b0a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b0aa:	01f6      	lsls	r6, r6, #7
 800b0ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	fbc5 2306 	smlal	r2, r3, r5, r6
 800b0b6:	fb04 f101 	mul.w	r1, r4, r1
 800b0ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0bc:	109b      	asrs	r3, r3, #2
 800b0be:	f303 030f 	ssat	r3, #16, r3
 800b0c2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800b0c6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800b0c8:	1c62      	adds	r2, r4, #1
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	9206      	str	r2, [sp, #24]
 800b0ce:	dd18      	ble.n	800b102 <D128_GENERIC+0x36e>
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b0d4:	2a01      	cmp	r2, #1
 800b0d6:	f47f ae80 	bne.w	800adda <D128_GENERIC+0x46>
 800b0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0dc:	9d05      	ldr	r5, [sp, #20]
 800b0de:	069b      	lsls	r3, r3, #26
 800b0e0:	6829      	ldr	r1, [r5, #0]
 800b0e2:	686a      	ldr	r2, [r5, #4]
 800b0e4:	68a8      	ldr	r0, [r5, #8]
 800b0e6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b0ea:	f105 0410 	add.w	r4, r5, #16
 800b0ee:	d506      	bpl.n	800b0fe <D128_GENERIC+0x36a>
 800b0f0:	ba49      	rev16	r1, r1
 800b0f2:	ba52      	rev16	r2, r2
 800b0f4:	ba40      	rev16	r0, r0
 800b0f6:	fa9a fa9a 	rev16.w	sl, sl
 800b0fa:	9405      	str	r4, [sp, #20]
 800b0fc:	e6cf      	b.n	800ae9e <D128_GENERIC+0x10a>
 800b0fe:	9405      	str	r4, [sp, #20]
 800b100:	e6cd      	b.n	800ae9e <D128_GENERIC+0x10a>
 800b102:	9a01      	ldr	r2, [sp, #4]
 800b104:	9904      	ldr	r1, [sp, #16]
 800b106:	6091      	str	r1, [r2, #8]
 800b108:	9903      	ldr	r1, [sp, #12]
 800b10a:	60d1      	str	r1, [r2, #12]
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	61d3      	str	r3, [r2, #28]
 800b110:	4611      	mov	r1, r2
 800b112:	4613      	mov	r3, r2
 800b114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b116:	610a      	str	r2, [r1, #16]
 800b118:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b11a:	6159      	str	r1, [r3, #20]
 800b11c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b11e:	6199      	str	r1, [r3, #24]
 800b120:	2000      	movs	r0, #0
 800b122:	b013      	add	sp, #76	; 0x4c
 800b124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b128:	00780069 	.word	0x00780069
 800b12c:	005b004e 	.word	0x005b004e
 800b130:	00420037 	.word	0x00420037
 800b134:	002d0024 	.word	0x002d0024
 800b138:	001c0015 	.word	0x001c0015
 800b13c:	000f000a 	.word	0x000f000a
 800b140:	00060003 	.word	0x00060003
 800b144:	00880096 	.word	0x00880096
 800b148:	00a200ac 	.word	0x00a200ac
 800b14c:	00b400ba 	.word	0x00b400ba
 800b150:	00be00c0 	.word	0x00be00c0
 800b154:	00c000be 	.word	0x00c000be
 800b158:	00ba00b4 	.word	0x00ba00b4
 800b15c:	00ac00a2 	.word	0x00ac00a2
 800b160:	00030006 	.word	0x00030006
 800b164:	000a000f 	.word	0x000a000f
 800b168:	0015001c 	.word	0x0015001c
 800b16c:	0024002d 	.word	0x0024002d
 800b170:	00370042 	.word	0x00370042
 800b174:	004e005b 	.word	0x004e005b
 800b178:	00690078 	.word	0x00690078
 800b17c:	20000000 	.word	0x20000000
 800b180:	00960088 	.word	0x00960088

0800b184 <D16_1CH_HTONS_VOL_HP>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	4691      	mov	r9, r2
 800b18a:	b083      	sub	sp, #12
 800b18c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b18e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b192:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	4680      	mov	r8, r0
 800b19a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800b19e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b1a2:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b1a6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800b1aa:	9401      	str	r4, [sp, #4]
 800b1ac:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b1b0:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800b1b4:	2a00      	cmp	r2, #0
 800b1b6:	d04e      	beq.n	800b256 <D16_1CH_HTONS_VOL_HP+0xd2>
 800b1b8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800b264 <D16_1CH_HTONS_VOL_HP+0xe0>
 800b1bc:	1e8c      	subs	r4, r1, #2
 800b1be:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800b1c2:	f858 2b02 	ldr.w	r2, [r8], #2
 800b1c6:	ba52      	rev16	r2, r2
 800b1c8:	b2d6      	uxtb	r6, r2
 800b1ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b1ce:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800b1d2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800b1dc:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800b1e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b1e8:	0a93      	lsrs	r3, r2, #10
 800b1ea:	4a1c      	ldr	r2, [pc, #112]	; (800b25c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800b1ec:	fb21 5202 	smlad	r2, r1, r2, r5
 800b1f0:	4d1b      	ldr	r5, [pc, #108]	; (800b260 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800b1f2:	fb21 f505 	smuad	r5, r1, r5
 800b1f6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800b1fa:	4410      	add	r0, r2
 800b1fc:	1bc0      	subs	r0, r0, r7
 800b1fe:	17c7      	asrs	r7, r0, #31
 800b200:	fba0 010e 	umull	r0, r1, r0, lr
 800b204:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b208:	fb0e 1107 	mla	r1, lr, r7, r1
 800b20c:	f141 0100 	adc.w	r1, r1, #0
 800b210:	0448      	lsls	r0, r1, #17
 800b212:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b216:	2700      	movs	r7, #0
 800b218:	fbc0 670a 	smlal	r6, r7, r0, sl
 800b21c:	45d8      	cmp	r8, fp
 800b21e:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800b222:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800b226:	4617      	mov	r7, r2
 800b228:	f301 010f 	ssat	r1, #16, r1
 800b22c:	f824 1f02 	strh.w	r1, [r4, #2]!
 800b230:	d1c7      	bne.n	800b1c2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800b232:	9901      	ldr	r1, [sp, #4]
 800b234:	f8c9 301c 	str.w	r3, [r9, #28]
 800b238:	9b00      	ldr	r3, [sp, #0]
 800b23a:	f8c9 0010 	str.w	r0, [r9, #16]
 800b23e:	2000      	movs	r0, #0
 800b240:	f8c9 5008 	str.w	r5, [r9, #8]
 800b244:	f8c9 100c 	str.w	r1, [r9, #12]
 800b248:	f8c9 2014 	str.w	r2, [r9, #20]
 800b24c:	f8c9 3018 	str.w	r3, [r9, #24]
 800b250:	b003      	add	sp, #12
 800b252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b256:	463a      	mov	r2, r7
 800b258:	4621      	mov	r1, r4
 800b25a:	e7eb      	b.n	800b234 <D16_1CH_HTONS_VOL_HP+0xb0>
 800b25c:	00030001 	.word	0x00030001
 800b260:	00010003 	.word	0x00010003
 800b264:	20000000 	.word	0x20000000

0800b268 <D24_1CH_HTONS_VOL_HP>:
 800b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26c:	b089      	sub	sp, #36	; 0x24
 800b26e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b270:	6996      	ldr	r6, [r2, #24]
 800b272:	9304      	str	r3, [sp, #16]
 800b274:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b276:	9207      	str	r2, [sp, #28]
 800b278:	6915      	ldr	r5, [r2, #16]
 800b27a:	6954      	ldr	r4, [r2, #20]
 800b27c:	9606      	str	r6, [sp, #24]
 800b27e:	6893      	ldr	r3, [r2, #8]
 800b280:	69d6      	ldr	r6, [r2, #28]
 800b282:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800b286:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b28a:	9a04      	ldr	r2, [sp, #16]
 800b28c:	9705      	str	r7, [sp, #20]
 800b28e:	2a00      	cmp	r2, #0
 800b290:	d07e      	beq.n	800b390 <D24_1CH_HTONS_VOL_HP+0x128>
 800b292:	f1a1 0b02 	sub.w	fp, r1, #2
 800b296:	2700      	movs	r7, #0
 800b298:	46a8      	mov	r8, r5
 800b29a:	f8cd b004 	str.w	fp, [sp, #4]
 800b29e:	4655      	mov	r5, sl
 800b2a0:	46e3      	mov	fp, ip
 800b2a2:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800b39c <D24_1CH_HTONS_VOL_HP+0x134>
 800b2a6:	46ba      	mov	sl, r7
 800b2a8:	469c      	mov	ip, r3
 800b2aa:	e055      	b.n	800b358 <D24_1CH_HTONS_VOL_HP+0xf0>
 800b2ac:	7802      	ldrb	r2, [r0, #0]
 800b2ae:	78c3      	ldrb	r3, [r0, #3]
 800b2b0:	7841      	ldrb	r1, [r0, #1]
 800b2b2:	0212      	lsls	r2, r2, #8
 800b2b4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800b2b8:	440b      	add	r3, r1
 800b2ba:	3002      	adds	r0, #2
 800b2bc:	b2d9      	uxtb	r1, r3
 800b2be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b2c2:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800b2c6:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800b2ca:	0c1b      	lsrs	r3, r3, #16
 800b2cc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b2d0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800b2d4:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800b2d8:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800b2dc:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800b2e0:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b2e4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b2e8:	4a2a      	ldr	r2, [pc, #168]	; (800b394 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800b2ea:	fb23 b102 	smlad	r1, r3, r2, fp
 800b2ee:	4a2a      	ldr	r2, [pc, #168]	; (800b398 <D24_1CH_HTONS_VOL_HP+0x130>)
 800b2f0:	fb23 cb02 	smlad	fp, r3, r2, ip
 800b2f4:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800b2f8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800b2fc:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800b300:	2201      	movs	r2, #1
 800b302:	fb23 f702 	smuad	r7, r3, r2
 800b306:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800b30a:	eb01 0208 	add.w	r2, r1, r8
 800b30e:	1b12      	subs	r2, r2, r4
 800b310:	17d4      	asrs	r4, r2, #31
 800b312:	fba2 2305 	umull	r2, r3, r2, r5
 800b316:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b31a:	fb05 3304 	mla	r3, r5, r4, r3
 800b31e:	f143 0300 	adc.w	r3, r3, #0
 800b322:	9c05      	ldr	r4, [sp, #20]
 800b324:	03da      	lsls	r2, r3, #15
 800b326:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b32a:	f04f 0900 	mov.w	r9, #0
 800b32e:	fbc4 8902 	smlal	r8, r9, r4, r2
 800b332:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b336:	9a01      	ldr	r2, [sp, #4]
 800b338:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800b33c:	9b03      	ldr	r3, [sp, #12]
 800b33e:	109b      	asrs	r3, r3, #2
 800b340:	f303 030f 	ssat	r3, #16, r3
 800b344:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b348:	9b04      	ldr	r3, [sp, #16]
 800b34a:	9201      	str	r2, [sp, #4]
 800b34c:	f10a 0a01 	add.w	sl, sl, #1
 800b350:	459a      	cmp	sl, r3
 800b352:	44bc      	add	ip, r7
 800b354:	460c      	mov	r4, r1
 800b356:	d00b      	beq.n	800b370 <D24_1CH_HTONS_VOL_HP+0x108>
 800b358:	f01a 0f01 	tst.w	sl, #1
 800b35c:	d0a6      	beq.n	800b2ac <D24_1CH_HTONS_VOL_HP+0x44>
 800b35e:	78c2      	ldrb	r2, [r0, #3]
 800b360:	7883      	ldrb	r3, [r0, #2]
 800b362:	f810 1b04 	ldrb.w	r1, [r0], #4
 800b366:	0212      	lsls	r2, r2, #8
 800b368:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800b36c:	440b      	add	r3, r1
 800b36e:	e7a5      	b.n	800b2bc <D24_1CH_HTONS_VOL_HP+0x54>
 800b370:	4663      	mov	r3, ip
 800b372:	4645      	mov	r5, r8
 800b374:	46dc      	mov	ip, fp
 800b376:	9807      	ldr	r0, [sp, #28]
 800b378:	6141      	str	r1, [r0, #20]
 800b37a:	9906      	ldr	r1, [sp, #24]
 800b37c:	6083      	str	r3, [r0, #8]
 800b37e:	f8c0 c00c 	str.w	ip, [r0, #12]
 800b382:	61c6      	str	r6, [r0, #28]
 800b384:	6105      	str	r5, [r0, #16]
 800b386:	6181      	str	r1, [r0, #24]
 800b388:	2000      	movs	r0, #0
 800b38a:	b009      	add	sp, #36	; 0x24
 800b38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b390:	4621      	mov	r1, r4
 800b392:	e7f0      	b.n	800b376 <D24_1CH_HTONS_VOL_HP+0x10e>
 800b394:	00030001 	.word	0x00030001
 800b398:	00060007 	.word	0x00060007
 800b39c:	20000000 	.word	0x20000000

0800b3a0 <D32_1CH_HTONS_VOL_HP>:
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	4692      	mov	sl, r2
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b3aa:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b3ae:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	f8da 4010 	ldr.w	r4, [sl, #16]
 800b3b8:	f8da 8014 	ldr.w	r8, [sl, #20]
 800b3bc:	f8da 601c 	ldr.w	r6, [sl, #28]
 800b3c0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b3c4:	f8da e00c 	ldr.w	lr, [sl, #12]
 800b3c8:	9501      	str	r5, [sp, #4]
 800b3ca:	f8da c020 	ldr.w	ip, [sl, #32]
 800b3ce:	2a00      	cmp	r2, #0
 800b3d0:	d07b      	beq.n	800b4ca <D32_1CH_HTONS_VOL_HP+0x12a>
 800b3d2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b3d6:	4f3e      	ldr	r7, [pc, #248]	; (800b4d0 <D32_1CH_HTONS_VOL_HP+0x130>)
 800b3d8:	f8cd c00c 	str.w	ip, [sp, #12]
 800b3dc:	9202      	str	r2, [sp, #8]
 800b3de:	460d      	mov	r5, r1
 800b3e0:	46a1      	mov	r9, r4
 800b3e2:	4684      	mov	ip, r0
 800b3e4:	f8cd a014 	str.w	sl, [sp, #20]
 800b3e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b3ec:	ba49      	rev16	r1, r1
 800b3ee:	b2c8      	uxtb	r0, r1
 800b3f0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b3f4:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800b3f8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800b3fc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b400:	0e09      	lsrs	r1, r1, #24
 800b402:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800b406:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800b40a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800b40e:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800b412:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800b416:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800b41a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b41e:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800b422:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b426:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b42a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800b42e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800b432:	4a28      	ldr	r2, [pc, #160]	; (800b4d4 <D32_1CH_HTONS_VOL_HP+0x134>)
 800b434:	fb20 e202 	smlad	r2, r0, r2, lr
 800b438:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b43c:	fb2a 2101 	smlad	r1, sl, r1, r2
 800b440:	4a25      	ldr	r2, [pc, #148]	; (800b4d8 <D32_1CH_HTONS_VOL_HP+0x138>)
 800b442:	fb20 3302 	smlad	r3, r0, r2, r3
 800b446:	4a25      	ldr	r2, [pc, #148]	; (800b4dc <D32_1CH_HTONS_VOL_HP+0x13c>)
 800b448:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800b44c:	2301      	movs	r3, #1
 800b44e:	fb20 f003 	smuad	r0, r0, r3
 800b452:	4b23      	ldr	r3, [pc, #140]	; (800b4e0 <D32_1CH_HTONS_VOL_HP+0x140>)
 800b454:	fb2a 0303 	smlad	r3, sl, r3, r0
 800b458:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800b45c:	9c03      	ldr	r4, [sp, #12]
 800b45e:	eb02 0009 	add.w	r0, r2, r9
 800b462:	eba0 0008 	sub.w	r0, r0, r8
 800b466:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800b46a:	fba0 0104 	umull	r0, r1, r0, r4
 800b46e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b472:	fb04 110b 	mla	r1, r4, fp, r1
 800b476:	f141 0100 	adc.w	r1, r1, #0
 800b47a:	9c01      	ldr	r4, [sp, #4]
 800b47c:	0388      	lsls	r0, r1, #14
 800b47e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b482:	f04f 0900 	mov.w	r9, #0
 800b486:	fbc0 8904 	smlal	r8, r9, r0, r4
 800b48a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800b48e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800b492:	f300 000f 	ssat	r0, #16, r0
 800b496:	9902      	ldr	r1, [sp, #8]
 800b498:	f825 0b02 	strh.w	r0, [r5], #2
 800b49c:	428d      	cmp	r5, r1
 800b49e:	4690      	mov	r8, r2
 800b4a0:	d1a2      	bne.n	800b3e8 <D32_1CH_HTONS_VOL_HP+0x48>
 800b4a2:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b4a6:	464c      	mov	r4, r9
 800b4a8:	f8ca 3008 	str.w	r3, [sl, #8]
 800b4ac:	9b04      	ldr	r3, [sp, #16]
 800b4ae:	f8ca e00c 	str.w	lr, [sl, #12]
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	f8ca 601c 	str.w	r6, [sl, #28]
 800b4b8:	f8ca 4010 	str.w	r4, [sl, #16]
 800b4bc:	f8ca 2014 	str.w	r2, [sl, #20]
 800b4c0:	f8ca 3018 	str.w	r3, [sl, #24]
 800b4c4:	b007      	add	sp, #28
 800b4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ca:	4642      	mov	r2, r8
 800b4cc:	e7ec      	b.n	800b4a8 <D32_1CH_HTONS_VOL_HP+0x108>
 800b4ce:	bf00      	nop
 800b4d0:	20000000 	.word	0x20000000
 800b4d4:	00060003 	.word	0x00060003
 800b4d8:	000a000c 	.word	0x000a000c
 800b4dc:	000c000a 	.word	0x000c000a
 800b4e0:	00030006 	.word	0x00030006

0800b4e4 <D48_1CH_HTONS_VOL_HP>:
 800b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	461c      	mov	r4, r3
 800b4ec:	b087      	sub	sp, #28
 800b4ee:	4625      	mov	r5, r4
 800b4f0:	4626      	mov	r6, r4
 800b4f2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800b4f4:	9205      	str	r2, [sp, #20]
 800b4f6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b4f8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800b4fc:	9501      	str	r5, [sp, #4]
 800b4fe:	4680      	mov	r8, r0
 800b500:	6a35      	ldr	r5, [r6, #32]
 800b502:	6918      	ldr	r0, [r3, #16]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	9502      	str	r5, [sp, #8]
 800b510:	68e4      	ldr	r4, [r4, #12]
 800b512:	2a00      	cmp	r2, #0
 800b514:	f000 808c 	beq.w	800b630 <D48_1CH_HTONS_VOL_HP+0x14c>
 800b518:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b51c:	4d45      	ldr	r5, [pc, #276]	; (800b634 <D48_1CH_HTONS_VOL_HP+0x150>)
 800b51e:	9203      	str	r2, [sp, #12]
 800b520:	468c      	mov	ip, r1
 800b522:	e898 0044 	ldmia.w	r8, {r2, r6}
 800b526:	f108 0806 	add.w	r8, r8, #6
 800b52a:	ba52      	rev16	r2, r2
 800b52c:	ba76      	rev16	r6, r6
 800b52e:	b2d7      	uxtb	r7, r2
 800b530:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b534:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800b538:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b53c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800b540:	0e12      	lsrs	r2, r2, #24
 800b542:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800b546:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b54a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b54e:	fa5f fb86 	uxtb.w	fp, r6
 800b552:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b556:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800b55a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800b55e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800b562:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800b566:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800b56a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800b56e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b572:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b576:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b57a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800b57e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b582:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b586:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b58a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800b58e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800b592:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800b596:	4a28      	ldr	r2, [pc, #160]	; (800b638 <D48_1CH_HTONS_VOL_HP+0x154>)
 800b598:	fb2a 4202 	smlad	r2, sl, r2, r4
 800b59c:	4927      	ldr	r1, [pc, #156]	; (800b63c <D48_1CH_HTONS_VOL_HP+0x158>)
 800b59e:	fb27 2201 	smlad	r2, r7, r1, r2
 800b5a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b5a6:	fb26 2201 	smlad	r2, r6, r1, r2
 800b5aa:	4925      	ldr	r1, [pc, #148]	; (800b640 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800b5ac:	fb2a 3401 	smlad	r4, sl, r1, r3
 800b5b0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800b5b4:	fb27 4403 	smlad	r4, r7, r3, r4
 800b5b8:	4b22      	ldr	r3, [pc, #136]	; (800b644 <D48_1CH_HTONS_VOL_HP+0x160>)
 800b5ba:	fb26 4403 	smlad	r4, r6, r3, r4
 800b5be:	2101      	movs	r1, #1
 800b5c0:	fb2a fa01 	smuad	sl, sl, r1
 800b5c4:	4b20      	ldr	r3, [pc, #128]	; (800b648 <D48_1CH_HTONS_VOL_HP+0x164>)
 800b5c6:	fb27 a703 	smlad	r7, r7, r3, sl
 800b5ca:	4b20      	ldr	r3, [pc, #128]	; (800b64c <D48_1CH_HTONS_VOL_HP+0x168>)
 800b5cc:	fb26 7303 	smlad	r3, r6, r3, r7
 800b5d0:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800b5d4:	9e02      	ldr	r6, [sp, #8]
 800b5d6:	9f01      	ldr	r7, [sp, #4]
 800b5d8:	4410      	add	r0, r2
 800b5da:	eba0 0009 	sub.w	r0, r0, r9
 800b5de:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800b5e2:	fba0 0106 	umull	r0, r1, r0, r6
 800b5e6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b5ea:	fb06 110a 	mla	r1, r6, sl, r1
 800b5ee:	f141 0100 	adc.w	r1, r1, #0
 800b5f2:	0308      	lsls	r0, r1, #12
 800b5f4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b5f8:	f04f 0a00 	mov.w	sl, #0
 800b5fc:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800b600:	4657      	mov	r7, sl
 800b602:	10b8      	asrs	r0, r7, #2
 800b604:	f300 000f 	ssat	r0, #16, r0
 800b608:	f82c 0b02 	strh.w	r0, [ip], #2
 800b60c:	0048      	lsls	r0, r1, #1
 800b60e:	9903      	ldr	r1, [sp, #12]
 800b610:	458c      	cmp	ip, r1
 800b612:	4691      	mov	r9, r2
 800b614:	d185      	bne.n	800b522 <D48_1CH_HTONS_VOL_HP+0x3e>
 800b616:	9d05      	ldr	r5, [sp, #20]
 800b618:	616a      	str	r2, [r5, #20]
 800b61a:	9a04      	ldr	r2, [sp, #16]
 800b61c:	6128      	str	r0, [r5, #16]
 800b61e:	2000      	movs	r0, #0
 800b620:	60ab      	str	r3, [r5, #8]
 800b622:	60ec      	str	r4, [r5, #12]
 800b624:	f8c5 e01c 	str.w	lr, [r5, #28]
 800b628:	61aa      	str	r2, [r5, #24]
 800b62a:	b007      	add	sp, #28
 800b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b630:	464a      	mov	r2, r9
 800b632:	e7f0      	b.n	800b616 <D48_1CH_HTONS_VOL_HP+0x132>
 800b634:	20000000 	.word	0x20000000
 800b638:	000f000a 	.word	0x000f000a
 800b63c:	00060003 	.word	0x00060003
 800b640:	00150019 	.word	0x00150019
 800b644:	00190015 	.word	0x00190015
 800b648:	00030006 	.word	0x00030006
 800b64c:	000a000f 	.word	0x000a000f

0800b650 <D64_1CH_HTONS_VOL_HP>:
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	b089      	sub	sp, #36	; 0x24
 800b656:	4614      	mov	r4, r2
 800b658:	9207      	str	r2, [sp, #28]
 800b65a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b65c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800b660:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800b664:	6992      	ldr	r2, [r2, #24]
 800b666:	9206      	str	r2, [sp, #24]
 800b668:	68e2      	ldr	r2, [r4, #12]
 800b66a:	9201      	str	r2, [sp, #4]
 800b66c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b66e:	9203      	str	r2, [sp, #12]
 800b670:	6a22      	ldr	r2, [r4, #32]
 800b672:	69e5      	ldr	r5, [r4, #28]
 800b674:	68a6      	ldr	r6, [r4, #8]
 800b676:	9204      	str	r2, [sp, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 80b0 	beq.w	800b7de <D64_1CH_HTONS_VOL_HP+0x18e>
 800b67e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b682:	4f58      	ldr	r7, [pc, #352]	; (800b7e4 <D64_1CH_HTONS_VOL_HP+0x194>)
 800b684:	9305      	str	r3, [sp, #20]
 800b686:	9102      	str	r1, [sp, #8]
 800b688:	f850 2b08 	ldr.w	r2, [r0], #8
 800b68c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b690:	ba52      	rev16	r2, r2
 800b692:	fa93 f993 	rev16.w	r9, r3
 800b696:	b2d4      	uxtb	r4, r2
 800b698:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800b69c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800b6a0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b6a4:	9901      	ldr	r1, [sp, #4]
 800b6a6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b6aa:	0e12      	lsrs	r2, r2, #24
 800b6ac:	44ab      	add	fp, r5
 800b6ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b6b2:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800b6b6:	fa5f f289 	uxtb.w	r2, r9
 800b6ba:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800b6be:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800b6c2:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800b6c6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b6ca:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800b6ce:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800b6d2:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800b6d6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b6da:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b6de:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800b6e2:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800b6e6:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800b6ea:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b6ee:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800b6f2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b6f6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b6fa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b6fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b702:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b706:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800b70a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b70e:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800b712:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b716:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800b71a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800b71e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b722:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800b726:	4b30      	ldr	r3, [pc, #192]	; (800b7e8 <D64_1CH_HTONS_VOL_HP+0x198>)
 800b728:	fb2b 1303 	smlad	r3, fp, r3, r1
 800b72c:	492f      	ldr	r1, [pc, #188]	; (800b7ec <D64_1CH_HTONS_VOL_HP+0x19c>)
 800b72e:	fb24 3301 	smlad	r3, r4, r1, r3
 800b732:	492f      	ldr	r1, [pc, #188]	; (800b7f0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800b734:	fb22 3301 	smlad	r3, r2, r1, r3
 800b738:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b73c:	fb2e 390a 	smlad	r9, lr, sl, r3
 800b740:	4b2c      	ldr	r3, [pc, #176]	; (800b7f4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800b742:	fb2b 6603 	smlad	r6, fp, r3, r6
 800b746:	fb2e 6613 	smladx	r6, lr, r3, r6
 800b74a:	4b2b      	ldr	r3, [pc, #172]	; (800b7f8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800b74c:	fb24 6603 	smlad	r6, r4, r3, r6
 800b750:	fb22 6313 	smladx	r3, r2, r3, r6
 800b754:	f04f 0a01 	mov.w	sl, #1
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	fb2b fb0a 	smuad	fp, fp, sl
 800b75e:	4b27      	ldr	r3, [pc, #156]	; (800b7fc <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800b760:	fb24 ba03 	smlad	sl, r4, r3, fp
 800b764:	4b26      	ldr	r3, [pc, #152]	; (800b800 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800b766:	fb22 a203 	smlad	r2, r2, r3, sl
 800b76a:	4b26      	ldr	r3, [pc, #152]	; (800b804 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800b76c:	fb2e 2603 	smlad	r6, lr, r3, r2
 800b770:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800b774:	eb0a 020c 	add.w	r2, sl, ip
 800b778:	9c04      	ldr	r4, [sp, #16]
 800b77a:	9903      	ldr	r1, [sp, #12]
 800b77c:	eba2 0208 	sub.w	r2, r2, r8
 800b780:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800b784:	fba2 2304 	umull	r2, r3, r2, r4
 800b788:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b78c:	fb04 3309 	mla	r3, r4, r9, r3
 800b790:	f143 0300 	adc.w	r3, r3, #0
 800b794:	02da      	lsls	r2, r3, #11
 800b796:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b79a:	f04f 0900 	mov.w	r9, #0
 800b79e:	fbc1 8902 	smlal	r8, r9, r1, r2
 800b7a2:	9902      	ldr	r1, [sp, #8]
 800b7a4:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800b7a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b7ac:	f302 020f 	ssat	r2, #16, r2
 800b7b0:	9b05      	ldr	r3, [sp, #20]
 800b7b2:	f821 2b02 	strh.w	r2, [r1], #2
 800b7b6:	4299      	cmp	r1, r3
 800b7b8:	9102      	str	r1, [sp, #8]
 800b7ba:	46d0      	mov	r8, sl
 800b7bc:	f47f af64 	bne.w	800b688 <D64_1CH_HTONS_VOL_HP+0x38>
 800b7c0:	9a07      	ldr	r2, [sp, #28]
 800b7c2:	9901      	ldr	r1, [sp, #4]
 800b7c4:	60d1      	str	r1, [r2, #12]
 800b7c6:	9906      	ldr	r1, [sp, #24]
 800b7c8:	6096      	str	r6, [r2, #8]
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	61d5      	str	r5, [r2, #28]
 800b7ce:	f8c2 c010 	str.w	ip, [r2, #16]
 800b7d2:	f8c2 a014 	str.w	sl, [r2, #20]
 800b7d6:	6191      	str	r1, [r2, #24]
 800b7d8:	b009      	add	sp, #36	; 0x24
 800b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7de:	46c2      	mov	sl, r8
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	e7ee      	b.n	800b7c2 <D64_1CH_HTONS_VOL_HP+0x172>
 800b7e4:	20000000 	.word	0x20000000
 800b7e8:	001c0015 	.word	0x001c0015
 800b7ec:	000f000a 	.word	0x000f000a
 800b7f0:	00060003 	.word	0x00060003
 800b7f4:	0024002a 	.word	0x0024002a
 800b7f8:	002e0030 	.word	0x002e0030
 800b7fc:	00030006 	.word	0x00030006
 800b800:	000a000f 	.word	0x000a000f
 800b804:	0015001c 	.word	0x0015001c

0800b808 <D80_1CH_HTONS_VOL_HP>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	4613      	mov	r3, r2
 800b80e:	b089      	sub	sp, #36	; 0x24
 800b810:	4686      	mov	lr, r0
 800b812:	6918      	ldr	r0, [r3, #16]
 800b814:	9000      	str	r0, [sp, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	461c      	mov	r4, r3
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	9302      	str	r3, [sp, #8]
 800b81e:	6983      	ldr	r3, [r0, #24]
 800b820:	9306      	str	r3, [sp, #24]
 800b822:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800b826:	69c3      	ldr	r3, [r0, #28]
 800b828:	68c0      	ldr	r0, [r0, #12]
 800b82a:	9207      	str	r2, [sp, #28]
 800b82c:	9001      	str	r0, [sp, #4]
 800b82e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b830:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b832:	9003      	str	r0, [sp, #12]
 800b834:	6a20      	ldr	r0, [r4, #32]
 800b836:	9004      	str	r0, [sp, #16]
 800b838:	2a00      	cmp	r2, #0
 800b83a:	f000 80d2 	beq.w	800b9e2 <D80_1CH_HTONS_VOL_HP+0x1da>
 800b83e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b842:	4869      	ldr	r0, [pc, #420]	; (800b9e8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b844:	9205      	str	r2, [sp, #20]
 800b846:	461c      	mov	r4, r3
 800b848:	f8de 5000 	ldr.w	r5, [lr]
 800b84c:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b850:	f8de 3008 	ldr.w	r3, [lr, #8]
 800b854:	f10e 0e0a 	add.w	lr, lr, #10
 800b858:	ba6d      	rev16	r5, r5
 800b85a:	ba52      	rev16	r2, r2
 800b85c:	fa93 fb93 	rev16.w	fp, r3
 800b860:	b2ee      	uxtb	r6, r5
 800b862:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800b866:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800b86a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b86e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800b872:	eb04 0a07 	add.w	sl, r4, r7
 800b876:	0e2d      	lsrs	r5, r5, #24
 800b878:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800b87c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800b880:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800b884:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800b888:	b2d5      	uxtb	r5, r2
 800b88a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b88e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800b892:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800b896:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b89a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b89e:	0e12      	lsrs	r2, r2, #24
 800b8a0:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800b8a4:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800b8a8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b8ac:	fa5f f48b 	uxtb.w	r4, fp
 800b8b0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b8b4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800b8b8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b8bc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800b8c0:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800b8c4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800b8c8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800b8cc:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800b8d0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b8d4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b8d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b8dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b8e0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b8e4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b8e8:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800b8ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8f0:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800b8f4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b8f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b8fc:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800b900:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800b904:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800b908:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800b90c:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800b910:	4d36      	ldr	r5, [pc, #216]	; (800b9ec <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b912:	9f01      	ldr	r7, [sp, #4]
 800b914:	fb23 7505 	smlad	r5, r3, r5, r7
 800b918:	4f35      	ldr	r7, [pc, #212]	; (800b9f0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b91a:	fb29 5507 	smlad	r5, r9, r7, r5
 800b91e:	4f35      	ldr	r7, [pc, #212]	; (800b9f4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b920:	fb28 5507 	smlad	r5, r8, r7, r5
 800b924:	4f34      	ldr	r7, [pc, #208]	; (800b9f8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b926:	fb22 5507 	smlad	r5, r2, r7, r5
 800b92a:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b92e:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800b932:	4d32      	ldr	r5, [pc, #200]	; (800b9fc <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b934:	fb23 cc05 	smlad	ip, r3, r5, ip
 800b938:	4d31      	ldr	r5, [pc, #196]	; (800ba00 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b93a:	fb29 cc05 	smlad	ip, r9, r5, ip
 800b93e:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800b942:	fb28 c505 	smlad	r5, r8, r5, ip
 800b946:	4f2f      	ldr	r7, [pc, #188]	; (800ba04 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800b948:	fb22 5507 	smlad	r5, r2, r7, r5
 800b94c:	4f2e      	ldr	r7, [pc, #184]	; (800ba08 <D80_1CH_HTONS_VOL_HP+0x200>)
 800b94e:	fb26 5507 	smlad	r5, r6, r7, r5
 800b952:	f04f 0a01 	mov.w	sl, #1
 800b956:	9501      	str	r5, [sp, #4]
 800b958:	fb23 fa0a 	smuad	sl, r3, sl
 800b95c:	4b2b      	ldr	r3, [pc, #172]	; (800ba0c <D80_1CH_HTONS_VOL_HP+0x204>)
 800b95e:	fb29 a903 	smlad	r9, r9, r3, sl
 800b962:	4d2b      	ldr	r5, [pc, #172]	; (800ba10 <D80_1CH_HTONS_VOL_HP+0x208>)
 800b964:	fb28 9805 	smlad	r8, r8, r5, r9
 800b968:	4d2a      	ldr	r5, [pc, #168]	; (800ba14 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800b96a:	fb22 8205 	smlad	r2, r2, r5, r8
 800b96e:	4b2a      	ldr	r3, [pc, #168]	; (800ba18 <D80_1CH_HTONS_VOL_HP+0x210>)
 800b970:	fb26 2c03 	smlad	ip, r6, r3, r2
 800b974:	9b00      	ldr	r3, [sp, #0]
 800b976:	9d04      	ldr	r5, [sp, #16]
 800b978:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800b97c:	4453      	add	r3, sl
 800b97e:	461a      	mov	r2, r3
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	f8cd a008 	str.w	sl, [sp, #8]
 800b986:	1ad2      	subs	r2, r2, r3
 800b988:	17d7      	asrs	r7, r2, #31
 800b98a:	fba2 2305 	umull	r2, r3, r2, r5
 800b98e:	fb05 3307 	mla	r3, r5, r7, r3
 800b992:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b996:	f143 0300 	adc.w	r3, r3, #0
 800b99a:	9d03      	ldr	r5, [sp, #12]
 800b99c:	029a      	lsls	r2, r3, #10
 800b99e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b9a2:	2700      	movs	r7, #0
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	fbc5 6702 	smlal	r6, r7, r5, r2
 800b9aa:	10ba      	asrs	r2, r7, #2
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	f302 020f 	ssat	r2, #16, r2
 800b9b2:	9b05      	ldr	r3, [sp, #20]
 800b9b4:	f821 2b02 	strh.w	r2, [r1], #2
 800b9b8:	4299      	cmp	r1, r3
 800b9ba:	f47f af45 	bne.w	800b848 <D80_1CH_HTONS_VOL_HP+0x40>
 800b9be:	4623      	mov	r3, r4
 800b9c0:	9907      	ldr	r1, [sp, #28]
 800b9c2:	9801      	ldr	r0, [sp, #4]
 800b9c4:	60c8      	str	r0, [r1, #12]
 800b9c6:	9a00      	ldr	r2, [sp, #0]
 800b9c8:	f8c1 c008 	str.w	ip, [r1, #8]
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	61cb      	str	r3, [r1, #28]
 800b9d0:	610a      	str	r2, [r1, #16]
 800b9d2:	f8c1 a014 	str.w	sl, [r1, #20]
 800b9d6:	9906      	ldr	r1, [sp, #24]
 800b9d8:	6181      	str	r1, [r0, #24]
 800b9da:	2000      	movs	r0, #0
 800b9dc:	b009      	add	sp, #36	; 0x24
 800b9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e2:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b9e6:	e7eb      	b.n	800b9c0 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800b9e8:	20000000 	.word	0x20000000
 800b9ec:	002d0024 	.word	0x002d0024
 800b9f0:	001c0015 	.word	0x001c0015
 800b9f4:	000f000a 	.word	0x000f000a
 800b9f8:	00060003 	.word	0x00060003
 800b9fc:	0037003f 	.word	0x0037003f
 800ba00:	00450049 	.word	0x00450049
 800ba04:	00490045 	.word	0x00490045
 800ba08:	003f0037 	.word	0x003f0037
 800ba0c:	00030006 	.word	0x00030006
 800ba10:	000a000f 	.word	0x000a000f
 800ba14:	0015001c 	.word	0x0015001c
 800ba18:	0024002d 	.word	0x0024002d

0800ba1c <D128_1CH_HTONS_VOL_HP>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	b093      	sub	sp, #76	; 0x4c
 800ba22:	4614      	mov	r4, r2
 800ba24:	9211      	str	r2, [sp, #68]	; 0x44
 800ba26:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ba28:	6912      	ldr	r2, [r2, #16]
 800ba2a:	9203      	str	r2, [sp, #12]
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	4615      	mov	r5, r2
 800ba30:	6964      	ldr	r4, [r4, #20]
 800ba32:	9406      	str	r4, [sp, #24]
 800ba34:	4614      	mov	r4, r2
 800ba36:	6992      	ldr	r2, [r2, #24]
 800ba38:	9210      	str	r2, [sp, #64]	; 0x40
 800ba3a:	68ea      	ldr	r2, [r5, #12]
 800ba3c:	9204      	str	r2, [sp, #16]
 800ba3e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ba40:	69e6      	ldr	r6, [r4, #28]
 800ba42:	920d      	str	r2, [sp, #52]	; 0x34
 800ba44:	68a4      	ldr	r4, [r4, #8]
 800ba46:	6a2a      	ldr	r2, [r5, #32]
 800ba48:	9405      	str	r4, [sp, #20]
 800ba4a:	920e      	str	r2, [sp, #56]	; 0x38
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 8145 	beq.w	800bcdc <D128_1CH_HTONS_VOL_HP+0x2c0>
 800ba52:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ba56:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba58:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800bd38 <D128_1CH_HTONS_VOL_HP+0x31c>
 800ba5c:	9107      	str	r1, [sp, #28]
 800ba5e:	f100 0310 	add.w	r3, r0, #16
 800ba62:	4699      	mov	r9, r3
 800ba64:	f1a9 0110 	sub.w	r1, r9, #16
 800ba68:	c90e      	ldmia	r1, {r1, r2, r3}
 800ba6a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800ba6e:	ba49      	rev16	r1, r1
 800ba70:	ba52      	rev16	r2, r2
 800ba72:	ba5b      	rev16	r3, r3
 800ba74:	fa90 fa90 	rev16.w	sl, r0
 800ba78:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800ba7c:	b2cc      	uxtb	r4, r1
 800ba7e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800ba82:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800ba86:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800ba8a:	0e09      	lsrs	r1, r1, #24
 800ba8c:	4426      	add	r6, r4
 800ba8e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800ba92:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800ba96:	b2d0      	uxtb	r0, r2
 800ba98:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800ba9c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800baa0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800baa4:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800baa8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800baac:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800bab0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800bab4:	0e12      	lsrs	r2, r2, #24
 800bab6:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800baba:	9701      	str	r7, [sp, #4]
 800babc:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800bac0:	4627      	mov	r7, r4
 800bac2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800bac6:	9702      	str	r7, [sp, #8]
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800bace:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800bad2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800bad6:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800bada:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800bade:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bae2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800bae6:	0e1b      	lsrs	r3, r3, #24
 800bae8:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800baec:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800baf0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800baf4:	fa5f f38a 	uxtb.w	r3, sl
 800baf8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bafc:	960a      	str	r6, [sp, #40]	; 0x28
 800bafe:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800bb02:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800bb06:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bb0a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800bb0e:	950b      	str	r5, [sp, #44]	; 0x2c
 800bb10:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800bb14:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800bb18:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800bb1c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800bb20:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800bb24:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800bb28:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800bb2c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800bb30:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800bb34:	9308      	str	r3, [sp, #32]
 800bb36:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800bb40:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bb44:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800bb48:	9b02      	ldr	r3, [sp, #8]
 800bb4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb4e:	9302      	str	r3, [sp, #8]
 800bb50:	9b08      	ldr	r3, [sp, #32]
 800bb52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb56:	9308      	str	r3, [sp, #32]
 800bb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb5a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bb5e:	950c      	str	r5, [sp, #48]	; 0x30
 800bb60:	461d      	mov	r5, r3
 800bb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb64:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bb68:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bb6c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800bb70:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	9202      	str	r2, [sp, #8]
 800bb7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb7e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bb82:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bb86:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800bb8a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bb8e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800bb92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb96:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	9f01      	ldr	r7, [sp, #4]
 800bb9e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bba2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bba6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bbaa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bbae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800bbb2:	46be      	mov	lr, r7
 800bbb4:	0a96      	lsrs	r6, r2, #10
 800bbb6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800bbba:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800bbbe:	4f49      	ldr	r7, [pc, #292]	; (800bce4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800bbc0:	9a04      	ldr	r2, [sp, #16]
 800bbc2:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800bbc6:	4a48      	ldr	r2, [pc, #288]	; (800bce8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800bbc8:	fb2a ee02 	smlad	lr, sl, r2, lr
 800bbcc:	4a47      	ldr	r2, [pc, #284]	; (800bcec <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800bbce:	fb21 ee02 	smlad	lr, r1, r2, lr
 800bbd2:	4a47      	ldr	r2, [pc, #284]	; (800bcf0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800bbd4:	fb24 ee02 	smlad	lr, r4, r2, lr
 800bbd8:	4a46      	ldr	r2, [pc, #280]	; (800bcf4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800bbda:	9f02      	ldr	r7, [sp, #8]
 800bbdc:	fb27 ee02 	smlad	lr, r7, r2, lr
 800bbe0:	4a45      	ldr	r2, [pc, #276]	; (800bcf8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800bbe2:	fb20 ee02 	smlad	lr, r0, r2, lr
 800bbe6:	4a45      	ldr	r2, [pc, #276]	; (800bcfc <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800bbe8:	fb23 e702 	smlad	r7, r3, r2, lr
 800bbec:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800bbf0:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800bbf4:	9f01      	ldr	r7, [sp, #4]
 800bbf6:	4a42      	ldr	r2, [pc, #264]	; (800bd00 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800bbf8:	46bc      	mov	ip, r7
 800bbfa:	9f05      	ldr	r7, [sp, #20]
 800bbfc:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800bc00:	4a40      	ldr	r2, [pc, #256]	; (800bd04 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800bc02:	fb2a cc02 	smlad	ip, sl, r2, ip
 800bc06:	4f40      	ldr	r7, [pc, #256]	; (800bd08 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800bc08:	fb21 cc07 	smlad	ip, r1, r7, ip
 800bc0c:	4f3f      	ldr	r7, [pc, #252]	; (800bd0c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800bc0e:	fb24 cc07 	smlad	ip, r4, r7, ip
 800bc12:	4f3f      	ldr	r7, [pc, #252]	; (800bd10 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800bc14:	9a02      	ldr	r2, [sp, #8]
 800bc16:	fb22 cc07 	smlad	ip, r2, r7, ip
 800bc1a:	4f3e      	ldr	r7, [pc, #248]	; (800bd14 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800bc1c:	fb20 cc07 	smlad	ip, r0, r7, ip
 800bc20:	4f3d      	ldr	r7, [pc, #244]	; (800bd18 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800bc22:	fb23 c707 	smlad	r7, r3, r7, ip
 800bc26:	f8df c114 	ldr.w	ip, [pc, #276]	; 800bd3c <D128_1CH_HTONS_VOL_HP+0x320>
 800bc2a:	fb25 720c 	smlad	r2, r5, ip, r7
 800bc2e:	f04f 0b01 	mov.w	fp, #1
 800bc32:	9204      	str	r2, [sp, #16]
 800bc34:	9f01      	ldr	r7, [sp, #4]
 800bc36:	fb27 fb0b 	smuad	fp, r7, fp
 800bc3a:	4f38      	ldr	r7, [pc, #224]	; (800bd1c <D128_1CH_HTONS_VOL_HP+0x300>)
 800bc3c:	fb2a ba07 	smlad	sl, sl, r7, fp
 800bc40:	4f37      	ldr	r7, [pc, #220]	; (800bd20 <D128_1CH_HTONS_VOL_HP+0x304>)
 800bc42:	fb21 aa07 	smlad	sl, r1, r7, sl
 800bc46:	4f37      	ldr	r7, [pc, #220]	; (800bd24 <D128_1CH_HTONS_VOL_HP+0x308>)
 800bc48:	fb24 aa07 	smlad	sl, r4, r7, sl
 800bc4c:	4f36      	ldr	r7, [pc, #216]	; (800bd28 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800bc4e:	9a02      	ldr	r2, [sp, #8]
 800bc50:	fb22 a707 	smlad	r7, r2, r7, sl
 800bc54:	4a35      	ldr	r2, [pc, #212]	; (800bd2c <D128_1CH_HTONS_VOL_HP+0x310>)
 800bc56:	fb20 7702 	smlad	r7, r0, r2, r7
 800bc5a:	4a35      	ldr	r2, [pc, #212]	; (800bd30 <D128_1CH_HTONS_VOL_HP+0x314>)
 800bc5c:	fb23 7702 	smlad	r7, r3, r2, r7
 800bc60:	4b34      	ldr	r3, [pc, #208]	; (800bd34 <D128_1CH_HTONS_VOL_HP+0x318>)
 800bc62:	fb25 7303 	smlad	r3, r5, r3, r7
 800bc66:	9305      	str	r3, [sp, #20]
 800bc68:	9b03      	ldr	r3, [sp, #12]
 800bc6a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800bc6c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800bc70:	4473      	add	r3, lr
 800bc72:	461a      	mov	r2, r3
 800bc74:	9b06      	ldr	r3, [sp, #24]
 800bc76:	f8cd e018 	str.w	lr, [sp, #24]
 800bc7a:	1ad2      	subs	r2, r2, r3
 800bc7c:	17d1      	asrs	r1, r2, #31
 800bc7e:	fba2 2304 	umull	r2, r3, r2, r4
 800bc82:	fb04 3301 	mla	r3, r4, r1, r3
 800bc86:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bc8a:	f143 0300 	adc.w	r3, r3, #0
 800bc8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bc90:	021a      	lsls	r2, r3, #8
 800bc92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bc96:	2100      	movs	r1, #0
 800bc98:	fbc4 0102 	smlal	r0, r1, r4, r2
 800bc9c:	108a      	asrs	r2, r1, #2
 800bc9e:	9907      	ldr	r1, [sp, #28]
 800bca0:	f302 020f 	ssat	r2, #16, r2
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	f821 2b02 	strh.w	r2, [r1], #2
 800bcaa:	9303      	str	r3, [sp, #12]
 800bcac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcae:	9107      	str	r1, [sp, #28]
 800bcb0:	4299      	cmp	r1, r3
 800bcb2:	f109 0910 	add.w	r9, r9, #16
 800bcb6:	f47f aed5 	bne.w	800ba64 <D128_1CH_HTONS_VOL_HP+0x48>
 800bcba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bcbc:	9905      	ldr	r1, [sp, #20]
 800bcbe:	6091      	str	r1, [r2, #8]
 800bcc0:	9904      	ldr	r1, [sp, #16]
 800bcc2:	60d1      	str	r1, [r2, #12]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	61d6      	str	r6, [r2, #28]
 800bcc8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bcca:	9a03      	ldr	r2, [sp, #12]
 800bccc:	611a      	str	r2, [r3, #16]
 800bcce:	2000      	movs	r0, #0
 800bcd0:	f8c3 e014 	str.w	lr, [r3, #20]
 800bcd4:	6199      	str	r1, [r3, #24]
 800bcd6:	b013      	add	sp, #76	; 0x4c
 800bcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcdc:	f8dd e018 	ldr.w	lr, [sp, #24]
 800bce0:	e7eb      	b.n	800bcba <D128_1CH_HTONS_VOL_HP+0x29e>
 800bce2:	bf00      	nop
 800bce4:	00780069 	.word	0x00780069
 800bce8:	005b004e 	.word	0x005b004e
 800bcec:	00420037 	.word	0x00420037
 800bcf0:	002d0024 	.word	0x002d0024
 800bcf4:	001c0015 	.word	0x001c0015
 800bcf8:	000f000a 	.word	0x000f000a
 800bcfc:	00060003 	.word	0x00060003
 800bd00:	00880096 	.word	0x00880096
 800bd04:	00a200ac 	.word	0x00a200ac
 800bd08:	00b400ba 	.word	0x00b400ba
 800bd0c:	00be00c0 	.word	0x00be00c0
 800bd10:	00c000be 	.word	0x00c000be
 800bd14:	00ba00b4 	.word	0x00ba00b4
 800bd18:	00ac00a2 	.word	0x00ac00a2
 800bd1c:	00030006 	.word	0x00030006
 800bd20:	000a000f 	.word	0x000a000f
 800bd24:	0015001c 	.word	0x0015001c
 800bd28:	0024002d 	.word	0x0024002d
 800bd2c:	00370042 	.word	0x00370042
 800bd30:	004e005b 	.word	0x004e005b
 800bd34:	00690078 	.word	0x00690078
 800bd38:	20000000 	.word	0x20000000
 800bd3c:	00960088 	.word	0x00960088

0800bd40 <PDM_Filter_Init>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	2240      	movs	r2, #64	; 0x40
 800bd44:	4604      	mov	r4, r0
 800bd46:	2100      	movs	r1, #0
 800bd48:	300c      	adds	r0, #12
 800bd4a:	f000 fb36 	bl	800c3ba <memset>
 800bd4e:	493b      	ldr	r1, [pc, #236]	; (800be3c <PDM_Filter_Init+0xfc>)
 800bd50:	483b      	ldr	r0, [pc, #236]	; (800be40 <PDM_Filter_Init+0x100>)
 800bd52:	f000 f971 	bl	800c038 <CRC_Lock>
 800bd56:	8822      	ldrh	r2, [r4, #0]
 800bd58:	8963      	ldrh	r3, [r4, #10]
 800bd5a:	4938      	ldr	r1, [pc, #224]	; (800be3c <PDM_Filter_Init+0xfc>)
 800bd5c:	8925      	ldrh	r5, [r4, #8]
 800bd5e:	86a3      	strh	r3, [r4, #52]	; 0x34
 800bd60:	2801      	cmp	r0, #1
 800bd62:	f04f 0300 	mov.w	r3, #0
 800bd66:	bf18      	it	ne
 800bd68:	2100      	movne	r1, #0
 800bd6a:	2a01      	cmp	r2, #1
 800bd6c:	6461      	str	r1, [r4, #68]	; 0x44
 800bd6e:	86e5      	strh	r5, [r4, #54]	; 0x36
 800bd70:	61a3      	str	r3, [r4, #24]
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	6163      	str	r3, [r4, #20]
 800bd76:	60e3      	str	r3, [r4, #12]
 800bd78:	6263      	str	r3, [r4, #36]	; 0x24
 800bd7a:	61e3      	str	r3, [r4, #28]
 800bd7c:	6223      	str	r3, [r4, #32]
 800bd7e:	6423      	str	r3, [r4, #64]	; 0x40
 800bd80:	d918      	bls.n	800bdb4 <PDM_Filter_Init+0x74>
 800bd82:	2003      	movs	r0, #3
 800bd84:	2302      	movs	r3, #2
 800bd86:	8862      	ldrh	r2, [r4, #2]
 800bd88:	2a01      	cmp	r2, #1
 800bd8a:	d91d      	bls.n	800bdc8 <PDM_Filter_Init+0x88>
 800bd8c:	2140      	movs	r1, #64	; 0x40
 800bd8e:	2300      	movs	r3, #0
 800bd90:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bd92:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800bd96:	6862      	ldr	r2, [r4, #4]
 800bd98:	bf04      	itt	eq
 800bd9a:	6421      	streq	r1, [r4, #64]	; 0x40
 800bd9c:	460b      	moveq	r3, r1
 800bd9e:	b11a      	cbz	r2, 800bda8 <PDM_Filter_Init+0x68>
 800bda0:	f043 0310 	orr.w	r3, r3, #16
 800bda4:	6423      	str	r3, [r4, #64]	; 0x40
 800bda6:	62e2      	str	r2, [r4, #44]	; 0x2c
 800bda8:	2200      	movs	r2, #0
 800bdaa:	8722      	strh	r2, [r4, #56]	; 0x38
 800bdac:	b908      	cbnz	r0, 800bdb2 <PDM_Filter_Init+0x72>
 800bdae:	3380      	adds	r3, #128	; 0x80
 800bdb0:	6423      	str	r3, [r4, #64]	; 0x40
 800bdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb4:	4d23      	ldr	r5, [pc, #140]	; (800be44 <PDM_Filter_Init+0x104>)
 800bdb6:	d010      	beq.n	800bdda <PDM_Filter_Init+0x9a>
 800bdb8:	782a      	ldrb	r2, [r5, #0]
 800bdba:	2a01      	cmp	r2, #1
 800bdbc:	d027      	beq.n	800be0e <PDM_Filter_Init+0xce>
 800bdbe:	8862      	ldrh	r2, [r4, #2]
 800bdc0:	2a01      	cmp	r2, #1
 800bdc2:	f04f 0001 	mov.w	r0, #1
 800bdc6:	d8e1      	bhi.n	800bd8c <PDM_Filter_Init+0x4c>
 800bdc8:	d001      	beq.n	800bdce <PDM_Filter_Init+0x8e>
 800bdca:	4618      	mov	r0, r3
 800bdcc:	e7de      	b.n	800bd8c <PDM_Filter_Init+0x4c>
 800bdce:	2220      	movs	r2, #32
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	6422      	str	r2, [r4, #64]	; 0x40
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	2160      	movs	r1, #96	; 0x60
 800bdd8:	e7da      	b.n	800bd90 <PDM_Filter_Init+0x50>
 800bdda:	7829      	ldrb	r1, [r5, #0]
 800bddc:	2900      	cmp	r1, #0
 800bdde:	d1ee      	bne.n	800bdbe <PDM_Filter_Init+0x7e>
 800bde0:	4919      	ldr	r1, [pc, #100]	; (800be48 <PDM_Filter_Init+0x108>)
 800bde2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800be50 <PDM_Filter_Init+0x110>
 800bde6:	4f19      	ldr	r7, [pc, #100]	; (800be4c <PDM_Filter_Init+0x10c>)
 800bde8:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800bdec:	684a      	ldr	r2, [r1, #4]
 800bdee:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800bdf2:	ea02 0007 	and.w	r0, r2, r7
 800bdf6:	4303      	orrs	r3, r0
 800bdf8:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f841 3f04 	str.w	r3, [r1, #4]!
 800be02:	428e      	cmp	r6, r1
 800be04:	d1f2      	bne.n	800bdec <PDM_Filter_Init+0xac>
 800be06:	2001      	movs	r0, #1
 800be08:	7028      	strb	r0, [r5, #0]
 800be0a:	2300      	movs	r3, #0
 800be0c:	e7bb      	b.n	800bd86 <PDM_Filter_Init+0x46>
 800be0e:	490e      	ldr	r1, [pc, #56]	; (800be48 <PDM_Filter_Init+0x108>)
 800be10:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800be50 <PDM_Filter_Init+0x110>
 800be14:	4f0d      	ldr	r7, [pc, #52]	; (800be4c <PDM_Filter_Init+0x10c>)
 800be16:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800be1a:	684a      	ldr	r2, [r1, #4]
 800be1c:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800be20:	ea02 0007 	and.w	r0, r2, r7
 800be24:	4303      	orrs	r3, r0
 800be26:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800be2a:	4413      	add	r3, r2
 800be2c:	f841 3f04 	str.w	r3, [r1, #4]!
 800be30:	428e      	cmp	r6, r1
 800be32:	d1f2      	bne.n	800be1a <PDM_Filter_Init+0xda>
 800be34:	2300      	movs	r3, #0
 800be36:	702b      	strb	r3, [r5, #0]
 800be38:	e7c1      	b.n	800bdbe <PDM_Filter_Init+0x7e>
 800be3a:	bf00      	nop
 800be3c:	b5e8b5cd 	.word	0xb5e8b5cd
 800be40:	f407a5c2 	.word	0xf407a5c2
 800be44:	200004b0 	.word	0x200004b0
 800be48:	1ffffffc 	.word	0x1ffffffc
 800be4c:	000ffc00 	.word	0x000ffc00
 800be50:	3ff00000 	.word	0x3ff00000

0800be54 <PDM_Filter_setConfig>:
 800be54:	4b66      	ldr	r3, [pc, #408]	; (800bff0 <PDM_Filter_setConfig+0x19c>)
 800be56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be58:	429a      	cmp	r2, r3
 800be5a:	d001      	beq.n	800be60 <PDM_Filter_setConfig+0xc>
 800be5c:	2004      	movs	r0, #4
 800be5e:	4770      	bx	lr
 800be60:	b530      	push	{r4, r5, lr}
 800be62:	880a      	ldrh	r2, [r1, #0]
 800be64:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800be66:	ed2d 8b04 	vpush	{d8-d9}
 800be6a:	4604      	mov	r4, r0
 800be6c:	460d      	mov	r5, r1
 800be6e:	1e51      	subs	r1, r2, #1
 800be70:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800be74:	2906      	cmp	r1, #6
 800be76:	b083      	sub	sp, #12
 800be78:	6420      	str	r0, [r4, #64]	; 0x40
 800be7a:	d91a      	bls.n	800beb2 <PDM_Filter_setConfig+0x5e>
 800be7c:	2008      	movs	r0, #8
 800be7e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800be82:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800be86:	4299      	cmp	r1, r3
 800be88:	d07e      	beq.n	800bf88 <PDM_Filter_setConfig+0x134>
 800be8a:	f113 0f0c 	cmn.w	r3, #12
 800be8e:	da2a      	bge.n	800bee6 <PDM_Filter_setConfig+0x92>
 800be90:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800be94:	3040      	adds	r0, #64	; 0x40
 800be96:	80ab      	strh	r3, [r5, #4]
 800be98:	8622      	strh	r2, [r4, #48]	; 0x30
 800be9a:	886b      	ldrh	r3, [r5, #2]
 800be9c:	8663      	strh	r3, [r4, #50]	; 0x32
 800be9e:	b920      	cbnz	r0, 800beaa <PDM_Filter_setConfig+0x56>
 800bea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bea6:	6423      	str	r3, [r4, #64]	; 0x40
 800bea8:	2000      	movs	r0, #0
 800beaa:	b003      	add	sp, #12
 800beac:	ecbd 8b04 	vpop	{d8-d9}
 800beb0:	bd30      	pop	{r4, r5, pc}
 800beb2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800beb4:	4291      	cmp	r1, r2
 800beb6:	d06c      	beq.n	800bf92 <PDM_Filter_setConfig+0x13e>
 800beb8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800bebc:	f023 0301 	bic.w	r3, r3, #1
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800bec6:	6423      	str	r3, [r4, #64]	; 0x40
 800bec8:	2970      	cmp	r1, #112	; 0x70
 800beca:	f003 030f 	and.w	r3, r3, #15
 800bece:	f103 33ff 	add.w	r3, r3, #4294967295
 800bed2:	d066      	beq.n	800bfa2 <PDM_Filter_setConfig+0x14e>
 800bed4:	2b06      	cmp	r3, #6
 800bed6:	f200 8089 	bhi.w	800bfec <PDM_Filter_setConfig+0x198>
 800beda:	e8df f003 	tbb	[pc, r3]
 800bede:	4f52      	.short	0x4f52
 800bee0:	3d43494c 	.word	0x3d43494c
 800bee4:	46          	.byte	0x46
 800bee5:	00          	.byte	0x00
 800bee6:	2b33      	cmp	r3, #51	; 0x33
 800bee8:	dc32      	bgt.n	800bf50 <PDM_Filter_setConfig+0xfc>
 800beea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800beec:	f002 020f 	and.w	r2, r2, #15
 800bef0:	3a01      	subs	r2, #1
 800bef2:	2a06      	cmp	r2, #6
 800bef4:	d872      	bhi.n	800bfdc <PDM_Filter_setConfig+0x188>
 800bef6:	493f      	ldr	r1, [pc, #252]	; (800bff4 <PDM_Filter_setConfig+0x1a0>)
 800bef8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800befc:	ed92 9a00 	vldr	s18, [r2]
 800bf00:	ed92 8a07 	vldr	s16, [r2, #28]
 800bf04:	9001      	str	r0, [sp, #4]
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf0e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800bf12:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800bf16:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800bf1a:	f000 fda7 	bl	800ca6c <powf>
 800bf1e:	eddf 0a36 	vldr	s1, [pc, #216]	; 800bff8 <PDM_Filter_setConfig+0x1a4>
 800bf22:	eef0 8a40 	vmov.f32	s17, s0
 800bf26:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800bf2a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bf2e:	f000 fd9d 	bl	800ca6c <powf>
 800bf32:	ee28 8a28 	vmul.f32	s16, s16, s17
 800bf36:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bf3a:	f000 fd71 	bl	800ca20 <roundf>
 800bf3e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800bf42:	88ab      	ldrh	r3, [r5, #4]
 800bf44:	882a      	ldrh	r2, [r5, #0]
 800bf46:	9801      	ldr	r0, [sp, #4]
 800bf48:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800bf4c:	8723      	strh	r3, [r4, #56]	; 0x38
 800bf4e:	e7a3      	b.n	800be98 <PDM_Filter_setConfig+0x44>
 800bf50:	2333      	movs	r3, #51	; 0x33
 800bf52:	3040      	adds	r0, #64	; 0x40
 800bf54:	80ab      	strh	r3, [r5, #4]
 800bf56:	e79f      	b.n	800be98 <PDM_Filter_setConfig+0x44>
 800bf58:	4b28      	ldr	r3, [pc, #160]	; (800bffc <PDM_Filter_setConfig+0x1a8>)
 800bf5a:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf5c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800bf60:	2000      	movs	r0, #0
 800bf62:	e792      	b.n	800be8a <PDM_Filter_setConfig+0x36>
 800bf64:	4b26      	ldr	r3, [pc, #152]	; (800c000 <PDM_Filter_setConfig+0x1ac>)
 800bf66:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf68:	e7f8      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bf6a:	4b26      	ldr	r3, [pc, #152]	; (800c004 <PDM_Filter_setConfig+0x1b0>)
 800bf6c:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf6e:	e7f5      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bf70:	4b25      	ldr	r3, [pc, #148]	; (800c008 <PDM_Filter_setConfig+0x1b4>)
 800bf72:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf74:	e7f2      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bf76:	4b25      	ldr	r3, [pc, #148]	; (800c00c <PDM_Filter_setConfig+0x1b8>)
 800bf78:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf7a:	e7ef      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bf7c:	4b24      	ldr	r3, [pc, #144]	; (800c010 <PDM_Filter_setConfig+0x1bc>)
 800bf7e:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf80:	e7ec      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bf82:	4b24      	ldr	r3, [pc, #144]	; (800c014 <PDM_Filter_setConfig+0x1c0>)
 800bf84:	64a3      	str	r3, [r4, #72]	; 0x48
 800bf86:	e7e9      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bf88:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800bf8a:	4291      	cmp	r1, r2
 800bf8c:	f47f af7d 	bne.w	800be8a <PDM_Filter_setConfig+0x36>
 800bf90:	e783      	b.n	800be9a <PDM_Filter_setConfig+0x46>
 800bf92:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800bf96:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800bf9a:	4299      	cmp	r1, r3
 800bf9c:	d023      	beq.n	800bfe6 <PDM_Filter_setConfig+0x192>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	e773      	b.n	800be8a <PDM_Filter_setConfig+0x36>
 800bfa2:	2b06      	cmp	r3, #6
 800bfa4:	d822      	bhi.n	800bfec <PDM_Filter_setConfig+0x198>
 800bfa6:	e8df f003 	tbb	[pc, r3]
 800bfaa:	1316      	.short	0x1316
 800bfac:	070a0d10 	.word	0x070a0d10
 800bfb0:	04          	.byte	0x04
 800bfb1:	00          	.byte	0x00
 800bfb2:	4b19      	ldr	r3, [pc, #100]	; (800c018 <PDM_Filter_setConfig+0x1c4>)
 800bfb4:	64a3      	str	r3, [r4, #72]	; 0x48
 800bfb6:	e7d1      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bfb8:	4b18      	ldr	r3, [pc, #96]	; (800c01c <PDM_Filter_setConfig+0x1c8>)
 800bfba:	64a3      	str	r3, [r4, #72]	; 0x48
 800bfbc:	e7ce      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bfbe:	4b18      	ldr	r3, [pc, #96]	; (800c020 <PDM_Filter_setConfig+0x1cc>)
 800bfc0:	64a3      	str	r3, [r4, #72]	; 0x48
 800bfc2:	e7cb      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bfc4:	4b17      	ldr	r3, [pc, #92]	; (800c024 <PDM_Filter_setConfig+0x1d0>)
 800bfc6:	64a3      	str	r3, [r4, #72]	; 0x48
 800bfc8:	e7c8      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bfca:	4b17      	ldr	r3, [pc, #92]	; (800c028 <PDM_Filter_setConfig+0x1d4>)
 800bfcc:	64a3      	str	r3, [r4, #72]	; 0x48
 800bfce:	e7c5      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bfd0:	4b16      	ldr	r3, [pc, #88]	; (800c02c <PDM_Filter_setConfig+0x1d8>)
 800bfd2:	64a3      	str	r3, [r4, #72]	; 0x48
 800bfd4:	e7c2      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bfd6:	4b16      	ldr	r3, [pc, #88]	; (800c030 <PDM_Filter_setConfig+0x1dc>)
 800bfd8:	64a3      	str	r3, [r4, #72]	; 0x48
 800bfda:	e7bf      	b.n	800bf5c <PDM_Filter_setConfig+0x108>
 800bfdc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800c034 <PDM_Filter_setConfig+0x1e0>
 800bfe0:	eeb0 9a48 	vmov.f32	s18, s16
 800bfe4:	e78e      	b.n	800bf04 <PDM_Filter_setConfig+0xb0>
 800bfe6:	886b      	ldrh	r3, [r5, #2]
 800bfe8:	8663      	strh	r3, [r4, #50]	; 0x32
 800bfea:	e759      	b.n	800bea0 <PDM_Filter_setConfig+0x4c>
 800bfec:	2000      	movs	r0, #0
 800bfee:	e746      	b.n	800be7e <PDM_Filter_setConfig+0x2a>
 800bff0:	b5e8b5cd 	.word	0xb5e8b5cd
 800bff4:	0800d4b0 	.word	0x0800d4b0
 800bff8:	42000000 	.word	0x42000000
 800bffc:	0800a3c1 	.word	0x0800a3c1
 800c000:	0800a2a1 	.word	0x0800a2a1
 800c004:	0800a551 	.word	0x0800a551
 800c008:	0800ad95 	.word	0x0800ad95
 800c00c:	0800aaf5 	.word	0x0800aaf5
 800c010:	0800a8d5 	.word	0x0800a8d5
 800c014:	0800a6e9 	.word	0x0800a6e9
 800c018:	0800b3a1 	.word	0x0800b3a1
 800c01c:	0800b269 	.word	0x0800b269
 800c020:	0800b185 	.word	0x0800b185
 800c024:	0800ba1d 	.word	0x0800ba1d
 800c028:	0800b809 	.word	0x0800b809
 800c02c:	0800b651 	.word	0x0800b651
 800c030:	0800b4e5 	.word	0x0800b4e5
 800c034:	00000000 	.word	0x00000000

0800c038 <CRC_Lock>:
 800c038:	4a17      	ldr	r2, [pc, #92]	; (800c098 <CRC_Lock+0x60>)
 800c03a:	6813      	ldr	r3, [r2, #0]
 800c03c:	b410      	push	{r4}
 800c03e:	f023 0301 	bic.w	r3, r3, #1
 800c042:	4c16      	ldr	r4, [pc, #88]	; (800c09c <CRC_Lock+0x64>)
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	b933      	cbnz	r3, 800c058 <CRC_Lock+0x20>
 800c04a:	4b15      	ldr	r3, [pc, #84]	; (800c0a0 <CRC_Lock+0x68>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c052:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c056:	d00f      	beq.n	800c078 <CRC_Lock+0x40>
 800c058:	4a12      	ldr	r2, [pc, #72]	; (800c0a4 <CRC_Lock+0x6c>)
 800c05a:	2301      	movs	r3, #1
 800c05c:	6013      	str	r3, [r2, #0]
 800c05e:	6813      	ldr	r3, [r2, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1fc      	bne.n	800c05e <CRC_Lock+0x26>
 800c064:	4b10      	ldr	r3, [pc, #64]	; (800c0a8 <CRC_Lock+0x70>)
 800c066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c06a:	6018      	str	r0, [r3, #0]
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	1a08      	subs	r0, r1, r0
 800c070:	fab0 f080 	clz	r0, r0
 800c074:	0940      	lsrs	r0, r0, #5
 800c076:	4770      	bx	lr
 800c078:	4a0c      	ldr	r2, [pc, #48]	; (800c0ac <CRC_Lock+0x74>)
 800c07a:	2301      	movs	r3, #1
 800c07c:	6013      	str	r3, [r2, #0]
 800c07e:	6813      	ldr	r3, [r2, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1fc      	bne.n	800c07e <CRC_Lock+0x46>
 800c084:	4b0a      	ldr	r3, [pc, #40]	; (800c0b0 <CRC_Lock+0x78>)
 800c086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c08a:	6018      	str	r0, [r3, #0]
 800c08c:	6818      	ldr	r0, [r3, #0]
 800c08e:	1a40      	subs	r0, r0, r1
 800c090:	fab0 f080 	clz	r0, r0
 800c094:	0940      	lsrs	r0, r0, #5
 800c096:	4770      	bx	lr
 800c098:	e0002000 	.word	0xe0002000
 800c09c:	e0042000 	.word	0xe0042000
 800c0a0:	5c001000 	.word	0x5c001000
 800c0a4:	40023008 	.word	0x40023008
 800c0a8:	40023000 	.word	0x40023000
 800c0ac:	58024c08 	.word	0x58024c08
 800c0b0:	58024c00 	.word	0x58024c00

0800c0b4 <__errno>:
 800c0b4:	4b01      	ldr	r3, [pc, #4]	; (800c0bc <__errno+0x8>)
 800c0b6:	6818      	ldr	r0, [r3, #0]
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	2000042c 	.word	0x2000042c

0800c0c0 <_fopen_r>:
 800c0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0c2:	460f      	mov	r7, r1
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	aa01      	add	r2, sp, #4
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	f000 fc0d 	bl	800c8e8 <__sflags>
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	b918      	cbnz	r0, 800c0da <_fopen_r+0x1a>
 800c0d2:	2400      	movs	r4, #0
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	b003      	add	sp, #12
 800c0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f000 fbc6 	bl	800c86c <__sfp>
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d0f5      	beq.n	800c0d2 <_fopen_r+0x12>
 800c0e6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800c0ea:	9a01      	ldr	r2, [sp, #4]
 800c0ec:	4639      	mov	r1, r7
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 fa14 	bl	800c51c <_open_r>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	da06      	bge.n	800c106 <_fopen_r+0x46>
 800c0f8:	2500      	movs	r5, #0
 800c0fa:	f000 fbf3 	bl	800c8e4 <__sfp_lock_acquire>
 800c0fe:	81a5      	strh	r5, [r4, #12]
 800c100:	f000 fbf1 	bl	800c8e6 <__sfp_lock_release>
 800c104:	e7e5      	b.n	800c0d2 <_fopen_r+0x12>
 800c106:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <_fopen_r+0x70>)
 800c108:	6263      	str	r3, [r4, #36]	; 0x24
 800c10a:	4b0a      	ldr	r3, [pc, #40]	; (800c134 <_fopen_r+0x74>)
 800c10c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c10e:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <_fopen_r+0x78>)
 800c110:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c112:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <_fopen_r+0x7c>)
 800c114:	6323      	str	r3, [r4, #48]	; 0x30
 800c116:	05f3      	lsls	r3, r6, #23
 800c118:	81e0      	strh	r0, [r4, #14]
 800c11a:	81a6      	strh	r6, [r4, #12]
 800c11c:	6224      	str	r4, [r4, #32]
 800c11e:	d5d9      	bpl.n	800c0d4 <_fopen_r+0x14>
 800c120:	2302      	movs	r3, #2
 800c122:	2200      	movs	r2, #0
 800c124:	4621      	mov	r1, r4
 800c126:	4628      	mov	r0, r5
 800c128:	f000 f812 	bl	800c150 <_fseek_r>
 800c12c:	e7d2      	b.n	800c0d4 <_fopen_r+0x14>
 800c12e:	bf00      	nop
 800c130:	0800c561 	.word	0x0800c561
 800c134:	0800c583 	.word	0x0800c583
 800c138:	0800c5bb 	.word	0x0800c5bb
 800c13c:	0800c5df 	.word	0x0800c5df

0800c140 <fopen>:
 800c140:	4b02      	ldr	r3, [pc, #8]	; (800c14c <fopen+0xc>)
 800c142:	460a      	mov	r2, r1
 800c144:	4601      	mov	r1, r0
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	f7ff bfba 	b.w	800c0c0 <_fopen_r>
 800c14c:	2000042c 	.word	0x2000042c

0800c150 <_fseek_r>:
 800c150:	f000 b800 	b.w	800c154 <_fseeko_r>

0800c154 <_fseeko_r>:
 800c154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c158:	460c      	mov	r4, r1
 800c15a:	4691      	mov	r9, r2
 800c15c:	461e      	mov	r6, r3
 800c15e:	4605      	mov	r5, r0
 800c160:	b118      	cbz	r0, 800c16a <_fseeko_r+0x16>
 800c162:	6983      	ldr	r3, [r0, #24]
 800c164:	b90b      	cbnz	r3, 800c16a <_fseeko_r+0x16>
 800c166:	f000 fb51 	bl	800c80c <__sinit>
 800c16a:	4b3f      	ldr	r3, [pc, #252]	; (800c268 <_fseeko_r+0x114>)
 800c16c:	429c      	cmp	r4, r3
 800c16e:	d112      	bne.n	800c196 <_fseeko_r+0x42>
 800c170:	686c      	ldr	r4, [r5, #4]
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800c178:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800c17c:	d103      	bne.n	800c186 <_fseeko_r+0x32>
 800c17e:	4621      	mov	r1, r4
 800c180:	4628      	mov	r0, r5
 800c182:	f000 fad9 	bl	800c738 <_fflush_r>
 800c186:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800c18a:	f1b8 0f00 	cmp.w	r8, #0
 800c18e:	d10c      	bne.n	800c1aa <_fseeko_r+0x56>
 800c190:	231d      	movs	r3, #29
 800c192:	602b      	str	r3, [r5, #0]
 800c194:	e057      	b.n	800c246 <_fseeko_r+0xf2>
 800c196:	4b35      	ldr	r3, [pc, #212]	; (800c26c <_fseeko_r+0x118>)
 800c198:	429c      	cmp	r4, r3
 800c19a:	d101      	bne.n	800c1a0 <_fseeko_r+0x4c>
 800c19c:	68ac      	ldr	r4, [r5, #8]
 800c19e:	e7e8      	b.n	800c172 <_fseeko_r+0x1e>
 800c1a0:	4b33      	ldr	r3, [pc, #204]	; (800c270 <_fseeko_r+0x11c>)
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	bf08      	it	eq
 800c1a6:	68ec      	ldreq	r4, [r5, #12]
 800c1a8:	e7e3      	b.n	800c172 <_fseeko_r+0x1e>
 800c1aa:	2e01      	cmp	r6, #1
 800c1ac:	d030      	beq.n	800c210 <_fseeko_r+0xbc>
 800c1ae:	2e02      	cmp	r6, #2
 800c1b0:	d001      	beq.n	800c1b6 <_fseeko_r+0x62>
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d155      	bne.n	800c262 <_fseeko_r+0x10e>
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	b91b      	cbnz	r3, 800c1c2 <_fseeko_r+0x6e>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f000 f8a1 	bl	800c304 <__smakebuf_r>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f000 fab7 	bl	800c738 <_fflush_r>
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d13a      	bne.n	800c246 <_fseeko_r+0xf2>
 800c1d0:	4633      	mov	r3, r6
 800c1d2:	464a      	mov	r2, r9
 800c1d4:	6a21      	ldr	r1, [r4, #32]
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47c0      	blx	r8
 800c1da:	3001      	adds	r0, #1
 800c1dc:	d033      	beq.n	800c246 <_fseeko_r+0xf2>
 800c1de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1e0:	b141      	cbz	r1, 800c1f4 <_fseeko_r+0xa0>
 800c1e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1e6:	4299      	cmp	r1, r3
 800c1e8:	d002      	beq.n	800c1f0 <_fseeko_r+0x9c>
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f000 f8ee 	bl	800c3cc <_free_r>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	6363      	str	r3, [r4, #52]	; 0x34
 800c1f4:	6923      	ldr	r3, [r4, #16]
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800c200:	6061      	str	r1, [r4, #4]
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	2208      	movs	r2, #8
 800c206:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c20a:	f000 f8d6 	bl	800c3ba <memset>
 800c20e:	e01c      	b.n	800c24a <_fseeko_r+0xf6>
 800c210:	4621      	mov	r1, r4
 800c212:	4628      	mov	r0, r5
 800c214:	f000 fa90 	bl	800c738 <_fflush_r>
 800c218:	89a2      	ldrh	r2, [r4, #12]
 800c21a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c21e:	d00c      	beq.n	800c23a <_fseeko_r+0xe6>
 800c220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	075a      	lsls	r2, r3, #29
 800c226:	d513      	bpl.n	800c250 <_fseeko_r+0xfc>
 800c228:	6863      	ldr	r3, [r4, #4]
 800c22a:	1ac0      	subs	r0, r0, r3
 800c22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c22e:	b10b      	cbz	r3, 800c234 <_fseeko_r+0xe0>
 800c230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c232:	1ac0      	subs	r0, r0, r3
 800c234:	4481      	add	r9, r0
 800c236:	2600      	movs	r6, #0
 800c238:	e7bd      	b.n	800c1b6 <_fseeko_r+0x62>
 800c23a:	6a21      	ldr	r1, [r4, #32]
 800c23c:	4633      	mov	r3, r6
 800c23e:	4628      	mov	r0, r5
 800c240:	47c0      	blx	r8
 800c242:	1c41      	adds	r1, r0, #1
 800c244:	d1ed      	bne.n	800c222 <_fseeko_r+0xce>
 800c246:	f04f 37ff 	mov.w	r7, #4294967295
 800c24a:	4638      	mov	r0, r7
 800c24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c250:	071b      	lsls	r3, r3, #28
 800c252:	d5ef      	bpl.n	800c234 <_fseeko_r+0xe0>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	6922      	ldr	r2, [r4, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d0eb      	beq.n	800c234 <_fseeko_r+0xe0>
 800c25c:	1a9b      	subs	r3, r3, r2
 800c25e:	4418      	add	r0, r3
 800c260:	e7e8      	b.n	800c234 <_fseeko_r+0xe0>
 800c262:	2316      	movs	r3, #22
 800c264:	e795      	b.n	800c192 <_fseeko_r+0x3e>
 800c266:	bf00      	nop
 800c268:	0800d540 	.word	0x0800d540
 800c26c:	0800d560 	.word	0x0800d560
 800c270:	0800d520 	.word	0x0800d520

0800c274 <__libc_init_array>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4e0d      	ldr	r6, [pc, #52]	; (800c2ac <__libc_init_array+0x38>)
 800c278:	4c0d      	ldr	r4, [pc, #52]	; (800c2b0 <__libc_init_array+0x3c>)
 800c27a:	1ba4      	subs	r4, r4, r6
 800c27c:	10a4      	asrs	r4, r4, #2
 800c27e:	2500      	movs	r5, #0
 800c280:	42a5      	cmp	r5, r4
 800c282:	d109      	bne.n	800c298 <__libc_init_array+0x24>
 800c284:	4e0b      	ldr	r6, [pc, #44]	; (800c2b4 <__libc_init_array+0x40>)
 800c286:	4c0c      	ldr	r4, [pc, #48]	; (800c2b8 <__libc_init_array+0x44>)
 800c288:	f001 f8f6 	bl	800d478 <_init>
 800c28c:	1ba4      	subs	r4, r4, r6
 800c28e:	10a4      	asrs	r4, r4, #2
 800c290:	2500      	movs	r5, #0
 800c292:	42a5      	cmp	r5, r4
 800c294:	d105      	bne.n	800c2a2 <__libc_init_array+0x2e>
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c29c:	4798      	blx	r3
 800c29e:	3501      	adds	r5, #1
 800c2a0:	e7ee      	b.n	800c280 <__libc_init_array+0xc>
 800c2a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c2a6:	4798      	blx	r3
 800c2a8:	3501      	adds	r5, #1
 800c2aa:	e7f2      	b.n	800c292 <__libc_init_array+0x1e>
 800c2ac:	0800d5b0 	.word	0x0800d5b0
 800c2b0:	0800d5b0 	.word	0x0800d5b0
 800c2b4:	0800d5b0 	.word	0x0800d5b0
 800c2b8:	0800d5b4 	.word	0x0800d5b4

0800c2bc <__swhatbuf_r>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	460e      	mov	r6, r1
 800c2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	b096      	sub	sp, #88	; 0x58
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	461d      	mov	r5, r3
 800c2cc:	da07      	bge.n	800c2de <__swhatbuf_r+0x22>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	602b      	str	r3, [r5, #0]
 800c2d2:	89b3      	ldrh	r3, [r6, #12]
 800c2d4:	061a      	lsls	r2, r3, #24
 800c2d6:	d410      	bmi.n	800c2fa <__swhatbuf_r+0x3e>
 800c2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2dc:	e00e      	b.n	800c2fc <__swhatbuf_r+0x40>
 800c2de:	466a      	mov	r2, sp
 800c2e0:	f000 fb38 	bl	800c954 <_fstat_r>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	dbf2      	blt.n	800c2ce <__swhatbuf_r+0x12>
 800c2e8:	9a01      	ldr	r2, [sp, #4]
 800c2ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2f2:	425a      	negs	r2, r3
 800c2f4:	415a      	adcs	r2, r3
 800c2f6:	602a      	str	r2, [r5, #0]
 800c2f8:	e7ee      	b.n	800c2d8 <__swhatbuf_r+0x1c>
 800c2fa:	2340      	movs	r3, #64	; 0x40
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	b016      	add	sp, #88	; 0x58
 800c302:	bd70      	pop	{r4, r5, r6, pc}

0800c304 <__smakebuf_r>:
 800c304:	898b      	ldrh	r3, [r1, #12]
 800c306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c308:	079d      	lsls	r5, r3, #30
 800c30a:	4606      	mov	r6, r0
 800c30c:	460c      	mov	r4, r1
 800c30e:	d507      	bpl.n	800c320 <__smakebuf_r+0x1c>
 800c310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	6123      	str	r3, [r4, #16]
 800c318:	2301      	movs	r3, #1
 800c31a:	6163      	str	r3, [r4, #20]
 800c31c:	b002      	add	sp, #8
 800c31e:	bd70      	pop	{r4, r5, r6, pc}
 800c320:	ab01      	add	r3, sp, #4
 800c322:	466a      	mov	r2, sp
 800c324:	f7ff ffca 	bl	800c2bc <__swhatbuf_r>
 800c328:	9900      	ldr	r1, [sp, #0]
 800c32a:	4605      	mov	r5, r0
 800c32c:	4630      	mov	r0, r6
 800c32e:	f000 f89b 	bl	800c468 <_malloc_r>
 800c332:	b948      	cbnz	r0, 800c348 <__smakebuf_r+0x44>
 800c334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c338:	059a      	lsls	r2, r3, #22
 800c33a:	d4ef      	bmi.n	800c31c <__smakebuf_r+0x18>
 800c33c:	f023 0303 	bic.w	r3, r3, #3
 800c340:	f043 0302 	orr.w	r3, r3, #2
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	e7e3      	b.n	800c310 <__smakebuf_r+0xc>
 800c348:	4b0d      	ldr	r3, [pc, #52]	; (800c380 <__smakebuf_r+0x7c>)
 800c34a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	6020      	str	r0, [r4, #0]
 800c350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c354:	81a3      	strh	r3, [r4, #12]
 800c356:	9b00      	ldr	r3, [sp, #0]
 800c358:	6163      	str	r3, [r4, #20]
 800c35a:	9b01      	ldr	r3, [sp, #4]
 800c35c:	6120      	str	r0, [r4, #16]
 800c35e:	b15b      	cbz	r3, 800c378 <__smakebuf_r+0x74>
 800c360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c364:	4630      	mov	r0, r6
 800c366:	f000 fb25 	bl	800c9b4 <_isatty_r>
 800c36a:	b128      	cbz	r0, 800c378 <__smakebuf_r+0x74>
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	f023 0303 	bic.w	r3, r3, #3
 800c372:	f043 0301 	orr.w	r3, r3, #1
 800c376:	81a3      	strh	r3, [r4, #12]
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	431d      	orrs	r5, r3
 800c37c:	81a5      	strh	r5, [r4, #12]
 800c37e:	e7cd      	b.n	800c31c <__smakebuf_r+0x18>
 800c380:	0800c7d5 	.word	0x0800c7d5

0800c384 <malloc>:
 800c384:	4b02      	ldr	r3, [pc, #8]	; (800c390 <malloc+0xc>)
 800c386:	4601      	mov	r1, r0
 800c388:	6818      	ldr	r0, [r3, #0]
 800c38a:	f000 b86d 	b.w	800c468 <_malloc_r>
 800c38e:	bf00      	nop
 800c390:	2000042c 	.word	0x2000042c

0800c394 <free>:
 800c394:	4b02      	ldr	r3, [pc, #8]	; (800c3a0 <free+0xc>)
 800c396:	4601      	mov	r1, r0
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	f000 b817 	b.w	800c3cc <_free_r>
 800c39e:	bf00      	nop
 800c3a0:	2000042c 	.word	0x2000042c

0800c3a4 <memcpy>:
 800c3a4:	b510      	push	{r4, lr}
 800c3a6:	1e43      	subs	r3, r0, #1
 800c3a8:	440a      	add	r2, r1
 800c3aa:	4291      	cmp	r1, r2
 800c3ac:	d100      	bne.n	800c3b0 <memcpy+0xc>
 800c3ae:	bd10      	pop	{r4, pc}
 800c3b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3b8:	e7f7      	b.n	800c3aa <memcpy+0x6>

0800c3ba <memset>:
 800c3ba:	4402      	add	r2, r0
 800c3bc:	4603      	mov	r3, r0
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d100      	bne.n	800c3c4 <memset+0xa>
 800c3c2:	4770      	bx	lr
 800c3c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c3c8:	e7f9      	b.n	800c3be <memset+0x4>
	...

0800c3cc <_free_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	d045      	beq.n	800c460 <_free_r+0x94>
 800c3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d8:	1f0c      	subs	r4, r1, #4
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bfb8      	it	lt
 800c3de:	18e4      	addlt	r4, r4, r3
 800c3e0:	f000 fb0a 	bl	800c9f8 <__malloc_lock>
 800c3e4:	4a1f      	ldr	r2, [pc, #124]	; (800c464 <_free_r+0x98>)
 800c3e6:	6813      	ldr	r3, [r2, #0]
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	b933      	cbnz	r3, 800c3fa <_free_r+0x2e>
 800c3ec:	6063      	str	r3, [r4, #4]
 800c3ee:	6014      	str	r4, [r2, #0]
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f6:	f000 bb00 	b.w	800c9fa <__malloc_unlock>
 800c3fa:	42a3      	cmp	r3, r4
 800c3fc:	d90c      	bls.n	800c418 <_free_r+0x4c>
 800c3fe:	6821      	ldr	r1, [r4, #0]
 800c400:	1862      	adds	r2, r4, r1
 800c402:	4293      	cmp	r3, r2
 800c404:	bf04      	itt	eq
 800c406:	681a      	ldreq	r2, [r3, #0]
 800c408:	685b      	ldreq	r3, [r3, #4]
 800c40a:	6063      	str	r3, [r4, #4]
 800c40c:	bf04      	itt	eq
 800c40e:	1852      	addeq	r2, r2, r1
 800c410:	6022      	streq	r2, [r4, #0]
 800c412:	6004      	str	r4, [r0, #0]
 800c414:	e7ec      	b.n	800c3f0 <_free_r+0x24>
 800c416:	4613      	mov	r3, r2
 800c418:	685a      	ldr	r2, [r3, #4]
 800c41a:	b10a      	cbz	r2, 800c420 <_free_r+0x54>
 800c41c:	42a2      	cmp	r2, r4
 800c41e:	d9fa      	bls.n	800c416 <_free_r+0x4a>
 800c420:	6819      	ldr	r1, [r3, #0]
 800c422:	1858      	adds	r0, r3, r1
 800c424:	42a0      	cmp	r0, r4
 800c426:	d10b      	bne.n	800c440 <_free_r+0x74>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	4401      	add	r1, r0
 800c42c:	1858      	adds	r0, r3, r1
 800c42e:	4282      	cmp	r2, r0
 800c430:	6019      	str	r1, [r3, #0]
 800c432:	d1dd      	bne.n	800c3f0 <_free_r+0x24>
 800c434:	6810      	ldr	r0, [r2, #0]
 800c436:	6852      	ldr	r2, [r2, #4]
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	4401      	add	r1, r0
 800c43c:	6019      	str	r1, [r3, #0]
 800c43e:	e7d7      	b.n	800c3f0 <_free_r+0x24>
 800c440:	d902      	bls.n	800c448 <_free_r+0x7c>
 800c442:	230c      	movs	r3, #12
 800c444:	602b      	str	r3, [r5, #0]
 800c446:	e7d3      	b.n	800c3f0 <_free_r+0x24>
 800c448:	6820      	ldr	r0, [r4, #0]
 800c44a:	1821      	adds	r1, r4, r0
 800c44c:	428a      	cmp	r2, r1
 800c44e:	bf04      	itt	eq
 800c450:	6811      	ldreq	r1, [r2, #0]
 800c452:	6852      	ldreq	r2, [r2, #4]
 800c454:	6062      	str	r2, [r4, #4]
 800c456:	bf04      	itt	eq
 800c458:	1809      	addeq	r1, r1, r0
 800c45a:	6021      	streq	r1, [r4, #0]
 800c45c:	605c      	str	r4, [r3, #4]
 800c45e:	e7c7      	b.n	800c3f0 <_free_r+0x24>
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	20000558 	.word	0x20000558

0800c468 <_malloc_r>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	1ccd      	adds	r5, r1, #3
 800c46c:	f025 0503 	bic.w	r5, r5, #3
 800c470:	3508      	adds	r5, #8
 800c472:	2d0c      	cmp	r5, #12
 800c474:	bf38      	it	cc
 800c476:	250c      	movcc	r5, #12
 800c478:	2d00      	cmp	r5, #0
 800c47a:	4606      	mov	r6, r0
 800c47c:	db01      	blt.n	800c482 <_malloc_r+0x1a>
 800c47e:	42a9      	cmp	r1, r5
 800c480:	d903      	bls.n	800c48a <_malloc_r+0x22>
 800c482:	230c      	movs	r3, #12
 800c484:	6033      	str	r3, [r6, #0]
 800c486:	2000      	movs	r0, #0
 800c488:	bd70      	pop	{r4, r5, r6, pc}
 800c48a:	f000 fab5 	bl	800c9f8 <__malloc_lock>
 800c48e:	4a21      	ldr	r2, [pc, #132]	; (800c514 <_malloc_r+0xac>)
 800c490:	6814      	ldr	r4, [r2, #0]
 800c492:	4621      	mov	r1, r4
 800c494:	b991      	cbnz	r1, 800c4bc <_malloc_r+0x54>
 800c496:	4c20      	ldr	r4, [pc, #128]	; (800c518 <_malloc_r+0xb0>)
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	b91b      	cbnz	r3, 800c4a4 <_malloc_r+0x3c>
 800c49c:	4630      	mov	r0, r6
 800c49e:	f000 f84f 	bl	800c540 <_sbrk_r>
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f000 f84a 	bl	800c540 <_sbrk_r>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d124      	bne.n	800c4fa <_malloc_r+0x92>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	6033      	str	r3, [r6, #0]
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f000 faa0 	bl	800c9fa <__malloc_unlock>
 800c4ba:	e7e4      	b.n	800c486 <_malloc_r+0x1e>
 800c4bc:	680b      	ldr	r3, [r1, #0]
 800c4be:	1b5b      	subs	r3, r3, r5
 800c4c0:	d418      	bmi.n	800c4f4 <_malloc_r+0x8c>
 800c4c2:	2b0b      	cmp	r3, #11
 800c4c4:	d90f      	bls.n	800c4e6 <_malloc_r+0x7e>
 800c4c6:	600b      	str	r3, [r1, #0]
 800c4c8:	50cd      	str	r5, [r1, r3]
 800c4ca:	18cc      	adds	r4, r1, r3
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f000 fa94 	bl	800c9fa <__malloc_unlock>
 800c4d2:	f104 000b 	add.w	r0, r4, #11
 800c4d6:	1d23      	adds	r3, r4, #4
 800c4d8:	f020 0007 	bic.w	r0, r0, #7
 800c4dc:	1ac3      	subs	r3, r0, r3
 800c4de:	d0d3      	beq.n	800c488 <_malloc_r+0x20>
 800c4e0:	425a      	negs	r2, r3
 800c4e2:	50e2      	str	r2, [r4, r3]
 800c4e4:	e7d0      	b.n	800c488 <_malloc_r+0x20>
 800c4e6:	428c      	cmp	r4, r1
 800c4e8:	684b      	ldr	r3, [r1, #4]
 800c4ea:	bf16      	itet	ne
 800c4ec:	6063      	strne	r3, [r4, #4]
 800c4ee:	6013      	streq	r3, [r2, #0]
 800c4f0:	460c      	movne	r4, r1
 800c4f2:	e7eb      	b.n	800c4cc <_malloc_r+0x64>
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	6849      	ldr	r1, [r1, #4]
 800c4f8:	e7cc      	b.n	800c494 <_malloc_r+0x2c>
 800c4fa:	1cc4      	adds	r4, r0, #3
 800c4fc:	f024 0403 	bic.w	r4, r4, #3
 800c500:	42a0      	cmp	r0, r4
 800c502:	d005      	beq.n	800c510 <_malloc_r+0xa8>
 800c504:	1a21      	subs	r1, r4, r0
 800c506:	4630      	mov	r0, r6
 800c508:	f000 f81a 	bl	800c540 <_sbrk_r>
 800c50c:	3001      	adds	r0, #1
 800c50e:	d0cf      	beq.n	800c4b0 <_malloc_r+0x48>
 800c510:	6025      	str	r5, [r4, #0]
 800c512:	e7db      	b.n	800c4cc <_malloc_r+0x64>
 800c514:	20000558 	.word	0x20000558
 800c518:	2000055c 	.word	0x2000055c

0800c51c <_open_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4c07      	ldr	r4, [pc, #28]	; (800c53c <_open_r+0x20>)
 800c520:	4605      	mov	r5, r0
 800c522:	4608      	mov	r0, r1
 800c524:	4611      	mov	r1, r2
 800c526:	2200      	movs	r2, #0
 800c528:	6022      	str	r2, [r4, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	f7f4 fe6f 	bl	800120e <_open>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d102      	bne.n	800c53a <_open_r+0x1e>
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	b103      	cbz	r3, 800c53a <_open_r+0x1e>
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	bd38      	pop	{r3, r4, r5, pc}
 800c53c:	200017a4 	.word	0x200017a4

0800c540 <_sbrk_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4c06      	ldr	r4, [pc, #24]	; (800c55c <_sbrk_r+0x1c>)
 800c544:	2300      	movs	r3, #0
 800c546:	4605      	mov	r5, r0
 800c548:	4608      	mov	r0, r1
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	f7f4 fe6e 	bl	800122c <_sbrk>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_sbrk_r+0x1a>
 800c554:	6823      	ldr	r3, [r4, #0]
 800c556:	b103      	cbz	r3, 800c55a <_sbrk_r+0x1a>
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	200017a4 	.word	0x200017a4

0800c560 <__sread>:
 800c560:	b510      	push	{r4, lr}
 800c562:	460c      	mov	r4, r1
 800c564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c568:	f000 fa48 	bl	800c9fc <_read_r>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	bfab      	itete	ge
 800c570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c572:	89a3      	ldrhlt	r3, [r4, #12]
 800c574:	181b      	addge	r3, r3, r0
 800c576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c57a:	bfac      	ite	ge
 800c57c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c57e:	81a3      	strhlt	r3, [r4, #12]
 800c580:	bd10      	pop	{r4, pc}

0800c582 <__swrite>:
 800c582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c586:	461f      	mov	r7, r3
 800c588:	898b      	ldrh	r3, [r1, #12]
 800c58a:	05db      	lsls	r3, r3, #23
 800c58c:	4605      	mov	r5, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	4616      	mov	r6, r2
 800c592:	d505      	bpl.n	800c5a0 <__swrite+0x1e>
 800c594:	2302      	movs	r3, #2
 800c596:	2200      	movs	r2, #0
 800c598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59c:	f000 fa1a 	bl	800c9d4 <_lseek_r>
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5aa:	81a3      	strh	r3, [r4, #12]
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b6:	f000 b817 	b.w	800c5e8 <_write_r>

0800c5ba <__sseek>:
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	460c      	mov	r4, r1
 800c5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c2:	f000 fa07 	bl	800c9d4 <_lseek_r>
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	bf15      	itete	ne
 800c5cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5d6:	81a3      	strheq	r3, [r4, #12]
 800c5d8:	bf18      	it	ne
 800c5da:	81a3      	strhne	r3, [r4, #12]
 800c5dc:	bd10      	pop	{r4, pc}

0800c5de <__sclose>:
 800c5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e2:	f000 b813 	b.w	800c60c <_close_r>
	...

0800c5e8 <_write_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4c07      	ldr	r4, [pc, #28]	; (800c608 <_write_r+0x20>)
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	6022      	str	r2, [r4, #0]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f7f4 fdb9 	bl	800116e <_write>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	d102      	bne.n	800c606 <_write_r+0x1e>
 800c600:	6823      	ldr	r3, [r4, #0]
 800c602:	b103      	cbz	r3, 800c606 <_write_r+0x1e>
 800c604:	602b      	str	r3, [r5, #0]
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	200017a4 	.word	0x200017a4

0800c60c <_close_r>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4c06      	ldr	r4, [pc, #24]	; (800c628 <_close_r+0x1c>)
 800c610:	2300      	movs	r3, #0
 800c612:	4605      	mov	r5, r0
 800c614:	4608      	mov	r0, r1
 800c616:	6023      	str	r3, [r4, #0]
 800c618:	f7f4 fdc5 	bl	80011a6 <_close>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d102      	bne.n	800c626 <_close_r+0x1a>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	b103      	cbz	r3, 800c626 <_close_r+0x1a>
 800c624:	602b      	str	r3, [r5, #0]
 800c626:	bd38      	pop	{r3, r4, r5, pc}
 800c628:	200017a4 	.word	0x200017a4

0800c62c <__sflush_r>:
 800c62c:	898a      	ldrh	r2, [r1, #12]
 800c62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c632:	4605      	mov	r5, r0
 800c634:	0710      	lsls	r0, r2, #28
 800c636:	460c      	mov	r4, r1
 800c638:	d458      	bmi.n	800c6ec <__sflush_r+0xc0>
 800c63a:	684b      	ldr	r3, [r1, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dc05      	bgt.n	800c64c <__sflush_r+0x20>
 800c640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c642:	2b00      	cmp	r3, #0
 800c644:	dc02      	bgt.n	800c64c <__sflush_r+0x20>
 800c646:	2000      	movs	r0, #0
 800c648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c64e:	2e00      	cmp	r6, #0
 800c650:	d0f9      	beq.n	800c646 <__sflush_r+0x1a>
 800c652:	2300      	movs	r3, #0
 800c654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c658:	682f      	ldr	r7, [r5, #0]
 800c65a:	6a21      	ldr	r1, [r4, #32]
 800c65c:	602b      	str	r3, [r5, #0]
 800c65e:	d032      	beq.n	800c6c6 <__sflush_r+0x9a>
 800c660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	075a      	lsls	r2, r3, #29
 800c666:	d505      	bpl.n	800c674 <__sflush_r+0x48>
 800c668:	6863      	ldr	r3, [r4, #4]
 800c66a:	1ac0      	subs	r0, r0, r3
 800c66c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c66e:	b10b      	cbz	r3, 800c674 <__sflush_r+0x48>
 800c670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c672:	1ac0      	subs	r0, r0, r3
 800c674:	2300      	movs	r3, #0
 800c676:	4602      	mov	r2, r0
 800c678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c67a:	6a21      	ldr	r1, [r4, #32]
 800c67c:	4628      	mov	r0, r5
 800c67e:	47b0      	blx	r6
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	d106      	bne.n	800c694 <__sflush_r+0x68>
 800c686:	6829      	ldr	r1, [r5, #0]
 800c688:	291d      	cmp	r1, #29
 800c68a:	d848      	bhi.n	800c71e <__sflush_r+0xf2>
 800c68c:	4a29      	ldr	r2, [pc, #164]	; (800c734 <__sflush_r+0x108>)
 800c68e:	40ca      	lsrs	r2, r1
 800c690:	07d6      	lsls	r6, r2, #31
 800c692:	d544      	bpl.n	800c71e <__sflush_r+0xf2>
 800c694:	2200      	movs	r2, #0
 800c696:	6062      	str	r2, [r4, #4]
 800c698:	04d9      	lsls	r1, r3, #19
 800c69a:	6922      	ldr	r2, [r4, #16]
 800c69c:	6022      	str	r2, [r4, #0]
 800c69e:	d504      	bpl.n	800c6aa <__sflush_r+0x7e>
 800c6a0:	1c42      	adds	r2, r0, #1
 800c6a2:	d101      	bne.n	800c6a8 <__sflush_r+0x7c>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	b903      	cbnz	r3, 800c6aa <__sflush_r+0x7e>
 800c6a8:	6560      	str	r0, [r4, #84]	; 0x54
 800c6aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ac:	602f      	str	r7, [r5, #0]
 800c6ae:	2900      	cmp	r1, #0
 800c6b0:	d0c9      	beq.n	800c646 <__sflush_r+0x1a>
 800c6b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6b6:	4299      	cmp	r1, r3
 800c6b8:	d002      	beq.n	800c6c0 <__sflush_r+0x94>
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f7ff fe86 	bl	800c3cc <_free_r>
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	6360      	str	r0, [r4, #52]	; 0x34
 800c6c4:	e7c0      	b.n	800c648 <__sflush_r+0x1c>
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	47b0      	blx	r6
 800c6cc:	1c41      	adds	r1, r0, #1
 800c6ce:	d1c8      	bne.n	800c662 <__sflush_r+0x36>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0c5      	beq.n	800c662 <__sflush_r+0x36>
 800c6d6:	2b1d      	cmp	r3, #29
 800c6d8:	d001      	beq.n	800c6de <__sflush_r+0xb2>
 800c6da:	2b16      	cmp	r3, #22
 800c6dc:	d101      	bne.n	800c6e2 <__sflush_r+0xb6>
 800c6de:	602f      	str	r7, [r5, #0]
 800c6e0:	e7b1      	b.n	800c646 <__sflush_r+0x1a>
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	e7ad      	b.n	800c648 <__sflush_r+0x1c>
 800c6ec:	690f      	ldr	r7, [r1, #16]
 800c6ee:	2f00      	cmp	r7, #0
 800c6f0:	d0a9      	beq.n	800c646 <__sflush_r+0x1a>
 800c6f2:	0793      	lsls	r3, r2, #30
 800c6f4:	680e      	ldr	r6, [r1, #0]
 800c6f6:	bf08      	it	eq
 800c6f8:	694b      	ldreq	r3, [r1, #20]
 800c6fa:	600f      	str	r7, [r1, #0]
 800c6fc:	bf18      	it	ne
 800c6fe:	2300      	movne	r3, #0
 800c700:	eba6 0807 	sub.w	r8, r6, r7
 800c704:	608b      	str	r3, [r1, #8]
 800c706:	f1b8 0f00 	cmp.w	r8, #0
 800c70a:	dd9c      	ble.n	800c646 <__sflush_r+0x1a>
 800c70c:	4643      	mov	r3, r8
 800c70e:	463a      	mov	r2, r7
 800c710:	6a21      	ldr	r1, [r4, #32]
 800c712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c714:	4628      	mov	r0, r5
 800c716:	47b0      	blx	r6
 800c718:	2800      	cmp	r0, #0
 800c71a:	dc06      	bgt.n	800c72a <__sflush_r+0xfe>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c722:	81a3      	strh	r3, [r4, #12]
 800c724:	f04f 30ff 	mov.w	r0, #4294967295
 800c728:	e78e      	b.n	800c648 <__sflush_r+0x1c>
 800c72a:	4407      	add	r7, r0
 800c72c:	eba8 0800 	sub.w	r8, r8, r0
 800c730:	e7e9      	b.n	800c706 <__sflush_r+0xda>
 800c732:	bf00      	nop
 800c734:	20400001 	.word	0x20400001

0800c738 <_fflush_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	690b      	ldr	r3, [r1, #16]
 800c73c:	4605      	mov	r5, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	b1db      	cbz	r3, 800c77a <_fflush_r+0x42>
 800c742:	b118      	cbz	r0, 800c74c <_fflush_r+0x14>
 800c744:	6983      	ldr	r3, [r0, #24]
 800c746:	b90b      	cbnz	r3, 800c74c <_fflush_r+0x14>
 800c748:	f000 f860 	bl	800c80c <__sinit>
 800c74c:	4b0c      	ldr	r3, [pc, #48]	; (800c780 <_fflush_r+0x48>)
 800c74e:	429c      	cmp	r4, r3
 800c750:	d109      	bne.n	800c766 <_fflush_r+0x2e>
 800c752:	686c      	ldr	r4, [r5, #4]
 800c754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c758:	b17b      	cbz	r3, 800c77a <_fflush_r+0x42>
 800c75a:	4621      	mov	r1, r4
 800c75c:	4628      	mov	r0, r5
 800c75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c762:	f7ff bf63 	b.w	800c62c <__sflush_r>
 800c766:	4b07      	ldr	r3, [pc, #28]	; (800c784 <_fflush_r+0x4c>)
 800c768:	429c      	cmp	r4, r3
 800c76a:	d101      	bne.n	800c770 <_fflush_r+0x38>
 800c76c:	68ac      	ldr	r4, [r5, #8]
 800c76e:	e7f1      	b.n	800c754 <_fflush_r+0x1c>
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <_fflush_r+0x50>)
 800c772:	429c      	cmp	r4, r3
 800c774:	bf08      	it	eq
 800c776:	68ec      	ldreq	r4, [r5, #12]
 800c778:	e7ec      	b.n	800c754 <_fflush_r+0x1c>
 800c77a:	2000      	movs	r0, #0
 800c77c:	bd38      	pop	{r3, r4, r5, pc}
 800c77e:	bf00      	nop
 800c780:	0800d540 	.word	0x0800d540
 800c784:	0800d560 	.word	0x0800d560
 800c788:	0800d520 	.word	0x0800d520

0800c78c <std>:
 800c78c:	2300      	movs	r3, #0
 800c78e:	b510      	push	{r4, lr}
 800c790:	4604      	mov	r4, r0
 800c792:	e9c0 3300 	strd	r3, r3, [r0]
 800c796:	6083      	str	r3, [r0, #8]
 800c798:	8181      	strh	r1, [r0, #12]
 800c79a:	6643      	str	r3, [r0, #100]	; 0x64
 800c79c:	81c2      	strh	r2, [r0, #14]
 800c79e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7a2:	6183      	str	r3, [r0, #24]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	2208      	movs	r2, #8
 800c7a8:	305c      	adds	r0, #92	; 0x5c
 800c7aa:	f7ff fe06 	bl	800c3ba <memset>
 800c7ae:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <std+0x38>)
 800c7b0:	6263      	str	r3, [r4, #36]	; 0x24
 800c7b2:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <std+0x3c>)
 800c7b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7b6:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <std+0x40>)
 800c7b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7ba:	4b05      	ldr	r3, [pc, #20]	; (800c7d0 <std+0x44>)
 800c7bc:	6224      	str	r4, [r4, #32]
 800c7be:	6323      	str	r3, [r4, #48]	; 0x30
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	bf00      	nop
 800c7c4:	0800c561 	.word	0x0800c561
 800c7c8:	0800c583 	.word	0x0800c583
 800c7cc:	0800c5bb 	.word	0x0800c5bb
 800c7d0:	0800c5df 	.word	0x0800c5df

0800c7d4 <_cleanup_r>:
 800c7d4:	4901      	ldr	r1, [pc, #4]	; (800c7dc <_cleanup_r+0x8>)
 800c7d6:	f000 b8cf 	b.w	800c978 <_fwalk_reent>
 800c7da:	bf00      	nop
 800c7dc:	0800c739 	.word	0x0800c739

0800c7e0 <__sfmoreglue>:
 800c7e0:	b570      	push	{r4, r5, r6, lr}
 800c7e2:	1e4a      	subs	r2, r1, #1
 800c7e4:	2568      	movs	r5, #104	; 0x68
 800c7e6:	4355      	muls	r5, r2
 800c7e8:	460e      	mov	r6, r1
 800c7ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7ee:	f7ff fe3b 	bl	800c468 <_malloc_r>
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	b140      	cbz	r0, 800c808 <__sfmoreglue+0x28>
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	e9c0 1600 	strd	r1, r6, [r0]
 800c7fc:	300c      	adds	r0, #12
 800c7fe:	60a0      	str	r0, [r4, #8]
 800c800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c804:	f7ff fdd9 	bl	800c3ba <memset>
 800c808:	4620      	mov	r0, r4
 800c80a:	bd70      	pop	{r4, r5, r6, pc}

0800c80c <__sinit>:
 800c80c:	6983      	ldr	r3, [r0, #24]
 800c80e:	b510      	push	{r4, lr}
 800c810:	4604      	mov	r4, r0
 800c812:	bb33      	cbnz	r3, 800c862 <__sinit+0x56>
 800c814:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c818:	6503      	str	r3, [r0, #80]	; 0x50
 800c81a:	4b12      	ldr	r3, [pc, #72]	; (800c864 <__sinit+0x58>)
 800c81c:	4a12      	ldr	r2, [pc, #72]	; (800c868 <__sinit+0x5c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6282      	str	r2, [r0, #40]	; 0x28
 800c822:	4298      	cmp	r0, r3
 800c824:	bf04      	itt	eq
 800c826:	2301      	moveq	r3, #1
 800c828:	6183      	streq	r3, [r0, #24]
 800c82a:	f000 f81f 	bl	800c86c <__sfp>
 800c82e:	6060      	str	r0, [r4, #4]
 800c830:	4620      	mov	r0, r4
 800c832:	f000 f81b 	bl	800c86c <__sfp>
 800c836:	60a0      	str	r0, [r4, #8]
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 f817 	bl	800c86c <__sfp>
 800c83e:	2200      	movs	r2, #0
 800c840:	60e0      	str	r0, [r4, #12]
 800c842:	2104      	movs	r1, #4
 800c844:	6860      	ldr	r0, [r4, #4]
 800c846:	f7ff ffa1 	bl	800c78c <std>
 800c84a:	2201      	movs	r2, #1
 800c84c:	2109      	movs	r1, #9
 800c84e:	68a0      	ldr	r0, [r4, #8]
 800c850:	f7ff ff9c 	bl	800c78c <std>
 800c854:	2202      	movs	r2, #2
 800c856:	2112      	movs	r1, #18
 800c858:	68e0      	ldr	r0, [r4, #12]
 800c85a:	f7ff ff97 	bl	800c78c <std>
 800c85e:	2301      	movs	r3, #1
 800c860:	61a3      	str	r3, [r4, #24]
 800c862:	bd10      	pop	{r4, pc}
 800c864:	0800d51c 	.word	0x0800d51c
 800c868:	0800c7d5 	.word	0x0800c7d5

0800c86c <__sfp>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	4b1b      	ldr	r3, [pc, #108]	; (800c8dc <__sfp+0x70>)
 800c870:	681e      	ldr	r6, [r3, #0]
 800c872:	69b3      	ldr	r3, [r6, #24]
 800c874:	4607      	mov	r7, r0
 800c876:	b913      	cbnz	r3, 800c87e <__sfp+0x12>
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff ffc7 	bl	800c80c <__sinit>
 800c87e:	3648      	adds	r6, #72	; 0x48
 800c880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c884:	3b01      	subs	r3, #1
 800c886:	d503      	bpl.n	800c890 <__sfp+0x24>
 800c888:	6833      	ldr	r3, [r6, #0]
 800c88a:	b133      	cbz	r3, 800c89a <__sfp+0x2e>
 800c88c:	6836      	ldr	r6, [r6, #0]
 800c88e:	e7f7      	b.n	800c880 <__sfp+0x14>
 800c890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c894:	b16d      	cbz	r5, 800c8b2 <__sfp+0x46>
 800c896:	3468      	adds	r4, #104	; 0x68
 800c898:	e7f4      	b.n	800c884 <__sfp+0x18>
 800c89a:	2104      	movs	r1, #4
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7ff ff9f 	bl	800c7e0 <__sfmoreglue>
 800c8a2:	6030      	str	r0, [r6, #0]
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d1f1      	bne.n	800c88c <__sfp+0x20>
 800c8a8:	230c      	movs	r3, #12
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8b2:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <__sfp+0x74>)
 800c8b4:	6665      	str	r5, [r4, #100]	; 0x64
 800c8b6:	e9c4 5500 	strd	r5, r5, [r4]
 800c8ba:	60a5      	str	r5, [r4, #8]
 800c8bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c8c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c8c4:	2208      	movs	r2, #8
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8cc:	f7ff fd75 	bl	800c3ba <memset>
 800c8d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8d8:	e7e9      	b.n	800c8ae <__sfp+0x42>
 800c8da:	bf00      	nop
 800c8dc:	0800d51c 	.word	0x0800d51c
 800c8e0:	ffff0001 	.word	0xffff0001

0800c8e4 <__sfp_lock_acquire>:
 800c8e4:	4770      	bx	lr

0800c8e6 <__sfp_lock_release>:
 800c8e6:	4770      	bx	lr

0800c8e8 <__sflags>:
 800c8e8:	780b      	ldrb	r3, [r1, #0]
 800c8ea:	2b72      	cmp	r3, #114	; 0x72
 800c8ec:	b530      	push	{r4, r5, lr}
 800c8ee:	d02c      	beq.n	800c94a <__sflags+0x62>
 800c8f0:	2b77      	cmp	r3, #119	; 0x77
 800c8f2:	d007      	beq.n	800c904 <__sflags+0x1c>
 800c8f4:	2b61      	cmp	r3, #97	; 0x61
 800c8f6:	d10f      	bne.n	800c918 <__sflags+0x30>
 800c8f8:	f44f 7402 	mov.w	r4, #520	; 0x208
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c902:	e003      	b.n	800c90c <__sflags+0x24>
 800c904:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800c908:	2301      	movs	r3, #1
 800c90a:	2008      	movs	r0, #8
 800c90c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c910:	b935      	cbnz	r5, 800c920 <__sflags+0x38>
 800c912:	4323      	orrs	r3, r4
 800c914:	6013      	str	r3, [r2, #0]
 800c916:	e002      	b.n	800c91e <__sflags+0x36>
 800c918:	2316      	movs	r3, #22
 800c91a:	6003      	str	r3, [r0, #0]
 800c91c:	2000      	movs	r0, #0
 800c91e:	bd30      	pop	{r4, r5, pc}
 800c920:	2d62      	cmp	r5, #98	; 0x62
 800c922:	d00c      	beq.n	800c93e <__sflags+0x56>
 800c924:	2d78      	cmp	r5, #120	; 0x78
 800c926:	d00d      	beq.n	800c944 <__sflags+0x5c>
 800c928:	2d2b      	cmp	r5, #43	; 0x2b
 800c92a:	d1ef      	bne.n	800c90c <__sflags+0x24>
 800c92c:	f020 001c 	bic.w	r0, r0, #28
 800c930:	f023 0303 	bic.w	r3, r3, #3
 800c934:	f040 0010 	orr.w	r0, r0, #16
 800c938:	f043 0302 	orr.w	r3, r3, #2
 800c93c:	e7e6      	b.n	800c90c <__sflags+0x24>
 800c93e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c942:	e7e3      	b.n	800c90c <__sflags+0x24>
 800c944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c948:	e7e0      	b.n	800c90c <__sflags+0x24>
 800c94a:	2400      	movs	r4, #0
 800c94c:	4623      	mov	r3, r4
 800c94e:	2004      	movs	r0, #4
 800c950:	e7dc      	b.n	800c90c <__sflags+0x24>
	...

0800c954 <_fstat_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	4c07      	ldr	r4, [pc, #28]	; (800c974 <_fstat_r+0x20>)
 800c958:	2300      	movs	r3, #0
 800c95a:	4605      	mov	r5, r0
 800c95c:	4608      	mov	r0, r1
 800c95e:	4611      	mov	r1, r2
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	f7f4 fc2c 	bl	80011be <_fstat>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	d102      	bne.n	800c970 <_fstat_r+0x1c>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	b103      	cbz	r3, 800c970 <_fstat_r+0x1c>
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	bd38      	pop	{r3, r4, r5, pc}
 800c972:	bf00      	nop
 800c974:	200017a4 	.word	0x200017a4

0800c978 <_fwalk_reent>:
 800c978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c97c:	4680      	mov	r8, r0
 800c97e:	4689      	mov	r9, r1
 800c980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c984:	2600      	movs	r6, #0
 800c986:	b914      	cbnz	r4, 800c98e <_fwalk_reent+0x16>
 800c988:	4630      	mov	r0, r6
 800c98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c98e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c992:	3f01      	subs	r7, #1
 800c994:	d501      	bpl.n	800c99a <_fwalk_reent+0x22>
 800c996:	6824      	ldr	r4, [r4, #0]
 800c998:	e7f5      	b.n	800c986 <_fwalk_reent+0xe>
 800c99a:	89ab      	ldrh	r3, [r5, #12]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d907      	bls.n	800c9b0 <_fwalk_reent+0x38>
 800c9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	d003      	beq.n	800c9b0 <_fwalk_reent+0x38>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	47c8      	blx	r9
 800c9ae:	4306      	orrs	r6, r0
 800c9b0:	3568      	adds	r5, #104	; 0x68
 800c9b2:	e7ee      	b.n	800c992 <_fwalk_reent+0x1a>

0800c9b4 <_isatty_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4c06      	ldr	r4, [pc, #24]	; (800c9d0 <_isatty_r+0x1c>)
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	4608      	mov	r0, r1
 800c9be:	6023      	str	r3, [r4, #0]
 800c9c0:	f7f4 fc0d 	bl	80011de <_isatty>
 800c9c4:	1c43      	adds	r3, r0, #1
 800c9c6:	d102      	bne.n	800c9ce <_isatty_r+0x1a>
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	b103      	cbz	r3, 800c9ce <_isatty_r+0x1a>
 800c9cc:	602b      	str	r3, [r5, #0]
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	200017a4 	.word	0x200017a4

0800c9d4 <_lseek_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4c07      	ldr	r4, [pc, #28]	; (800c9f4 <_lseek_r+0x20>)
 800c9d8:	4605      	mov	r5, r0
 800c9da:	4608      	mov	r0, r1
 800c9dc:	4611      	mov	r1, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	6022      	str	r2, [r4, #0]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f7f4 fc06 	bl	80011f4 <_lseek>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d102      	bne.n	800c9f2 <_lseek_r+0x1e>
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	b103      	cbz	r3, 800c9f2 <_lseek_r+0x1e>
 800c9f0:	602b      	str	r3, [r5, #0]
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	200017a4 	.word	0x200017a4

0800c9f8 <__malloc_lock>:
 800c9f8:	4770      	bx	lr

0800c9fa <__malloc_unlock>:
 800c9fa:	4770      	bx	lr

0800c9fc <_read_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4c07      	ldr	r4, [pc, #28]	; (800ca1c <_read_r+0x20>)
 800ca00:	4605      	mov	r5, r0
 800ca02:	4608      	mov	r0, r1
 800ca04:	4611      	mov	r1, r2
 800ca06:	2200      	movs	r2, #0
 800ca08:	6022      	str	r2, [r4, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f7f4 fb92 	bl	8001134 <_read>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_read_r+0x1e>
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_read_r+0x1e>
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	200017a4 	.word	0x200017a4

0800ca20 <roundf>:
 800ca20:	ee10 0a10 	vmov	r0, s0
 800ca24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ca28:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800ca2c:	2a16      	cmp	r2, #22
 800ca2e:	dc15      	bgt.n	800ca5c <roundf+0x3c>
 800ca30:	2a00      	cmp	r2, #0
 800ca32:	da08      	bge.n	800ca46 <roundf+0x26>
 800ca34:	3201      	adds	r2, #1
 800ca36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ca3a:	d101      	bne.n	800ca40 <roundf+0x20>
 800ca3c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ca40:	ee00 3a10 	vmov	s0, r3
 800ca44:	4770      	bx	lr
 800ca46:	4908      	ldr	r1, [pc, #32]	; (800ca68 <roundf+0x48>)
 800ca48:	4111      	asrs	r1, r2
 800ca4a:	4208      	tst	r0, r1
 800ca4c:	d0fa      	beq.n	800ca44 <roundf+0x24>
 800ca4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ca52:	4113      	asrs	r3, r2
 800ca54:	4403      	add	r3, r0
 800ca56:	ea23 0301 	bic.w	r3, r3, r1
 800ca5a:	e7f1      	b.n	800ca40 <roundf+0x20>
 800ca5c:	2a80      	cmp	r2, #128	; 0x80
 800ca5e:	d1f1      	bne.n	800ca44 <roundf+0x24>
 800ca60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	007fffff 	.word	0x007fffff

0800ca6c <powf>:
 800ca6c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800ca70:	ed2d 8b04 	vpush	{d8-d9}
 800ca74:	4ca7      	ldr	r4, [pc, #668]	; (800cd14 <powf+0x2a8>)
 800ca76:	b08a      	sub	sp, #40	; 0x28
 800ca78:	eef0 8a40 	vmov.f32	s17, s0
 800ca7c:	eeb0 8a60 	vmov.f32	s16, s1
 800ca80:	f000 f958 	bl	800cd34 <__ieee754_powf>
 800ca84:	f994 5000 	ldrsb.w	r5, [r4]
 800ca88:	1c6b      	adds	r3, r5, #1
 800ca8a:	eeb0 9a40 	vmov.f32	s18, s0
 800ca8e:	4626      	mov	r6, r4
 800ca90:	d05f      	beq.n	800cb52 <powf+0xe6>
 800ca92:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	d65a      	bvs.n	800cb52 <powf+0xe6>
 800ca9c:	eef4 8a68 	vcmp.f32	s17, s17
 800caa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa4:	d721      	bvc.n	800caea <powf+0x7e>
 800caa6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800caaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caae:	d150      	bne.n	800cb52 <powf+0xe6>
 800cab0:	2301      	movs	r3, #1
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	4b98      	ldr	r3, [pc, #608]	; (800cd18 <powf+0x2ac>)
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	ee18 0a90 	vmov	r0, s17
 800cabc:	2300      	movs	r3, #0
 800cabe:	9308      	str	r3, [sp, #32]
 800cac0:	f7f3 fcee 	bl	80004a0 <__aeabi_f2d>
 800cac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cac8:	ee18 0a10 	vmov	r0, s16
 800cacc:	f7f3 fce8 	bl	80004a0 <__aeabi_f2d>
 800cad0:	4b92      	ldr	r3, [pc, #584]	; (800cd1c <powf+0x2b0>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	2d02      	cmp	r5, #2
 800cad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cada:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cade:	d032      	beq.n	800cb46 <powf+0xda>
 800cae0:	4668      	mov	r0, sp
 800cae2:	f000 fbea 	bl	800d2ba <matherr>
 800cae6:	bb40      	cbnz	r0, 800cb3a <powf+0xce>
 800cae8:	e065      	b.n	800cbb6 <powf+0x14a>
 800caea:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800cd20 <powf+0x2b4>
 800caee:	eef4 8a69 	vcmp.f32	s17, s19
 800caf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf6:	d163      	bne.n	800cbc0 <powf+0x154>
 800caf8:	eeb4 8a69 	vcmp.f32	s16, s19
 800cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb00:	d12e      	bne.n	800cb60 <powf+0xf4>
 800cb02:	2301      	movs	r3, #1
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	4b84      	ldr	r3, [pc, #528]	; (800cd18 <powf+0x2ac>)
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	ee18 0a90 	vmov	r0, s17
 800cb0e:	2300      	movs	r3, #0
 800cb10:	9308      	str	r3, [sp, #32]
 800cb12:	f7f3 fcc5 	bl	80004a0 <__aeabi_f2d>
 800cb16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb1a:	ee18 0a10 	vmov	r0, s16
 800cb1e:	f7f3 fcbf 	bl	80004a0 <__aeabi_f2d>
 800cb22:	2200      	movs	r2, #0
 800cb24:	2300      	movs	r3, #0
 800cb26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	d0d6      	beq.n	800cae0 <powf+0x74>
 800cb32:	4b7a      	ldr	r3, [pc, #488]	; (800cd1c <powf+0x2b0>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb3a:	9b08      	ldr	r3, [sp, #32]
 800cb3c:	b11b      	cbz	r3, 800cb46 <powf+0xda>
 800cb3e:	f7ff fab9 	bl	800c0b4 <__errno>
 800cb42:	9b08      	ldr	r3, [sp, #32]
 800cb44:	6003      	str	r3, [r0, #0]
 800cb46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb4a:	f7f3 fd01 	bl	8000550 <__aeabi_d2f>
 800cb4e:	ee09 0a10 	vmov	s18, r0
 800cb52:	eeb0 0a49 	vmov.f32	s0, s18
 800cb56:	b00a      	add	sp, #40	; 0x28
 800cb58:	ecbd 8b04 	vpop	{d8-d9}
 800cb5c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cb60:	eeb0 0a48 	vmov.f32	s0, s16
 800cb64:	f000 fbb2 	bl	800d2cc <finitef>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d0f2      	beq.n	800cb52 <powf+0xe6>
 800cb6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb74:	d5ed      	bpl.n	800cb52 <powf+0xe6>
 800cb76:	2301      	movs	r3, #1
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	4b67      	ldr	r3, [pc, #412]	; (800cd18 <powf+0x2ac>)
 800cb7c:	9301      	str	r3, [sp, #4]
 800cb7e:	ee18 0a90 	vmov	r0, s17
 800cb82:	2300      	movs	r3, #0
 800cb84:	9308      	str	r3, [sp, #32]
 800cb86:	f7f3 fc8b 	bl	80004a0 <__aeabi_f2d>
 800cb8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb8e:	ee18 0a10 	vmov	r0, s16
 800cb92:	f7f3 fc85 	bl	80004a0 <__aeabi_f2d>
 800cb96:	f994 3000 	ldrsb.w	r3, [r4]
 800cb9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb9e:	b923      	cbnz	r3, 800cbaa <powf+0x13e>
 800cba0:	2200      	movs	r2, #0
 800cba2:	2300      	movs	r3, #0
 800cba4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cba8:	e79a      	b.n	800cae0 <powf+0x74>
 800cbaa:	495e      	ldr	r1, [pc, #376]	; (800cd24 <powf+0x2b8>)
 800cbac:	2000      	movs	r0, #0
 800cbae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d194      	bne.n	800cae0 <powf+0x74>
 800cbb6:	f7ff fa7d 	bl	800c0b4 <__errno>
 800cbba:	2321      	movs	r3, #33	; 0x21
 800cbbc:	6003      	str	r3, [r0, #0]
 800cbbe:	e7bc      	b.n	800cb3a <powf+0xce>
 800cbc0:	f000 fb84 	bl	800d2cc <finitef>
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d173      	bne.n	800ccb2 <powf+0x246>
 800cbca:	eeb0 0a68 	vmov.f32	s0, s17
 800cbce:	f000 fb7d 	bl	800d2cc <finitef>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d06d      	beq.n	800ccb2 <powf+0x246>
 800cbd6:	eeb0 0a48 	vmov.f32	s0, s16
 800cbda:	f000 fb77 	bl	800d2cc <finitef>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d067      	beq.n	800ccb2 <powf+0x246>
 800cbe2:	ee18 0a90 	vmov	r0, s17
 800cbe6:	f7f3 fc5b 	bl	80004a0 <__aeabi_f2d>
 800cbea:	4680      	mov	r8, r0
 800cbec:	ee18 0a10 	vmov	r0, s16
 800cbf0:	4689      	mov	r9, r1
 800cbf2:	f7f3 fc55 	bl	80004a0 <__aeabi_f2d>
 800cbf6:	eeb4 9a49 	vcmp.f32	s18, s18
 800cbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfe:	f994 4000 	ldrsb.w	r4, [r4]
 800cc02:	4b45      	ldr	r3, [pc, #276]	; (800cd18 <powf+0x2ac>)
 800cc04:	d713      	bvc.n	800cc2e <powf+0x1c2>
 800cc06:	2201      	movs	r2, #1
 800cc08:	e9cd 2300 	strd	r2, r3, [sp]
 800cc0c:	9508      	str	r5, [sp, #32]
 800cc0e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cc12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc16:	2c00      	cmp	r4, #0
 800cc18:	d0c2      	beq.n	800cba0 <powf+0x134>
 800cc1a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800cc1e:	ee17 0a90 	vmov	r0, s15
 800cc22:	f7f3 fc3d 	bl	80004a0 <__aeabi_f2d>
 800cc26:	2c02      	cmp	r4, #2
 800cc28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc2c:	e7c2      	b.n	800cbb4 <powf+0x148>
 800cc2e:	2203      	movs	r2, #3
 800cc30:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cc34:	e9cd 2300 	strd	r2, r3, [sp]
 800cc38:	9508      	str	r5, [sp, #32]
 800cc3a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cc3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc42:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cc46:	b9fc      	cbnz	r4, 800cc88 <powf+0x21c>
 800cc48:	4b37      	ldr	r3, [pc, #220]	; (800cd28 <powf+0x2bc>)
 800cc4a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800cc4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc5a:	d553      	bpl.n	800cd04 <powf+0x298>
 800cc5c:	eeb0 0a48 	vmov.f32	s0, s16
 800cc60:	f000 fb44 	bl	800d2ec <rintf>
 800cc64:	eeb4 0a48 	vcmp.f32	s0, s16
 800cc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6c:	d004      	beq.n	800cc78 <powf+0x20c>
 800cc6e:	4b2f      	ldr	r3, [pc, #188]	; (800cd2c <powf+0x2c0>)
 800cc70:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cc74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc78:	f996 3000 	ldrsb.w	r3, [r6]
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d141      	bne.n	800cd04 <powf+0x298>
 800cc80:	f7ff fa18 	bl	800c0b4 <__errno>
 800cc84:	2322      	movs	r3, #34	; 0x22
 800cc86:	e799      	b.n	800cbbc <powf+0x150>
 800cc88:	4b29      	ldr	r3, [pc, #164]	; (800cd30 <powf+0x2c4>)
 800cc8a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800cc8e:	2200      	movs	r2, #0
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc98:	d5ee      	bpl.n	800cc78 <powf+0x20c>
 800cc9a:	eeb0 0a48 	vmov.f32	s0, s16
 800cc9e:	f000 fb25 	bl	800d2ec <rintf>
 800cca2:	eeb4 0a48 	vcmp.f32	s0, s16
 800cca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccaa:	d0e5      	beq.n	800cc78 <powf+0x20c>
 800ccac:	2200      	movs	r2, #0
 800ccae:	4b1d      	ldr	r3, [pc, #116]	; (800cd24 <powf+0x2b8>)
 800ccb0:	e7e0      	b.n	800cc74 <powf+0x208>
 800ccb2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ccb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccba:	f47f af4a 	bne.w	800cb52 <powf+0xe6>
 800ccbe:	eeb0 0a68 	vmov.f32	s0, s17
 800ccc2:	f000 fb03 	bl	800d2cc <finitef>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f43f af43 	beq.w	800cb52 <powf+0xe6>
 800cccc:	eeb0 0a48 	vmov.f32	s0, s16
 800ccd0:	f000 fafc 	bl	800d2cc <finitef>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	f43f af3c 	beq.w	800cb52 <powf+0xe6>
 800ccda:	2304      	movs	r3, #4
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	4b0e      	ldr	r3, [pc, #56]	; (800cd18 <powf+0x2ac>)
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	ee18 0a90 	vmov	r0, s17
 800cce6:	2300      	movs	r3, #0
 800cce8:	9308      	str	r3, [sp, #32]
 800ccea:	f7f3 fbd9 	bl	80004a0 <__aeabi_f2d>
 800ccee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccf2:	ee18 0a10 	vmov	r0, s16
 800ccf6:	f7f3 fbd3 	bl	80004a0 <__aeabi_f2d>
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd00:	2300      	movs	r3, #0
 800cd02:	e7b7      	b.n	800cc74 <powf+0x208>
 800cd04:	4668      	mov	r0, sp
 800cd06:	f000 fad8 	bl	800d2ba <matherr>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	f47f af15 	bne.w	800cb3a <powf+0xce>
 800cd10:	e7b6      	b.n	800cc80 <powf+0x214>
 800cd12:	bf00      	nop
 800cd14:	20000490 	.word	0x20000490
 800cd18:	0800d580 	.word	0x0800d580
 800cd1c:	3ff00000 	.word	0x3ff00000
 800cd20:	00000000 	.word	0x00000000
 800cd24:	fff00000 	.word	0xfff00000
 800cd28:	47efffff 	.word	0x47efffff
 800cd2c:	c7efffff 	.word	0xc7efffff
 800cd30:	7ff00000 	.word	0x7ff00000

0800cd34 <__ieee754_powf>:
 800cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd38:	ee10 5a90 	vmov	r5, s1
 800cd3c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800cd40:	ed2d 8b02 	vpush	{d8}
 800cd44:	eeb0 8a40 	vmov.f32	s16, s0
 800cd48:	eef0 8a60 	vmov.f32	s17, s1
 800cd4c:	f000 8293 	beq.w	800d276 <__ieee754_powf+0x542>
 800cd50:	ee10 8a10 	vmov	r8, s0
 800cd54:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800cd58:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cd5c:	dc06      	bgt.n	800cd6c <__ieee754_powf+0x38>
 800cd5e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cd62:	dd0a      	ble.n	800cd7a <__ieee754_powf+0x46>
 800cd64:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cd68:	f000 8285 	beq.w	800d276 <__ieee754_powf+0x542>
 800cd6c:	ecbd 8b02 	vpop	{d8}
 800cd70:	48d9      	ldr	r0, [pc, #868]	; (800d0d8 <__ieee754_powf+0x3a4>)
 800cd72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd76:	f000 bab3 	b.w	800d2e0 <nanf>
 800cd7a:	f1b8 0f00 	cmp.w	r8, #0
 800cd7e:	da1d      	bge.n	800cdbc <__ieee754_powf+0x88>
 800cd80:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800cd84:	da2c      	bge.n	800cde0 <__ieee754_powf+0xac>
 800cd86:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cd8a:	db30      	blt.n	800cdee <__ieee754_powf+0xba>
 800cd8c:	15fb      	asrs	r3, r7, #23
 800cd8e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cd92:	fa47 f603 	asr.w	r6, r7, r3
 800cd96:	fa06 f303 	lsl.w	r3, r6, r3
 800cd9a:	42bb      	cmp	r3, r7
 800cd9c:	d127      	bne.n	800cdee <__ieee754_powf+0xba>
 800cd9e:	f006 0601 	and.w	r6, r6, #1
 800cda2:	f1c6 0602 	rsb	r6, r6, #2
 800cda6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cdaa:	d122      	bne.n	800cdf2 <__ieee754_powf+0xbe>
 800cdac:	2d00      	cmp	r5, #0
 800cdae:	f280 8268 	bge.w	800d282 <__ieee754_powf+0x54e>
 800cdb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cdb6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cdba:	e00d      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cdc2:	d1f0      	bne.n	800cda6 <__ieee754_powf+0x72>
 800cdc4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cdc8:	f000 8255 	beq.w	800d276 <__ieee754_powf+0x542>
 800cdcc:	dd0a      	ble.n	800cde4 <__ieee754_powf+0xb0>
 800cdce:	2d00      	cmp	r5, #0
 800cdd0:	f280 8254 	bge.w	800d27c <__ieee754_powf+0x548>
 800cdd4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d0dc <__ieee754_powf+0x3a8>
 800cdd8:	ecbd 8b02 	vpop	{d8}
 800cddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde0:	2602      	movs	r6, #2
 800cde2:	e7ec      	b.n	800cdbe <__ieee754_powf+0x8a>
 800cde4:	2d00      	cmp	r5, #0
 800cde6:	daf5      	bge.n	800cdd4 <__ieee754_powf+0xa0>
 800cde8:	eeb1 0a68 	vneg.f32	s0, s17
 800cdec:	e7f4      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800cdee:	2600      	movs	r6, #0
 800cdf0:	e7d9      	b.n	800cda6 <__ieee754_powf+0x72>
 800cdf2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800cdf6:	d102      	bne.n	800cdfe <__ieee754_powf+0xca>
 800cdf8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cdfc:	e7ec      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800cdfe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800ce02:	eeb0 0a48 	vmov.f32	s0, s16
 800ce06:	d108      	bne.n	800ce1a <__ieee754_powf+0xe6>
 800ce08:	f1b8 0f00 	cmp.w	r8, #0
 800ce0c:	db05      	blt.n	800ce1a <__ieee754_powf+0xe6>
 800ce0e:	ecbd 8b02 	vpop	{d8}
 800ce12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce16:	f000 ba4d 	b.w	800d2b4 <__ieee754_sqrtf>
 800ce1a:	f000 fa50 	bl	800d2be <fabsf>
 800ce1e:	b124      	cbz	r4, 800ce2a <__ieee754_powf+0xf6>
 800ce20:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800ce24:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ce28:	d117      	bne.n	800ce5a <__ieee754_powf+0x126>
 800ce2a:	2d00      	cmp	r5, #0
 800ce2c:	bfbc      	itt	lt
 800ce2e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ce32:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ce36:	f1b8 0f00 	cmp.w	r8, #0
 800ce3a:	dacd      	bge.n	800cdd8 <__ieee754_powf+0xa4>
 800ce3c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800ce40:	ea54 0306 	orrs.w	r3, r4, r6
 800ce44:	d104      	bne.n	800ce50 <__ieee754_powf+0x11c>
 800ce46:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ce4a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ce4e:	e7c3      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800ce50:	2e01      	cmp	r6, #1
 800ce52:	d1c1      	bne.n	800cdd8 <__ieee754_powf+0xa4>
 800ce54:	eeb1 0a40 	vneg.f32	s0, s0
 800ce58:	e7be      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800ce5a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800ce5e:	3801      	subs	r0, #1
 800ce60:	ea56 0300 	orrs.w	r3, r6, r0
 800ce64:	d104      	bne.n	800ce70 <__ieee754_powf+0x13c>
 800ce66:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ce6a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ce6e:	e7b3      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800ce70:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800ce74:	dd6d      	ble.n	800cf52 <__ieee754_powf+0x21e>
 800ce76:	4b9a      	ldr	r3, [pc, #616]	; (800d0e0 <__ieee754_powf+0x3ac>)
 800ce78:	429c      	cmp	r4, r3
 800ce7a:	dc06      	bgt.n	800ce8a <__ieee754_powf+0x156>
 800ce7c:	2d00      	cmp	r5, #0
 800ce7e:	daa9      	bge.n	800cdd4 <__ieee754_powf+0xa0>
 800ce80:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d0e4 <__ieee754_powf+0x3b0>
 800ce84:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce88:	e7a6      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800ce8a:	4b97      	ldr	r3, [pc, #604]	; (800d0e8 <__ieee754_powf+0x3b4>)
 800ce8c:	429c      	cmp	r4, r3
 800ce8e:	dd02      	ble.n	800ce96 <__ieee754_powf+0x162>
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	dcf5      	bgt.n	800ce80 <__ieee754_powf+0x14c>
 800ce94:	e79e      	b.n	800cdd4 <__ieee754_powf+0xa0>
 800ce96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ce9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ce9e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d0ec <__ieee754_powf+0x3b8>
 800cea2:	eef1 6a40 	vneg.f32	s13, s0
 800cea6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ceaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ceae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ceb2:	eee7 7a40 	vfms.f32	s15, s14, s0
 800ceb6:	ee60 0a00 	vmul.f32	s1, s0, s0
 800ceba:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800d0f0 <__ieee754_powf+0x3bc>
 800cebe:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800cec2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d0f4 <__ieee754_powf+0x3c0>
 800cec6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800ceca:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cece:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d0f8 <__ieee754_powf+0x3c4>
 800ced2:	eeb0 6a67 	vmov.f32	s12, s15
 800ced6:	eea0 6a07 	vfma.f32	s12, s0, s14
 800ceda:	ee16 3a10 	vmov	r3, s12
 800cede:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cee2:	f023 030f 	bic.w	r3, r3, #15
 800cee6:	ee00 3a90 	vmov	s1, r3
 800ceea:	eee6 0a87 	vfma.f32	s1, s13, s14
 800ceee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cef2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800cef6:	f025 050f 	bic.w	r5, r5, #15
 800cefa:	ee07 5a10 	vmov	s14, r5
 800cefe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cf02:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cf06:	ee07 3a90 	vmov	s15, r3
 800cf0a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cf0e:	3e01      	subs	r6, #1
 800cf10:	ea56 0200 	orrs.w	r2, r6, r0
 800cf14:	ee07 5a10 	vmov	s14, r5
 800cf18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf1c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cf20:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cf24:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cf28:	ee17 4a10 	vmov	r4, s14
 800cf2c:	bf08      	it	eq
 800cf2e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cf32:	2c00      	cmp	r4, #0
 800cf34:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cf38:	f340 8184 	ble.w	800d244 <__ieee754_powf+0x510>
 800cf3c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cf40:	f340 80fc 	ble.w	800d13c <__ieee754_powf+0x408>
 800cf44:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d0e4 <__ieee754_powf+0x3b0>
 800cf48:	ee28 0a27 	vmul.f32	s0, s16, s15
 800cf4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cf50:	e742      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800cf52:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800cf56:	bfbf      	itttt	lt
 800cf58:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d0fc <__ieee754_powf+0x3c8>
 800cf5c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cf60:	f06f 0217 	mvnlt.w	r2, #23
 800cf64:	ee17 4a90 	vmovlt	r4, s15
 800cf68:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800cf6c:	bfa8      	it	ge
 800cf6e:	2200      	movge	r2, #0
 800cf70:	3b7f      	subs	r3, #127	; 0x7f
 800cf72:	4413      	add	r3, r2
 800cf74:	4a62      	ldr	r2, [pc, #392]	; (800d100 <__ieee754_powf+0x3cc>)
 800cf76:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800cf7a:	4294      	cmp	r4, r2
 800cf7c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800cf80:	dd06      	ble.n	800cf90 <__ieee754_powf+0x25c>
 800cf82:	4a60      	ldr	r2, [pc, #384]	; (800d104 <__ieee754_powf+0x3d0>)
 800cf84:	4294      	cmp	r4, r2
 800cf86:	f340 80a5 	ble.w	800d0d4 <__ieee754_powf+0x3a0>
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cf90:	2400      	movs	r4, #0
 800cf92:	4a5d      	ldr	r2, [pc, #372]	; (800d108 <__ieee754_powf+0x3d4>)
 800cf94:	00a7      	lsls	r7, r4, #2
 800cf96:	443a      	add	r2, r7
 800cf98:	ee07 1a90 	vmov	s15, r1
 800cf9c:	ed92 7a00 	vldr	s14, [r2]
 800cfa0:	4a5a      	ldr	r2, [pc, #360]	; (800d10c <__ieee754_powf+0x3d8>)
 800cfa2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cfa6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800cfaa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800cfae:	1049      	asrs	r1, r1, #1
 800cfb0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800cfb4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800cfb8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800cfbc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800cfc0:	ee06 1a10 	vmov	s12, r1
 800cfc4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800cfc8:	ee14 ca90 	vmov	ip, s9
 800cfcc:	ea02 0c0c 	and.w	ip, r2, ip
 800cfd0:	ee05 ca10 	vmov	s10, ip
 800cfd4:	eeb1 4a45 	vneg.f32	s8, s10
 800cfd8:	eee4 5a06 	vfma.f32	s11, s8, s12
 800cfdc:	ee36 6a47 	vsub.f32	s12, s12, s14
 800cfe0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d110 <__ieee754_powf+0x3dc>
 800cfe4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800cfe8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800cfec:	eee4 5a06 	vfma.f32	s11, s8, s12
 800cff0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800cff4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800cff8:	eddf 5a46 	vldr	s11, [pc, #280]	; 800d114 <__ieee754_powf+0x3e0>
 800cffc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d000:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d118 <__ieee754_powf+0x3e4>
 800d004:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d008:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d0ec <__ieee754_powf+0x3b8>
 800d00c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d010:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d11c <__ieee754_powf+0x3e8>
 800d014:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d018:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d120 <__ieee754_powf+0x3ec>
 800d01c:	ee75 6a24 	vadd.f32	s13, s10, s9
 800d020:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d024:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d028:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800d02c:	eef0 7a65 	vmov.f32	s15, s11
 800d030:	eee3 6a87 	vfma.f32	s13, s7, s14
 800d034:	eee5 7a05 	vfma.f32	s15, s10, s10
 800d038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d03c:	ee17 1a90 	vmov	r1, s15
 800d040:	4011      	ands	r1, r2
 800d042:	ee07 1a90 	vmov	s15, r1
 800d046:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800d04a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800d124 <__ieee754_powf+0x3f0>
 800d04e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800d052:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d056:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d05a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d05e:	eeb0 6a47 	vmov.f32	s12, s14
 800d062:	eea5 6a27 	vfma.f32	s12, s10, s15
 800d066:	ee16 1a10 	vmov	r1, s12
 800d06a:	4011      	ands	r1, r2
 800d06c:	ee06 1a90 	vmov	s13, r1
 800d070:	eee4 6a27 	vfma.f32	s13, s8, s15
 800d074:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d128 <__ieee754_powf+0x3f4>
 800d078:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d07c:	ee06 1a10 	vmov	s12, r1
 800d080:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d084:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d12c <__ieee754_powf+0x3f8>
 800d088:	4929      	ldr	r1, [pc, #164]	; (800d130 <__ieee754_powf+0x3fc>)
 800d08a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d08e:	4439      	add	r1, r7
 800d090:	edd1 7a00 	vldr	s15, [r1]
 800d094:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d098:	ee07 3a90 	vmov	s15, r3
 800d09c:	eef0 0a47 	vmov.f32	s1, s14
 800d0a0:	4b24      	ldr	r3, [pc, #144]	; (800d134 <__ieee754_powf+0x400>)
 800d0a2:	eee6 0a25 	vfma.f32	s1, s12, s11
 800d0a6:	443b      	add	r3, r7
 800d0a8:	ed93 5a00 	vldr	s10, [r3]
 800d0ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d0b0:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d0b4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800d0b8:	ee17 3a90 	vmov	r3, s15
 800d0bc:	4013      	ands	r3, r2
 800d0be:	ee07 3a90 	vmov	s15, r3
 800d0c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d0c6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d0ca:	eee6 7a65 	vfms.f32	s15, s12, s11
 800d0ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0d2:	e70e      	b.n	800cef2 <__ieee754_powf+0x1be>
 800d0d4:	2401      	movs	r4, #1
 800d0d6:	e75c      	b.n	800cf92 <__ieee754_powf+0x25e>
 800d0d8:	0800d584 	.word	0x0800d584
 800d0dc:	00000000 	.word	0x00000000
 800d0e0:	3f7ffff7 	.word	0x3f7ffff7
 800d0e4:	7149f2ca 	.word	0x7149f2ca
 800d0e8:	3f800007 	.word	0x3f800007
 800d0ec:	3eaaaaab 	.word	0x3eaaaaab
 800d0f0:	36eca570 	.word	0x36eca570
 800d0f4:	3fb8aa3b 	.word	0x3fb8aa3b
 800d0f8:	3fb8aa00 	.word	0x3fb8aa00
 800d0fc:	4b800000 	.word	0x4b800000
 800d100:	001cc471 	.word	0x001cc471
 800d104:	005db3d6 	.word	0x005db3d6
 800d108:	0800d588 	.word	0x0800d588
 800d10c:	fffff000 	.word	0xfffff000
 800d110:	3e6c3255 	.word	0x3e6c3255
 800d114:	3e53f142 	.word	0x3e53f142
 800d118:	3e8ba305 	.word	0x3e8ba305
 800d11c:	3edb6db7 	.word	0x3edb6db7
 800d120:	3f19999a 	.word	0x3f19999a
 800d124:	3f763800 	.word	0x3f763800
 800d128:	3f76384f 	.word	0x3f76384f
 800d12c:	369dc3a0 	.word	0x369dc3a0
 800d130:	0800d598 	.word	0x0800d598
 800d134:	0800d590 	.word	0x0800d590
 800d138:	3338aa3c 	.word	0x3338aa3c
 800d13c:	f040 8092 	bne.w	800d264 <__ieee754_powf+0x530>
 800d140:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d138 <__ieee754_powf+0x404>
 800d144:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d148:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d14c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d154:	f73f aef6 	bgt.w	800cf44 <__ieee754_powf+0x210>
 800d158:	15db      	asrs	r3, r3, #23
 800d15a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d15e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d162:	4103      	asrs	r3, r0
 800d164:	4423      	add	r3, r4
 800d166:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d16a:	4947      	ldr	r1, [pc, #284]	; (800d288 <__ieee754_powf+0x554>)
 800d16c:	3a7f      	subs	r2, #127	; 0x7f
 800d16e:	4111      	asrs	r1, r2
 800d170:	ea23 0101 	bic.w	r1, r3, r1
 800d174:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d178:	ee07 1a10 	vmov	s14, r1
 800d17c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d180:	f1c2 0217 	rsb	r2, r2, #23
 800d184:	4110      	asrs	r0, r2
 800d186:	2c00      	cmp	r4, #0
 800d188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d18c:	bfb8      	it	lt
 800d18e:	4240      	neglt	r0, r0
 800d190:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d194:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d28c <__ieee754_powf+0x558>
 800d198:	ee17 3a10 	vmov	r3, s14
 800d19c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d1a0:	f023 030f 	bic.w	r3, r3, #15
 800d1a4:	ee07 3a10 	vmov	s14, r3
 800d1a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d1b0:	eddf 7a37 	vldr	s15, [pc, #220]	; 800d290 <__ieee754_powf+0x55c>
 800d1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d1bc:	eddf 6a35 	vldr	s13, [pc, #212]	; 800d294 <__ieee754_powf+0x560>
 800d1c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d1c4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d1c8:	eeb0 6a40 	vmov.f32	s12, s0
 800d1cc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d1d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d1d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d1d8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d298 <__ieee754_powf+0x564>
 800d1dc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d29c <__ieee754_powf+0x568>
 800d1e0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d1e4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d2a0 <__ieee754_powf+0x56c>
 800d1e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d1ec:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d2a4 <__ieee754_powf+0x570>
 800d1f0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d1f4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d2a8 <__ieee754_powf+0x574>
 800d1f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d1fc:	eeb0 6a40 	vmov.f32	s12, s0
 800d200:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d204:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d208:	eeb0 7a46 	vmov.f32	s14, s12
 800d20c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d210:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d214:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d218:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d21c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d220:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d224:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d228:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d22c:	ee10 3a10 	vmov	r3, s0
 800d230:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d234:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d238:	da1a      	bge.n	800d270 <__ieee754_powf+0x53c>
 800d23a:	f000 f8b1 	bl	800d3a0 <scalbnf>
 800d23e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d242:	e5c9      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800d244:	4a19      	ldr	r2, [pc, #100]	; (800d2ac <__ieee754_powf+0x578>)
 800d246:	4293      	cmp	r3, r2
 800d248:	dd02      	ble.n	800d250 <__ieee754_powf+0x51c>
 800d24a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d2b0 <__ieee754_powf+0x57c>
 800d24e:	e67b      	b.n	800cf48 <__ieee754_powf+0x214>
 800d250:	d108      	bne.n	800d264 <__ieee754_powf+0x530>
 800d252:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d256:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25e:	f6ff af7b 	blt.w	800d158 <__ieee754_powf+0x424>
 800d262:	e7f2      	b.n	800d24a <__ieee754_powf+0x516>
 800d264:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d268:	f73f af76 	bgt.w	800d158 <__ieee754_powf+0x424>
 800d26c:	2000      	movs	r0, #0
 800d26e:	e78f      	b.n	800d190 <__ieee754_powf+0x45c>
 800d270:	ee00 3a10 	vmov	s0, r3
 800d274:	e7e3      	b.n	800d23e <__ieee754_powf+0x50a>
 800d276:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d27a:	e5ad      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800d27c:	eeb0 0a68 	vmov.f32	s0, s17
 800d280:	e5aa      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800d282:	eeb0 0a48 	vmov.f32	s0, s16
 800d286:	e5a7      	b.n	800cdd8 <__ieee754_powf+0xa4>
 800d288:	007fffff 	.word	0x007fffff
 800d28c:	3f317218 	.word	0x3f317218
 800d290:	35bfbe8c 	.word	0x35bfbe8c
 800d294:	3f317200 	.word	0x3f317200
 800d298:	3331bb4c 	.word	0x3331bb4c
 800d29c:	b5ddea0e 	.word	0xb5ddea0e
 800d2a0:	388ab355 	.word	0x388ab355
 800d2a4:	bb360b61 	.word	0xbb360b61
 800d2a8:	3e2aaaab 	.word	0x3e2aaaab
 800d2ac:	43160000 	.word	0x43160000
 800d2b0:	0da24260 	.word	0x0da24260

0800d2b4 <__ieee754_sqrtf>:
 800d2b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d2b8:	4770      	bx	lr

0800d2ba <matherr>:
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	4770      	bx	lr

0800d2be <fabsf>:
 800d2be:	ee10 3a10 	vmov	r3, s0
 800d2c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2c6:	ee00 3a10 	vmov	s0, r3
 800d2ca:	4770      	bx	lr

0800d2cc <finitef>:
 800d2cc:	ee10 3a10 	vmov	r3, s0
 800d2d0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800d2d4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d2d8:	bfac      	ite	ge
 800d2da:	2000      	movge	r0, #0
 800d2dc:	2001      	movlt	r0, #1
 800d2de:	4770      	bx	lr

0800d2e0 <nanf>:
 800d2e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d2e8 <nanf+0x8>
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	7fc00000 	.word	0x7fc00000

0800d2ec <rintf>:
 800d2ec:	b513      	push	{r0, r1, r4, lr}
 800d2ee:	ee10 1a10 	vmov	r1, s0
 800d2f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2f6:	0ddc      	lsrs	r4, r3, #23
 800d2f8:	3c7f      	subs	r4, #127	; 0x7f
 800d2fa:	2c16      	cmp	r4, #22
 800d2fc:	dc46      	bgt.n	800d38c <rintf+0xa0>
 800d2fe:	b32b      	cbz	r3, 800d34c <rintf+0x60>
 800d300:	2c00      	cmp	r4, #0
 800d302:	ee10 2a10 	vmov	r2, s0
 800d306:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800d30a:	da21      	bge.n	800d350 <rintf+0x64>
 800d30c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800d310:	425b      	negs	r3, r3
 800d312:	4a21      	ldr	r2, [pc, #132]	; (800d398 <rintf+0xac>)
 800d314:	0a5b      	lsrs	r3, r3, #9
 800d316:	0d09      	lsrs	r1, r1, #20
 800d318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d31c:	0509      	lsls	r1, r1, #20
 800d31e:	430b      	orrs	r3, r1
 800d320:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d324:	ee07 3a90 	vmov	s15, r3
 800d328:	edd2 6a00 	vldr	s13, [r2]
 800d32c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800d330:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d334:	eddd 7a01 	vldr	s15, [sp, #4]
 800d338:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d33c:	ee17 3a90 	vmov	r3, s15
 800d340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d344:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800d348:	ee00 3a10 	vmov	s0, r3
 800d34c:	b002      	add	sp, #8
 800d34e:	bd10      	pop	{r4, pc}
 800d350:	4b12      	ldr	r3, [pc, #72]	; (800d39c <rintf+0xb0>)
 800d352:	4123      	asrs	r3, r4
 800d354:	4219      	tst	r1, r3
 800d356:	d0f9      	beq.n	800d34c <rintf+0x60>
 800d358:	085b      	lsrs	r3, r3, #1
 800d35a:	4219      	tst	r1, r3
 800d35c:	d006      	beq.n	800d36c <rintf+0x80>
 800d35e:	ea21 0203 	bic.w	r2, r1, r3
 800d362:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d366:	fa43 f404 	asr.w	r4, r3, r4
 800d36a:	4322      	orrs	r2, r4
 800d36c:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <rintf+0xac>)
 800d36e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d372:	ed90 7a00 	vldr	s14, [r0]
 800d376:	ee07 2a90 	vmov	s15, r2
 800d37a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d37e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d382:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d386:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d38a:	e7df      	b.n	800d34c <rintf+0x60>
 800d38c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d390:	d3dc      	bcc.n	800d34c <rintf+0x60>
 800d392:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d396:	e7d9      	b.n	800d34c <rintf+0x60>
 800d398:	0800d5a0 	.word	0x0800d5a0
 800d39c:	007fffff 	.word	0x007fffff

0800d3a0 <scalbnf>:
 800d3a0:	b508      	push	{r3, lr}
 800d3a2:	ee10 2a10 	vmov	r2, s0
 800d3a6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d3aa:	ed2d 8b02 	vpush	{d8}
 800d3ae:	eef0 0a40 	vmov.f32	s1, s0
 800d3b2:	d004      	beq.n	800d3be <scalbnf+0x1e>
 800d3b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d3b8:	d306      	bcc.n	800d3c8 <scalbnf+0x28>
 800d3ba:	ee70 0a00 	vadd.f32	s1, s0, s0
 800d3be:	ecbd 8b02 	vpop	{d8}
 800d3c2:	eeb0 0a60 	vmov.f32	s0, s1
 800d3c6:	bd08      	pop	{r3, pc}
 800d3c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3cc:	d21c      	bcs.n	800d408 <scalbnf+0x68>
 800d3ce:	4b1f      	ldr	r3, [pc, #124]	; (800d44c <scalbnf+0xac>)
 800d3d0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d450 <scalbnf+0xb0>
 800d3d4:	4298      	cmp	r0, r3
 800d3d6:	ee60 0a27 	vmul.f32	s1, s0, s15
 800d3da:	db10      	blt.n	800d3fe <scalbnf+0x5e>
 800d3dc:	ee10 2a90 	vmov	r2, s1
 800d3e0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800d3e4:	3b19      	subs	r3, #25
 800d3e6:	4403      	add	r3, r0
 800d3e8:	2bfe      	cmp	r3, #254	; 0xfe
 800d3ea:	dd0f      	ble.n	800d40c <scalbnf+0x6c>
 800d3ec:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800d454 <scalbnf+0xb4>
 800d3f0:	eeb0 0a48 	vmov.f32	s0, s16
 800d3f4:	f000 f834 	bl	800d460 <copysignf>
 800d3f8:	ee60 0a08 	vmul.f32	s1, s0, s16
 800d3fc:	e7df      	b.n	800d3be <scalbnf+0x1e>
 800d3fe:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d458 <scalbnf+0xb8>
 800d402:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800d406:	e7da      	b.n	800d3be <scalbnf+0x1e>
 800d408:	0ddb      	lsrs	r3, r3, #23
 800d40a:	e7ec      	b.n	800d3e6 <scalbnf+0x46>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	dd06      	ble.n	800d41e <scalbnf+0x7e>
 800d410:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d414:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d418:	ee00 3a90 	vmov	s1, r3
 800d41c:	e7cf      	b.n	800d3be <scalbnf+0x1e>
 800d41e:	f113 0f16 	cmn.w	r3, #22
 800d422:	da06      	bge.n	800d432 <scalbnf+0x92>
 800d424:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d428:	4298      	cmp	r0, r3
 800d42a:	dcdf      	bgt.n	800d3ec <scalbnf+0x4c>
 800d42c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d458 <scalbnf+0xb8>
 800d430:	e7de      	b.n	800d3f0 <scalbnf+0x50>
 800d432:	3319      	adds	r3, #25
 800d434:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d438:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d43c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d45c <scalbnf+0xbc>
 800d440:	ee07 3a10 	vmov	s14, r3
 800d444:	ee67 0a27 	vmul.f32	s1, s14, s15
 800d448:	e7b9      	b.n	800d3be <scalbnf+0x1e>
 800d44a:	bf00      	nop
 800d44c:	ffff3cb0 	.word	0xffff3cb0
 800d450:	4c000000 	.word	0x4c000000
 800d454:	7149f2ca 	.word	0x7149f2ca
 800d458:	0da24260 	.word	0x0da24260
 800d45c:	33000000 	.word	0x33000000

0800d460 <copysignf>:
 800d460:	ee10 3a10 	vmov	r3, s0
 800d464:	ee10 2a90 	vmov	r2, s1
 800d468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d46c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d470:	4313      	orrs	r3, r2
 800d472:	ee00 3a10 	vmov	s0, r3
 800d476:	4770      	bx	lr

0800d478 <_init>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	bf00      	nop
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr

0800d484 <_fini>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	bf00      	nop
 800d488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d48a:	bc08      	pop	{r3}
 800d48c:	469e      	mov	lr, r3
 800d48e:	4770      	bx	lr
